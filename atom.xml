<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Darren Blog</title>
  
  <subtitle>来找我友链啊！功能持续增加中</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-08T14:02:25.781Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Darren</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pythoning</title>
    <link href="http://example.com/2021/03/08/pythoning/"/>
    <id>http://example.com/2021/03/08/pythoning/</id>
    <published>2021-03-08T06:28:04.000Z</published>
    <updated>2021-03-08T14:02:25.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python学习中！"><a href="#Python学习中！" class="headerlink" title="Python学习中！"></a>Python学习中！</h1><p>[toc]</p><h2 id="python要学的"><a href="#python要学的" class="headerlink" title="python要学的"></a>python要学的</h2><ol><li>基础语法（Y）</li><li>进阶语法（）</li><li>内置函数（）</li><li>高级：库（），正则表达式（），进程线程（），mySQL（）</li><li>后端三大框架（Django、 Flask以及Tornado）</li></ol><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ol><li><p>在Python中，代码不是越多越好，而是越少越好。代码不是越复杂越好，而是越简单越好。</p></li><li><p>可变对象和不可变对象：可变指存在某项操作可以改变本身如list</p></li><li><p>set里都是key，set可以做&amp;和|操作</p></li><li><p>tuple里的不变指“指向对象不变”，指向的对象自身可以变（如list）</p></li><li><p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”</p></li><li><p>占位符pass什么都不做</p></li><li><p>函数可以同时返回多个值，但其实就是一个tuple，多个变量可以同时接收一个tuple，按位置赋给对应的值</p></li><li><p>定义默认参数要牢记一点：默认参数必须指向不变对象！如果指向可变对象如一个list，默认参数则指向这个list，且内容会被记住，每次调用都有继承，通过妙用不变对象来规避</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span>(<span class="params">L=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(<span class="string">&#x27;END&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure><p>​    因为Python函数在定义的时候，默认参数<code>L</code>的值就被计算出来了，即<code>[]</code>，因为默认参数<code>L</code>也是一个变量，它指向对象<code>[]</code>，每次调用该函数，如果改变了<code>L</code>的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的<code>[]</code>了。</p></li><li><p>参数前加*可以接受list和tuple并组装成tuple，加**则自动组装成dict，不过此时的key不用加引号</p></li><li><p>命名关键字：</p></li><li><p>命名关键字参数需要一个特殊分隔符<code>*</code>，<code>*</code>后面的参数被视为命名关键字参数。</p></li><li><p>如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符<code>*</code>了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, *args, city, job</span>):</span></span><br><span class="line">    print(name, age, args, city, job)</span><br></pre></td></tr></table></figure></li><li><p>函数参数规则：</p><ol><li><em><strong>参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</strong></em></li><li>所以，对于任意函数，都可以通过类似<code>func(*args, **kw)</code>的形式调用它，无论它的参数是如何定义的。</li><li><strong>虽然可以组合多达5种参数，但不要同时使用太多的组合，否则函数接口的可理解性很差。</strong></li></ol></li><li><p>```python<br> a, b = b, a + b #这个挺诡异的，记录了初始值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">15. 切片可用于str，list，tuple</span><br><span class="line"></span><br><span class="line">16. 判断一个对象是可迭代对象：通过collections模块的Iterable类型判断</span><br><span class="line"></span><br><span class="line">    &#96;&#96;&#96;python</span><br><span class="line">    &gt;&gt;&gt; from collections import Iterable</span><br><span class="line">    &gt;&gt;&gt; isinstance(&#39;abc&#39;, Iterable) # str是否可迭代</span><br></pre></td></tr></table></figure></li><li><p>列表解析：</p><ol><li>可以使用两层循环，可以生成全排列：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;XYZ&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;AX&#x27;</span>, <span class="string">&#x27;AY&#x27;</span>, <span class="string">&#x27;AZ&#x27;</span>, <span class="string">&#x27;BX&#x27;</span>, <span class="string">&#x27;BY&#x27;</span>, <span class="string">&#x27;BZ&#x27;</span>, <span class="string">&#x27;CX&#x27;</span>, <span class="string">&#x27;CY&#x27;</span>, <span class="string">&#x27;CZ&#x27;</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li><p>for后面的<code>if</code>是一个筛选条件，不能带<code>else</code></p></li><li><p>for前面的部分是一个表达式，它必须根据<code>x</code>计算出一个结果，必须加上else，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> -x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br></pre></td></tr></table></figure></li></ol></li><li><p>生成器generator：</p><ol><li><p>第一种方法很简单，只要把一个列表生成式的<code>[]</code>改成<code>()</code></p></li><li><p>二：如果一个函数定义中包含<code>yield</code>关键字，那么这个函数就不再是一个普通函数，而是一个generator</p><p>​    变成generator的函数，在每次调用<code>next()</code>的时候执行，遇到<code>yield</code>语句返回，再次执行时从上次返回的<code>yield</code>语句处继续执行。</p></li><li><p>generator函数的“调用”实际返回一个generator对象：</p></li><li><p>但是用<code>for</code>循环调用generator时，发现拿不到generator的<code>return</code>语句的返回值。如果想要拿到返回值，必须捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的<code>value</code>中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = fib(<span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>        x = <span class="built_in">next</span>(g)</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">&#x27;g:&#x27;</span>, x)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">&#x27;Generator return value:&#x27;</span>, e.value)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>凡是可作用于<code>for</code>循环的对象都是<code>Iterable</code>类型；</p><p>凡是可作用于<code>next()</code>函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列；</p><p>集合数据类型如<code>list</code>、<code>dict</code>、<code>str</code>等是<code>Iterable</code>但不是<code>Iterator</code>，不过可以通过<code>iter()</code>函数获得一个<code>Iterator</code>对象。</p></li><li><p>返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。因为不同地方都指向同一个对象，多处修改</p></li><li><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017451662295584" title="来自廖雪峰的装饰器详解">装饰器详解</a>functools.wraps(func)</p></li><li><p>偏函数：</p><p><code>functools.partial</code>的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。其实也可以传入其他值，会自动加到左侧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max2 &#x3D; functools.partial(max, 10)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max2(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>) = <span class="built_in">max</span>(<span class="number">10</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ol><li><p>在Python中，实例的变量名如果以<code>__</code>开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.__name</span><br></pre></td></tr></table></figure><p>有些时候，你会看到以一个下划线开头的实例变量名，比如<code>_name</code>，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。</p><p>双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问<code>__name</code>是因为Python解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量：</p></li><li><p>在继承关系中，如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类。但是，反过来就不行</p></li><li><p>对于一个变量，我们只需要知道它是<code>Animal</code>类型，无需确切地知道它的子类型，就可以放心地调用<code>run()</code>方法，而具体调用的<code>run()</code>方法是作用在<code>Animal</code>、<code>Dog</code>、<code>Cat</code>还是<code>Tortoise</code>对象上，由运行时该对象的确切类型决定，这就是 <em><strong>多态真正的威力</strong></em>：调用方只管调用，不管细节，而当我们新增一种<code>Animal</code>的子类时，只要确保<code>run()</code>方法编写正确，不用管原来的代码是如何调用的。这就是著名的“开闭”原则：</p><p>对扩展开放：允许新增<code>Animal</code>子类；</p><p>对修改封闭：不需要修改依赖<code>Animal</code>类型的<code>run_twice()</code>等函数。</p></li><li><p>动态语言的“鸭子类型”，它并不要求严格的继承体系,只要同样能进行操作，并不会检查它的类型，即使你要求的参数是animal类</p></li><li><p>千万不要对实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</p></li><li><p>可以给实例动态绑定属性（直接）</p><p>A是类，a=A()  </p><p> a.name=’darren’  del(a.name)可以直接操作</p><p>print(a.attribute)要是没有特殊的，就打印A的</p><p>还可以动态绑定方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">set_age</span>(<span class="params">self, age</span>):</span> <span class="comment">#定义一个函数作为实例方法</span></span><br><span class="line"><span class="meta">... </span>    self.age = age</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.set_age = MethodType(set_age, s) <span class="comment"># 给实例绑定一个方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.set_age(<span class="number">25</span>) <span class="comment"># 调用实例方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.age <span class="comment"># 测试结果</span></span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><p>可以直接给类动态绑定方法</p><p>A.set_age=set_age</p><p>函数对象有一个<code>__name__</code>属性，可以拿到函数的名字</p></li><li><p>为了达到限制的目的，Python允许在定义class的时候，定义一个特殊的<code>__slots__</code>变量，来限制该class实例能添加的属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>) <span class="comment"># 用tuple定义允许绑定的属性名称</span></span><br></pre></td></tr></table></figure><p>使用<code>__slots__</code>要注意，<code>__slots__</code>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的</p><p>除非在子类中也定义<code>__slots__</code>，这样，子类实例允许定义的属性就是自身的<code>__slots__</code>加上父类的<code>__slots__</code>。</p><p>（怪怪的）</p></li><li><p>@property   @method_name.setter将方法变成类</p></li><li><p><em><strong>定制类</strong></em>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--<span class="built_in">len</span>--:<span class="built_in">len</span>函数自动调用的计算长度工具</span><br><span class="line">--name--:获得当前函数的名族(functions.wraps(fun))</span><br><span class="line">--<span class="built_in">str</span>--:返回用户信息</span><br><span class="line">--<span class="built_in">repr</span>--:返回开发者信息</span><br><span class="line">--<span class="built_in">iter</span>--:返回迭代对象，使一个类可以被<span class="keyword">for</span> <span class="keyword">in</span>使用</span><br><span class="line">--<span class="built_in">next</span>--:迭代将调用--<span class="built_in">next</span>--方法</span><br><span class="line">--getitem--:实现下标访问[]（切片要分类。。。不懂）</span><br><span class="line">--setitem--:把对象视作<span class="built_in">list</span>/<span class="built_in">dict</span>来赋值</span><br><span class="line">--delitem--:删除某元素</span><br><span class="line">--<span class="built_in">getattr</span>--:在没有找到属性/方法时返回定义好的，可实现动态调用！</span><br><span class="line">--call--:直接对实例进行调用！可调用对象是Callable</span><br><span class="line">Python的官方文档:</span><br><span class="line">  https://docs.python.org/<span class="number">3</span>/reference/datamodel.html<span class="comment">#special-method-names</span></span><br></pre></td></tr></table></figure></li><li><p>枚举：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum，unique</span><br><span class="line">Month = Enum(<span class="string">&#x27;Month&#x27;</span>, (<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;Mar&#x27;</span>, <span class="string">&#x27;Apr&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Jun&#x27;</span>, <span class="string">&#x27;Jul&#x27;</span>, <span class="string">&#x27;Aug&#x27;</span>, <span class="string">&#x27;Sep&#x27;</span>, <span class="string">&#x27;Oct&#x27;</span>, <span class="string">&#x27;Nov&#x27;</span>, <span class="string">&#x27;Dec&#x27;</span>))</span><br></pre></td></tr></table></figure><p><em>value默认从1开始！！！！</em></p><p>用@unique精确控制Enum衍生</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weekday</span>(<span class="params">Enum</span>):</span></span><br><span class="line">    Sun = <span class="number">0</span> <span class="comment"># Sun的value被设定为0</span></span><br><span class="line">    Mon = <span class="number">1</span></span><br><span class="line">    Tue = <span class="number">2</span></span><br><span class="line">    Wed = <span class="number">3</span></span><br><span class="line">    Thu = <span class="number">4</span></span><br><span class="line">    Fri = <span class="number">5</span></span><br><span class="line">    Sat = <span class="number">6</span></span><br><span class="line">    day1=Weekday.Mon</span><br><span class="line">    day1==Weekday(<span class="number">1</span>)</span><br><span class="line">    day1.value==<span class="number">1</span></span><br></pre></td></tr></table></figure><p>用.value获得对应的值</p></li><li><p>动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的，而创建class的方法就是使用<code>type()</code>函数，所以类的类型是‘type’。</p></li><li><p>object是python的默认类，有很多的方法，python种默认的list,str,dict等等都是继承了object类的方法，继承了object的类属于新式类 ，没有继承属于经典类，在python3种默认都是新式类，也即是所有的自定义类，基类都会继承object类！</p></li><li><p>type也可创建新类</p><ol><li>class的名称；</li><li>继承的父类集合</li><li>class的方法名称与函数绑定，</li></ol></li><li><p>先定义metaclass，就可以创建类，最后创建实例。</p><p>所以，metaclass允许你创建类或者修改类。换句话说，你可以把类看成是metaclass创建出来的“实例”，它可以改变类创建时的行为。</p><p>metaclass是Python面向对象里最难理解，也是最难使用的魔术代码。。。</p><p>按照默认习惯，metaclass的类名总是以Metaclass结尾</p><p>（写法着实奇怪。。不放了。。希望这辈子碰不到！听说ORM要用。。）</p><p>url：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017592449371072#0">使用元类 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p></li></ol><h3 id="错误-amp-异常"><a href="#错误-amp-异常" class="headerlink" title="错误&amp;异常"></a>错误&amp;异常</h3><ol><li><p>错误衍生：</p><p>The class hierarchy for built-in exceptions is:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">BaseException</span><br><span class="line"> +-- SystemExit</span><br><span class="line"> +-- KeyboardInterrupt</span><br><span class="line"> +-- GeneratorExit</span><br><span class="line"> +-- Exception</span><br><span class="line">      +-- StopIteration</span><br><span class="line">      +-- StopAsyncIteration</span><br><span class="line">      +-- ArithmeticError</span><br><span class="line">      |    +-- FloatingPointError</span><br><span class="line">      |    +-- OverflowError</span><br><span class="line">      |    +-- ZeroDivisionError</span><br><span class="line">      +-- AssertionError</span><br><span class="line">      +-- AttributeError</span><br><span class="line">      +-- BufferError</span><br><span class="line">      +-- EOFError</span><br><span class="line">      +-- ImportError</span><br><span class="line">      |    +-- ModuleNotFoundError</span><br><span class="line">      +-- LookupError</span><br><span class="line">      |    +-- IndexError</span><br><span class="line">      |    +-- KeyError</span><br><span class="line">      +-- MemoryError</span><br><span class="line">      +-- NameError</span><br><span class="line">      |    +-- UnboundLocalError</span><br><span class="line">      +-- OSError</span><br><span class="line">      |    +-- BlockingIOError</span><br><span class="line">      |    +-- ChildProcessError</span><br><span class="line">      |    +-- ConnectionError</span><br><span class="line">      |    |    +-- BrokenPipeError</span><br><span class="line">      |    |    +-- ConnectionAbortedError</span><br><span class="line">      |    |    +-- ConnectionRefusedError</span><br><span class="line">      |    |    +-- ConnectionResetError</span><br><span class="line">      |    +-- FileExistsError</span><br><span class="line">      |    +-- FileNotFoundError</span><br><span class="line">      |    +-- InterruptedError</span><br><span class="line">      |    +-- IsADirectoryError</span><br><span class="line">      |    +-- NotADirectoryError</span><br><span class="line">      |    +-- PermissionError</span><br><span class="line">      |    +-- ProcessLookupError</span><br><span class="line">      |    +-- TimeoutError</span><br><span class="line">      +-- ReferenceError</span><br><span class="line">      +-- RuntimeError</span><br><span class="line">      |    +-- NotImplementedError</span><br><span class="line">      |    +-- RecursionError</span><br><span class="line">      +-- SyntaxError</span><br><span class="line">      |    +-- IndentationError</span><br><span class="line">      |         +-- TabError</span><br><span class="line">      +-- SystemError</span><br><span class="line">      +-- TypeError</span><br><span class="line">      +-- ValueError</span><br><span class="line">      |    +-- UnicodeError</span><br><span class="line">      |         +-- UnicodeDecodeError</span><br><span class="line">      |         +-- UnicodeEncodeError</span><br><span class="line">      |         +-- UnicodeTranslateError</span><br><span class="line">      +-- Warning</span><br><span class="line">           +-- DeprecationWarning</span><br><span class="line">           +-- PendingDeprecationWarning</span><br><span class="line">           +-- RuntimeWarning</span><br><span class="line">           +-- SyntaxWarning</span><br><span class="line">           +-- UserWarning</span><br><span class="line">           +-- FutureWarning</span><br><span class="line">           +-- ImportWarning</span><br><span class="line">           +-- UnicodeWarning</span><br><span class="line">           +-- BytesWarning</span><br><span class="line">           +-- ResourceWarning</span><br></pre></td></tr></table></figure></li><li><p>try .. except.. excepy…else…finally</p><p>使用<code>try...except</code>捕获错误还有一个巨大的好处，就是可以跨越多层调用，比如函数<code>main()</code>调用<code>bar()</code>，<code>bar()</code>调用<code>foo()</code>，结果<code>foo()</code>出错了，这时，只要<code>main()</code>捕获到了，就可以处理</p></li><li><p>如果错误没有被捕获，它就会一直往上抛，最后被Python解释器捕获，打印一个错误信息，然后程序退出.</p><p>顺着错误信息一路向下就可以找到根源</p></li><li><p>logging可以记录错误信息，要配置。。。<a href="https://www.jianshu.com/p/feb86c06c4f4">python logging模块使用教程 -</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">try</span>://</span><br><span class="line"><span class="keyword">except</span>: Excerption <span class="keyword">as</span> e:</span><br><span class="line">    logging.excerption(e)</span><br></pre></td></tr></table></figure><p>这样，在抛出错误信息后继续运行</p><p>当前函数不知道应该怎么处理该错误，所以，最恰当的方式是继续往上抛，让顶层调用者去处理，raise不带参数则原样抛出</p></li><li><p>assert … , ‘decleration’可以在解释时<code>python -O file.py</code>来终止调用assert</p><p>关闭后，你可以把所有的<code>assert</code>语句当成<code>pass</code>来看</p></li><li><p>logging.info()输出一段文本</p><p>在import logging后加<code>logging.basicConfig(level=logging.INFO)</code>指定记录信息的级别</p><p>error&gt;warning&gt;info&gt;debug，上面规定INFO后，logging.debug就失效了</p></li><li><p>PDB我不想学。。不如IDE自带</p></li><li><p>测试unittest参见《入门》</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m unittest mydict_test</span><br></pre></td></tr></table></figure><p>可以直接启用测试，常用的assetRaises,Equal,NotEqual,True,False,In,NotIn</p><p>在单元测试中编写两个特殊的<code>setUp()</code>和<code>tearDown()</code>方法。这两个方法会分别在每调用一个测试方法的前后分别被执行</p></li><li><p>Python内置的“文档测试”（doctest）模块可以直接提取注释中的代码并执行测试。</p><p>doctest严格按照Python交互式命令行的输入和输出来判断测试结果是否正确。只有测试异常的时候，可以用<code>...</code>表示中间一大段烦人的输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> doctest</span><br><span class="line">    doctest.testmod()</span><br></pre></td></tr></table></figure></li></ol><h2 id="功能函数"><a href="#功能函数" class="headerlink" title="功能函数"></a>功能函数</h2><ol><li><p><code>str.replace(&#39;a&#39;,&#39;A&#39;) 把字符串里的a替换成A</code></p></li><li><p>abs（）绝对值，max（）返回最大值</p></li><li><p>help(function_name)放到print里克查看帮助信息</p></li><li><p>int，float，str，bool 内置数据类型转换</p></li><li><p>hex（）函数把一个整数转换成十六进制表示的字符串</p></li><li><p>内置函数<code>isinstance()</code>用于数据类型检查，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(x, (<span class="built_in">int</span>, <span class="built_in">float</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (<span class="built_in">list</span>, <span class="built_in">tuple</span>))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="built_in">list</span>, <span class="built_in">tuple</span>))</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p><code>map()</code>函数接收两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterator</code>返回。</p></li><li><p><code>reduce</code>把一个函数作用在一个序列<code>[x1, x2, x3, ...]</code>上，这个函数必须接收两个参数，<code>reduce</code>把结果继续和序列的下一个元素做累积计算，其效果就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure></li><li><p><code>filter()</code>接收一个函数和一个序列，把传入的函数依次作用于每个元素，然后根据返回值是<code>True</code>还是<code>False</code>决定保留还是丢弃该元素，并返回的是一个<code>Iterator</code></p></li><li><p>sorted（列表，映射函数，reverse=True）</p><p>比较对每一项使用映射函数后的新列表！</p></li><li><p>基本类型都可以用<code>type()</code>判断，返回相应class</p><p>可以使用<code>types</code>模块中定义的常量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> types</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span>():</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(fn)==types.FunctionType</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="built_in">abs</span>)==types.BuiltinFunctionType</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="keyword">lambda</span> x: x)==types.LambdaType</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>((x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)))==types.GeneratorType</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p><code>dir()</code>函数，它返回一个包含字符串的list获得一个对象的所有属性和方法</p></li><li><p>```python<br>getattr()<code>、</code>setattr()<code>以及</code>hasattr()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">可以分别验证，设置，得到某个instance的属性和方法</span><br><span class="line"></span><br><span class="line">如果试图获取不存在的属性，会抛出AttributeError的错误：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">&gt;&gt;&gt; getattr(obj, &#39;z&#39;) # 获取属性&#39;z&#39;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#39;MyObject&#39; object has no attribute &#39;z&#39;</span><br></pre></td></tr></table></figure><p>可以传入一个default参数，如果属性不存在，就返回默认值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(obj, <span class="string">&#x27;z&#x27;</span>, <span class="number">404</span>) <span class="comment"># 获取属性&#x27;z&#x27;，如果不存在，返回默认值404</span></span><br></pre></td></tr></table></figure></li><li><pre><code class="python"> raise ValueError(&#39;score must be an integer!&#39;)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">15. eval()解析字符串为指令</span><br><span class="line"></span><br><span class="line">## 一些包</span><br><span class="line"></span><br><span class="line">1. math包用很多常用数学函数</span><br><span class="line"></span><br><span class="line">2. Python内置的&#96;enumerate&#96;函数可以把一个list变成索引-元素对，这样就可以在&#96;for&#96;循环中同时迭代索引和元素本身：</span><br><span class="line"></span><br></pre></td></tr></table></figure>&gt;&gt;&gt; for i, value in enumerate([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]):...     print(i, value)...0 A1 B2 C</code></pre></li></ol><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><ol><li><p>正常的函数和变量名是公开的（public），可以被直接引用，比如：<code>abc</code>，<code>x123</code>，<code>PI</code>等；</p><p>类似<code>__xxx__</code>这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的<code>__author__</code>，<code>__name__</code>就是特殊变量，<code>hello</code>模块定义的文档注释也可以用特殊变量<code>__doc__</code>访问，我们自己的变量一般不要用这种变量名；</p><p>类似<code>_xxx</code>和<code>__xxx</code>这样的函数或变量就是非公开的（private），不应该被直接引用，比如<code>_abc</code>，<code>__abc</code>等；</p></li></ol><h2 id="以后再学"><a href="#以后再学" class="headerlink" title="以后再学"></a>以后再学</h2><ol><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017590712115904" title="廖雪峰">定制类</a></li><li></li></ol>]]></content>
    
    
    <summary type="html">跟着廖雪峰教程先学学python语法，马上开坑web后端</summary>
    
    
    
    <category term="skills" scheme="http://example.com/categories/skills/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>密码学</title>
    <link href="http://example.com/2021/03/07/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    <id>http://example.com/2021/03/07/%E5%AF%86%E7%A0%81%E5%AD%A6/</id>
    <published>2021-03-07T12:56:25.000Z</published>
    <updated>2021-03-07T12:58:55.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="密码学常用解码网站"><a href="#密码学常用解码网站" class="headerlink" title="密码学常用解码网站"></a><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9230757.html">密码学常用解码网站</a></h1><span id="more"></span><p>xssee:[<a href="http://web2hack.org/xssee">http://web2hack.org/xssee</a></p><p>](<a href="https://bbs.ichunqiu.com/thread-32105-1-1.html?from=csdn">https://bbs.ichunqiu.com/thread-32105-1-1.html?from=csdn</a>)<br>xssee:<a href="http://evilcos.me/lab/xssee">http://evilcos.me/lab/xssee</a></p><p>程默的博客(DES,3DES,AES,RC,Blowfish,Twofish,Serpent,Gost,Rijndael,Cast,Xtea,RSA):<a href="http://tool.chacuo.net/cryptdes">http://tool.chacuo.net/cryptdes</a></p><p>在线编码解码(多种并排):[<a href="http://bianma.911cha.com/">http://bianma.911cha.com</a></p><p>](<a href="https://bbs.ichunqiu.com/thread-32105-1-1.html?from=csdn">https://bbs.ichunqiu.com/thread-32105-1-1.html?from=csdn</a>)<br>在线加密解密(多种):<a href="http://encode.chahuo.com/">http://encode.chahuo.com</a></p><p>Unicode转中文:<a href="http://www.bejson.com/convert/unicode_chinese">http://www.bejson.com/convert/unicode_chinese</a></p><p>栅栏密码 &amp;&amp; 凯撒密码 &amp;&amp; 摩斯电码:<a href="http://heartsnote.com/tools/cipher.htm">http://heartsnote.com/tools/cipher.htm</a></p><p>Caesar cipher(凯撒密码):[<a href="http://planetcalc.com/1434/">http://planetcalc.com/1434/</a></p><p>](<a href="https://bbs.ichunqiu.com/thread-32105-1-1.html?from=csdn">https://bbs.ichunqiu.com/thread-32105-1-1.html?from=csdn</a>)<br>Quoted-Printable &amp;&amp; ROT13:<a href="http://www.mxcz.net/tools/QuotedPrintable.aspx">http://www.mxcz.net/tools/QuotedPrintable.aspx</a></p><p>ROT5/13/18/47编码转换:<a href="http://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php">http://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php</a></p><p>Base32/16:<a href="http://pbaseconverter.com/">http://pbaseconverter.com/</a></p><p>Base32:<a href="https://tools.deamwork.com/crypt/decrypt/base32decode.html">https://tools.deamwork.com/crypt/decrypt/base32decode.html</a></p><p>quipqiup古典密码自动化爆破(词频分析):<a href="https://bbs.ichunqiu.com/thread-32105-1-1.html?from=csdn">http://quipqiup.com/index.php</a></p><p>词频分析/替换:<a href="http://cryptoclub.org/tools/cracksub_topframe.php">http://cryptoclub.org/tools/cracksub_topframe.php</a></p><p>‘+.&lt;&gt;[]’ &amp;&amp; ‘!.?’(Brainfuck/Ook!):<a href="https://www.splitbrain.org/services/ook">https://www.splitbrain.org/services/ook</a></p><p>‘+-.&lt;&gt;[]’(Brainfuck):<a href="https://www.nayuki.io/page/brainfuck-interpreter-javascript">https://www.nayuki.io/page/brainfuck-interpreter-javascript</a></p><p>‘+-.&lt;&gt;[]’(Brainfuck):<a href="https://bbs.ichunqiu.com/thread-32105-1-1.html?from=csdn">http://esoteric.sange.fi/brainfuck/impl/interp/i.html</a></p><p>‘()[]!+’JavaScript编码(JSfuck):<a href="http://discogscounter.getfreehosting.co.uk/js-noalnum.php">http://discogscounter.getfreehosting.co.uk/js-noalnum.php</a></p><p>用 6 个字符’()[]!+’来编写 JavaScript 程序(JSfuck同上):<a href="http://www.jsfuck.com/">http://www.jsfuck.com/</a></p><p><a href="http://patriciopalladino.com/files/hieroglyphy/">http://patriciopalladino.com/files/hieroglyphy/</a></p><p>摩斯密码翻译器:<a href="http://www.jb51.net/tools/morse.htm">http://www.jb51.net/tools/morse.htm</a></p><p>Morse Code摩尔斯电码:<a href="http://rumkin.com/tools/cipher/morse.php">http://rumkin.com/tools/cipher/morse.php</a></p><p>字符串编码，解码，转换(长度,反转,进制转换):<a href="http://www.5ixuexiwang.com/str/">http://www.5ixuexiwang.com/str/</a></p><p>Cisco Type 7 Reverser:<a href="http://packetlife.net/toolbox/type7">http://packetlife.net/toolbox/type7</a></p><p>Cisco:<a href="https://bbs.ichunqiu.com/thread-32105-1-1.html?from=csdn">http://www.ifm.net.nz/cookbooks/passwordcracker.html</a></p><p>cmd5 &amp;&amp; NTLM &amp;&amp; mysql…:<a href="http://www.cmd5.com/">http://www.cmd5.com</a></p><p>spammimic(字符2一段话):<a href="http://www.spammimic.com/">http://www.spammimic.com/</a></p><p>js代码在线加密解密:<a href="https://tool.lu/js/">https://tool.lu/js/</a></p><p>JScript/VBscript脚本解密(#@<del>^….^#</del>@):<a href="http://www.dheart.net/decode/index.php">http://www.dheart.net/decode/index.php</a></p><p>VBScript.Encode解密(tip:Asp encode):<a href="http://adophper.com/encode.html">http://adophper.com/encode.html</a></p><p>JScript.Encode脚本加密与解密:<a href="http://www.haokuwang.com/jsendecode.htm">http://www.haokuwang.com/jsendecode.htm</a></p><p>‘+/v+’UTF-7加密:<a href="http://web2hack.org/xssee">http://web2hack.org/xssee</a></p><p>各种无知密码解密:<a href="http://www.tools88.com/">http://www.tools88.com</a></p><p>uuencode解码 &amp;&amp; xxencode解码(古老的邮件密码):<a href="https://bbs.ichunqiu.com/thread-32105-1-1.html?from=csdn">http://web.chacuo.net/charsetuuencode</a></p><p>MIME标准(邮件编码的一种):<a href="http://dogmamix.com/MimeHeadersDecoder/">http://dogmamix.com/MimeHeadersDecoder/</a></p><p>Binhex编码(邮件编码的一种,常见于MAC机):<a href="http://encoders-decoders.online-domain-tools.com/">http://encoders-decoders.online-domain-tools.com/</a></p><p>%u8001%u9525非/u的hex，%u编码，只能编码汉字(xssee):<a href="http://web.chacuo.net/charsetescape">http://web.chacuo.net/charsetescape</a></p><p>猪圈密码:<a href="http://www.simonsingh.net/The_Black_Chamber/pigpen.html">http://www.simonsingh.net/The_Black_Chamber/pigpen.html</a></p><p>ppencode(把Perl代码转换成只有英文字母的字符串):<a href="http://namazu.org/~takesako/ppencode/demo.html">http://namazu.org/~takesako/ppencode/demo.html</a></p><p>rrencode(把ruby代码全部转换成符号):挂了</p><p>aaencode(JS代码转换成常用的网络表情，也就是我们说的颜文字js加密):[<a href="http://utf-8.jp/public/aaencode.html">http://utf-8.jp/public/aaencode.html</a></p><p>](<a href="https://bbs.ichunqiu.com/thread-32105-1-1.html?from=csdn">https://bbs.ichunqiu.com/thread-32105-1-1.html?from=csdn</a>)<br>‘()[]!+’ &amp;&amp; ‘$=~[]+”_.();’jother编码jjencode(JS代码转换成只有符号的字符串):<a href="http://web2hack.org/xssee">http://web2hack.org/xssee</a></p><p>jother（是一种运用于javascript语言中利用少量字符构造精简的匿名函数方法对于字符串进行的编码方式。其中8个少量字符包括：! + ( ) [ ] { }。只用这些字符就能完成对任意字符串的编码）:<a href="http://tmxk.org/jother/">http://tmxk.org/jother/</a></p><p>jjencode/aaencode可用xssee &amp;&amp; Chrome的Console模式来直接输出解密。</p><p>Manchester曼彻斯特解密：<a href="http://eleif.net/manchester.html">http://eleif.net/manchester.html</a></p><p>Vigenère维多利亚解密：<a href="https://www.guballa.de/vigenere-solver">https://www.guballa.de/vigenere-solver</a></p><p>Vigenère cipher:<a href="http://planetcalc.com/2468/">http://planetcalc.com/2468/</a></p><p>Hill cipher(希尔密码):<a href="http://planetcalc.com/3327/">http://planetcalc.com/3327/</a></p><p>Atbash cipher(埃特巴什码):<a href="http://planetcalc.com/4647/">http://planetcalc.com/4647/</a></p><p>snow(html隐写):<a href="https://bbs.ichunqiu.com/thread-32105-1-1.html?from=csdn">http://fog.misty.com/perry/ccs/snow/snow/snow.html</a></p><p>Serpent加密解密:<a href="http://serpent.online-domain-tools.com/">http://serpent.online-domain-tools.com/</a></p><p>十六进制Hex转文本字符串:<a href="http://www.bejson.com/convert/ox2str/">http://www.bejson.com/convert/ox2str/</a></p><p>Hex2text:<a href="http://www.convertstring.com/EncodeDecode/HexDecode">http://www.convertstring.com/EncodeDecode/HexDecode</a></p><p>Binary(二进制)，ACSII,Hex(十六进制),Decimal(十进制):<a href="http://www.binaryhexconverter.com/">http://www.binaryhexconverter.com/</a></p><p>集合:<a href="http://www.qqxiuzi.cn/daohang.htm">http://www.qqxiuzi.cn/daohang.htm</a></p><p>集合（各种古典密码）:<a href="http://rumkin.com/tools/cipher/">http://rumkin.com/tools/cipher/</a></p><p>文本加密为汉字(“盲文”，音符，各种语言，花朵，箭头…):<a href="http://www.qqxiuzi.cn/bianma/wenbenjiami.php">http://www.qqxiuzi.cn/bianma/wenbenjiami.php</a></p><p>在线工具集合:<a href="http://tomeko.net/online_tools/">http://tomeko.net/online_tools/</a></p><p>二维码/条形码:<a href="https://online-barcode-reader.inliteresearch.com/">https://online-barcode-reader.inliteresearch.com/</a></p><p>生成二维码:<a href="http://www.wwei.cn/">http://www.wwei.cn/</a></p><p>在线二维码解密:<a href="http://jiema.wwei.cn/">http://jiema.wwei.cn/</a></p><p>Image2Base64:<a href="http://www.vgot.net/test/image2base64.php">http://www.vgot.net/test/image2base64.php</a></p><p>与佛论禅:<a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx">http://www.keyfc.net/bbs/tools/tudoucode.aspx</a></p><p>在线分解GIF帧图:<a href="https://bbs.ichunqiu.com/thread-32105-1-1.html?from=csdn">http://zh.bloggif.com/gif-extract</a></p><p>bejson(杂乱):<a href="http://www.bejson.com/">http://www.bejson.com</a></p><p>atool(杂乱):<a href="http://www.atool.org/">http://www.atool.org</a></p><p>Punch Card:<a href="http://www.kloth.net/services/cardpunch.php">http://www.kloth.net/services/cardpunch.php</a></p><p>分解素数(ESA):[<a href="http://www.factordb.com/index.php">http://www.factordb.com/index.php</a></p><p>](<a href="https://bbs.ichunqiu.com/thread-32105-1-1.html?from=csdn">https://bbs.ichunqiu.com/thread-32105-1-1.html?from=csdn</a>)<br>文件在线Hash:<a href="http://www.atool.org/file_hash.php">http://www.atool.org/file_hash.php</a></p><p>作　　者：**<a href="https://www.cnblogs.com/ECJTUACM-873284962/">Angel_Kitty</a>**<br>出　　处：<a href="https://www.cnblogs.com/ECJTUACM-873284962/">https://www.cnblogs.com/ECJTUACM-873284962/</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;密码学常用解码网站&quot;&gt;&lt;a href=&quot;#密码学常用解码网站&quot; class=&quot;headerlink&quot; title=&quot;密码学常用解码网站&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/ECJTUACM-873284962/p/9230757.html&quot;&gt;密码学常用解码网站&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="tools" scheme="http://example.com/categories/tools/"/>
    
    
    <category term="cyber safe" scheme="http://example.com/tags/cyber-safe/"/>
    
  </entry>
  
  <entry>
    <title>女生节快乐</title>
    <link href="http://example.com/2021/03/07/%E5%A5%B3%E7%94%9F%E8%8A%82%E5%BF%AB%E4%B9%90/"/>
    <id>http://example.com/2021/03/07/%E5%A5%B3%E7%94%9F%E8%8A%82%E5%BF%AB%E4%B9%90/</id>
    <published>2021-03-07T08:00:27.000Z</published>
    <updated>2021-03-07T08:03:51.454Z</updated>
    
    <content type="html"><![CDATA[<p>祝各位女同学，男同 节日快乐！:grin:</p><p>还有我发现了电子科大的女生节  [黑历史](<a href="https://baike.baidu.com/item/%E7%AB%A0%E8%90%8C%E8%8A%8A/9811861#1_1">章萌芊_百度百科 (baidu.com)</a>)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;祝各位女同学，男同 节日快乐！:grin:&lt;/p&gt;
&lt;p&gt;还有我发现了电子科大的女生节  [黑历史](&lt;a href=&quot;https://baike.baidu.com/item/%E7%AB%A0%E8%90%8C%E8%8A%8A/9811861#1_1&quot;&gt;章萌芊_百度百</summary>
      
    
    
    
    <category term="diary" scheme="http://example.com/categories/diary/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo初始文档</title>
    <link href="http://example.com/2021/03/07/hello-world/"/>
    <id>http://example.com/2021/03/07/hello-world/</id>
    <published>2021-03-07T05:36:07.816Z</published>
    <updated>2021-03-07T05:36:07.816Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">hexo自带的文档，没啥用，留着吧</summary>
    
    
    
    <category term="others" scheme="http://example.com/categories/others/"/>
    
    
  </entry>
  
  <entry>
    <title>完成todolist</title>
    <link href="http://example.com/2021/03/06/%E5%AE%8C%E6%88%90todolist/"/>
    <id>http://example.com/2021/03/06/%E5%AE%8C%E6%88%90todolist/</id>
    <published>2021-03-06T13:36:35.000Z</published>
    <updated>2021-03-07T05:36:07.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="澳新第二题："><a href="#澳新第二题：" class="headerlink" title="澳新第二题："></a>澳新第二题：</h1><p>[toc]</p><h2 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h2><p>这道todolist卡了我一整天，因为光学那个b站视频缺少大量的知识，于是我还是在网上找了一个学习，不过经历非常失败，我找了个简单的试图把它改成可以本地存储的，但是出现了很奇怪的bug，但最终理清了很多关系，最终找到了这个版本，很快就上手了</p><h2 id="jQuery知识"><a href="#jQuery知识" class="headerlink" title="jQuery知识"></a>jQuery知识</h2><p>最外层 $(function){ …}</p><p>$(‘选择器’).(this)</p><p>parent().children().siblings()这里面可以加选择器</p><p>.slideup(mm,(function()))</p><p>.first().next().eq(index)</p><p>.addClass().removeClass().html().text()</p><p>.css(‘key’,’value’)</p><p>.on(‘event’,function(){})  相当于添加监听器</p><p>.find(‘选择器’).filter(‘:first’)</p><p>.closet(‘选择器’)//最近祖先</p><p>.remove().hide().togger().</p><p>if(.is(‘选择器’))</p><p>.prepend(“代码”)超级方便！</p><p>.append也行？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.each(arr1,function(i,val)&#123; &#x2F;&#x2F;两个参数，第一个参数表示遍历的数组的下标，第二个参数表示下标对应的值</span><br></pre></td></tr></table></figure><p>val() 方法返回或设置被选元素的 value 属性</p><p>splice(index,number,(new item)) 方法向/从数组中添加/删除项目，然后返回被删除的项目。</p><p>attr() 方法设置或返回被选元素的属性值，俩参数就是设置，一参数就是返回（用于html）</p><p>prop同上，配套removeprop</p><p>jQ里创建的变量前面最好加上$</p><p>setInterval(function,time)每隔time触发一次function</p><p>clearinterval(setinterval(..))</p><p>回调地狱（感觉不难理解其实。。）</p><p>js函数特色，回调</p><p>.animate({一组css（变化用-=或+=）},time,callback)</p><p>一级一级变量减少查询时间</p><p>保留对象的话同级可以叠加如：对象.on().on()</p><p>异步里还要多担心一个执行时间，双线进行时并非按直接顺序，若某节点需要引用另一线的结论，要判断另一线和该节点的执行顺序，太强了我去，可以监听父元素，这将对未来创建的进行监听。。哎呀还是太乱了，得看书才行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">ajax：</span><br><span class="line"></span><br><span class="line"><span class="comment">//success函数里的this引用Ajax对象</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">type: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">url: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;...&#125;,</span><br><span class="line">error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> order = &#123;</span><br><span class="line">name : $name.val(),</span><br><span class="line">    ..</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">type: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">url: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">data:... ,</span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;...&#125;,</span><br><span class="line">error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">&#x27;DELETE&#x27;</span>,</span><br><span class="line">    url:<span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">    success:,</span><br><span class="line">    error:,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>根据RESTful规则使用put，get，delete，push，post</p><p>restful规则理解最好是：[戳我](<a href="https://www.jianshu.com/p/84568e364ee8">深入理解什么是RESTful API ？ - 简书 (jianshu.com)</a>)</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个200行项目让我学到了一堆东西，jq的函数就学了20多个，还有localstorage的用法，不过这个项目采用的数据结构感觉怪怪的，应该是我太菜了，json学习链接先放这 [JSON]<a href="https://www.json.org/json-en.html">新建标签页 (json.org)</a> 不过jq比js内置的方便好多啊啊！！！</p><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p><u>因为没有了解Js一些核心原理，对渲染，更新和执行顺序的概念理解一般，到时候看看红宝书吧！</u></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 参考https://blog.csdn.net/weixin_43836057/article/details/103548390 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .w &#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">900px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .header &#123;</span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#444</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .header-w &#123;</span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .logo &#123;</span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .add &#123;</span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">58px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: right;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.add</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .title &#123;</span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">80px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.title</span> <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .title .count &#123;</span><br><span class="line"><span class="css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">80px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.title</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">6px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#todolist</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-left</span>: <span class="number">7px</span> solid <span class="number">#388E8E</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#donelist</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-left</span>: <span class="number">7px</span> solid <span class="number">#999</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">5</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#todolist</span> <span class="selector-tag">input</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-id">#donelist</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">8px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#todolist</span> <span class="selector-tag">p</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-id">#donelist</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#todolist</span> <span class="selector-tag">a</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-id">#donelist</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#999</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">footer</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .del &#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex-grow</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://libs.baidu.com/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">            load();</span><br><span class="line"><span class="javascript">            <span class="comment">// 1. 按下回车 把完整数据 存储到本地存储里面</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 存储的数据格式 var todolist = [&#123;title: &quot;xxx&quot;, done: false&#125;]</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#title&quot;</span>).on(<span class="string">&quot;keydown&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line">                if (event.keyCode === 13) &#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> ($(<span class="built_in">this</span>).val() === <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&quot;请输入内容！&quot;</span>)</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 先读取本地数据存储的原来的数据</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> local = getData();</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// console.log(local);</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 把local数组进行更新数据 把最新的数据追加给local数组</span></span></span><br><span class="line">                        local.push(&#123;</span><br><span class="line"><span class="javascript">                            title: $(<span class="built_in">this</span>).val(),</span></span><br><span class="line"><span class="javascript">                            done: <span class="literal">false</span></span></span><br><span class="line">                        &#125;);</span><br><span class="line"><span class="javascript">                        <span class="comment">// 把这个数组local存储到本地存储</span></span></span><br><span class="line">                        saveData(local);</span><br><span class="line"><span class="javascript">                        <span class="comment">// 2. 把本地存储的数据渲染出来</span></span></span><br><span class="line">                        load();</span><br><span class="line"><span class="javascript">                        $(<span class="built_in">this</span>).val(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="javascript">            <span class="comment">// 3. todolist 删除操作</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;ol, ul&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// alert(11);</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> data = getData();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> index = $(<span class="built_in">this</span>).attr(<span class="string">&quot;id&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//删除所选数据</span></span></span><br><span class="line">                data.splice(index, 1);</span><br><span class="line">                saveData(data);</span><br><span class="line">                load();</span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            <span class="comment">// 4. todolist 正在进行和已完成的操作</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;ol, ul&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;input&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 先获取本地存储的数据</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> data = getData();</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 修改数据</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> index = $(<span class="built_in">this</span>).siblings(<span class="string">&quot;a&quot;</span>).attr(<span class="string">&quot;id&quot;</span>);</span></span><br><span class="line"><span class="javascript">                data[index].done = $(<span class="built_in">this</span>).prop(<span class="string">&quot;checked&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 保存到本地存储</span></span></span><br><span class="line">                saveData(data);</span><br><span class="line">                load();</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//以下为函数</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 读取本地存储的数据</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> data = <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;todolist&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (data !== <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 本地存储里面的数据都是字符串格式的 需要转换格式</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(data);</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> [];</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="comment">// 保存本地存储数据</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">saveData</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;todolist&quot;</span>, <span class="built_in">JSON</span>.stringify(data));</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="comment">// 渲染加载数据</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> data = getData();</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 遍历之前先清空ol里面的元素内容！！</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;ol, ul&quot;</span>).empty();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> todoCount = <span class="number">0</span>; <span class="comment">//正在进行的个数</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> doneCount = <span class="number">0</span>; <span class="comment">// 完成的个数</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="comment">// 遍历数据</span></span></span><br><span class="line"><span class="javascript">                $.each(data, <span class="function"><span class="keyword">function</span> (<span class="params">i, n</span>) </span>&#123;</span></span><br><span class="line">                    if (n.done) &#123;</span><br><span class="line"><span class="javascript">                        <span class="comment">//prepend插入标签</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//预先选定复选框或单选按钮</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        $(&quot;ul&quot;).prepend(&quot;<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;checkbox&#x27;</span> <span class="attr">checked</span>=<span class="string">&#x27;checked&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>&quot; + n.title + &quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;#&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;&quot; + i + &quot;&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;del&#x27;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&quot;);</span></span></span><br><span class="line">                        doneCount++;</span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                        $(&quot;ol&quot;).prepend(&quot;<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;checkbox&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>&quot; + n.title + &quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;#&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;&quot; + i + &quot;&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;del&#x27;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&quot;);</span></span></span><br><span class="line">                        todoCount++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"><span class="javascript">                <span class="comment">//text返回所有文本内容</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#todoCount&quot;</span>).text(todoCount);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#doneCount&quot;</span>).text(doneCount);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- header start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header-w w&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ToDoList<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按回车输入&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- header end --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- main start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-w w&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>正在进行<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;todoCount&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">&quot;todolist&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-box&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;end&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>已经完成<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;doneCount&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;donelist&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- main end --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">刚开始接触JS,JQ,RESTful，完成招新第二题todolist</summary>
    
    
    
    <category term="diary" scheme="http://example.com/categories/diary/"/>
    
    
    <category term="harvest" scheme="http://example.com/tags/harvest/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="http://example.com/2021/03/06/git/"/>
    <id>http://example.com/2021/03/06/git/</id>
    <published>2021-03-06T12:33:45.000Z</published>
    <updated>2021-03-07T05:36:07.816Z</updated>
    
    <content type="html"><![CDATA[<p>git init</p><p>git status</p><p>git add file</p><p>git commit -m “”</p><p>git log –oneline</p><p>git reflog</p><p>git reset –hard HEAD^(版本号)</p><p>HEAD^^  HEAD~100</p><p>git diff HEAD – file</p><p>查看工作区和版本库不同</p><p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p><p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>checkout  -&gt; restore</p><p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”</p><p><code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage）</p><p> `git reset HEAD -&gt; git restore –staged</p><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">版本回退</a>一节，不过前提是没有推送到远程库。</p><p>远程</p><p>git remote -v</p><p>git remote remove origin</p><p>git remote add origin <a href="mailto:&#x67;&#x69;&#116;&#x40;&#x67;&#105;&#116;&#104;&#117;&#x62;&#46;&#99;&#111;&#109;">&#x67;&#x69;&#116;&#x40;&#x67;&#105;&#116;&#104;&#117;&#x62;&#46;&#99;&#111;&#109;</a>:git_username/repository_name.git</p><p>git pull origin master –allow-unrelated-histories</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>git push origin master</p><p>git push -u origin main -f 强制push！！</p><p>git clone url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建 &lt;name&gt; 的分支并切换</span><br><span class="line">git switch -c &lt;name&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建</span><br><span class="line">git branch &lt;name&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;切换到&lt;name&gt;分支</span><br><span class="line">git checkout &lt;name&gt;</span><br><span class="line">git switch &lt;name&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查看分支树</span><br><span class="line">git branch </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;删除分支</span><br><span class="line">git branch -d &lt;name&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;合并分支 假设这里存在 master ， dev 分支</span><br><span class="line">  &#x2F;&#x2F; 1 切换到要保留的分支——这里是master</span><br><span class="line">  git checkout master</span><br><span class="line">  &#x2F;&#x2F; 2 合并掉分支dev</span><br><span class="line">  git merge dev</span><br></pre></td></tr></table></figure><p><code>git log --graph</code>命令可以看到分支合并图</p>]]></content>
    
    
    <summary type="html">git精简指令</summary>
    
    
    
    <category term="skills" scheme="http://example.com/categories/skills/"/>
    
    
  </entry>
  
  <entry>
    <title>澳新</title>
    <link href="http://example.com/2021/03/06/%E6%BE%B3%E6%96%B0/"/>
    <id>http://example.com/2021/03/06/%E6%BE%B3%E6%96%B0/</id>
    <published>2021-03-06T06:18:45.000Z</published>
    <updated>2021-03-07T05:36:07.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ANZJointLab-21春季招新题目"><a href="#ANZJointLab-21春季招新题目" class="headerlink" title="ANZJointLab 21春季招新题目"></a>ANZJointLab 21春季招新题目</h1><p>澳新联合实验室致力于校企合作培养具有软件工程实践素养的开发工程师，工作室涉及Web全栈开发方向（Web前端，后端，Flutter跨平台移动端开发，小程序开发），区块链开发方向，以下招新题目面向大一下新生，涉及git，前端，后端，Flutter等方面，一共7道题，1-3道题Web前端知识，第4题移动端Flutter开发知识，5，6题属于Golang后端内容，7属于git，第8题涉及git和前端知识，难度随分数大小递增，和题目顺序无关</p><p>所有题目使用MarkDown文档回答，要求实现截图和按照问题打包的源码压缩文件，每个问题一个压缩包，之后一并打包发送到邮箱<a href="mailto:&#x31;&#x35;&#55;&#50;&#55;&#x35;&#x34;&#56;&#x31;&#x30;&#64;&#113;&#x71;&#46;&#x63;&#x6f;&#109;">&#x31;&#x35;&#55;&#50;&#55;&#x35;&#x34;&#56;&#x31;&#x30;&#64;&#113;&#x71;&#46;&#x63;&#x6f;&#109;</a> </p><p>期望分数：40+，期望人数：10人</p><h2 id="Question1-HTML-and-CSS"><a href="#Question1-HTML-and-CSS" class="headerlink" title="Question1 HTML and CSS"></a>Question1 HTML and CSS</h2><h3 id="Score-：10"><a href="#Score-：10" class="headerlink" title="Score ：10"></a>Score ：10</h3><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>html和CSS 是标记语言和样式语言，不具有图灵完备，和Word一样简单，是 Web开发的基础，无论是前端还是后端都需要了解基本的html和CSS基础</p><p>这部分建议4h完成</p><p>推荐教程： <a href="https://www.bilibili.com/video/BV17b41137yx">https://www.bilibili.com/video/BV17b41137yx</a> p1~p9</p><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>一个150*150的方框(颜色为aqua）在不同分辨率屏幕上下左右居中，鼠标移动到方框上能够改变颜色，同时点击它能够跳转至澳新银行页面。</p><p>澳新银行中国官网url ： <a href="https://institutional.anz.com/markets/china/zh-hans">https://institutional.anz.com/markets/china/zh-hans</a></p><h2 id="Question2-JavaScript（JS-ES"><a href="#Question2-JavaScript（JS-ES" class="headerlink" title="Question2 JavaScript（JS/ES)"></a>Question2 JavaScript（JS/ES)</h2><h3 id="Score-：20"><a href="#Score-：20" class="headerlink" title="Score ：20"></a>Score ：20</h3><h3 id="Introduction-1"><a href="#Introduction-1" class="headerlink" title="Introduction"></a>Introduction</h3><p>JavaScript是网页前端设计的脚本语言，解释型，弱类型，是Web开发必学语言</p><p>这部分建议8h完成</p><p>重点：Js语法，DOM操作</p><p>推荐教程： <a href="https://www.bilibili.com/video/BV17b41137yx">https://www.bilibili.com/video/BV17b41137yx</a> p10 ~ p18 </p><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><p>综合使用html，css，js实现一个简单的待定计划表（ToDoList）要求数据能够本地储存（即关闭网页后再打开时，计划依旧存在，提示：了解Cookie、Session），同时计划表具有增删功能。</p><h2 id="Question3-FrontEnd-Web-Request"><a href="#Question3-FrontEnd-Web-Request" class="headerlink" title="Question3 FrontEnd Web Request"></a>Question3 FrontEnd Web Request</h2><h3 id="Score-：-10"><a href="#Score-：-10" class="headerlink" title="Score ： 10"></a>Score ： 10</h3><h3 id="Introduction-2"><a href="#Introduction-2" class="headerlink" title="Introduction"></a>Introduction</h3><p>前后端交互主要通过前端发送网络请求实现</p><p>发送网络请求有原生的fetchAPI，JQuery，axios等实现方式</p><p>建议选择fetchAPI，JQuery入手学习</p><p>推荐教程： <a href="https://www.bilibili.com/video/BV17b41137yx">https://www.bilibili.com/video/BV17b41137yx</a> p21 ~ p30</p><h3 id="Question-2"><a href="#Question-2" class="headerlink" title="Question"></a>Question</h3><ol><li>向百度官网发送GET请求，把返回的字段显示在页面上，（不必介意看起来很乱）</li><li>什么是RestFulAPi</li></ol><h2 id="Question4-Flutter"><a href="#Question4-Flutter" class="headerlink" title="Question4 Flutter"></a>Question4 Flutter</h2><h3 id="Score-：30"><a href="#Score-：30" class="headerlink" title="Score ：30"></a>Score ：30</h3><h3 id="Introduction-3"><a href="#Introduction-3" class="headerlink" title="Introduction"></a>Introduction</h3><p>Flutter是跨平台移动端开发UI框架，可以实现一套代码编译成安卓软件和Ios软件，基于Dart语言开发</p><p>推荐教程： <a href="https://jspang.com/detailed?id=58">https://jspang.com/detailed?id=58</a></p><h3 id="Question-3"><a href="#Question-3" class="headerlink" title="Question"></a>Question</h3><ol><li>配置好Flutter开发环境（Score：10）</li><li>使用Flutter实现如下功能：<ol><li>三栏Navigation页面<ol><li>一栏显示Hello ANZ + 一个按钮， 点击按钮更新内容为 Hello ANZJointLab</li><li>一栏显示一个滚动列表显示数字1-100</li><li>一栏显示一个图片</li></ol></li></ol></li></ol><h2 id="Question5-GoLang-Web"><a href="#Question5-GoLang-Web" class="headerlink" title="Question5 GoLang Web"></a>Question5 GoLang Web</h2><h3 id="Score-：10-1"><a href="#Score-：10-1" class="headerlink" title="Score ：10"></a>Score ：10</h3><h3 id="Introduction-4"><a href="#Introduction-4" class="headerlink" title="Introduction"></a>Introduction</h3><p>GoLang是Web后端的主流语言之一，语言类似于C，易上手，不需要搞懂所有特性，搞懂Go和已经学习的C语言内容的特性+Golang原生http库常用函数就可以上手本题</p><h3 id="Question-4"><a href="#Question-4" class="headerlink" title="Question"></a>Question</h3><p>使用Golang原生部署一个任意静态页面，部署到本地</p><h2 id="Question6-GoLang-Grom"><a href="#Question6-GoLang-Grom" class="headerlink" title="Question6 GoLang Grom"></a>Question6 GoLang Grom</h2><h3 id="Score-：30-40-50"><a href="#Score-：30-40-50" class="headerlink" title="Score ：30/40/50"></a>Score ：30/40/50</h3><h3 id="Introduction-5"><a href="#Introduction-5" class="headerlink" title="Introduction"></a>Introduction</h3><p>数据库和监听网络请求是后端的主要工作，数据库</p><h3 id="Question-5"><a href="#Question-5" class="headerlink" title="Question"></a>Question</h3><p>使用Golang实现一个TodoList网络应用，暴露增删改查接口，连接MySQL数据库实现数据的存储</p><p>部署到本地30分，</p><p>部署到云服务器+10分</p><p>连接前端页面+10分</p><h2 id="Question7-Git-GitHub"><a href="#Question7-Git-GitHub" class="headerlink" title="Question7 Git/GitHub"></a>Question7 Git/GitHub</h2><h3 id="Score-：10-2"><a href="#Score-：10-2" class="headerlink" title="Score ：10"></a>Score ：10</h3><h3 id="Introduction-6"><a href="#Introduction-6" class="headerlink" title="Introduction"></a>Introduction</h3><p>git是团队合作开发必须使用的版本管理工具</p><p>主要学习：文件监听，版本回溯，分支管理，远程仓库</p><h3 id="Question-6"><a href="#Question-6" class="headerlink" title="Question"></a>Question</h3><p>创建一个公开的Github仓库，与本地仓库链接，新建两个分支</p><h2 id="Question8-Build-Your-Own-Blog"><a href="#Question8-Build-Your-Own-Blog" class="headerlink" title="Question8 Build Your Own Blog"></a>Question8 Build Your Own Blog</h2><h3 id="Score-：10-3"><a href="#Score-：10-3" class="headerlink" title="Score ：10"></a>Score ：10</h3><h3 id="Introduction-7"><a href="#Introduction-7" class="headerlink" title="Introduction"></a>Introduction</h3><p>写技术博客树知识内化和方式，也是向别人展示你的知识技能的手段，使用Hexo和gitPage可以快速简单的搭建自己的技术博客</p><p>参考文章：</p><p><a href="https://blog.csdn.net/grave2015/article/details/79961843">https://blog.csdn.net/grave2015/article/details/79961843</a></p><h3 id="Question-7"><a href="#Question-7" class="headerlink" title="Question"></a>Question</h3><p>搭建自己的技术博客，附带链接，方式不限于Hexo + gitPage</p>]]></content>
    
    
    <summary type="html">澳新工作室招新题</summary>
    
    
    
    <category term="others" scheme="http://example.com/categories/others/"/>
    
    
    <category term="澳新" scheme="http://example.com/tags/%E6%BE%B3%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>first</title>
    <link href="http://example.com/2021/03/06/first/"/>
    <id>http://example.com/2021/03/06/first/</id>
    <published>2021-03-06T02:58:38.000Z</published>
    <updated>2021-03-07T05:36:07.815Z</updated>
    
    <content type="html"><![CDATA[<p>第一个博文该写什么呢：</p><p>佛曰：nocode</p>]]></content>
    
    
    <summary type="html">纪念一下我的第一个博文 2021-3-6</summary>
    
    
    
    <category term="diary" scheme="http://example.com/categories/diary/"/>
    
    
    <category term="FIRST" scheme="http://example.com/tags/FIRST/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Data World</title>
  
  <subtitle>探索数据    思考人类</subtitle>
  <link href="https://darren-dong.com/atom.xml" rel="self"/>
  
  <link href="https://darren-dong.com/"/>
  <updated>2021-07-27T14:54:58.925Z</updated>
  <id>https://darren-dong.com/</id>
  
  <author>
    <name>Darren</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《心理学与生活》</title>
    <link href="https://darren-dong.com/2021/07/27/%E5%BF%83%E7%90%86%E5%AD%A6%E5%AF%BC%E8%AE%BA/"/>
    <id>https://darren-dong.com/2021/07/27/%E5%BF%83%E7%90%86%E5%AD%A6%E5%AF%BC%E8%AE%BA/</id>
    <published>2021-07-27T13:27:34.000Z</published>
    <updated>2021-07-27T14:54:58.925Z</updated>
    
    <content type="html"><![CDATA[<p>duo</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;duo&lt;/p&gt;
</summary>
      
    
    
    
    <category term="psychology" scheme="https://darren-dong.com/categories/psychology/"/>
    
    
  </entry>
  
  <entry>
    <title>《鬼谷子》</title>
    <link href="https://darren-dong.com/2021/07/21/%E3%80%8A%E9%AC%BC%E8%B0%B7%E5%AD%90%E3%80%8B/"/>
    <id>https://darren-dong.com/2021/07/21/%E3%80%8A%E9%AC%BC%E8%B0%B7%E5%AD%90%E3%80%8B/</id>
    <published>2021-07-21T12:11:50.000Z</published>
    <updated>2021-07-21T14:36:55.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="鬼谷子"><a href="#鬼谷子" class="headerlink" title="鬼谷子"></a>鬼谷子</h1><p>关键词：纵横捭阖、谋略、游说、诡辩</p><h2 id="捭阖第一"><a href="#捭阖第一" class="headerlink" title="捭阖第一"></a>捭阖第一</h2><p>开启与闭藏</p><p>在鬼谷子思想体系中，捭阖是一对极为重要的哲学概念。</p><p>它是万事万物发展变化的规律，也是纵横家游说活动的根本方法，它旨在告诉人们：</p><p>何时应敞开心扉、直言陈辞；何时冷静观察、沉默不语。</p><p>通过捭、阖的密切配合，把握事物发展的关键，从而达到知人、御人</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;鬼谷子&quot;&gt;&lt;a href=&quot;#鬼谷子&quot; class=&quot;headerlink&quot; title=&quot;鬼谷子&quot;&gt;&lt;/a&gt;鬼谷子&lt;/h1&gt;&lt;p&gt;关键词：纵横捭阖、谋略、游说、诡辩&lt;/p&gt;
&lt;h2 id=&quot;捭阖第一&quot;&gt;&lt;a href=&quot;#捭阖第一&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="psychology" scheme="https://darren-dong.com/categories/psychology/"/>
    
    
    <category term="鬼谷子" scheme="https://darren-dong.com/tags/%E9%AC%BC%E8%B0%B7%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>《人格心理学》</title>
    <link href="https://darren-dong.com/2021/07/20/%E4%BA%BA%E6%A0%BC%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    <id>https://darren-dong.com/2021/07/20/%E4%BA%BA%E6%A0%BC%E5%BF%83%E7%90%86%E5%AD%A6/</id>
    <published>2021-07-20T12:27:34.000Z</published>
    <updated>2021-07-21T03:17:05.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是人格"><a href="#一、什么是人格" class="headerlink" title="一、什么是人格"></a>一、什么是人格</h2><h3 id="人与环境"><a href="#人与环境" class="headerlink" title="人与环境"></a>人与环境</h3><p>如今心理学普遍接受的回答是，情境和个人二者共同决定行为。</p><p>而讨论已经转到了如下问题：</p><ul><li>情境怎样影响人的行为？</li><li>人的行为又怎样反映出每个人的特色？</li></ul><p><u>社会心理学者</u>关心人们怎样对环境要求做出一般反应，他们希望查明大多数人的行为模式。</p><p><u>人格心理学者</u>则希望研究人与人之间的差别。“人与人的差别不多，但这些差别都很显著”</p><p>他们希望了解，你的交友圈，你的成功，抑郁，开朗，成绩，心脏病概率，对压力的反应等等。</p><p>这并不等于说环境无足轻重，人格研究者的许多问题都涉及某种类型的人在某种特定环境中的表现。</p><h3 id="人格的定义"><a href="#人格的定义" class="headerlink" title="人格的定义"></a>人格的定义</h3><p>让你与身边的人不同的关键是——人格</p><p>心理学家不同意对这个问题做出一个简单回答。在描述人的人格 判定哪些话题属于该分支，仍未有定论</p><p>但即使缺乏一致性，不同的观点仍提供了探索人的复杂性的丰富而令人振奋的框架</p><p>可以这样定义：“源于个体自身的 <strong>稳定行为方式</strong> 和 <strong>内部过程</strong>”</p><p><strong>稳定行为方式</strong>：</p><p>指的是个体差异。重要的是——承认人格是稳定的</p><p><strong>内部过程</strong>：</p><p>人内心发生的，影响人怎样行动，怎样感觉的所有情绪、动机和认知过程。</p><p>很多人格心理学家对诸如抑郁，拒绝等感兴趣，而这些过程有些是所有人共有的，</p><p>但是我们怎样利用这些过程，这些过程怎样与个体差异相互作用，这对个人性格起着决定性作用。</p><h3 id="人格的六个流派"><a href="#人格的六个流派" class="headerlink" title="人格的六个流派"></a>人格的六个流派</h3><p>稳定的行为方式和内部心理过程产生的根源是什么？</p><p>人格心理学家从不同角度做出了回答，本书主要介绍<strong>六个学派</strong>：</p><hr><p><u>精神分析流派</u>：人的无意识心理对他们的行为模式的差异影响很大。</p><p><u>特质流派</u>：人是处在各种各样的人格特征的连续体的某个位置上的。</p><p><u>生物学流派</u>：用遗传素质和生理过程解释人格的个体差异。</p><p><u>人本主义流派</u>：人的责任感和自我接纳感是造成人格差异的主要原因。</p><p><u>行为主义/社会学系流派</u>：把稳定的行为方式说成是条件反射和期望的结果。</p><p><u>认知流派</u>：用人们加工信息的方式来解释行为的差异。</p><hr><p>从某种意义上，六个学派b就像六个盲人，都查明并验证了人格的一个重要方面。</p><p>虽然有很多问题不同流派提出了合理的、彼此相容的解释，但很多时候解释是完全不相容的。</p><p>而这又有好几种情况，比如对于攻击行为，提出了六种不同的观点：</p><ul><li>可能只有一种是对的</li><li>可能六个学派都说对了一部分，六种或更多的原因导致了攻击行为</li><li>可能六种解释其实并不相互矛盾，只是他们强调的重点不同。</li></ul><h3 id="人格与文化"><a href="#人格与文化" class="headerlink" title="人格与文化"></a>人格与文化</h3><p>人与人格是存在于文化背景中的。</p><p>本书介绍的多数理论和研究是基于对个体主义文化的观察（大部分在美国开展）</p><p>在某些情况下，研究者在不同文化群体中发现了<strong>一致的结果</strong></p><p>在另一些情况下，我们发现了不同文化之间的<strong>重要差异</strong>，比如自尊和成就行为</p><p>查明文化局限性或各种现象的普遍性，可以为理解所研究概念提供新的思路。</p><h3 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a>研究方法</h3><p>理论 -&gt; 应用-&gt; 评价-&gt; 研究</p><p><strong>理论</strong></p><p>提供了对稳定的人格类型和个人内心过程的描述。</p><p>他们解释了人格的机制，以及这些机制怎样导致了某人特有的行为。</p><p>在多数情况下，理论家都试图解释人格发展的差异，并描述使人格发生改变的途径</p><p>P13的图 每个理论家在描述人格本质的时候都必然要深入探讨几个问题。</p><ul><li>遗传影响与环境影响</li><li>意识决定行为还是无意识决定行为</li><li>自由意志与决定论</li></ul><p><strong>评价</strong></p><p>心理学家如何测量人格，取决于它们倾向于六种心理学派的哪一个。</p><p>准确的说，取决于他认为人格是什么。</p><p><strong>研究</strong></p><p>每个流派都做了大量的相关研究。</p><p>有些研究检验了处于本理论核心地位的原理和假设。</p><p>有些进一步考察了一种理论提出的某些概念。</p><p>不必完全理解很多研究方法，但是掌握假设——检验技术 和 少数几种常用方法会很有帮助。</p><h2 id="二、人格研究方法"><a href="#二、人格研究方法" class="headerlink" title="二、人格研究方法"></a>二、人格研究方法</h2><p>人格理论家思考别人的研究，做出自己的观察，然后解释人的行为的原因。</p><p>人格心理学家希望了解不止一位人格专家的观点，他们希望进行实证研究，他们希望通过研究检验理论做出的预测</p><p>理论本身只能提供部分情况，要理解人格的本质，还得考察心理学者从严谨的实证研究中得到的东西。</p><h3 id="假设——检验"><a href="#假设——检验" class="headerlink" title="假设——检验"></a>假设——检验</h3><p>一个大的理论，如弗洛伊德理论，汇集了大量更具体且对人格本质有共同假设的理论体系。</p><p>而研究者通常探讨的理论，其应用范围是比较狭窄的，具体的。</p><p>好的理论具有的特征：</p><ul><li>简约性，能解释现象的最简单的理论是最好的理论。</li><li>实用性，理论必须能提出可检验的假设，像“妖魔缠身”什么的就基本无用。</li></ul><p>理论是不能被证实或证伪的，只能通过研究得到多或少的支持，从而对科学工作者理解现象发挥大或小的作用。</p><p>一般流程是：根据理论-&gt;提出预测-&gt;进行检验。</p><p>操纵自变量与非操纵的自变量。</p><p>在非操纵自变量的情况下很难确定因果关系，研究者一般倾向于对自变量加以操纵。</p><p>但是有时候花费巨大、过于困难、违反伦理。</p><p><strong>事前预测与事后解释</strong></p><p>研究是为了支持假设才开展的。如果研究的结果与提出的假设一致，那么是可以支持的</p><p>但如果是在研究得出了结果以后再加以解释其实是站不住脚的，只能以此为基础提出新的假设。</p><p><strong>重复研究</strong></p><h3 id="个案研究法"><a href="#个案研究法" class="headerlink" title="个案研究法"></a>个案研究法</h3><p>对一个人（或几个人）进行深入考察</p><p>研究者详细记录这些人的经历、当前行为和在持续数年研究过程中发生的行为变化。</p><p>个案研究的资料一般是描述性的。很少作比较</p><p><strong>缺点</strong></p><ul><li>个体难以代表总体，个案难以向他人推论</li><li>难以确定因果关系，研究者寻找行为原因时必须谨慎。</li><li>研究者的主观判断常常妨碍科学的客观性</li></ul><p><strong>优点</strong></p><ul><li>没有抹杀个体的生活的丰富性。</li><li>研究一些罕见的个案：政治刺客、多重人格。</li><li>当研究者认为他们研究的个体<strong>在所考察的维度与正常人没有本质差别的时候</strong>。？？？？</li><li>在说明一种治疗方法时</li><li>为了证明一些可能性。</li></ul><h3 id="数据的统计分析"><a href="#数据的统计分析" class="headerlink" title="数据的统计分析"></a>数据的统计分析</h3><p><strong>统计显著性</strong></p><p>常用显著水平是0.05</p><p><strong>相关系数</strong></p><p>关于研究：</p><p>在任何有趣的问题上得出的科学结论都是通过一系列研究而不是某一项研究得出来的。</p><p>最近的研究发现仅仅代表了我们目前的知识状况。不顾及这种现状是不明智的，但是把它当作定论也不可取。</p><h3 id="人格评价"><a href="#人格评价" class="headerlink" title="人格评价"></a>人格评价</h3><p>计算测验分数的问题，人格心理学者应该考虑他们的测验得到的数字的可信程度。</p><p>很多情况下都要使用测验来准确地测量出他们感兴趣的概念。</p><p><strong>信度</strong></p><p>一项测验在多次测量中具有<strong>一致性</strong>，它就具有比较好的信度。</p><p>确定一致性地最常用方法是计算重测信度系数。 0.9差不多就足够了</p><p>另一个方面是<strong>内部一致性</strong>，就是看一项测验中地所有项目是不是测量同一主题，统计上有内部一致性系数的概念</p><p><strong>效度</strong></p><p>一项测验测出的东西在多大程度上符合原本要测量的东西，就是看有没有偏题嘛</p><p>但很多概念是假设的建构，用来描述那些不具备自然真实性的概念。幸好可以证明一项测验的建构效度。</p><ol><li>表面效度 主观判断是不是符合主题的。</li><li>相容效度 一项测验得到的分数与其他具有相同建构的测验之间的相关程度。</li><li>判别效度 指一项测验的分数与理论上无关的其他测量之间不相关的程度。</li><li>行为确认 用公认该建构可能出现的某些行为来加以检验，比如嫉恶如仇的人看不得别人插队。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、什么是人格&quot;&gt;&lt;a href=&quot;#一、什么是人格&quot; class=&quot;headerlink&quot; title=&quot;一、什么是人格&quot;&gt;&lt;/a&gt;一、什么是人格&lt;/h2&gt;&lt;h3 id=&quot;人与环境&quot;&gt;&lt;a href=&quot;#人与环境&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="psychology" scheme="https://darren-dong.com/categories/psychology/"/>
    
    
  </entry>
  
  <entry>
    <title>数据挖掘：理论与算法，导论性质课程</title>
    <link href="https://darren-dong.com/2021/07/04/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%EF%BC%9A%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <id>https://darren-dong.com/2021/07/04/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%EF%BC%9A%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/</id>
    <published>2021-07-04T12:38:51.000Z</published>
    <updated>2021-07-21T12:42:36.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、走进数据科学"><a href="#一、走进数据科学" class="headerlink" title="一、走进数据科学"></a>一、走进数据科学</h1><p>数据科学是一门博大精深的科学</p><p>本课程仅仅起到导读的作用！</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>有一些资源如下：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210704225407.png" alt="image-20210704225406813" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210704225416.png" alt="image-20210704225416077" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210704225444.png" alt="image-20210704225444114" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210718084113.png" alt="image-20210718084105880" style="zoom:50%;" /><p>还有企业级的的SPSS、SAP等等</p><p>开源数据库如下：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210718091757.png" alt="image-20210718091756846" style="zoom: 33%;" /><p>数据挖掘综合性也很强、设计模式识别、机器学习、人工智能、统计学等等</p><hr><p>它的应用或别名</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210718084222.png" alt="image-20210718084221966" style="zoom:50%;" /><p>要多做！实践性强</p><p>训练会思考的头脑，在思维上、视角上进步</p><p>如今数据类型越来越多，挖掘的信息也从片面走向多样 </p><p>定义：</p><p>从一般是大量、不完整、有噪声的数据中自动找到有趣、有用的隐藏模式的过程</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210718092147.png" alt="image-20210718092147516" style="zoom: 67%;" /><p>知识发现其实就是数据挖掘</p><p><strong>分类</strong></p><p>混淆矩阵</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210718093424.png" alt="image-20210718093424676" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210718094649.png" alt="image-20210718094649269" style="zoom:50%;" /><p>但实际问题中，不同错误权重应该不同！根据错误成本确定balance</p><p><strong>聚类</strong></p><p>层次性聚类，不同层面分组不同</p><p>各种距离（传统的是欧氏距离）</p><p><strong>关联规则！</strong></p><p>线性回归</p><p>发挥人的可视化优势</p><p>数据挖掘注意可解释性</p><p>处理才是最难的hh</p><p>如今需要数据+并行算法+高性能平台+领域知识</p><p>才能支撑大数据时代的数据挖掘</p><p>没有最好的算法，参数也无法确定，经验非常重要，根据目的选择算法，够用就行，不追求高端</p><p><strong>迷雾重重</strong></p><p>数据挖掘要有东西可挖，必须有规律可挖</p><p>数据可能存在有内在分组的关系，小心宏观思维扰乱</p><p>相关 ≠ 因果</p><p>人们的心理因素（主观、不可控因素）</p><p>幸存者偏差等分析错误，数据是不全面的， 看的角度要全面，多层次！</p><p>图中忽略了时间因素，x和y的顺序不明，单向思维，这和经济学强调的很像</p><p>You can’t be too careful</p><h1 id="二、数据预处理"><a href="#二、数据预处理" class="headerlink" title="二、数据预处理"></a>二、数据预处理</h1><p>非常繁杂，脏活累活</p><p>离群点 ≠ 异常点  离群点分析注意距离的<strong>相对性</strong>！</p><p>重复数据的检测要考虑背景知识，考虑同类数据的不同存储方式如何归并</p><p><strong>类型转换</strong></p><p>continuous   discrete  序数型ordinal（high、average、low）  string</p><p>标称型nominal（teacher、worker、salesman）最纠结的，编码也暗含一些特征，编码会造成结构上的不同</p><p>如果不知道隐含结构，就拆成维度高的数据（扩维法）</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210718175631.png" alt="image-20210718175631019" style="zoom:33%;" /><p><strong>采样</strong></p><p>统计学采样是因为数据昂贵</p><p>大数据的采样是因为数据太多，有成本限制</p><hr><p><strong>不平衡的数据集</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210718175957.png" alt="image-20210718175957131" style="zoom:50%;" /><p>整体正确率的概念并不适用于不平衡的数据，对极度不平衡的二分类，应特别注意少数类样本的准确率</p><p>有几个解决方案👇</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210718180045.png" alt="image-20210718180044997" style="zoom:33%;" /><p>按照某种方法生成较少的点</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210718180254.png" alt="image-20210718180254674" style="zoom:50%;" /><p>边缘生成（边缘的点意义更大）</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210718180310.png" alt="image-20210718180310819" style="zoom: 33%;" /><p>标准化，映射到同一区间（有明确上下限）</p><p>如果没有明确上下限就用Z-score 偏离来看</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、走进数据科学&quot;&gt;&lt;a href=&quot;#一、走进数据科学&quot; class=&quot;headerlink&quot; title=&quot;一、走进数据科学&quot;&gt;&lt;/a&gt;一、走进数据科学&lt;/h1&gt;&lt;p&gt;数据科学是一门博大精深的科学&lt;/p&gt;
&lt;p&gt;本课程仅仅起到导读的作用！&lt;/p&gt;
&lt;h2 id</summary>
      
    
    
    
    <category term="data" scheme="https://darren-dong.com/categories/data/"/>
    
    
    <category term="数据挖掘" scheme="https://darren-dong.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>证券投资管理</title>
    <link href="https://darren-dong.com/2021/07/02/%E8%AF%81%E5%88%B8%E6%8A%95%E8%B5%84%E7%AE%A1%E7%90%86/"/>
    <id>https://darren-dong.com/2021/07/02/%E8%AF%81%E5%88%B8%E6%8A%95%E8%B5%84%E7%AE%A1%E7%90%86/</id>
    <published>2021-07-02T11:43:42.000Z</published>
    <updated>2021-07-02T12:39:21.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="证券投资基础"><a href="#证券投资基础" class="headerlink" title="证券投资基础"></a>证券投资基础</h2><p>投资的内涵</p><ol><li><p>要用一定量的货币</p></li><li><p>是一种延迟消费</p></li><li><p>将货币转换为一定资产的过程</p><p>转换为实物资产可以增加社会经济总量，但是金融投资不会增加（预期未来），因此不被经济学认可</p><p>金融投资买股票，股价反映的是对未来的看好，而不是现在或过去</p></li><li><p>需要一定的持有时间并且承受可能的风险</p></li></ol><p>广义投资：</p><p>经济主体（企业或个人）为了获得未来收益而垫支资本转换为资产的过程，这一过程的结果因存在风险而呈现不确定性</p><ul><li><p>实体投资：对固体资产和流动资产的购置（狭义投资）</p><p>社会财富和经济总量的增加</p></li><li><p>金融投资：投资者为获取收益 让渡资金使用权 以获得收入的过程</p><p>投资结果表现为金融资产价值的增减</p><p>现在一般要进行大的实体投资，离不开金融投资</p></li><li><p>知识投资：通过购买人力资源或支付教育经费而增加企业价值和劳动者收益的过程</p></li></ul><p>这节课主要是金融投资，也会剖析金融投资与实体投资的 联系👇</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210702201912.png" alt="image-20210702201912147" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210702202124.png" alt="image-20210702202124346" style="zoom: 50%;" /><ol><li><p>直接金融投资：</p><p>投资者直接购买股票、债券等基础证券，通过买卖获得收益的投资方式。</p></li><li><p>间接金融投资</p><p>投资者不直接购买股票债券等基础债券，而是通过购买基金份额、期货、期权、权证等金融衍生品、信托产品而获得收益的投资方式</p></li></ol><ul><li>证券持有方式不一样</li><li>开股东大会的权力不一样</li><li>了解公司的经营信息不一样</li></ul><p><strong>证券</strong></p><p>持有人有权依证券所记载的内容取得相应权益并具有法律效力的凭证</p><ul><li><p>无价</p><p>无价值、不讨论，可以是对某一种事项或者权能的凭证</p></li><li><p>有价</p><p>本身没价值，有价格（收益权）所以叫虚拟证券，代表一定的所有权，指的是持有部分资产</p></li></ul><p>虚拟资本发展越健康，就越能引导实体资本的合理配置</p><p>而实体资本创造的增值价值，是虚拟资本存在的基础，但它具有相对的的独立性，所以有时候虚高，泡沫</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210702203802.png" alt="image-20210702203801879"></p><p>资本市场证券一般短期，资本证券一般比较长</p><p>证券特征：</p><ol><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;证券投资基础&quot;&gt;&lt;a href=&quot;#证券投资基础&quot; class=&quot;headerlink&quot; title=&quot;证券投资基础&quot;&gt;&lt;/a&gt;证券投资基础&lt;/h2&gt;&lt;p&gt;投资的内涵&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;要用一定量的货币&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;是一种延迟消</summary>
      
    
    
    
    <category term="finance" scheme="https://darren-dong.com/categories/finance/"/>
    
    
    <category term="投资" scheme="https://darren-dong.com/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>《十年一梦》</title>
    <link href="https://darren-dong.com/2021/06/15/%E5%8D%81%E5%B9%B4%E4%B8%80%E6%A2%A6/"/>
    <id>https://darren-dong.com/2021/06/15/%E5%8D%81%E5%B9%B4%E4%B8%80%E6%A2%A6/</id>
    <published>2021-06-15T03:22:57.000Z</published>
    <updated>2021-07-20T12:28:17.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十年一梦"><a href="#十年一梦" class="headerlink" title="十年一梦"></a>十年一梦</h1><p>第一篇<strong>读书笔记</strong>，我也不知道该咋写。。随便记几点好玩的吧</p><h2 id="序1-唯有事实"><a href="#序1-唯有事实" class="headerlink" title="序1 唯有事实"></a>序1 唯有事实</h2><p>我们的认知需要建立在确切的<strong>事实</strong>上，不然就是无根之萍。事实应该包括两个方面，一个是我们自己，另一个是我们所面对的对象，在面对市场的时候，通常假定谁也改变不了市场，只能适应市场，因此我们更有理由重视“自己”</p><p>我们通常忽略自己，但是这是致命的错误，<strong>我们应该主动适应市场</strong>，成为行动的主体但是要认清自己实在是太难了，我们一言一行对周围的影响远超我们的外观。然而我们对这方面<strong>缺乏足够的参照物</strong>，在社会上，这些后果需要相当长的周期才能看得到，以至于我们可能忘记了前因后果，更何况大部分人总是缺乏反思和改正的想法。</p><p>对于学习市场操作，其实很不错，因为反馈是即刻的，这对于认知自己非常有效，但是我们要注意改进和纠正</p><p>另一方面，认清我们面对的对象也并非易事，每个人都有特定而局限的角度和立场，而这些不一定是最佳的，更不可能是全面的，甚至还随时间而改变。关于对象，我们获得的信息也总是滞后、有限的，观察方法和工具也受到时代的限制和自身能力的限制。</p><p>因此，获取事实是艰难的，但是这也是人生的主课，需要我们持续学习、领悟、突破。</p><p>这对初入社会的大学生是一个巨大的考验，光凭自己的人生经验和脑子，很难不吃苦头。</p><p>不要成为环境的奴隶，被各种情绪和刺激占据了所有的心思，做出过度的反应，而是要保持平静，认清这些事实，<strong>不应该预设某种态度</strong>，<strong>应保持思想的开放而不带着偏见</strong>（我感觉我最近偏见有点多了），但是这是十分占据时间精力的，我们要精挑细选有价值、有意义的刺激，而记住，<strong>刺激的重要程度并不和刺激的强度成正比</strong>。</p><p>做人做事从观察事实开始，进而采取行动；在行动过程中，还得持续观察行动的实际效果，反过来调整和修正行动。得到的事实越少，则虚妄的成本越多。</p><p>建议多读《大学》《中庸》《论语》《老子》，还有《周易》！具有极高的实践性，特别是针对个人行为的管理和塑造。尤其适合投资交易者，关键在自己能不能应用。还有就是研究实际案例。</p><p>第二本书《期货交易的策略与技巧》</p><h2 id="前言-艰难的路"><a href="#前言-艰难的路" class="headerlink" title="前言 艰难的路"></a>前言 艰难的路</h2><p><strong>期货交易是一条艰难的路</strong></p><p>不要小看期货交易的艰难性，两三年，甚至十年都是远远不够称得上是精通交易、战胜市场的，更别说孔子先生所说的“从心所欲不逾矩了”。</p><p>青泽先生认为的难点：</p><ol><li><p>理解、把握市场价格波动的特征难</p><p>最刻骨民心的莫过于市场价格的反复无常、神秘莫测，不确定性、随机性。</p><p>很多市场参与者都有一种认知误区：<strong>追求交易的确定性，把科学的思维简单应用到投机交易中，以为预测是市场交易的全部，希望找到一种科学的预测理论，但是这所谓的科学方法主张的严密和正确，其实很多时候不但无用武之地，还可能成为成功的障碍。</strong></p><p>当然，很多预测工具（比如波浪理论）确实很常用，有价值，但是不要把期货投机当作一门科学，事实上，什么理论都无法保证我们的交易和市场走势。</p><p><strong>投机领域充满了辩证法，模糊和缺陷是美，追求完美恰恰背道而驰</strong>。</p><p>要深刻的理解、把握市场价格偶然性和必然性的关系。</p><p>青泽的体会：<u>市场价格运动表面看起来往往是一个偶然性接着另一个偶然性，但是在看似完全偶然的背后，市场也不是完全混乱无序，隐隐约约透露出一定的必然性或者说是趋势性。投机成功的核心就是要去追求，把握这种必然性。</u>，交易高手就是能够从表面上看来不确定、随机的市场波动中找到相对确定、比较有把握的机会，知道什么时候<strong>成功的概率高，比较有利，什么时候静观其变</strong></p><p>从抽象的层面、事后的角度我们可以看清规律，但是对于未来，需要投机者有客观、定量、科学的理性分析能力，也要有灵活、变通、前瞻的艺术、直觉，这耗费的代价和磨练远超人们想想</p></li><li><p>良好的风险管理难</p><p>市场不确定性、随机性的一面决定了投机永远有<strong>博弈的成分</strong>，不可能有科学系统的预测理论。</p><p>良好的风险管理是投资者的立身之本。</p><p><u>期货交易既是一门赢的艺术，更是一门控制风险的输的艺术</u></p><p>成功的投资者在交易中能做到严格控制损失，<strong>即使砍掉亏损部位</strong>，对盈利头寸则做到了尽可能地扩大战果</p><p>短期的走势偶然性、人为性，投机者的贪婪、恐惧等心理因素，是的投机者找到适合自己的风险管理策略并非易事，但是无论是怎样的交易方式，短或长，感性、程序化，都要坚持几个原则：</p><ul><li>任何一笔交易都不要出现大的损失</li><li>一如既往的采取试探——加码的交易策略</li><li>在行情走势和自己的判断不一致时迅速止损，一致时逐步加仓，扩大利润</li></ul><p>青泽把期货交易的盈利模式分为两类：仓位取胜（博弈型）、幅度取胜（趋势性），但核心一样。</p></li><li><p>了解自己、战胜自己难</p><p>在某种意义上说这是一个心理游戏，投机者应该做出正确的决策而不是舒服的决策，心理上舒服的决策结果往往很不好，遵守交易技术和资金管理策略，不要被情绪左右。</p><p>从交易之道到市场行为，隔了 知（了解），情（心理认同），意（执行的意志力），这三者的合力才能决定行为是否理性。</p><p>技术和基础知识其实一两年就够了，但是稳定、良好的心态和境界，这可能是一辈子的事</p></li></ol><p>关于期货最好的忠告：在开始之前就停止行动</p><p>有奇迹的故事，更有数不胜数的尸骨和黯然的退场</p><p>市场交易是残酷、险恶，梦醒之后，也不要忘记当年的热情和豪言壮志（我的热情还没开始呢！</p><p>青泽先生的前言绝对是一篇难得的好文章。</p><h2 id="一、命运之门"><a href="#一、命运之门" class="headerlink" title="一、命运之门"></a>一、命运之门</h2><p>人的命运可以自己选择吗？可以，你可以走你愿意走的路。</p><p>但是，一旦你上了路，回头恐怕就没有那么容易了，人生的许多事情都无法重来一次。</p><p>人生就像一个怪圈。有些年轻时候认为无足轻重的问题，年龄大后可能觉得很重要，比如一个人的修养、个性、习惯等；有些年轻时认为很有意义的事，以后看来往往没有想象中那么有价值，比如年轻的时候某种特别的兴趣和爱好等。</p><p>索罗斯：“你不可能随心所欲，有在市场中有良好的表现”，青泽被迫杀死桀骜的自己，自我超越后重生。</p><p>一念之差，一面是个哲学领域的教授、学者。一面是专业投资家，睿智的赌徒。</p><p>（我的话，如果我想的不多，我可能被迫成为一个维护、产品人员，如果我想的稍微有点多，我可能会成为一个全栈专家，如果我再想的多一点，我可能会转行金融，但现在，我走的是数据科学之路，艰难的路hh）</p><p>作为一个期货交易员，悠闲自在的假象后，时市场的不确定性和巨大的资金量带来的精神压力</p><p><strong>期货是浓缩的人生</strong>，交易世界和现实生活有着如梦如幻的巨大反差</p><p>当时头脑精明点就能赚到钱，大部分人都是先扎进去，然后才开始了解基本知识，现在的股市就凶险了许多，人们的整体素质高了不少，难度暴增。</p><p>大多数涉足股市的新手，只要在股票上赚过一次钱，就会被吸引住，从此欲罢不能，沉迷上瘾。心乱了</p><p>一次偶然的急于，让他成为公司的操盘手，即使当时毫无投资理念和策略，但这就是时代和命运。</p><p>这给了他坐着一个巨大的发展机会，也让他的人生充满跌宕起伏，承受了许多常人无法体会的坎坷磨难。曲折的经历，平淡的人生，都在羡慕着彼此。</p><h2 id="二、一个与众不同的赌徒"><a href="#二、一个与众不同的赌徒" class="headerlink" title="二、一个与众不同的赌徒"></a>二、一个与众不同的赌徒</h2><p>股票市场要赚大钱，不仅要靠知识，也要靠信念；不但要靠智慧，也要靠胆量。你敢赌吗？</p><p><strong>新手的运气往往很好</strong></p><p>有观点：新手想要在投机市场中赚钱，最佳策略时找机会大赌一次，而经验丰富，有胜算和有势的人反而应该注意控制资金，减少偶然性运气的影响。<strong>投机是一个大多数人必输的游戏。</strong></p><hr><p>青泽说：</p><p>西方发达国家证券市场诞生的意义来自经济发展的内在需要。有人需要筹集成本，有人希望投资，这是一个公平、高效的互惠互利、各取所需市场。</p><p>中国早期股市却打上了深深的中国特色烙印，为国有企业融资解困。因此判断国内市场我们既要看内在的市场规律，更要高度关注政治、决策的态度，这样才能提高投资的胜算。</p><ol><li><p>用政治眼光来审视股票市场，抓住市场可能出现的重大变化。</p><p>青泽认为在未来相当长的一段时间内仍是政策市，因此股票市场一点出现过于离谱的暴涨暴跌，就随时可能出现外在的力量左右市场走势，回到社会政治所能容忍的范围内。<strong>政治敏感度极其重要。</strong></p></li><li><p>抓住大行情可能来临的机会，长线交易，重仓交易，不贪小利，迷恋股市，整天炒来炒去。</p></li><li><p>绝不染指垃圾股，这些股票甚至在大牛市都没有出头之日。</p><p>分散投资是减少垃圾股上海的一个简单策略。</p></li></ol><hr><p>恒通的出市代表让他明白了大公司的策略和算计。</p><p><u>重价不重势——典型的外行炒股手法。</u></p><p>倾尽全力抄底的朋友，有着社会背景，20岁有了许多白发，最后大赚。</p><hr><p>作者有了一些新的认识：</p><p>如果股市波动时循环的，而长远看指数一直在稳步上涨，那么，投机者的操作只要稍稍聪明一点，不太干愚蠢的事，在一定意义上，股票交易其实一点风险都没有。作者希望投机者深入透彻地思考👇：</p><ol><li><p>操作手法问题。大利润一定来自于大的市场波动</p><p>要有足够的耐心等待永恒的牛熊循环，不要整天频繁的短线交易，在市场地无需波动中迷失自我</p></li><li><p>投机者的市场信念问题</p><p>巴菲特：“利润有时候往往来自对市场的愚忠”，对市场没有坚定信念的任，往往拿不住很有可能带来巨大回报的仓位，不能获得市场重大波动的利润。但是还是得远离垃圾股。</p></li><li><p>参与股票交易的投资者，对市场指数高低要有一些基本常识，不能犯太离谱的错误。</p><p>但是指数的高低总是相对的，判断起来不是简单的问题。</p></li></ol><hr><p>股票终究不是真正的赌场，背后有企业、业绩、国家政治的影响。</p><p>股市大跌后再买入，耐心等待下个牛市，这是一种常识，但遵循这个简单的真理却十分困难。</p><p>对市场短期走势过于在意，就不宜涉足股票市场。</p><p>通过抓住重大趋势波动来赢利的交易模式，只是一种策略，需要眼光、胆识、魄力和长线持仓的勇气。</p><p><u>对于操盘手来说，一两次交易中出现亏损是非常普通的事情，但是面对重大的历史机遇，在锐利的行情中只赚了小钱，这种错误是无法原谅的。</u></p><h2 id="三、误入“期”途"><a href="#三、误入“期”途" class="headerlink" title="三、误入“期”途"></a>三、误入“期”途</h2><p>我刚玩炒币就误入了hh</p><p>我被自我一次次打倒，却不知道敌人在哪里。</p><p>在股票、期货这个弱肉强食的市场，大多数散户投机者的命运，就像天空中一只断了线的风筝，一会上升，一会儿下降。散户的资金、心理承受能力、市场经验决定他们注定是被动的牺牲品。在一个不规范的市场中，主力们只要略使小计，就能杀绝大部分跟风者</p><p><strong>如果股票是抽烟，那么期货就是毒品</strong>——我深有体会</p><p>期货投机的魔力在于，对于单独某一次交易，即使是赌博，也有50%赢的可能。</p><p>尽管从账面上看，很多人的本金在一天天减少，但是偶尔的几次交易赢利，会使大多数投机者产生一种幻觉，迟早能重新赚回来，还有暴富的机会。但能赚回损失的人是少数。</p><p>短期交易没有什么道理可言，也无从分析，只是凭着感觉对市场波动做出反应。这样的人往往成了市场短期波动的俘虏，思维、情绪被支配，变得不由自主，控制不了自己的交易冲动，不愿失去一切交易机会，过度敏感。</p><p>赚的时候，幻想一直保持，亏的时候十分沮丧，但是一旦进入下一次交易，不佳的心情就被忘记。</p><h2 id="四、绝处逢生"><a href="#四、绝处逢生" class="headerlink" title="四、绝处逢生"></a>四、绝处逢生</h2><p>327之战。</p><p>这是作者的运气，但是也是作者的经验告诉他选择哪一边。</p><p>也许是年龄增长，市场中经历过的偶然性太多了，很多事情的评价标准有时反而变得模糊了。青泽先生现在也不能完全确定当初自己的举动（全仓多头）是疯狂、鲁莽还是大胆、勇敢。这取决于角度。</p><p>毫无疑问，这种重仓交易、以命相搏的交易手法是自取灭亡之道。</p><p>尽管有时候保守和谨慎可能是一种束缚人的枷锁，短期会拖投机者的后腿，但是长远来看，保守、谨慎、稳健无疑是期货交易者的立身之本。</p><p>一旦一个人获得了如此辉煌的战绩，无论旁观者还是他自己，都会有意无意地把这种成功归功于投机者的主观因素，而对事情发生偶然性的一面选择性忽略。</p><p>对于一个职业投机客来说，交易是一条漫长地路，局部的输赢犹过眼云烟，实在是一件无足轻重地小时。过于拘泥某一笔交易地得失，对此痛心疾首或津津乐道，并非是一种聪明、理智的态度。只能说认识浅。</p><h2 id="五、苦闷的求索"><a href="#五、苦闷的求索" class="headerlink" title="五、苦闷的求索"></a>五、苦闷的求索</h2><p>哲学家必须从感觉世界的”洞穴“上升到理智世界</p><p>当年并无多少关于投资理念的书。</p><p>投机新手最关心的是短期的变化。</p><p>作者被所谓的”科学预测“思想坑了好多。成功归功”技术“、失败归咎于自己。</p><p>但是一个人总不可能平白无故地进行行动，他需要某种行为方式和标准，至于这种权威是否可靠并不重要，不然这会让他面对波动不知所措。</p><p>对期货交易本质的人是是一个渐进的过程。任何一个市场新手，总以为成功的关键是找到一套科学的预测理论。<strong>从预测制胜到重视资金、仓位的风险管理到心理、人生修养是一条漫长而痛苦的路。</strong></p><p>短期交易，迷惑人的心智，其实是赌博罢了。</p><hr><p><u>青泽现在的认知：不可能有预测制胜，没有人能精确地预测市场的未来变化。</u></p><p>市场交易是一个动态、系统的控制过程。理解价格变化、判断未来走势只是成功交易的一个不是最重要的环节</p><p>在实际操作中：</p><ul><li>每一次交易投入的资金多少</li><li>情况不利时如何处理，有利时如何加码</li><li>价码后出现有利、不利情况如何应对</li><li>影里的交易怎样既不由赢转亏，又不丧失一旦市场大波动带来的暴利等</li></ul><p><strong>这些问题的应对技巧、策略、方法，远比希望准确预测走势重要得多，需要投机者有一套完整、系统的交易思路。</strong></p><hr><p>确实，在大行情下的急剧波动，不论多空其实都无安宁。</p><p>据好事者统计，当年在股票、国债期货市场上赚过大钱的人，90%的结局都不太妙，这反映了一些东西。</p><p><u>投机市场中，一个人偶尔可以赚大钱也许并不难，难的是一直稳稳当当地赚钱，而且守得住钱。</u></p><p><a href="https://baike.baidu.com/item/%E7%AE%A1%E9%87%91%E7%94%9F/10343491">管金生</a></p><p>他们藐视法律，操纵行情，玩弄市场。</p><p>中经开的营业部令人向往——神奇的部门</p><p>早期国内股票市场、期货市场，市场操纵横行，政府法规朝令夕改，普通投机者生存环境十分恶劣，在这样的情况下，已经不能完全的归结于投机者自身的内在原因，外界因素几乎对投资者的命运起到决定性的作用</p><h2 id="六、纸上富贵一场梦"><a href="#六、纸上富贵一场梦" class="headerlink" title="六、纸上富贵一场梦"></a>六、纸上富贵一场梦</h2><p>1995，国债期货叫停，游资转战上海、深圳股票市场。</p><p>一次典型的纸上富贵——两鸟在林不如一鸟在手，但是谁有真正看得清这一点呢。</p><p>鞍山信托的一枝独秀——庄家也可能犯错。</p><p>市场里，没有庄家，往往走势清淡乏味。投机者没有机会</p><p>但是庄家来了以后兴风作浪。谁都不可能独善其身，包括庄家自己。</p><h2 id="七、单纯与复杂"><a href="#七、单纯与复杂" class="headerlink" title="七、单纯与复杂"></a>七、单纯与复杂</h2><p>——交易有那么难么</p><p>在成千上万的交易后，总的结果取决于投机者综合实力和心理优势，而不是一两次的市场预测能力。</p><p>在实际交易中，投机者会面临巨大的心理、精神压力，这是一个股评家不能完全了解和体会的。</p><p>一旦建立头寸，趋势就不像原先一般客观、超然、自信，你的恐惧、焦虑、患得患失等主观因素很有可能扭曲你的思维，使你陷入混乱。你当初的判断完全准确，但是你没有从中赚到钱。</p><p>不要依靠盘面变化和市场感觉、本能杀进杀出，这是缺乏理性的，也缺乏外在的客观约束。</p><p>要从长远分析市场状态和下一步变化的可能。看大势，理性审视。</p><p>在期货交易中，如果投机者入市后三天都没有出现利润，立刻平仓出场。</p><p>作者的第一个月大获成功，他在日后也感慨那段时间的美妙和带给他的信心，他总结：</p><ol><li><p>精神、心理条件非常好。</p><p>保持谨慎的态度，反复思考，再三权衡。</p><p>不要奢望一夜之间赚大钱，不要被急躁、贪婪的欲望支配。</p><p>没有交易的损失，没有历史包袱，不会畏手畏脚，在需要大胆行动时犹豫不决</p></li><li><p>中线顺势操作</p><p>中线顺势交易是期货赚钱的最佳策略</p></li><li><p>严格的风险控制</p></li><li><p>加码策略</p><p>试探-加码策略。在第一次投资后，如果市场走势证明判断错误，立马离场。否则便一次次加码，即使资金量不大，这样总能赚大钱，亏小钱。</p></li><li><p>时代和运气</p></li></ol><h2 id="八、兵败苏州红小豆"><a href="#八、兵败苏州红小豆" class="headerlink" title="八、兵败苏州红小豆"></a>八、兵败苏州红小豆</h2><p>当你将身体交给一个陌生人任意处置，你一定会感到愤慨。那么，当你将自己的精神交给一个偶遇者任意处置时，你难道不感到羞愧吗？</p><p>许多投机大师都反对利用内幕消息交易，认为这是投机者自我毁灭的捷径</p><p>因为急于翻本，作者被负面情绪支配，越做越赔，越赔越做。</p><h2 id="九、与天为敌"><a href="#九、与天为敌" class="headerlink" title="九、与天为敌"></a>九、与天为敌</h2><p>重仓交易的危害</p><p>以安全性为代价追求收益率最终往往是得不偿失的。——本杰明</p><p>在期货交易中，一个人的心理、精神状态远比他拥有的市场知识和预测技术重要得多</p><p>作者准确的把握了几次做大钱的趋势，但却被短线思维所害，无法贯彻中长线交易的策略和原则。这是一种从“中长线”开始衍生出的一系列思维模式吧</p><p>损失和痛苦的经历，使作者内心世界发生了重大变化，在精神、心理、情绪方面扭曲、混乱，耐心、忍耐力大幅减弱，急功近利；</p><p>害怕自己到手的利润得而复失，不愿继续等待利润自然而然地增长，不断换市场。仿佛非常忙碌，但一无所获</p><p><strong>经验不是你经历过什么，而是你从经历中学到了什么，包括别人的经历</strong></p><p>期货的成功建立在一个非常危险的观念之上，就像脆弱地基上的大楼，来的快，去的也快。</p><p>P114生动的讲述了作者在面对期货起落的精神状态，和我，和赌徒一模一样。</p><p>来自十年后的反思：</p><ol><li><p>对于大多数人来说，即使拿出五分之一的资产来从事期货投机，也是危险的</p><p>保守、胆小的行为其实是高瞻远瞩，胆大妄为的重仓交易，早晚会在市场中牺牲。</p></li><li><p>坏习惯“钱烧口袋漏，一有就不留”</p><p>交易的姬会不是每天都有，不能凭想象行事，否则就是不尊重市场，将会受到市场的惩罚</p></li><li><p>在期货市场可以赚大钱，但需要时间，量的积累带来质的飞跃</p><p>重仓交易者企图战胜时间的束缚，一夜暴富，辉煌的成功靠的是以命相搏，一次意外就可能彻底失败。</p><p>真正成功的人，要么是拥有极其强大的意志，在赌赢后果断离场，要么靠的是长期、稳定的赢利。</p></li></ol><p>索罗斯：</p><ul><li>相对于近期赢利，我更关心基金资本的安全</li><li>我主要还是着眼于限制亏损，而不是牟取暴利</li></ul><h2 id="十、激战海南咖啡"><a href="#十、激战海南咖啡" class="headerlink" title="十、激战海南咖啡"></a>十、激战海南咖啡</h2><p>面对诱惑，人的记忆力总显得太弱</p><p>期货市场本应是用来规避风险的地方，然而，曾几何时，在国内的一些交易所，期货却成了制造风险，激化矛盾的东西。</p><p>海南咖啡交易的几大特点：</p><ol><li><p>咖啡纯粹只是个符号被炒作</p><p>它托利里基本面因素和供求关系的制约，谁也不知道内在价值是多少。</p><p>没有人想阵得买进咖啡，投机者的唯一目的是赚取市场差价，最终结果是金钱的重新分配而已。</p><p>这不就是数字货币的雏形吗</p></li><li><p>波动巨大，虽然比不过炒币</p></li><li><p>波动方式诡异，凶狠，残酷</p><p>常规的风险控制措施不管用，绝对不能出现方向性的措施，连续性的跌涨停板，没有逃命的姬会。</p></li><li><p>市场主力争斗你死我活、白热化</p><p>大量非市场因素参与其中</p></li></ol><p><strong>方向判断准确只是交易成功的第一步，并且可能不是最关键的一步。</strong></p><p><strong>赚大钱最主要的是投机者需要有大的耐心和忍耐力，面对短期波动的不确定性、反复无常，要坚定自己的市场信念。</strong></p><p>能否抵御市场短期波动的威胁、七篇，是顺势交易最令人头疼而不得不面对的现实问题。</p><p>K线完全是形而上的思维方式，用静止，片面而孤立的观点看待市场，一叶障目，应该从整体，全局，的角度看待。</p><h2 id="十一、逆势操作的反思"><a href="#十一、逆势操作的反思" class="headerlink" title="十一、逆势操作的反思"></a>十一、逆势操作的反思</h2><p>你不可能靠风向标致富——巴菲特</p><p>比起重仓的谨慎，逆势者像温水里的青蛙，慢慢丧命。</p><p>大多数情况下，市场的趋势运动是温和、缓慢演变的，趋势都不是很明显，具有偶然性和随机性</p><p>所以逆势操作有可能也能赚到钱，因此其巨大危险性不易察觉，直到大势到来，恶果就暴露无遗。</p><p>一般来说，操纵者并不怕市场对手，他们更怕法律和市场监管。期货市场不完善和监管缺失，使他们有机可乘，那么数字货币呢？</p><p>这些折戟的精英们，每一件失败的事都有大量的偶然因素，但是偶然背后也有必然的一面，他们有一些共同的特点：</p><ol><li><p>自负和贪婪</p><p>大多数人似乎总是高估自己的判断力，过于自负</p><p>如果一个投资者顺势交易，他往往觉得自己没有格调，不能证明自己，一旦被套住他会觉得自己愚蠢，一旦成功他会给予自己极高的评价。</p><p>当自负和贪婪集中在一个人身上，尤其是掌握巨额资金的大人物身上，悲剧就开始上演了。</p></li><li><p>侥幸</p><p>心理学预期认为：失败的时候我们是风险的爱好者，有盈利时我们是风险的厌恶者。</p><p><strong>大多数人都是这样，赚小钱、亏大钱，刚好与正确的交易原则相反。</strong></p><p>其实，任何巨大损失的造成，除了突发性消息引起的个别意外情况，一般有从到质变的过程。</p><p>没有人能避免错误，我们能做的只有——止损原则。</p></li><li><p>虚荣</p><p>处于自我保护和虚荣的本能下，不愿让别人知道自己犯的错误。</p><p>一大群投机者在牛市做空的原因：</p><ol><li>市场行情看似是高估的</li><li>市场行情的矫正时间到了</li><li>他们听到一个看跌的消息，认为价格将会下跌</li><li>消息</li></ol></li></ol><p>人们不愿反思、正视自己的弱点，不愿承认因为缺乏自我约束而犯下的愚蠢错误，故意遗忘掉那些令人不快的痛苦经历。</p><p>理由是：</p><ol><li><p>短线交易方式隐含的天然缺陷</p><p>过于注重细节的人，往往对大事情一无所知</p></li><li><p>总比市场慢一拍的思维</p><p>总以为历史会简单的重复</p></li><li><p>作者迷失在短期波动的大海里</p><p>投机者很容易沉溺短线思维而失去超然的思维，让投机者不知不觉中，稀里糊涂地变成了一个逆势交易者</p></li><li><p>市场趋势会反弹吗？——思维陷阱</p><p>任何一个市场趋势一旦明朗，市场价格往往已经涨跌了相当幅度。</p><p>在这种情况下，市场趋势随时反转的可能性并非不存在。一般人很难不折不扣地遵循顺势投资地原则，就是怕趋势反转。</p><p><strong>在市场交易中，投机者应该做出正确地决策，而不是做出让自己感觉舒服的决策。</strong></p><p>从作者的经验看，做出顺势交易从心理上看明显难很多</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;十年一梦&quot;&gt;&lt;a href=&quot;#十年一梦&quot; class=&quot;headerlink&quot; title=&quot;十年一梦&quot;&gt;&lt;/a&gt;十年一梦&lt;/h1&gt;&lt;p&gt;第一篇&lt;strong&gt;读书笔记&lt;/strong&gt;，我也不知道该咋写。。随便记几点好玩的吧&lt;/p&gt;
&lt;h2 id=&quot;序1-唯有</summary>
      
    
    
    
    <category term="finance" scheme="https://darren-dong.com/categories/finance/"/>
    
    
    <category term="炒币心理" scheme="https://darren-dong.com/tags/%E7%82%92%E5%B8%81%E5%BF%83%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数据科学导论</title>
    <link href="https://darren-dong.com/2021/06/12/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA/"/>
    <id>https://darren-dong.com/2021/06/12/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA/</id>
    <published>2021-06-12T12:33:45.000Z</published>
    <updated>2021-06-15T12:40:04.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据科学导论"><a href="#数据科学导论" class="headerlink" title="数据科学导论"></a>数据科学导论</h1><h2 id="1-基础理论"><a href="#1-基础理论" class="headerlink" title="1 基础理论"></a>1 基础理论</h2><p>数据富足时代——大数据时代</p><ul><li>现代处理器功能增强，密集度up</li><li>存储、管理成本降低，新的存储技术使得数据运行更快，规模up</li><li>跨计算机集群分布计算处理能力，提高了分析复杂数据的能力</li><li>有更多业务数据集可供分析，而且大部分提供了API</li><li>机器学习算法的开源社区日渐庞大</li><li>可视化更容易使用</li></ul><p>很多过去的研究方法和理论思维有明显的“面向数据贫乏时代”特点，不再适用</p><h3 id="1-1-术语定义"><a href="#1-1-术语定义" class="headerlink" title="1.1 术语定义"></a>1.1 术语定义</h3><p>数据、信息、知识、智慧</p><p>结构化数据、半结构化数据、非结构化数据 （可否用传统关系数据库存储）</p><p><strong>结构化：先有结构，再捕获数据</strong></p><p>4V： Volume  Variety  Value  Velocity</p><p>涌现：质变</p><p>理解数据科学：现实映射到数据，研究问题，对现实进行预测、洞见、解释、决策</p><h3 id="1-2-研究目的"><a href="#1-2-研究目的" class="headerlink" title="1.2 研究目的"></a>1.2 研究目的</h3><p>最终目标：实现数据、物质、能量间的转换，降低后两者损耗、提高后两者效果和效率</p><p>具体：</p><ul><li>揭示大数据内容，元数据特征、规律，帮助人们理解大数据的本质特征</li><li>从数据到智慧的转换 P11</li><li>数据洞见：将数据转化为实际行动</li><li>数据业务化</li><li>数据驱动型决策支持，将数据当作驱动方式</li><li>数据产品研发：<strong>0-3次数据 原生 干净 增值 洞见数据</strong></li><li>数据生态系统建设<ul><li>数据生产</li><li>数据采集</li><li>数据处理</li><li>业务流程</li></ul></li></ul><h3 id="1-3-研究视角"><a href="#1-3-研究视角" class="headerlink" title="1.3 研究视角"></a>1.3 研究视角</h3><p>原本：我能为数据做什么</p><p>​            传统的数据工程、数据结构、数据库、数据仓库、数据挖掘都是这个</p><p>​            强调通过人的努力改变数据，使数据更有价值，便于后续利用</p><p>现在：数据能为我做什么</p><p>​            大数据辅助决策、决策支持，带来商业机会，降低不确定性，发现可用的新模式</p><p>​            新术语：数据驱动、数据业务化、让数据说话、以数据为中心、数据柔术 都强调该视角</p><h3 id="1-4-理论体系"><a href="#1-4-理论体系" class="headerlink" title="1.4 理论体系"></a>1.4 理论体系</h3><p>领域知识：决定数据科学的主要关注点、应用领域和未来发展，重要</p><p>理论基础：统计学、机器学习、数据可视化与故事化</p><p>核心内容：</p><ul><li>基础理论：理念、方法、技术、工具、原则、目标等等</li><li>数据加工：融入3C精神，更强调<strong>增值活动</strong></li><li>数据计算：过渡至云计算，则关注的问题发生根本变化</li><li>数据管理：出现新兴的NoSQL、NewSQL和关系云等</li><li>数据分析</li><li>数据产品开发</li></ul><h3 id="1-5-基本原则"><a href="#1-5-基本原则" class="headerlink" title="1.5 基本原则"></a>1.5 基本原则</h3><ol><li><p>三世界原则</p><p>数据世界，使用“痕迹数据”，更加客观，而不是”采访数据“</p><p>第四范式：数据密集型科学发现范式——更注重相关性而不是因果</p></li><li><p>三要素</p><p>理论、实践、精神（3C）</p><p>提升实践能力：参加竞赛+参加开源项目</p><p>Creative Working</p><p>Critical Thinking</p><p>Curious Asking</p></li><li><p>数据密集型原则</p><p>挑战来自数据本身复杂性而不是计算</p></li><li><p>数据中心原则</p><p>从数据出发，改变业务</p></li><li><p>数据范式</p><p><strong>用数据直接解决问题</strong></p></li><li><p>数据复杂性原则</p><p>复杂性被认为是大数据不可分割的属性，数据在先，模式在后或无模式</p></li><li><p>数据资产原则</p></li><li><p>数据驱动原则</p></li><li><p>协同原则</p></li><li><p>从简原则</p><p>数据科学追求简单高效，面向具体应用需求，不考虑通用而复杂的算法</p></li></ol><h3 id="1-6-能力要求"><a href="#1-6-能力要求" class="headerlink" title="1.6 能力要求"></a>1.6 能力要求</h3><ul><li>创新精神、独特视角、不断进取</li><li>团队合作、协同工作</li><li>提出“nice”研究假设和问题，能够完成对应试验设计</li><li>参与项目的经验</li><li>灵活运用领域实务知识经验</li><li>研发数据产品</li></ul><h3 id="1-7-学习"><a href="#1-7-学习" class="headerlink" title="1.7 学习"></a>1.7 学习</h3><p>加法：操作系极强，培养动手操作能力，利用python和R</p><p>减法：不同学科领域对数据科学的研究视角和侧重点不同，应优先学习领域共性的数据科学，再日后专精</p><p>乘法：经典理论X最佳实践，优先学习最代表数据科学的理论和实践，数据科学里<strong>实践领先于理论</strong></p><p>除法：注意学习知识的完整性和逻辑性，用最简单的逻辑和最清楚的语言来学习</p><p>八个步骤：</p><ol><li><p>数学、统计学、机器学习</p></li><li><p>学会写代码</p></li><li><p>理解数据库</p></li><li><p>探索数据科学流程</p><p>采集、探索、加工、建模、验证、报告</p></li><li><p>重视并学习大数据</p></li><li><p>竞赛，建立自己的项目，培养精神</p></li><li><p>实习、集训、进入职场</p></li><li><p>参与社区</p></li></ol><h2 id="2-理论基础"><a href="#2-理论基础" class="headerlink" title="2 理论基础"></a>2 理论基础</h2><h3 id="2-1-学科地位"><a href="#2-1-学科地位" class="headerlink" title="2.1 学科地位"></a>2.1 学科地位</h3><p>跨学科视角</p><p>关注理论研究和<strong>领域务实知识（需要相关专家参与）</strong>的结合</p><p>主要精神是hacker精神</p><h3 id="2-2-统计"><a href="#2-2-统计" class="headerlink" title="2.2 统计"></a>2.2 统计</h3><p>从行为目的和思维方式看</p><p>描述统计+推断统计</p><p>从方法论角度看</p><p>基本分析法：对低层数据（0次1次）分析</p><p>回归、分类、时间序列、线性分析、方差分析、聚类分析、其他</p><p>元分析法：对高层数据（尤其是基本分析法得出的）进一步分析</p><p>方向：</p><ul><li>不再是随机样本，而是全体数据</li><li>不是精确性，而是复杂性，目的不再是追求精确性，而是提升效率</li><li>不是因果关系，而是相关关系</li></ul><h3 id="2-3-机器学习"><a href="#2-3-机器学习" class="headerlink" title="2.3 机器学习"></a>2.3 机器学习</h3><p>基础理论来自多个学科：</p><p>人工智能、贝叶斯方法、计算复杂性理论、控制论、信息论、哲学、心理学与神经生物学、统计学</p><p>分类P62</p><p>按照输出结果：</p><ul><li>概念学习：用结果推出未知的布尔函数，找到最好你和训练样本的假设</li><li>决策树学习：逼近离散值目标函数过程</li><li>分析学习：用先验知识分析每个样本，推算各特征与目标函数的相关性</li><li>归纳学习</li></ul><p>按照学习方式：</p><ul><li>人工神经网络</li><li>贝叶斯学习</li><li>遗传算法</li><li>基于实例学习</li><li>增强学习</li></ul><p>按照学习任务不同：</p><ul><li>监督学习<ul><li>最近邻</li><li>朴素贝叶斯</li><li>决策树</li><li>随机森林</li><li>线性回归</li><li>支持向量机</li><li>神经网络分析</li><li>。。。。</li></ul></li><li>无监督学习<ul><li>K-Means聚类</li><li>主成分分析</li><li>关联规则分析</li></ul></li><li>半监督学习<ul><li>半监督分类：生成式、判别式</li><li>半监督回归：基于差异、基于流形学习</li><li>半监督聚类：基于距离、大间隔方法</li><li>半监督降维：基于类标签、基于成对约束</li></ul></li></ul><p><strong>挑战</strong>：</p><ul><li><p>过拟合（Overfitting）</p><p>训练集准确率高，测试集准确率低</p></li><li><p>维度灾难（Curse of Dimensionality）</p><p>低维算法难以移植到高维</p></li><li><p>特征工程（Feature Engineering）</p><p>还得考虑相关领域知识</p></li><li><p>算法可拓展性（Scalability）</p></li></ul><p>P74常用统计模型和机器学习算法</p><h2 id="3-流程与方法"><a href="#3-流程与方法" class="headerlink" title="3. 流程与方法"></a>3. 流程与方法</h2><p><em><strong>数据科学没有统一的流程，不同专家、应用场景中所提出的流程可能不同，学习数据科学流程的母的在于掌握活动类型，而不是活动之间的严格先后顺序。</strong></em></p><h3 id="3-1-基本流程"><a href="#3-1-基本流程" class="headerlink" title="3.1 基本流程"></a>3.1 基本流程</h3><p>图P83</p><p>数据化、数据加工、数据规整化、探索性分析、数据分析与洞见、结果展现和数据产品的提供</p><ol><li><p>数据化</p></li><li><p>数据加工和规整化</p><p>本质是将低层数据化为高层数据0-&gt;1-&gt;2-&gt;3</p><p><strong>干净数据</strong>（相对脏）：质量没问题，没有缺失值，错误值和噪声信息</p><p><strong>规整数据</strong>（相对乱）：形态符合计算与算法要求，从数据形态分类</p><p>注意应该是<strong>增值过程</strong>，不等于传统的“数据预处理”和“数据工程”</p></li><li><p>探索性分析</p><p>在尽量少的先验假定下探索，通过作图、制表、方程拟合、计算特征量等<strong>探索数据的结构和规律</strong></p><p>先探索后验证</p><ul><li><p>耐抗性：</p><p>对局部不良行为的非敏感性，因为大数据难免有部分差错</p><p>耐抗性分析统计量：集中趋势、离散程度、分布状态、频度等</p></li><li><p>残差</p></li><li><p>重新表达</p><p>找到合适的尺度或数据表达方式进行准换，有利于化简分析，主语对称性，恒定性，线性和可加性，和线性代数概念类似，也叫变换</p></li><li><p>启示</p></li></ul></li><li><p>数据分析与洞见</p><p>在理解数据的基础上，设计、选择、应用具体的机器学习算法和统计模型进行分析</p><ul><li>描述性分析：转换为信息</li><li>预测性分析：转换为知识</li><li>规范性分析：转换为智慧</li></ul></li><li><p>结果展现，提供数据产品</p></li></ol><h3 id="3-2-数据加工"><a href="#3-2-数据加工" class="headerlink" title="3.2 数据加工"></a>3.2 数据加工</h3><p>需求：数据质量要求 和 数据计算要求</p><p>往往需要综合运用多种数据加工方法</p><p>图见P92</p><ol><li><p>数据清洗（多轮审计和清洗）</p><ul><li><p>缺失数据</p><p>识别、分析（特征，影响，原因）、处理（忽略，删除，插值）</p></li><li><p>冗余（重复、无关）数据</p><p>重复数据用重复过滤</p><p>无关数据用条件过滤</p></li><li><p>噪声（错误、虚假、异常）</p><p>分箱、聚类、回归</p></li></ul><hr></li><li><p>数据变换</p><p>使形式符合算法要求，常见策略：</p><ol><li>平滑处理——去噪声</li><li>特征构造——构造新属性，描述客观现实（体积+质量-&gt;密度）</li><li>聚集——汇总聚合数据，进行粗粒度计算（日销量-&gt;月销量）</li><li>标准化</li><li>离散化——用区间标签和概念标签表示属性值</li></ol></li><li><p>数据集成</p><p>内容集成：结构相同、描述不同对象，或可通过映射变为相同（同时进行冲突检测、处理等清洗操作）</p><p>结构集成：来源不同、描述同一对象，分结构和内容两层次，可进行<strong>属性选择</strong></p><p>难点：</p><ul><li>模式集成：如何匹配来自多个数据源的同一实体</li><li>数据冗余：冗余属性可以从其他属性推演出来，命名不一致，用相关分析P99</li><li>冲突检测和消除：比例尺度或编码不同（kg 和 g）</li></ul></li><li><p>数据脱敏（Data Masking）</p><ol><li>单向性：无法从脱敏数据 推导 出原始数据</li><li>无残留：用户无法用其他途径还原敏感信息，小心用户画像技术</li><li>易于实现：涉及数据量大，所以不能太复杂</li></ol></li><li><p>数据归约（Data Reduction）</p><p>在不影响数据完整性和分析结果正确性前提下，减少数据规模和数据量</p><ol><li><p>维归约</p><p>避免维度灾难，减少考虑的随机变量或属性，通常采用线代方法</p><p>主成分分析、奇异值分解、离散小波转换</p></li><li><p>值规约</p><p>用参数模型或非参数模型近似表示数据，只存储生成方法和参数？？</p></li><li><p>数据压缩</p><p>重构数据来压缩</p></li></ol></li><li><p>数据标注：</p><p>对目标数据补充必要的标签类元数据来提高检索、洞察、分析、挖掘效率</p><p>自动化程度：有手工、半自动、自动化标注</p><p>实现层次：语法标注和语义标注  不懂</p></li></ol><h3 id="3-3-数据审计"><a href="#3-3-数据审计" class="headerlink" title="3.3 数据审计"></a>3.3 数据审计</h3><p>按照数据质量的一般规律与评价方法审计，发现问题</p><p>比如缺失值、噪声值、不一致值（相互矛盾）、不完整值（被篡改或无法溯源）</p><p>P102</p><ol><li>预定义审计、自描述性规则</li><li>自定义审计</li><li>可视化审计</li></ol><p>常用技巧：第一数字定律、小概率原理、语言学规律、数据连续性理论、数据鉴别技术</p><h3 id="3-4-数据分析"><a href="#3-4-数据分析" class="headerlink" title="3.4 数据分析"></a>3.4 数据分析</h3><p>描述性-&gt;诊断性-&gt;预测性-&gt;规范性</p><p>​            ↑商务智能              ↑数据科学</p><ol><li><p>描述性</p><p>已经发生了什么</p><p>描述性统计分析方法</p></li><li><p>诊断性</p><p>为什么发生</p><p>关联分析法（数据科学家）和因果分析法（领域专家）</p></li><li><p>预测性</p><p>将要发生什么</p><p>分类分析方法、趋势分析方法</p></li><li><p>规范性</p><p>关注模拟与优化问题，如何从将要发生的事情受惠、如何优化将发生的事</p><p>运筹学、模拟与仿真技术</p></li></ol><h3 id="3-5-数据可视化"><a href="#3-5-数据可视化" class="headerlink" title="3.5 数据可视化"></a>3.5 数据可视化</h3><ol><li>科学可视化</li><li>信息可视化</li><li>可视分析学</li></ol><p>可视分析学以<strong>可视交互</strong>为基础，综合运用图形学、数据挖掘、人机交互，实现人机协同完成可视化任务</p><p>P112有一个模型，有以下特点:</p><ol><li><p>强调从数据到知识的转换过程</p><p>不是单纯的展示，而是转换成<strong>知识</strong>，两种途径 👇</p></li><li><p>强调可视化分析与自动化建模之间的<strong>相互作用</strong></p></li><li><p>强调数据映射和数据挖掘的重要性</p><p>（用来实现👆，作为重要支撑技术），配合使用</p></li><li><p>强调数据加工工作的必要性</p><p>不然会影响可视化效果</p></li><li><p>强调人机交互的重要性</p><p>人机互补和人机协同，重视互补优势</p></li></ol><p><strong>方法体系</strong></p><ol><li><p>方法论基础</p><p>主要指 <strong>视觉编码</strong> 作为数据可视化方法体系的根基</p><p>通常采用视觉图形元素和视觉通道两个维度进行视觉编码</p></li><li><p>基础方法</p><p>建立在👆之上，应用不局限于特定领域，提供高层不同应用领域的共性方法，比如统计图表、图论方法、视觉隐喻、图形符号学</p></li><li><p>领域方法</p><p>往往仅限于特定领域或任务范围，不具备跨领域/任务性</p><p>但在该领域的信度和效度高于基础方法的直接应用</p><p>比如地理信息可视化、时间数据可视化、不确定性、文本、媒体、实时数据之类的</p><p>很多领域已出现了自己独特的数据可视化方法，比如地铁路线图全球统一</p></li><li><p>视觉感知与视觉认知</p><p>视觉编码的关键在于找到符合目标用户群体的视觉感知习惯的表达方法</p><ul><li><p>视觉感知（Visual Perception）</p><p>指客观事物通过视觉感觉器官在人脑中产生直接反映的过程</p><p>应充分利用人类视觉感知特征</p></li><li><p>视觉认知（Visual Coginiton）</p><p>指个体对视觉感知信息的<strong>进一步加工</strong>处理过程</p><p>包括抽取、转换、存储、简化、合并、理解、决策等，很好的例子是<strong>完图法则</strong></p></li></ul></li><li><p>可视化视角下的数据类型</p><ul><li><p>定类数据</p><p>主要用于记录事物的所属类型或标签信息，只能进行相等判断</p></li><li><p>定序判断</p><p>主要记录事物的排信息，支持相等判断和大小比较运算</p></li><li><p>定距排序</p><p>用于记录事物的量化信息，“0”的位置具有任意性，不代表事物是否存在，如温度为0°</p></li><li><p>定比数据</p><p>用于记录事物的量化信息，“0”为基准，表示不存在，例如我的身高是他的1.5倍</p></li></ul></li><li><p>视觉通道的选择方法<strong>P118</strong></p><p>从人类的视觉感知和认知习惯看，数据类型与视觉通道时存在一定的关系的</p><p>一般有：位置、尺寸、数值、纹理、颜色、方向、形状，分别能够对应不同的数据类型</p><p>要综合考虑目标用户需求、可视化任务本身、原始数据的数据类型，成为数据可视化工作的重要挑战</p><p>不同视觉通道的<strong>数据表现力</strong>不同，评判标准：</p><ol><li><p>精确性</p><p>编码结果与原始数据间的吻合程度</p></li><li><p>可辨认性</p><p>字面意思，不要让视觉通道和背景混淆之类的</p></li><li><p>可分离性</p><p>不同视觉通道的表现力之间应具有一定的独立性，比如面积颜色表现力会受到面积大小影响</p></li><li><p>视觉突出性</p><p>编码结果能否在非常短的时间内迅速、精确传达出主要意图</p></li></ol><p>但是应注意：各种视觉通道的表现力往往是<strong>相对</strong>的，与原始数据、通道类型选择、用户感知习惯都有关</p></li><li><p>数据假象</p><p>不可忽视的特殊问题</p><p>目标用户产生的错误或不正确的视觉感知：</p><ol><li>可视化试图所处的上下文可能导致视觉假象</li><li>人眼对亮度和颜色的相对判断容易造成视觉假象</li><li>目标用户的经历和经验可能造成视觉假象</li></ol></li></ol><h3 id="3-6-数据故事化"><a href="#3-6-数据故事化" class="headerlink" title="3.6 数据故事化"></a>3.6 数据故事化</h3><p>“数据的故事化描述”是为了提升数据的可理解性、可记忆性、可体验性</p><p>将“数据”还原成成关联至特定的“情景”的过程，因此故事化也是数据转换的表现形式之一</p><p>三类“情景”：</p><ul><li><p>还原情景</p><p>还原数据所计算和计算信息的“原始情景”</p></li><li><p>移植情景</p><p>将数据移植到另一个真实发生（比如客户熟悉的情景）的情景中</p></li><li><p>虚构情景</p></li></ul><ol><li><p>重要地位</p><p>这被认为是“最后一公里”问题，直接影响整个数据科学项目的成败</p><ul><li><p>易于记忆</p></li><li><p>易于认知</p><p>可视化易于感知、故事化易于认知</p></li><li><p>易于体验</p><p>一是故事讲述者和倾听者之间共享相同、相似的情景</p><p>二是故事的具体表现形式和情节设计</p></li></ul></li><li><p>故事化描述与故事的展现方式</p><p>👆是两个不同的概念，电影、图书、海报等都是故事化处理后、选择特定的形式具体展现</p><ul><li>故事化描述是故事展现的前提条件，不同展现方式表现效果不同</li><li>故事的展现对故事化描述起反馈作用</li></ul></li><li><p>故事化描述的基本原则</p><ol><li><p>忠于数据原则</p><p>尤其不得以“提高故事生动性”为借口扭曲原始数据</p></li><li><p>设计共同情景原则</p><p>要真正了解目标倾听者，结合他们的经验和知识</p></li><li><p>体验式讲述原则</p><p>比如尽量用第一、第二人称，多一些交互式体验</p></li><li><p>个性化定制原则</p></li><li><p>有效性利用原则</p><p>有时候故事化不一定合适，要论证是否合适，是否应采取其他方法</p></li><li><p>3C精神原则</p><p>实现增值，避免套路化</p></li></ol></li></ol><p>近年来，自动化故事化描述成为新的关注点！</p><h3 id="3-7-数据科学项目管理"><a href="#3-7-数据科学项目管理" class="headerlink" title="3.7 数据科学项目管理"></a>3.7 数据科学项目管理</h3><p>遵循一般项目管理的原则和方法</p><p>涉及 <u>整体、范围、时间、成本、质量、人力资源、沟通、风险、采购</u> 九个方面的管理 P129</p><p>So Complex!</p><ol><li><p>主要角色 P130</p><p>项目发起人、项目经理、客户、数据科学家、数据工程师、操作人员</p></li><li><p>基本流程</p><p>都是双向的链条，主要活动包括六项</p><ul><li><p>项目目标的定义</p><p>我们通此项目解决什么问题</p></li><li><p>数据的获得与管理</p><p>我们需要哪些数据？如何获得？如何管理</p></li><li><p>模式/模型的洞见</p><p>我们从数据洞见了什么模式/模型？</p></li><li><p>模式/模型的验证与优化</p><p>已洞见的模式/模型是否可靠、适用以及如何优化</p></li><li><p>结果的可视化与文档化</p><p>我们用什么方式记录和展现数据预期结果</p></li><li><p>模式/模型的应用与维护</p><p>如何运用已确定的模式/模型解决实际问题，并根据数据和问题的动态变化优化模式/模型。</p></li></ul></li></ol><h3 id="3-8-数据科学常见错误"><a href="#3-8-数据科学常见错误" class="headerlink" title="3.8 数据科学常见错误"></a>3.8 数据科学常见错误</h3><p>主要原因在于人们尚未完全理解数据科学理念、理论、方法、工具</p><p>用自己一贯采用的习惯性思维和传统理论去“解决”大数据问题</p><ol><li><p>不检查数据</p><p>80%时间获取、清理数据，检查是否可用，谨慎使用模拟数据</p></li><li><p>不理解数据</p><p>应该在训练数据模型前仔细研究数据，更快的利用直觉</p></li><li><p>不评估数据</p><p>对数据内容及其模态和目标任务之间的匹配度进行评估，寻找新的途径而不老是局限于过去</p><p>从小目标开始、不要一开始就挑战技术难题</p></li><li><p>不测试模型</p></li><li><p>只有目标、没有假设</p><p>合情的假设可以从一开始缩小范围，减少在这个问题上浪费的时间</p></li><li><p>采用过时失效的模型</p><p>当你的竞争对手从你的市场表现中学习时就已经过时了</p></li><li><p>不评估最终结果</p></li><li><p>忽略业务专家的作用</p><p>比如在确定需要的特征时节省大量的时间</p><p>开始项目前，数据团队和业务专家之间进行对话，确保每个人都清楚项目要实现什么效果，然后做探索性的数据分析，看看能否实现它，如果不能，可能需要用一种新的方法重新表述该问题，或者采用不同的数据源，但这个具体领域的专家<strong>应该帮助确定目标是什么以及项目是否符合目标</strong></p></li><li><p>选择过于复杂的模型/算法</p><p>简单优先，先考虑简单的，注意到过拟合更可能发生在复杂的算法中</p></li><li><p>模型与算法选择上的偏见</p><p>最好从开源模型中构筑自己的版本</p></li><li><p>曲解基本概念和基础原理</p></li><li><p>低估目标用户的理解能力</p></li></ol><p>奥卡姆剃刀定律：</p><ol><li>剃掉不必要的假设</li><li>分割两个类似的结论来区分两个假设</li></ol><p>不应盲目追求数据量，以最必要的数据集为基础数据，不要追求”高大上“。。</p><h2 id="4-技术与工具"><a href="#4-技术与工具" class="headerlink" title="4. 技术与工具"></a>4. 技术与工具</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210612204625.png" alt="image-20210612204618317"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据科学导论&quot;&gt;&lt;a href=&quot;#数据科学导论&quot; class=&quot;headerlink&quot; title=&quot;数据科学导论&quot;&gt;&lt;/a&gt;数据科学导论&lt;/h1&gt;&lt;h2 id=&quot;1-基础理论&quot;&gt;&lt;a href=&quot;#1-基础理论&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="data science" scheme="https://darren-dong.com/categories/data-science/"/>
    
    
  </entry>
  
  <entry>
    <title>game-theory</title>
    <link href="https://darren-dong.com/2021/05/30/%E5%8D%9A%E5%BC%88/"/>
    <id>https://darren-dong.com/2021/05/30/%E5%8D%9A%E5%BC%88/</id>
    <published>2021-05-30T09:30:55.000Z</published>
    <updated>2021-06-15T13:06:25.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h1><h2 id="策略思维"><a href="#策略思维" class="headerlink" title="策略思维"></a>策略思维</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;博弈论&quot;&gt;&lt;a href=&quot;#博弈论&quot; class=&quot;headerlink&quot; title=&quot;博弈论&quot;&gt;&lt;/a&gt;博弈论&lt;/h1&gt;&lt;h2 id=&quot;策略思维&quot;&gt;&lt;a href=&quot;#策略思维&quot; class=&quot;headerlink&quot; title=&quot;策略思维&quot;&gt;&lt;/a&gt;策略思</summary>
      
    
    
    
    <category term="finance" scheme="https://darren-dong.com/categories/finance/"/>
    
    
    <category term="game-theory" scheme="https://darren-dong.com/tags/game-theory/"/>
    
  </entry>
  
  <entry>
    <title>第一次炒币</title>
    <link href="https://darren-dong.com/2021/05/29/%E7%82%92%E5%B8%81%E6%97%A5%E8%AE%B0/"/>
    <id>https://darren-dong.com/2021/05/29/%E7%82%92%E5%B8%81%E6%97%A5%E8%AE%B0/</id>
    <published>2021-05-29T09:30:55.000Z</published>
    <updated>2021-06-15T12:23:59.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="财负密码"><a href="#财负密码" class="headerlink" title="财负密码"></a>财负密码</h2><p>这是在不能说是什么光彩的回忆。</p><p>但是，越是让人痛苦的，越值得反思。</p><p>先来看看数据吧：</p><p>现货5天，亏损300.</p><p>合约3天，亏损700</p><p>虽然不是什么大数目，但是还是让人满心痛的。</p><p>为了给未来的自己，也给看到这篇文章的人们一点参考，我还是非常难受地写下了这篇反思。</p><p>我真的不敢确保我说的有多少可信，又有多少是我还没有发现的，但我只是把一个小白的感受写下来。</p><h2 id="序章"><a href="#序章" class="headerlink" title="序章"></a>序章</h2><p>贪婪 是一切的诱因，人类的劣根让我无法拒绝这种诱惑，虽然我一直假惺惺地打着尝试理财的借口，但是亏损后的连续再入场让我明白，我其实只是因为贪婪罢了。</p><p>炒币真的就像投资，比股票更没有监管，没有保证，由资本和人们的心情决定价格起伏，我刚入场（5.18）就遇到了币圈暴跌（5.19）哈哈，还是有一些”历史参与感“吧，马斯克的例子实在是让人感觉，币圈真的就是割韭菜，消息和信息，以及能利用消息的人，才是这个灰色地带的不败者，其他的人，真的就是在赌博罢了。</p><h2 id="高潮"><a href="#高潮" class="headerlink" title="高潮"></a>高潮</h2><p>我试图刻画我炒币的心态。</p><p>一开始本金150，一瞬间赚了20块，我即觉得神奇，又觉得有些激动，但这不过是淡淡的罢了，人们面对开心总是没有亏损来的记忆深刻。在接下来的5天里，我每次买入都心情忐忑，忍不住一次又一次地拿起手机，这样才能给我安全感。</p><p>我总是想在刚刚好的点买入，因此有时候设好了刚好的价格，发现趋势已经更远了，连续几次，这一次利空或者利好就已经错过了。</p><p>我有时候看到某个趋势，就忍不住梭哈跟风，因为我觉得我的本金太小，但是因此被卡在半腰，看着它上上下下，十分煎熬，能无损地时候舍不得卖，觉得一定 <strong>要回本</strong>，亏的时候又后悔，这个时候，割肉也不是，再等下去，说不定又被爆仓，实在是让人难受。但更恶心的是刚亏出来，他就开始狂赚，炸人心态，这大概是庄家（或者说命运）摸清了我这种韭菜的心理吧。</p><p>还有那种破罐子破摔的心态，亏的越多，越倾向于赌博，想着要回本回本，结果反而失去了理智，该止盈不止盈，该割肉仍然想着赌一把赌一把，因此血本无归，把最后翻盘的资本白白浪费，【绝对不要放弃】，破罐子破摔的心态实在是害人不浅。</p><p>这仿佛是一场资本开的赌博，有信息的资本掌控局势，没信息的韭菜在资本设置的陷阱下，如果心思都已经被研究的透彻，那么必然是输多赢少，真正成为了韭菜。</p><h2 id="一些技巧"><a href="#一些技巧" class="headerlink" title="一些技巧"></a>一些技巧</h2><p>看准了在进场，不要盲目听从权威的建议，宁肯错过，绝不看错。</p><p>永远不要梭哈，给自己留足后路！</p><h2 id="落幕"><a href="#落幕" class="headerlink" title="落幕"></a>落幕</h2><p>诱惑我连续充了4次钱的心态因素有很多，比如看到身边的人赚了钱，想到我上我也行，比如自己骗自己说这只是一次游戏，一次试验，比如面对经历过的瞬间暴涨200%的收益，知道钱来得太容易，这一切的一切都是资本利用人的缺陷营造的陷阱罢了，在自己本身不够强大的情况下，盲进去，就是送。</p><p>吃到了，是福气，吃不到的，本就吃不到，既然已经接受了投胎的不公平，为什么又反而在这里显得难以接受呢？这只会平生焦虑，影响学习罢了。</p><p>或许，我成功实现了自己的愿景，成为了理想中的人时，我自己本身也就是资本的一员，那个时候，自然有所谓的资本聚集，信息，渠道会更轻易的得到，基本做着稳赚的生意，但那都是假设，假设我真的能成为那样的人，资本真的是可怕的词，是精英对韭菜们命运的掌控，社会主义的先进性，19年后我终于领悟了哎。</p><p>当下，最有远见的投资是学习，学习知识，才能为自己的话语权挣得更多的筹码，才能为掌控自己的命运提供最可靠的支撑。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;财负密码&quot;&gt;&lt;a href=&quot;#财负密码&quot; class=&quot;headerlink&quot; title=&quot;财负密码&quot;&gt;&lt;/a&gt;财负密码&lt;/h2&gt;&lt;p&gt;这是在不能说是什么光彩的回忆。&lt;/p&gt;
&lt;p&gt;但是，越是让人痛苦的，越值得反思。&lt;/p&gt;
&lt;p&gt;先来看看数据吧：&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="memory" scheme="https://darren-dong.com/categories/memory/"/>
    
    
    <category term="数字货币" scheme="https://darren-dong.com/tags/%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>大一数据结构实现</title>
    <link href="https://darren-dong.com/2021/05/25/%E5%A4%A7%E4%B8%80%E4%B8%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://darren-dong.com/2021/05/25/%E5%A4%A7%E4%B8%80%E4%B8%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2021-05-25T05:15:54.000Z</published>
    <updated>2021-06-23T13:08:40.417Z</updated>
    
    <content type="html"><![CDATA[<p>考前抱佛脚┭┮﹏┭┮</p><p>记住这里大量用了c++的引用。。好方便，但是答题的时候记得换成 *和全局变量</p><p>一个算法应该具有以下特性：</p><ol><li>有穷性</li><li>确定性  不存在二义性</li><li>可行性</li><li>有输入</li><li>有输出</li></ol><p>1&lt;n&lt;log2n&lt;n&lt;nlog2n&lt;n2&lt;n3 (多项式)|| &lt;2n&lt;n!(指数)</p><h1 id="1-线性表"><a href="#1-线性表" class="headerlink" title="1.线性表"></a>1.线性表</h1><h2 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h2><p>SqList 是线性表</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*基本运算：InitList(&amp;L);DestoryList(&amp;L);ListEmpty(L);ListLength(L);DispList(L);GetElem(L,i,&amp;e);LocateElem(L,e);ListInsert(&amp;L,i,e);ListDelete(&amp;L,i,&amp;e);*/</span><span class="token comment">/*线性表的顺序存储i--; //转化为物理序号if(i&lt;1 || i>L->length+1) //插入的时候是允许插入第 n+1 位置的，所以还要额外+1最后不要忘了改一下k的符号*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">50</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> SqList<span class="token punctuation">;</span> <span class="token comment">//顺序表类型</span><span class="token comment">//需要改变的就传入引用，不需要改变的就直接传入指针就好了。</span><span class="token keyword">void</span> <span class="token function">CreateList</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//用来统计数量，i用来当索引，但是为什么不直接用i呢？</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SqList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    L<span class="token operator">-></span>length <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">InitList</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SqList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestroyList</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">ListEmpty</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> L<span class="token operator">-></span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">ListLength</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> L<span class="token operator">-></span>length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DispList</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token operator">-></span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>bool <span class="token function">GetElem</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> L<span class="token operator">-></span>length<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    e <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">LocateElem</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> L<span class="token operator">-></span>length <span class="token operator">&amp;&amp;</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> e<span class="token punctuation">)</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> L<span class="token operator">-></span>length<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//记住逻辑序号和物理序号差了一个1嗷</span><span class="token punctuation">&#125;</span>bool <span class="token function">ListInsert</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> L<span class="token operator">-></span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> L<span class="token operator">-></span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//插入的时候是允许插入最后一个位置的，所以还要额外+1</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    i<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//转化为物理序号</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">></span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        L<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    L<span class="token operator">-></span>length<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">ListDelete</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> L<span class="token operator">-></span>length<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    i<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//转换成物理非常重要！</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> L<span class="token operator">-></span>length<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        L<span class="token operator">-></span>data<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    L<span class="token operator">-></span>length<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//****************************************************************************************************</span><span class="token comment">//删除L中所有值等于 x 的元素，双指针扫描</span><span class="token keyword">void</span> <span class="token function">delnode1</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token operator">-></span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            L<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    L<span class="token operator">-></span>length <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//用k记录个数</span><span class="token keyword">void</span> <span class="token function">delnode2</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token operator">-></span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            L<span class="token operator">-></span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    L<span class="token operator">-></span>length <span class="token operator">-=</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//这一片巧妙利用“缺位，补位”的技巧，节省了许多空间和时间，直接对换会消耗一个额外内存，不如缺位补位</span><span class="token comment">//感觉不够通用,不过现在懒得改了，很多二分的其实都是pattition，跟python提供的key函数参数一样</span><span class="token keyword">void</span> <span class="token function">partition1</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> L<span class="token operator">-></span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    ElemType pivot <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//中文翻译：枢</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> i <span class="token operator">&amp;&amp;</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> pivot<span class="token punctuation">)</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        L<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//顺序表归并算法,要求不改变原有的LA和LB</span><span class="token keyword">void</span> <span class="token function">UnionList</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>LA<span class="token punctuation">,</span> SqList <span class="token operator">*</span>LB<span class="token punctuation">,</span> SqList <span class="token operator">*</span><span class="token operator">&amp;</span>LC<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//i,j为两组下标</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>LA<span class="token operator">-></span>length <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>LB<span class="token operator">-></span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LA<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>LB<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            LC<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> LA<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">,</span>k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            LC<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> LB<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">,</span>k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>LA<span class="token operator">-></span>length<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        LC<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> LA<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">,</span>k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token operator">&lt;</span>LB<span class="token operator">-></span>length<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        LC<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> LB<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">,</span>k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    LC<span class="token operator">-></span>length <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>p是遍历用的节点，有一个工具节点用来接受创建或者进行删除，insert用s，delete用q</p><p>尾插法的工具节点r</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*单链表记得要设置最后一个是NULLLinkNode *pre = L,*p = L->next   //这个初始化挺好的！！！分析多或少1的时候，从开头0各和少数几个的极端情况分析。头节点L是没有存放数据的，也不算进长度，这就解释了为什么p有时是L有时是L->next，插入和删除都是先j&lt;i-1找到第i-1然后操作,所以初始化为p = L，因为是对后面那个操作*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">50</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> LinkNode<span class="token punctuation">;</span> <span class="token comment">//顺序表类型</span><span class="token comment">//头插法</span><span class="token comment">/*这里如果只传指针的话，只是传了一个指针的副本，相当于告诉你我的地址在这里，你可以修改我地址里的东西，但是这没有什么意义，因为我需要操作的是这个指针，不然操作全都传不回去，相当于你把一个副本连在一个结构里了，虽然这个副本和原来的指针有着相同的地址，但是此时我并不需要这个地址，我此时需要的是指针本身。加引用才是把原本的指针传过来了。*/</span><span class="token keyword">void</span> <span class="token function">CreateListF</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkNode <span class="token operator">*</span>s<span class="token punctuation">;</span> <span class="token comment">//工具节点上线</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//经典创建</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>data <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>next <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>        L<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token comment">//头插四件套</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//尾插法</span><span class="token keyword">void</span> <span class="token function">CreateListR</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkNode <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>data <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        r <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">InitList</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestroyList</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkNode <span class="token operator">*</span>pre <span class="token operator">=</span> L<span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">//这个初始化挺好的！！！</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>        pre <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最后一步别忘了！！</span><span class="token punctuation">&#125;</span>bool <span class="token function">ListEmpty</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">ListLength</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    LinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        n<span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DispList</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">GetElem</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token comment">//别漏了</span>    LinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> i <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        e <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token keyword">int</span> <span class="token function">LocateElem</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span>L<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//逻辑修正</span>    LinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>data <span class="token operator">!=</span> e<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">ListInsert</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    LinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">,</span> <span class="token operator">*</span>s<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>        s<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>bool <span class="token function">ListDelete</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    LinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token comment">//多检验一次，因为检验不到这里</span><span class="token comment">/*不如直接if(!(p &amp;&amp; p->next)) return false;*/</span>        e <span class="token operator">=</span> q<span class="token operator">-></span>data<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//****************************************************************************************************</span><span class="token comment">//删除一个单链表L中元素最大的节点（假设唯一）插入一个标记就好了</span><span class="token keyword">void</span> <span class="token function">delmaxnode</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>pre <span class="token operator">=</span> L<span class="token punctuation">,</span> <span class="token operator">*</span>maxp <span class="token operator">=</span> p<span class="token punctuation">,</span> <span class="token operator">*</span>maxpre <span class="token operator">=</span> pre<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxp<span class="token operator">-></span>data <span class="token operator">&lt;</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            maxp <span class="token operator">=</span> p<span class="token punctuation">;</span>            maxpre <span class="token operator">=</span> pre<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        pre <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    maxpre<span class="token operator">-></span>next <span class="token operator">=</span> maxp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>maxp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使元素递增有序排列，没有想象中巧妙</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkNode <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>pre<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>    L<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">//p接下了第二个节点，原来的头和首被当作了新的有序链表</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">//保存原来剩下的链</span>        pre <span class="token operator">=</span> L<span class="token punctuation">;</span>     <span class="token comment">//每次pre都从头扫描一遍。。。</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pre<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pre<span class="token operator">-></span>next<span class="token operator">-></span>data <span class="token operator">&lt;</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span>            pre <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment">//找到合适的位置</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>        pre<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//p接在这</span>        p <span class="token operator">=</span> q<span class="token punctuation">;</span><span class="token comment">//去q保存的地方继续操作</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">UnionList1</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span>LA<span class="token punctuation">,</span>LinkNode <span class="token operator">*</span>LB<span class="token punctuation">,</span>LinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>LC<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkNode <span class="token operator">*</span>pa <span class="token operator">=</span> LA<span class="token operator">-></span>next<span class="token punctuation">,</span><span class="token operator">*</span>pb <span class="token operator">=</span> LB<span class="token operator">-></span>next<span class="token punctuation">,</span><span class="token operator">*</span>r<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">;</span><span class="token comment">//尾插法和创建</span>    LC <span class="token operator">=</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pa<span class="token operator">!=</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pb<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pa<span class="token operator">-></span>data <span class="token operator">&lt;</span> pb<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            s <span class="token operator">=</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token operator">-></span>data <span class="token operator">=</span> pa<span class="token operator">-></span>data<span class="token punctuation">;</span>            r<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>            r <span class="token operator">=</span> s<span class="token punctuation">;</span>            pa <span class="token operator">=</span> pa<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pb<span class="token operator">-></span>data <span class="token operator">></span> pa<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            s <span class="token operator">=</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token operator">-></span>data <span class="token operator">=</span> pb<span class="token operator">-></span>data<span class="token punctuation">;</span>            r<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>            r <span class="token operator">=</span> s<span class="token punctuation">;</span>            pb <span class="token operator">=</span> pb<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pa<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>data <span class="token operator">=</span> pa<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        r <span class="token operator">=</span> s<span class="token punctuation">;</span>        pa <span class="token operator">=</span> pa<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pb<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>data <span class="token operator">=</span> pb<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        r <span class="token operator">=</span> s<span class="token punctuation">;</span>        pb <span class="token operator">=</span> pb<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*双链表return true;//不要漏了*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DNode</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">DNode</span> <span class="token operator">*</span>prior<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">DNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> DLinkNode<span class="token punctuation">;</span> <span class="token comment">//顺序表类型</span><span class="token comment">//建立头插法</span><span class="token keyword">void</span> <span class="token function">CreateListF</span><span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    DLinkNode <span class="token operator">*</span>s<span class="token punctuation">;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DLinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>prior <span class="token operator">=</span> L<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DLinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>prior <span class="token operator">=</span> L<span class="token punctuation">;</span>        s<span class="token operator">-></span>data <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>next <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment">//一共要链4条，但是这一条可能不需要链接👇</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            L<span class="token operator">-></span>next<span class="token operator">-></span>prior <span class="token operator">=</span> s<span class="token punctuation">;</span>        L<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">CreateListR</span><span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    DLinkNode <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DLinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DLinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>data <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        s<span class="token operator">-></span>prior <span class="token operator">=</span> r<span class="token punctuation">;</span>        r <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//其余操作很多类似单链表，插入和删除有点区别罢了,工具节点叫s</span>bool <span class="token function">ListInsert</span><span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    DLinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">,</span> <span class="token operator">*</span>s<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DLinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>        s<span class="token operator">-></span>prior <span class="token operator">=</span> p<span class="token punctuation">;</span>        s<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            p<span class="token operator">-></span>next<span class="token operator">-></span>prior <span class="token operator">=</span> s<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span> <span class="token comment">//不要漏了</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//****************************************************************************************************</span><span class="token comment">//工具节点叫q</span>bool <span class="token function">ListDelete</span><span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    DLinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> i <span class="token operator">&amp;&amp;</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        e <span class="token operator">=</span> q<span class="token operator">-></span>data<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            q<span class="token operator">-></span>next<span class="token operator">-></span>prior <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//逆置,头插法就能进行逆置,头节点还能保留</span><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    DLinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    L<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            L<span class="token operator">-></span>next<span class="token operator">-></span>prior <span class="token operator">=</span> p<span class="token punctuation">;</span>        p<span class="token operator">-></span>prior <span class="token operator">=</span> L<span class="token punctuation">;</span>        L<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        p <span class="token operator">=</span> q<span class="token punctuation">;</span> <span class="token comment">//继续指向后继节点</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//双链表的删除是不需要工具节点的，这里用一个循环双链表的例子展示一下,删除第一个data为x的节点</span>bool <span class="token function">delelem</span><span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    DLinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">//不需要工具点，p可以直接指向操作节点，而不是前一个</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> L <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>data <span class="token operator">!=</span> x<span class="token punctuation">)</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> L<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        p<span class="token operator">-></span>next<span class="token operator">-></span>prior <span class="token operator">=</span> p<span class="token operator">-></span>prior<span class="token punctuation">;</span>        p<span class="token operator">-></span>prior<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//循环双链表判断对称</span>bool <span class="token function">Symm</span><span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    bool same <span class="token operator">=</span> true<span class="token punctuation">;</span> <span class="token comment">//这类题的典型flag</span>    DLinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    DLinkNode <span class="token operator">*</span>q <span class="token operator">=</span> L<span class="token operator">-></span>prior<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>same<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">!=</span> q<span class="token operator">-></span>data<span class="token punctuation">)</span>            same <span class="token operator">=</span> false<span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> q <span class="token operator">||</span> p <span class="token operator">==</span> q<span class="token operator">-></span>prior<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//当相等（奇数）或相邻（偶数），为结束条件</span>            q <span class="token operator">=</span> q<span class="token operator">-></span>prior<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> same<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-栈和队列"><a href="#2-栈和队列" class="headerlink" title="2.栈和队列"></a>2.栈和队列</h1><h2 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">50</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> SqStack<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InitStack</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>SqStack <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SqStack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestroyStack</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">StackEmpty</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">Push</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>top <span class="token operator">==</span> MAXSIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    s<span class="token operator">-></span>top<span class="token operator">++</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>data<span class="token punctuation">[</span>s<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">Pop</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    e <span class="token operator">=</span> s<span class="token operator">-></span>data<span class="token punctuation">[</span>s<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>top<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">GetTop</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span>s<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    e <span class="token operator">=</span> s<span class="token operator">-></span>data<span class="token punctuation">[</span>s<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断字符串是否为对称串</span>bool <span class="token function">Symmetry</span><span class="token punctuation">(</span>ElemType str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    ElemType e<span class="token punctuation">;</span>    SqStack <span class="token operator">*</span>st<span class="token punctuation">;</span>    <span class="token function">InitStack</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">Push</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Pop</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">DestroyStack</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">DestroyStack</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*共享栈，适用于一方可能用到满，另一方还有很多空间栈空：top1 == -1   top2 == MAXSIZE栈满：top1 ==top2-1进栈出栈的时候top2的操作和top1是反的循环队列A[0..n-1]存放其元素值，F表示队头元素所在的前一个位置，R表示队尾元素的位置。则当前队列中的元素数是当R>F时，元素个数为  R-F个当R&lt;F时，元素个数为 n - （F-R）= R-F+n个*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//选用带头结点的，更加便捷</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">50</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">linknode</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    linknode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> LinkStNode<span class="token punctuation">;</span> <span class="token comment">//这名字真长</span><span class="token keyword">void</span> <span class="token function">InitStack</span><span class="token punctuation">(</span>LinkStNode <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestroyStack</span><span class="token punctuation">(</span>LinkStNode <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkStNode <span class="token operator">*</span>pre <span class="token operator">=</span> s<span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>        pre <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">StackEmpty</span><span class="token punctuation">(</span>LinkStNode <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>LinkStNode <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkStNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">;</span>    s<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">Pop</span><span class="token punctuation">(</span>LinkStNode <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkStNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">;</span>    e <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>    s<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">GetTop</span><span class="token punctuation">(</span>LinkStNode <span class="token operator">*</span>s<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    e <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token operator">-></span>data<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//迷宫问题和逆波兰表达式在P87</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//在队头进行删除，在队尾进行插入</span><span class="token comment">//记住，front指的是空的地方</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">50</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Elemtype<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    Elemtype data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">,</span> rear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> SqQueue<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    q <span class="token operator">=</span> <span class="token punctuation">(</span>SqQueue <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SqQueue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-></span>front <span class="token operator">=</span> q<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestoryQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>front <span class="token operator">==</span> q<span class="token operator">-></span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">enQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">,</span> Elemtype e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>rear <span class="token operator">==</span> MAXSIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    q<span class="token operator">-></span>rear<span class="token operator">++</span><span class="token punctuation">;</span>    q<span class="token operator">-></span>data<span class="token punctuation">[</span>q<span class="token operator">-></span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">deQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">,</span> Elemtype <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>front <span class="token operator">==</span> q<span class="token operator">-></span>rear<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    q<span class="token operator">-></span>front<span class="token operator">++</span><span class="token punctuation">;</span>    e <span class="token operator">=</span> q<span class="token operator">-></span>data<span class="token punctuation">[</span>q<span class="token operator">-></span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/****************************************************************************************/</span><span class="token comment">//环形队列</span><span class="token keyword">void</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    q <span class="token operator">=</span> <span class="token punctuation">(</span>SqQueue <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SqQueue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-></span>front <span class="token operator">=</span> q<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//不是-1了</span><span class="token punctuation">&#125;</span>bool <span class="token function">enQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">,</span> Elemtype e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>q<span class="token operator">-></span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAXSIZE <span class="token operator">==</span> q<span class="token operator">-></span>front<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    q<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAXSIZE<span class="token punctuation">;</span>    q<span class="token operator">-></span>data<span class="token punctuation">[</span>q<span class="token operator">-></span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">dequeue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">,</span> Elemtype e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>front <span class="token operator">==</span> q<span class="token operator">-></span>rear<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    q<span class="token operator">-></span>front <span class="token operator">=</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAXSIZE<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//这两个if判断条件挺有趣的</span><span class="token comment">//队列非常有层次感，有很多妙用，既可以用于递归层次，又可以用于重复</span><span class="token comment">//比如书上这个很强的1212报到1出列的问题</span><span class="token keyword">void</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    ElemType e<span class="token punctuation">;</span>    SqQueue <span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">enQueue</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"报数出列顺序：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">dequeue</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">dequeue</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">enQueue</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//偶数惨遭重新排队哈哈</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DestoryQueue</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//还可以定制双端队列什么的，其实原理都差不多</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链队"><a href="#链队" class="headerlink" title="链队"></a>链队</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">qnode</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">qnode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> DataNode<span class="token punctuation">;</span><span class="token comment">//需要一个链队节点</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    DataNode <span class="token operator">*</span>front<span class="token punctuation">;</span>    DataNode <span class="token operator">*</span>rear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> LinkQuNode<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>LinkQuNode <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkQuNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkQuNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-></span>front <span class="token operator">=</span> q<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestroyQueue</span><span class="token punctuation">(</span>LinkQuNode <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    DataNode <span class="token operator">*</span>pre <span class="token operator">=</span> q<span class="token operator">-></span>front<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">free</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这个怎么总是忘掉啊！</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>LinkQuNode <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>rear <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>LinkQuNode <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span> <span class="token comment">//因为无限长度，所以类型是bool</span><span class="token punctuation">&#123;</span>    DataNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span>DataNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>rear <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        q<span class="token operator">-></span>front <span class="token operator">=</span> q<span class="token operator">-></span>rear <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment">//还要判断是不是空列表！！！</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        q<span class="token operator">-></span>rear<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>        q<span class="token operator">-></span>rear <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>bool <span class="token function">dequeue</span><span class="token punctuation">(</span>LinkQuNode <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    DataNode <span class="token operator">*</span>t<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>rear <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    t <span class="token operator">=</span> q<span class="token operator">-></span>front<span class="token punctuation">;</span><span class="token comment">//两种情况都可以先将t指过来</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>front <span class="token operator">==</span> q<span class="token operator">-></span>rear<span class="token punctuation">)</span> <span class="token comment">//只有一个节点</span>        q<span class="token operator">-></span>front <span class="token operator">=</span> q<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        q<span class="token operator">-></span>front <span class="token operator">=</span> t<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-串"><a href="#3-串" class="headerlink" title="3.串"></a>3.串</h1><h2 id="顺序串"><a href="#顺序串" class="headerlink" title="顺序串"></a>顺序串</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">若串S<span class="token operator">=</span>′software′<span class="token punctuation">,</span>其子串的数目是<span class="token punctuation">(</span><span class="token punctuation">)</span>字符串的子串，就是字符串中的某一个连续片段。截取一个字符串长度需要一个起始位置和结束位置。字符串“software”有<span class="token number">8</span>个字符，可是设置间隔的位置有<span class="token number">9</span>个，使用<span class="token function">C</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">36</span>即可求得字符串“software”的所有子串。因为题目标明空串也是子串，故还需要加上<span class="token number">1</span>，总共<span class="token number">37</span>个子串。所以答案选<span class="token number">37</span>空格串是指由空格字符所组成的字符串，其长度等于空格个数。 。组成串的数据元素只能是字符。<span class="token comment">/*StrAssign(&amp;s,cstr)将cstr字符串内容赋给sDestoryStr(&amp;s)销毁串StrCopy(&amp;s,t)串复制，将串t赋给串sStrEqual(s,t)StrLength(s)Concat(s,t)返回一个新串，不改变原来的串SubStr(s,i,j)求子串InsStr(s1,i,s2)字串插入DelStr(s,i,j)字串删除RepStr(s,i,j,t)字串替换DispStr(s)串输出*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">50</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> SqString<span class="token punctuation">;</span><span class="token comment">//把字符串转换成串的数据结构</span><span class="token keyword">void</span> <span class="token function">StrAssign</span><span class="token punctuation">(</span>SqString <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">char</span> cstr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cstr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cstr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>length <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestoryStr</span><span class="token punctuation">(</span>SqString <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//因为这个不是malloc分配的，会自动回收</span><span class="token keyword">void</span> <span class="token function">StrCopy</span><span class="token punctuation">(</span>SqString <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> SqString t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span>length <span class="token operator">=</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断相等</span>bool <span class="token function">StrEqual</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">,</span> SqString t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    bool same <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">!=</span> t<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">//能用长度排除就直接去世吧</span>        same <span class="token operator">=</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                same <span class="token operator">=</span> false<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> same<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">StrLength</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//链接</span>SqString <span class="token function">Concat</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">,</span> SqString t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    SqString str<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    str<span class="token punctuation">.</span>length <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">+</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//从这时起，下标注意进行简单的计算</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//求子串，返回从第i个字符开始的，连续j个字符组成的字串</span>SqString <span class="token function">SubStr</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    SqString str<span class="token punctuation">;</span>    str<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> s<span class="token punctuation">.</span>length <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span>         <span class="token comment">//i+j-1注意一下下，理解不了就最简单的i=1,j=2,s</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//i-1开始，因为逻辑和物理差1</span>    <span class="token punctuation">&#123;</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str<span class="token punctuation">.</span>length <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//这个里面的加减1有点骚，理解好了这类题就不怕了。</span>SqString <span class="token function">IntStr</span><span class="token punctuation">(</span>SqString s1<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> SqString s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    SqString str<span class="token punctuation">;</span>    str<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> s1<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//插入的时候是可以多插一位的</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>                  <span class="token comment">//返回空串</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s1<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> s2<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>s2<span class="token punctuation">.</span>length <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> s1<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    str<span class="token punctuation">.</span>length <span class="token operator">=</span> s1<span class="token punctuation">.</span>length <span class="token operator">+</span> s2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>SqString <span class="token function">DelStr</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    SqString str<span class="token punctuation">;</span>    str<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//便于返回空串</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> s<span class="token punctuation">.</span>length <span class="token operator">||</span> i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> s<span class="token punctuation">.</span>length <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k <span class="token operator">-</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    str<span class="token punctuation">.</span>length <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//将i开始到j的字串用t替换</span><span class="token comment">//我好像有点明白了，他在for循环里用的索引对标某个长度，很简单，其他的操作通过改变数组索引的表达式来实现。</span>SqString <span class="token function">RepStr</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> SqString t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    SqString str<span class="token punctuation">;</span>    str<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> s<span class="token punctuation">.</span>length <span class="token operator">||</span> i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>t<span class="token punctuation">.</span>length <span class="token operator">-</span> j <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    str<span class="token punctuation">.</span>length <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> j <span class="token operator">+</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DispStr</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//比较大小</span><span class="token keyword">int</span> <span class="token function">Strcmp</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">,</span> SqString t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> comlen<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        comlen <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">else</span>        comlen <span class="token operator">=</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">//这里也包括了相等的情况</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> comlen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">==</span> t<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">></span> t<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//求s中出现的第一个最长连续相同字符构成的平台，用index开始索引，maxlen保存长度</span><span class="token keyword">void</span> <span class="token function">LongestString</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>index<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>maxlen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    index <span class="token operator">=</span> maxlen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> start<span class="token punctuation">;</span> <span class="token comment">//用来保存局部的  这种全局和局部都有对应的变量！</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        start <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//留个物理索引</span>        length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            length<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxlen <span class="token operator">&lt;</span> length<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            maxlen <span class="token operator">=</span> length<span class="token punctuation">;</span>            index <span class="token operator">=</span> start<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//Brute-Force</span><span class="token keyword">int</span> <span class="token function">BF</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">,</span> SqString t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>t<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        i <span class="token operator">=</span> i<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//i回退到最初的后一位，j清空</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span>t<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">(</span>i<span class="token operator">-</span>t<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链串（堆串）"><a href="#链串（堆串）" class="headerlink" title="链串（堆串）"></a>链串（堆串）</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token comment">//链串的创建都是用尾插法，因此都有一个工具节点r</span><span class="token comment">//带头节点的单链表作为链串，结点大小是每个结点存储的字符个数,未占用的用特殊符号（#）填补</span><span class="token comment">//链串中，节点大小越大，存储密度越大，基本操作有所不便，适合很少修改的情况，这里规定大小为1</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">snode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span> <span class="token comment">//存放字符</span>    <span class="token keyword">struct</span> <span class="token class-name">snode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> LinkStrNode<span class="token punctuation">;</span><span class="token comment">//要用尾插法保证顺序</span><span class="token keyword">void</span> <span class="token function">StrAssign</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">char</span> cstr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    LinkStrNode <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cstr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>data <span class="token operator">=</span> cstr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>        r <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestroyStr</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkStrNode <span class="token operator">*</span>pre <span class="token operator">=</span> s<span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        pre <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">StrCopy</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> LinkStrNode <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkStrNode <span class="token operator">*</span>p <span class="token operator">=</span> t<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">StrEqual</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span>s<span class="token punctuation">,</span> LinkStrNode <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkStrNode <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q <span class="token operator">=</span> t<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">//直接比较本身</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>data <span class="token operator">==</span> q<span class="token operator">-></span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> q<span class="token operator">-></span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">StrLength</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    LinkStrNode <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//链接两个数组其实就是分别遍历一遍</span>LinkStrNode <span class="token operator">*</span><span class="token function">Concat</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span>s<span class="token punctuation">,</span> LinkStrNode <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkStrNode <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q <span class="token operator">=</span> t<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>    str <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    p <span class="token operator">=</span> t<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">//这样直接转过来，少一个工具节点，是我蠢了</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//当参数不正确的时候返回一个空串，这里需要调用之前已经封装好的函数</span>LinkStrNode <span class="token operator">*</span><span class="token function">Substr</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    LinkStrNode <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span> <span class="token comment">//经典四件套哈哈</span>    str <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//先把空串准备好在这里</span>    r <span class="token operator">=</span> str<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> <span class="token function">StrLength</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token function">StrLength</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//这里的k取得是1，因为要取到逻辑顺序第i位的前一位，而不是物理顺序</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//怎么感觉这里所有的其实都差不多，都是链表啊啥的，没啥意思</span>LinkStrNode <span class="token operator">*</span><span class="token function">InsStr</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> LinkStrNode <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    LinkStrNode <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> t<span class="token operator">-></span>next<span class="token punctuation">;</span>    str <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> str<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> <span class="token function">StrLength</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p1<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p1 <span class="token operator">=</span> p1<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//这个基本上都是完全一样的，直接copy一部分，瞬间刷完，我吐了，这些那么相似的还搞</span>LinkStrNode <span class="token operator">*</span><span class="token function">DelStr</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    LinkStrNode <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>    str <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> <span class="token function">StrLength</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token function">StrLength</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//这里的k应该是0，因为这个就不是逻辑序号，而是物理上的序号了</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>LinkStrNode <span class="token operator">*</span><span class="token function">RepStr</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> LinkStrNode <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    LinkStrNode <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> t<span class="token operator">-></span>next<span class="token punctuation">;</span>    str <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> <span class="token function">StrLength</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token function">StrLength</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//这样的其实也是逻辑，所以i-1，使用哪种看自己喜欢吧</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//好垃圾啊，，真的全都一样的，我感觉我都能背下来了</span><span class="token keyword">void</span> <span class="token function">DispStr</span><span class="token punctuation">(</span>LinkStrNode s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkStrNode <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-递归"><a href="#4-递归" class="headerlink" title="4.递归"></a>4.递归</h1><p>只要确保了子结构和大结构 <strong>结构一致</strong>，就不用考虑过多细节，在设计算法的时候留意递归调用的意义，比如求树的深度，在某个地方需要子树的深度了，<strong>就直接调用就好</strong>，只用关心你这最宏观的一层，不用考虑内在的东西，这就是递归的魔力。因此【递归模型】非常重要</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//在算法设计中，任何间接递归都可以转换为直接递归，这是自顶向下，同时考虑最底部的</span><span class="token comment">//如果递归过程或者递归函数的递归调用语句是最后一条执行语句，则称为尾递归</span><span class="token comment">/* 三个条件：1.问题可以转化为1个或多个2.递归调用的次数必须是有限的3.必须有用来结束递归的条件*/</span>用到递归的三种情况：<span class="token number">1.</span> 数学公式，数列本身的定义就是递归的，比如n！和斐波那契数列<span class="token number">2.</span> 数据结构是递归的，比如指向本身的链表，对于这样的结构，递归方法既方便又有效但是要注意大结构和小结构保持一致性，比如对单链表设计递归算法时，通常采用不带头结点的单链表。<span class="token keyword">int</span> <span class="token function">Sum</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span><span class="token punctuation">(</span>L<span class="token operator">-></span>data <span class="token operator">+</span> <span class="token function">Sum</span><span class="token punctuation">(</span>L<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token number">3.</span> 问题的求解是递归的，比如汉诺塔P149<span class="token keyword">void</span> <span class="token function">Hanoil</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">char</span> Y<span class="token punctuation">,</span><span class="token keyword">char</span> Z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"将第%d个盘片从%c移动到%c"</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>X<span class="token punctuation">,</span>Z<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">Hanoil</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>X<span class="token punctuation">,</span>Z<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"将第%d个盘片从%c移动到%c"</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>X<span class="token punctuation">,</span>Z<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>递归模型：递归出口和递归体，可以看P150</strong></p><p>可以说递归的思想来自数学归纳法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">50</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">char</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>    bool flag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> StackType<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InitStack</span><span class="token punctuation">(</span>StackType <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>StackType <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>StackType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestroyStack</span><span class="token punctuation">(</span>StackType <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">StackEmpty</span><span class="token punctuation">(</span>StackType <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">Push</span><span class="token punctuation">(</span>StackType <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>top <span class="token operator">==</span> MAXSIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    s<span class="token operator">-></span>top<span class="token operator">++</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>data<span class="token punctuation">[</span>s<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">Pop</span><span class="token punctuation">(</span>StackType <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    e <span class="token operator">=</span> s<span class="token operator">-></span>data<span class="token punctuation">[</span>s<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>top<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">GetTop</span><span class="token punctuation">(</span>StackType <span class="token operator">*</span>s<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    e <span class="token operator">=</span> s<span class="token operator">-></span>data<span class="token punctuation">[</span>s<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*共享栈，适用于一方可能用到满，另一方还有很多空间栈空：top1 == -1   top2 == MAXSIZE栈满：top1 ==top2-1进栈出栈的时候top2的操作和top1是反的*/</span><span class="token comment">//********************************************************************</span><span class="token comment">//一般，尾递归算法可以通过循环或者迭代转换为等价的非递归算法</span><span class="token keyword">int</span> <span class="token function">Fib2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> s<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            s <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            a <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*对于不是尾递归的复杂递归，可以在 理解递归调用实现过程 的基础上用栈来模拟递归执行过程(这是关键啊)，从而将其转换为等价的非递归算法*/</span><span class="token comment">//汉诺塔问题的非递归实现：注意栈的结构决定了e1,e3的push顺序和实际执行顺序相反！</span><span class="token keyword">void</span> <span class="token function">Hanoi2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    StackType <span class="token operator">*</span>st<span class="token punctuation">;</span>    ElemType e<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">;</span> <span class="token comment">//一共要用到这么多变量</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">InitStack</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>    e<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    e<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>    e<span class="token punctuation">.</span>z <span class="token operator">=</span> z<span class="token punctuation">;</span>    <span class="token function">Push</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Pop</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>flag <span class="token operator">==</span> false<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            e1<span class="token punctuation">.</span>n <span class="token operator">=</span> e<span class="token punctuation">.</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            e1<span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">.</span>y<span class="token punctuation">;</span>            e1<span class="token punctuation">.</span>y <span class="token operator">=</span> e<span class="token punctuation">.</span>x<span class="token punctuation">;</span>            e1<span class="token punctuation">.</span>z <span class="token operator">=</span> e<span class="token punctuation">.</span>z<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e1<span class="token punctuation">.</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                e1<span class="token punctuation">.</span>flag <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token keyword">else</span>                e1<span class="token punctuation">.</span>flag <span class="token operator">=</span> false<span class="token punctuation">;</span>            <span class="token function">Push</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> e1<span class="token punctuation">)</span><span class="token punctuation">;</span>            e2<span class="token punctuation">.</span>n <span class="token operator">=</span> e<span class="token punctuation">.</span>n<span class="token punctuation">;</span>            e2<span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">.</span>x<span class="token punctuation">;</span>            e2<span class="token punctuation">.</span>y <span class="token operator">=</span> e<span class="token punctuation">.</span>y<span class="token punctuation">;</span>            <span class="token function">Push</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span>            e3<span class="token punctuation">.</span>n <span class="token operator">=</span> e<span class="token punctuation">.</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            e3<span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">.</span>x<span class="token punctuation">;</span>            e3<span class="token punctuation">.</span>y <span class="token operator">=</span> e<span class="token punctuation">.</span>z<span class="token punctuation">;</span>            e3<span class="token punctuation">.</span>z <span class="token operator">=</span> e<span class="token punctuation">.</span>y<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e3<span class="token punctuation">.</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                e3<span class="token punctuation">.</span>flag <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token keyword">else</span>                e3<span class="token punctuation">.</span>flag <span class="token operator">=</span> false<span class="token punctuation">;</span>            <span class="token function">Push</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> e3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"将%d个盘片从%c移动到%c\n"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>n<span class="token punctuation">,</span> e<span class="token punctuation">.</span>x<span class="token punctuation">,</span> e<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">DestroyStack</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//递归算法执行中，最长的递归调用的链长称为该算法的递归调用深度</span><span class="token comment">/*设计队规算法的基本步骤是先确定问题的递归模型，再转化成C/C++语言的函数确定递归模型的步骤是：1. 对原问题f(n)进行分析，假设出合理的小问题f(n-1)2. 给出f(n)与f(n-1)甚至更多项之间的关系，也就是确定递归体，也就是数学归纳法中的假设i = n-1成立，求证 i =n3. 找到特定情况如f(1)作为递归出口 4. 注意栈的次序和你的逻辑次序可能需要一定的调整*/</span><span class="token comment">//有0~i个元素，求最小值，思路是找到前面的最小值</span><span class="token keyword">double</span> <span class="token function">Min</span><span class="token punctuation">(</span><span class="token keyword">double</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> min<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        min <span class="token operator">=</span> <span class="token function">Min</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">></span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> min<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-数组"><a href="#5-数组" class="headerlink" title="5.数组"></a>5.数组</h1><p>通常只有读和写两种操作。</p><p>每个元素占k个存储单元，则LOC(ai) = LOC(a1)+(i-1) x k</p><p>二维数组大家都是按行存放的，为啥要搞出按列来。</p><h2 id="特殊矩阵压缩"><a href="#特殊矩阵压缩" class="headerlink" title="特殊矩阵压缩"></a>特殊矩阵压缩</h2><p>对于ai,j  = bk</p><ol><li><p>对称矩阵 P169</p><p>k = i(i+1)/2 + j   i&gt;=j                     k= j(j+1)/2  +i  j&gt;=i</p></li><li><p>下三角和对称矩阵十分相似，但是上三角还是有点差距的，最后一位有一个常数c P70</p><p>上三角：k = i(2n-i+1)/2 +j-i   i&lt;=j           n(n+1)/2   i&gt;j</p><p>下三角：k = i(i+1)/2 + j   i&gt;=j                  n(n+1)/2   i&lt;j</p></li><li><p>三对角矩阵且存储到一维数组时，k = 2i+j   b = 1</p></li></ol><p>这样的压缩存储只需在算法中按公式作映射就可以实现随机存取</p><h2 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h2><p>非零元素具有随机性，用三元组表，十字链表比较复杂来存取</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M</span> <span class="token expression"><span class="token number">100</span>       </span><span class="token comment">//行数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">200</span>       </span><span class="token comment">//列数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">100</span> </span><span class="token comment">//假设最多只有100个非零项</span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> r<span class="token punctuation">;</span>      <span class="token comment">//行号</span>    <span class="token keyword">int</span> c<span class="token punctuation">;</span>      <span class="token comment">//列号</span>    ElemType d<span class="token punctuation">;</span> <span class="token comment">//元素值</span><span class="token punctuation">&#125;</span> TupNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> rows<span class="token punctuation">;</span>    <span class="token keyword">int</span> cols<span class="token punctuation">;</span>    <span class="token keyword">int</span> nums<span class="token punctuation">;</span>    TupNode data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> TSMatrix<span class="token punctuation">;</span><span class="token comment">//从二维稀疏矩阵创建三元组表示,有点新奇哈哈</span><span class="token keyword">void</span> <span class="token function">CreateMat</span><span class="token punctuation">(</span>TSMatrix <span class="token operator">&amp;</span>t<span class="token punctuation">,</span> ElemType A<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    t<span class="token punctuation">.</span>rows <span class="token operator">=</span> M<span class="token punctuation">;</span>    t<span class="token punctuation">.</span>cols <span class="token operator">=</span> N<span class="token punctuation">;</span>    t<span class="token punctuation">.</span>nums <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>t<span class="token punctuation">.</span>nums<span class="token punctuation">]</span><span class="token punctuation">.</span>d <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>t<span class="token punctuation">.</span>nums<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> i<span class="token punctuation">;</span>                t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>t<span class="token punctuation">.</span>nums<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">=</span> j<span class="token punctuation">;</span>                t<span class="token punctuation">.</span>nums<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//三元组元素的赋值，不存在（0）时插入一个非零元素，存在时修改要理解好他这个数据结构是怎样的</span>bool <span class="token function">Value</span><span class="token punctuation">(</span>TSMatrix <span class="token operator">&amp;</span>t<span class="token punctuation">,</span> ElemType x<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> t<span class="token punctuation">.</span>rows <span class="token operator">||</span> j <span class="token operator">>=</span> t<span class="token punctuation">.</span>cols<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>nums <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&lt;</span> i<span class="token punctuation">)</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>nums <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">==</span> i <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>        k<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//这个查找方式。。。秀啊</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">==</span> i <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">==</span> j<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">//存在这样的非0元素</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k1 <span class="token operator">=</span> t<span class="token punctuation">.</span>nums <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k1 <span class="token operator">>=</span> k<span class="token punctuation">;</span> k1<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token comment">//这里注意带 =，不然第k项原本有意义的就被覆盖了</span>        <span class="token punctuation">&#123;</span>            t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>            t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>            t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>d <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> i<span class="token punctuation">;</span>        t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">=</span> j<span class="token punctuation">;</span>        t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d <span class="token operator">=</span> x<span class="token punctuation">;</span>        t<span class="token punctuation">.</span>nums<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//最终四步处理</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">Assign</span><span class="token punctuation">(</span>TSMatrix t<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> t<span class="token punctuation">.</span>rows <span class="token operator">||</span> j <span class="token operator">>=</span> t<span class="token punctuation">.</span>cols<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>nums <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&lt;</span> i<span class="token punctuation">)</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>nums <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">==</span> i <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">==</span> i <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">==</span> j<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//返回0</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DispMat</span><span class="token punctuation">(</span>TSMatrix t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>nums <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t%d\t%d\t%d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>rows<span class="token punctuation">,</span> t<span class="token punctuation">.</span>cols<span class="token punctuation">,</span> t<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t------------------------\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>nums<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t%d\t%d\t%d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">,</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//转置，把列号放在前面，那就要依次查找列号，高效的是快速转置</span><span class="token keyword">void</span> <span class="token function">TranTat</span><span class="token punctuation">(</span>TSMatrix t<span class="token punctuation">,</span> TSMatrix <span class="token operator">&amp;</span>tb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span> k1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> v<span class="token punctuation">;</span> <span class="token comment">//k1记录tb中的元素个数</span>    tb<span class="token punctuation">.</span>rows <span class="token operator">=</span> t<span class="token punctuation">.</span>cols<span class="token punctuation">;</span>    tb<span class="token punctuation">.</span>cols <span class="token operator">=</span> t<span class="token punctuation">.</span>rows<span class="token punctuation">;</span>    tb<span class="token punctuation">.</span>nums <span class="token operator">=</span> t<span class="token punctuation">.</span>nums<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>nums <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>cols<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//每一列都完整的遍历一遍，效率巨低。</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>nums<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">==</span> v<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    tb<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>                    tb<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>                    tb<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token punctuation">.</span>d <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">;</span>                    k1<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//接下来是十字链表的数据结构P178</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Max</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>N<span class="token punctuation">)</span> <span class="token operator">?</span> M <span class="token operator">:</span> N<span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">mtxn</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> row<span class="token punctuation">;</span>    <span class="token keyword">int</span> col<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">mtxn</span> <span class="token operator">*</span>right<span class="token punctuation">,</span> <span class="token operator">*</span>down<span class="token punctuation">;</span>  <span class="token comment">//向右循环的行指针和向下循环的列指针</span>    <span class="token keyword">union</span>    <span class="token punctuation">&#123;</span>        ElemType value<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">mtxn</span> <span class="token operator">*</span>link<span class="token punctuation">;</span> <span class="token comment">//指向下个头节点</span>    <span class="token punctuation">&#125;</span> tag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> MatNode<span class="token punctuation">;</span><span class="token comment">//代价是运算算法比较复杂</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h2><p>广义表的特征：</p><ol><li>广义表中的数据元素是有相对次序的</li><li>长度定义为最外层包含元素的个数</li><li>深度定义为包含括弧的重数，原子的深度为0，空表的深度为1</li><li>广义表可以共享，这种叫再入表</li><li>广义表可以是一个递归表，一个广义表可以是自己的子表，这种叫递归表，深度∞，长度有限</li></ol><p>不讨论再入表和递归表，小写字母表示原子，大写字母表示广义表的表名</p><p>没有给出表明的叫做<em>匿名表</em> ，用 <strong>·</strong> 表示</p><p>表头：head（GL）叫做表头，取第一个元素，tail（GL）为其余所有部分（<strong>包括原来的括号</strong>），显然一个广义表的表尾始终为一个广义表，空表无表头表尾：</p><p>A（）无表头表尾</p><p>B（e） 表头e   表尾（） <strong>空的也会被算上！！</strong></p><p>C（a，· （b,c,d）） 表头 a   表尾（（b,c,c））<strong>注意有两层括号</strong>，看来表尾会保持原有的深度</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lnode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> tag<span class="token punctuation">;</span> <span class="token comment">//标识符 0为原子节点，1为表节点</span>    <span class="token keyword">union</span>    <span class="token punctuation">&#123;</span>        ElemType data<span class="token punctuation">;</span>         <span class="token comment">//存放数据值</span>        <span class="token keyword">struct</span> <span class="token class-name">lnode</span> <span class="token operator">*</span>sublist<span class="token punctuation">;</span> <span class="token comment">//指向子表的指针</span>    <span class="token punctuation">&#125;</span> val<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">lnode</span> <span class="token operator">*</span>link<span class="token punctuation">;</span> <span class="token comment">//同一层的下一个元素</span><span class="token punctuation">&#125;</span> GLNode<span class="token punctuation">;</span><span class="token comment">//tag = 1的节点可以看成是一个单链表的头节点，指向子表的首节点,通过递归性，有两种解法</span><span class="token comment">//解法1，把整个看成一个带头节点的单链表，种类分原子和子表，子表类似整个表，而原子则仅仅是原子处理罢了。</span><span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span>GLNode <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    GLNode <span class="token operator">*</span>gl <span class="token operator">=</span> g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>gl <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gl<span class="token operator">-></span>tag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">fun1</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//z</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"原子处理语句"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        gl <span class="token operator">=</span> gl<span class="token operator">-></span>link<span class="token punctuation">;</span> <span class="token comment">//处理后继元素</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//解法2，对于元素节点，其兄弟域的节点和整个广义表是相似的，对于表节点，其元素域和兄弟域的处理均与整个广义表相似</span><span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span>GLNode <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-></span>tag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>          <span class="token comment">//为子表</span>            <span class="token function">fun2</span><span class="token punctuation">(</span>g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//先递归处理表节点的元素域</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"原子处理语句"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fun2</span><span class="token punctuation">(</span>g<span class="token operator">-></span>link<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//处理两种节点的兄弟（不用分类，因为无论什么节点，兄弟都相似于整个表）</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//实际问题中根据求解问题的特点自行选择其中来设计递归求解，比如计数：</span><span class="token keyword">int</span> <span class="token function">Count1</span><span class="token punctuation">(</span>GLNode <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    GLNode <span class="token operator">*</span>gl <span class="token operator">=</span> g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>gl <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gl<span class="token operator">-></span>tag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            n <span class="token operator">+=</span> <span class="token function">Count1</span><span class="token punctuation">(</span>gl<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">)</span><span class="token punctuation">;</span>        gl <span class="token operator">=</span> gl<span class="token operator">-></span>link<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Count2</span><span class="token punctuation">(</span>GLNode <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    GLNode <span class="token operator">*</span>gl <span class="token operator">=</span> g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>gl <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gl<span class="token operator">-></span>tag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            n <span class="token operator">+=</span> <span class="token function">Count2</span><span class="token punctuation">(</span>gl<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>        n <span class="token operator">+=</span> <span class="token function">Count2</span><span class="token punctuation">(</span>g<span class="token operator">-></span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">GLLength</span><span class="token punctuation">(</span>GLNode <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    GLNode <span class="token operator">*</span>gl <span class="token operator">=</span> g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>g <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        n<span class="token operator">++</span><span class="token punctuation">;</span>        gl <span class="token operator">=</span> gl<span class="token operator">-></span>link<span class="token punctuation">;</span> <span class="token comment">//只用算最表层的哈哈</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">GLDepth</span><span class="token punctuation">(</span>GLNode <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    GLNode <span class="token operator">*</span>gl<span class="token punctuation">;</span>    <span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dep<span class="token punctuation">;</span> <span class="token comment">//maxd是同一层子表中深度的最大值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-></span>tag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    gl <span class="token operator">=</span> g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>gl <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//这下面这个操作还是挺妙的</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>gl <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gl<span class="token operator">-></span>tag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            dep <span class="token operator">=</span> <span class="token function">GLDepth</span><span class="token punctuation">(</span>gl<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//dep代表该节点的深度！自顶向下</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dep <span class="token operator">></span> maxd<span class="token punctuation">)</span>                maxd <span class="token operator">=</span> dep<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        gl <span class="token operator">=</span> gl<span class="token operator">-></span>link<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>maxd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回这一层的最大值到上一层的节点</span><span class="token punctuation">&#125;</span><span class="token comment">//要输出成括号的形式还是有点麻烦的，元素直接输出值，子表则输出 ‘（’，空表输出‘#’，非空子表递归，再输出‘）’</span><span class="token comment">//这里其实用到的就是递归思想，仅考虑一层。非常简单</span><span class="token keyword">void</span> <span class="token function">DispGL</span><span class="token punctuation">(</span>GLNode <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-></span>tag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> g<span class="token operator">-></span>val<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">DispGL</span><span class="token punctuation">(</span>g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这个括号不要漏了</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-></span>link <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">DispGL</span><span class="token punctuation">(</span>g<span class="token operator">-></span>link<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//兄弟应该在子表后面输出</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//与输出对应的，建立广义表的链式存储结构,记得空表是 “#”，遇到则将g->val.sublist置空</span><span class="token comment">//扫描到 （ 则用g递归开启一个子表节点，遇到 ）说明已经处理完，g置空</span><span class="token comment">//时空复杂的均为O（n）</span><span class="token comment">//切记把链式结构和符号表示分开想，不要混在一起！</span><span class="token comment">//巧妙地递归逻辑，配合引用参数（注意这里默认一个元素是‘单个’字符）</span><span class="token comment">//这里我一开始理解难受是因为它既有嵌套递归，又有把子任务视为平级的递归，害。</span>GLNode <span class="token operator">*</span><span class="token function">CreateGL</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    GLNode <span class="token operator">*</span>g<span class="token punctuation">;</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token operator">*</span>s<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//取一个字符,直接操作指针的话，便于后续调用</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        g <span class="token operator">=</span> <span class="token punctuation">(</span>GLNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>GLNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            g<span class="token operator">-></span>tag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist <span class="token operator">=</span> <span class="token function">CreateGL</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span>            g <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">)</span>            g <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            g<span class="token operator">-></span>tag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            g<span class="token operator">-></span>val<span class="token punctuation">.</span>data <span class="token operator">=</span> ch<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        g <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//若s扫描完，把g置空</span>    ch <span class="token operator">=</span> <span class="token operator">*</span>s<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">','</span><span class="token punctuation">)</span>            g<span class="token operator">-></span>link <span class="token operator">=</span> <span class="token function">CreateGL</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            g<span class="token operator">-></span>link <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> g<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//采用解法1,递归销毁，注意要灵活一点，顺序什么的不影响那么怎样方便怎样来</span><span class="token keyword">void</span> <span class="token function">DestroyGL</span><span class="token punctuation">(</span>GLNode <span class="token operator">*</span><span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    GLNode <span class="token operator">*</span>g1<span class="token punctuation">,</span> <span class="token operator">*</span>g2<span class="token punctuation">;</span>    g1 <span class="token operator">=</span> g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>g1 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>g1<span class="token operator">-></span>tag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            g2 <span class="token operator">=</span> g1<span class="token operator">-></span>link<span class="token punctuation">;</span> <span class="token comment">//保存兄弟节点</span>            <span class="token function">free</span><span class="token punctuation">(</span>g1<span class="token punctuation">)</span><span class="token punctuation">;</span>            g1 <span class="token operator">=</span> g2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            g2 <span class="token operator">=</span> g1<span class="token operator">-></span>link<span class="token punctuation">;</span>            <span class="token function">DestroyGL</span><span class="token punctuation">(</span>g1<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">)</span><span class="token punctuation">;</span>            g1 <span class="token operator">=</span> g2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-树"><a href="#6-树" class="headerlink" title="6.树"></a>6.树</h1><h2 id="基本和存储"><a href="#基本和存储" class="headerlink" title="基本和存储"></a>基本和存储</h2><p>有树形表示法，文氏图表示法，凹入表示法和括号表示法等等。</p><p>树的定义是递归的，树的性质在P192</p><ol><li>结点数 = 所有节点的出度（其实就是边数） + 1</li><li>度为m的树（就是节点中最大出度为m）中第i层上最多有m^(i-1)个节点，若每一层都是满的，称为满m次树</li><li>高度为h的m次树最多有(m^h - 1)/(m-1) 个节点</li><li>具有n个结点的m次树的最小高度为logm(n(m-1)+1)向大取整</li></ol><p>其实性质2，3，4说的都是一种情况。。。</p><p>对于m次树，含有n个节点，那么最大高度maxh = n - (m-1) 显然，除了最后一个节点，其他度都为1就好了</p><p>基本运算有寻找特定节点，插入/删除特定节点，<strong>遍历</strong></p><p>遍历的先中后原来是根节点的输出次序，一般都习惯先左后右。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//存储结构</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token comment">//1.双亲存储，顺序存储，根节点的父节点设置为-1，其余设置为父节点在顺序中的位置</span><span class="token comment">//求双亲容易，但是求某个节点的子节点难，要遍历整个存储结构</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">100</span> </span><span class="token comment">//假设最多只有100个非零项</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSons</span> <span class="token expression"><span class="token number">100</span> </span><span class="token comment">//假设树的度为100</span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">int</span> parent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> PTree<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//2.子链存储，每个节点有指向所有孩子结点的指针，因为难以确定数目，统一用最大的【树的度】来分配</span><span class="token comment">//找双亲费时，找孩子很方便，树的度与平均度偏差较大时，浪费</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSons</span> <span class="token expression"><span class="token number">100</span> </span><span class="token comment">//假设树的度为100</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>sons<span class="token punctuation">[</span>MaxSons<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> TSonNode<span class="token punctuation">;</span><span class="token comment">//以此为基础求树的高度</span><span class="token keyword">int</span> <span class="token function">TreeHeight1</span><span class="token punctuation">(</span>TSonNode <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    TSonNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> h<span class="token punctuation">,</span> maxh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MaxSons<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> t<span class="token operator">-></span>sons<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                h <span class="token operator">=</span> <span class="token function">TreeHeight1</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//求子树的深度</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>maxh <span class="token operator">&lt;</span> h<span class="token punctuation">)</span>                    maxh <span class="token operator">=</span> h<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>maxh <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3.孩子兄弟链，每个节点三个域，一个元素，一个指向长子，一个指向兄弟</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">tnode</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">tnode</span> <span class="token operator">*</span>hp<span class="token punctuation">;</span> <span class="token comment">//指向兄弟 horizontal point</span>    <span class="token keyword">struct</span> <span class="token class-name">tnode</span> <span class="token operator">*</span>vp<span class="token punctuation">;</span> <span class="token comment">//指向孩子 vertical point</span><span class="token punctuation">&#125;</span> TSBNode<span class="token punctuation">;</span><span class="token comment">//其实这种结构是把树转换为二叉树的存储结构</span><span class="token comment">//最大的优点就是方便的实现树和二叉树的相互转换,缺点时查找父节点麻烦</span><span class="token keyword">int</span> <span class="token function">TreeHeight2</span><span class="token punctuation">(</span>TSBNode <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    TSBNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span> h<span class="token punctuation">,</span> maxh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> t<span class="token operator">-></span>vp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">//遍历同一层的p</span>    <span class="token punctuation">&#123;</span>        h <span class="token operator">=</span> <span class="token function">TreeHeight2</span><span class="token punctuation">(</span>p<span class="token operator">-></span>vp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//求出这一层的最大值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxh <span class="token operator">&lt;</span> h<span class="token punctuation">)</span>            maxh <span class="token operator">=</span> h<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>hp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> maxh <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>呜呜呜，好长这里，冲冲冲！</p><p>二叉树是区分左右的，任何m次数都可以转化为二叉树结构</p><p><strong>满二叉树</strong>：叶子节点都集中在二叉树的最下一层，所有分支节点都有左右孩子的树，只有度为0或2的节点。</p><p>可以进行层序编号，第一个是0，若节点为x，则左孩子为2x，右孩子为2x + 1</p><p><strong>完全二叉树</strong>：只有最下两层节点度数可以小于2，且叶子节点全都靠左排列。</p><p>最多只有1个出度为1的节点，且节点有左孩子，结点总数n为奇数时没有出度为1的结点</p><p><strong>满二叉树是完全二叉树的特例</strong></p><p>二叉树性质：</p><ol><li><p>非空二叉树上的<strong>叶子节点数</strong>等于<strong>双分支结点数+1</strong></p><p>用到了：m(度的和) = n-1   度的和 = n1 + 2n2    n = n0(叶子结点数) + n1 + n2</p></li><li><p>非空二叉树的第i层最多只有2^(i-1)个结点</p></li><li><p>高度为h的二叉树最多有 2^h - 1 个结点</p></li><li><p>若节点为x，则左孩子为2x，右孩子为2x + 1，父节点为x/2 向下取整</p></li><li><p>具有n个节点的完全二叉树高度为 log2(n+1)向上取整 或者log2n向下取整 +1</p></li></ol><p>树转二叉树：相邻兄弟加线，保留长子线，其余删除    森林则把根节点链接</p><p>二叉树转树：若某节点为双亲的左孩子，则把该节点的右孩子，右孩子的右孩子都与该节点的双亲连起来，</p><p>删除原二叉树中所有双亲结点与右孩子结点之间的连线。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token comment">/*先看看顺序存储结构对于完全二叉树和满二叉树，可以实现随机存储，完全二叉树最后几个空的用 # 表示对于一般的二叉树，可以增添一些不存在的空结点，使之成为一棵完全二叉树的形式。图可以看看P204  */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">100</span> </span><span class="token comment">//假设最多只有100个非零项</span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> ElemType SqBinTree<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//但是如果空的太多，会造成空间的大量浪费，但是查找子节点和父节点都很方便。</span><span class="token comment">//当然还有一般顺序存储结构的缺点，就是插入，删除很不方便</span><span class="token comment">//链式存储，称为二叉链，用根节点指针b唯一标识整个存储结构，称为二叉树b</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>lchild<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span>    <span class="token comment">//struct node *parent;</span><span class="token punctuation">&#125;</span> BTNode<span class="token punctuation">;</span><span class="token comment">//这样节省空间，但不方便访问父节点，可以增加一个指向父节点的指针域parent来解决。</span><span class="token comment">//后续一般假设一棵二叉树中所有结点值均不同，为单个字符</span><span class="token comment">//创建，销毁，按值查找（父），找孩子，求高度，输出   创建和输出都用括号表示法</span><span class="token comment">//首先得理解二叉树的括号表示，模拟一个栈来实现,因为栈的实现很简单，并没有封装</span><span class="token comment">//这个用栈保存双亲结点的思想太妙了！栈顶存放的是当前处理节点的父节点</span><span class="token keyword">void</span> <span class="token function">CreateBTree</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BTNode <span class="token operator">*</span>St<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">//St为顺序栈</span>    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//j为str索引,k用来判断孩子类型</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    ch <span class="token operator">=</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">'('</span><span class="token operator">:</span>            top<span class="token operator">++</span><span class="token punctuation">;</span>            St<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>            k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">')'</span><span class="token operator">:</span>            top<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">','</span><span class="token operator">:</span>            k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            p <span class="token operator">=</span> <span class="token punctuation">(</span>BTNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">-></span>data <span class="token operator">=</span> ch<span class="token punctuation">;</span>            p<span class="token operator">-></span>lchild <span class="token operator">=</span> p<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                b <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment">//这是只存在一次的还未建立根节点的情况</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token comment">//只有1和2的情况来回切换！</span>                <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                    St<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token operator">-></span>lchild <span class="token operator">=</span> p<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                    St<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token operator">-></span>rchild <span class="token operator">=</span> p<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        ch <span class="token operator">=</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestroyBTree</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">DestroyBTree</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DestroyBTree</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//查找x的结点</span>BTNode <span class="token operator">*</span><span class="token function">FindeNode</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BTNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">-></span>data <span class="token operator">==</span> x<span class="token punctuation">)</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> <span class="token function">FindeNode</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token function">FindeNode</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//p</span>        <span class="token comment">//这也把没找到的情况包含在内了，要学会简化代码</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>BTNode <span class="token operator">*</span><span class="token function">LchildNode</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>BTNode <span class="token operator">*</span><span class="token function">RchildNode</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//求高度</span><span class="token keyword">int</span> <span class="token function">BTHeight</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> lchild<span class="token punctuation">,</span> rchild<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        lchild <span class="token operator">=</span> <span class="token function">BTHeight</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        rchild <span class="token operator">=</span> <span class="token function">BTHeight</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>lchild <span class="token operator">></span> rchild <span class="token operator">?</span> lchild <span class="token operator">:</span> rchild<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//终究还是比广义表简单不少啊,当是NULL的时候不操作，非常流弊</span><span class="token keyword">void</span> <span class="token function">DispBTree</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> b<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">-></span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">||</span> b<span class="token operator">-></span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">DispBTree</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">DispBTree</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//突然想玩一下下</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"A(B(D(,G))C(E,F))"</span><span class="token punctuation">;</span>    BTNode <span class="token operator">*</span>BT<span class="token punctuation">;</span>    <span class="token function">CreateBTree</span><span class="token punctuation">(</span>BT<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DispBTree</span><span class="token punctuation">(</span>BT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nI prefer Python, C is to complex and confused"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*遍历，四种顺序，层次遍历是非递归的一颗二叉树可以分为根节点和子树两类，根节点直接处理，子树递归处理如果必须先处理子树，那就用后序，如果必须先处理根节点，那就用先序，否则随便如果要区分左，右树，那就要考虑中序，但是比较少*/</span><span class="token keyword">void</span> <span class="token function">Preorder</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> b<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Preorder</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Preorder</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Inorder</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Inorder</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> b<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Inorder</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">PostOrder</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">PostOrder</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PostOrder</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> b<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//求给定二叉树的所有结点个数</span><span class="token keyword">int</span> <span class="token function">Nodes</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">Nodes</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Nodes</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//这个是先左后右后根，是后续遍历</span><span class="token punctuation">&#125;</span><span class="token comment">//输出所有的叶子节点</span><span class="token comment">/*递归模型很重要！f(b) === 不做任何事情    b=NULLf(b) === 输出b的data域   b为叶子结点f(b) === f(b->lchild);f(b->rchild) 其他情况*/</span><span class="token keyword">void</span> <span class="token function">DispLeaf</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">-></span>lchild <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> b<span class="token operator">-></span>rchild <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> b<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DispLeaf</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DispLeaf</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//求深度，h置处置1，这个和之前那个稍微有点不同，具体分析</span><span class="token keyword">int</span> <span class="token function">Level</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">,</span> ElemType x<span class="token punctuation">,</span> <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> l<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">-></span>data <span class="token operator">==</span> x<span class="token punctuation">)</span>        <span class="token keyword">return</span> h<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        l <span class="token operator">=</span> <span class="token function">Level</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">,</span> x<span class="token punctuation">,</span> h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token punctuation">)</span>            <span class="token keyword">return</span> l<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Level</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">,</span> x<span class="token punctuation">,</span> h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//又见到了这种操作</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//求b树第k层的结点数,h是用来传递参数，初始为1</span><span class="token comment">//这是另一种递归思路，并没有回带的过程，利用了void和引用</span><span class="token comment">//如果在c语言中，可以用全局变量来代替所谓的引用。</span><span class="token keyword">void</span> <span class="token function">Lnodenum</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> h<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">&lt;</span> k<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">Lnodenum</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">,</span> h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Lnodenum</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">,</span> h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出x的结点的所有祖先,多判断一级的思维</span>bool <span class="token function">ancestor</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">-></span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> b<span class="token operator">-></span>lchild<span class="token operator">-></span>data <span class="token operator">==</span> x <span class="token operator">||</span> b<span class="token operator">-></span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> b<span class="token operator">-></span>rchild<span class="token operator">-></span>data <span class="token operator">==</span> x<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">putchar</span><span class="token punctuation">(</span>b<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ancestor</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">ancestor</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">putchar</span><span class="token punctuation">(</span>b<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//非递归算法区域P218</span><span class="token comment">//层次遍历算法</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    BTNode <span class="token operator">*</span>data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">,</span> rear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> SqQueue<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LevelOrder</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BTNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    SqQueue <span class="token operator">*</span>qu<span class="token punctuation">;</span>    <span class="token function">enqueue</span><span class="token punctuation">(</span>qu<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>qu<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">deQueue</span><span class="token punctuation">(</span>qu<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">putchar</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token function">enqueue</span><span class="token punctuation">(</span>qu<span class="token punctuation">,</span> p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token function">enqueue</span><span class="token punctuation">(</span>qu<span class="token punctuation">,</span> p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二叉树构造"><a href="#二叉树构造" class="headerlink" title="二叉树构造"></a>二叉树构造</h2><p>由先序序列+中序序列，或者中序序列+后序序列唯一地确定一颗二叉树</p><p>实际上，先序序列的作用是确定一棵二叉树的根节点，中序序列的作用是确定左、右子树的中序序列，从而进一步确定先序序列，递归构造左右子树。</p><p>原理在P229</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//二叉树的构造</span><span class="token comment">//pre存放先序序列，in存放中序序列，n为二叉树的节点个数</span><span class="token comment">//其实函数的参数选择同时得考虑递归时不同层级间需要的参数</span>BTNode <span class="token operator">*</span><span class="token function">CreateBT1</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>pre<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>in<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BTNode <span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token punctuation">(</span>BTNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token operator">*</span>pre<span class="token punctuation">;</span> <span class="token comment">//根节点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> in<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> in <span class="token operator">+</span> n<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">==</span> <span class="token operator">*</span>pre<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    k <span class="token operator">=</span> p <span class="token operator">-</span> in<span class="token punctuation">;</span> <span class="token comment">//确定根节点在in中的位置</span>    b<span class="token operator">-></span>lchild <span class="token operator">=</span> <span class="token function">CreateBT1</span><span class="token punctuation">(</span>pre <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> in<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token function">CreateBT1</span><span class="token punctuation">(</span>pre <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这里不能光考虑第一次的，要用通用的写法</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//和上面基本一致</span>BTNode <span class="token operator">*</span><span class="token function">CreateBT2</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>post<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>in<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BTNode <span class="token operator">*</span>b    <span class="token keyword">char</span> r<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">//因为根节点在后头，所以得用一个变量单独保存</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token punctuation">(</span>BTNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>post <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token operator">-></span>data <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> post<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> post <span class="token operator">+</span> n<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">==</span> r<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    k <span class="token operator">=</span> p <span class="token operator">-</span> post<span class="token punctuation">;</span>    b<span class="token operator">-></span>lchild <span class="token operator">=</span> <span class="token function">CreateBT2</span><span class="token punctuation">(</span>post<span class="token punctuation">,</span> in<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token function">CreateBT2</span><span class="token punctuation">(</span>post <span class="token operator">+</span> k<span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="哈夫曼"><a href="#哈夫曼" class="headerlink" title="哈夫曼"></a>哈夫曼</h2><p>WPL  Weighted Path Length 带权路径长度</p><p>定理：假如哈夫曼树有n个叶子结点，那么一共有2n+1个</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//哈夫曼树采用数组存放，总的结点数可以算出来 P239</span><span class="token comment">//前n个存放原结点（叶子结点），剩下的存放分支节点。</span><span class="token comment">//思路是先将全部节点的parent、lchild、rchild赋值为-1,然后不断找最小的放在后面，同时补全信息</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span>    <span class="token keyword">double</span> weight<span class="token punctuation">;</span>    <span class="token keyword">int</span> parent<span class="token punctuation">;</span>    <span class="token keyword">int</span> lchild<span class="token punctuation">;</span>    <span class="token keyword">int</span> rchild<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> HTNode<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">CreateHT</span><span class="token punctuation">(</span>HTNode ht<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n0<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> k<span class="token punctuation">,</span> lnode<span class="token punctuation">,</span> rnode<span class="token punctuation">;</span>    <span class="token keyword">double</span> min1<span class="token punctuation">,</span> min2<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> n0 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lchild <span class="token operator">=</span> ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> n0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        min1 <span class="token operator">=</span> min2 <span class="token operator">=</span> <span class="token number">32767</span><span class="token punctuation">;</span>        lnode <span class="token operator">=</span> rnode <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token comment">//通过确定两个最小值的相对次序来巧妙地处理该问题</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ht<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>parent <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span> <span class="token comment">//在尚未构造二叉树的结点中查找</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ht<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">&lt;</span> min1<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    min2 <span class="token operator">=</span> min1<span class="token punctuation">;</span>                    rnode <span class="token operator">=</span> lnode<span class="token punctuation">;</span>                    min1 <span class="token operator">=</span> ht<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>                    lnode <span class="token operator">=</span> k<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ht<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">&lt;</span> min2<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    min2 <span class="token operator">=</span> ht<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>                    rnode <span class="token operator">=</span> k<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> ht<span class="token punctuation">[</span>lnode<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">+</span> ht<span class="token punctuation">[</span>rnode<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>        ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lchild <span class="token operator">=</span> lnode<span class="token punctuation">;</span>        ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rchild <span class="token operator">=</span> rnode<span class="token punctuation">;</span>        ht<span class="token punctuation">[</span>lnode<span class="token punctuation">]</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> i<span class="token punctuation">;</span>        ht<span class="token punctuation">[</span>rnode<span class="token punctuation">]</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//哈夫曼编码,规定左分支为0，右分支为1</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> cd<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//存放当前节点的哈夫曼编码</span>    <span class="token keyword">int</span> start<span class="token punctuation">;</span>  <span class="token comment">//表明cd[start..n0]部分是哈夫曼编码</span><span class="token punctuation">&#125;</span> HCode<span class="token punctuation">;</span><span class="token comment">//这是个从下向上的过程，但是最终是顺序的</span><span class="token keyword">void</span> <span class="token function">CreateHCode</span><span class="token punctuation">(</span>HTNode ht<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> HCode hcd<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n0<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> f<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    HCode hc<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n0<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        hc<span class="token punctuation">.</span>start <span class="token operator">=</span> n0<span class="token punctuation">;</span>        c <span class="token operator">=</span> i<span class="token punctuation">;</span>        f <span class="token operator">=</span> ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token punctuation">;</span> <span class="token comment">//初始化</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>f <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span> <span class="token comment">//循环到根节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ht<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>lchild <span class="token operator">==</span> c<span class="token punctuation">)</span>                hc<span class="token punctuation">.</span>cd<span class="token punctuation">[</span>hc<span class="token punctuation">.</span>start<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                hc<span class="token punctuation">.</span>cd<span class="token punctuation">[</span>hc<span class="token punctuation">.</span>start<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> f<span class="token punctuation">;</span>            f <span class="token operator">=</span> ht<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        hc<span class="token punctuation">.</span>start<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//因为多减了一次，加回来</span>        hcd<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> hc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-图"><a href="#7-图" class="headerlink" title="7.图"></a>7.图</h1><p>找强连通分量：先找一个有向环，如果外面的某个顶点到该环任意结点均有双向路径，则加入</p><p>带权图也称作网</p><h2 id="矩阵、表存储"><a href="#矩阵、表存储" class="headerlink" title="矩阵、表存储"></a>矩阵、表存储</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXV</span> <span class="token expression"><span class="token number">100</span>  </span><span class="token comment">//最大结点数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">32767</span> </span><span class="token comment">//所谓的正无穷，也就是没有路</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> InfoType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> no<span class="token punctuation">;</span>        <span class="token comment">//顶点编号</span>    InfoType info<span class="token punctuation">;</span> <span class="token comment">//其他信息</span><span class="token punctuation">&#125;</span> VertexType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> edges<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//邻接矩阵数组</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> e<span class="token punctuation">;</span>              <span class="token comment">//顶点数、边数</span>    VertexType vexs<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//存放结点信息</span><span class="token punctuation">&#125;</span> MatGraph<span class="token punctuation">;</span><span class="token comment">/*适合储存边比较多的稠密图邻接矩阵表示是唯一的，注意无向图、有向图每一行/列的意义非常适合提取两个顶点之间的边，适用于该目的的算法*/</span><span class="token comment">//邻接表结构是后续众多算法的基础，一定要弄清楚P259</span><span class="token comment">//每个顶点一个链表，链接关联的边。其中的每个边结点表示一条！边！的信息，not 点</span><span class="token comment">//头节点存储的则是顶点的信息，并指向首节点。</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ANode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">;</span>            <span class="token comment">//该边的临界点编号,指的是出边临界点</span>    <span class="token keyword">struct</span> <span class="token class-name">ANode</span> <span class="token operator">*</span>nextarc<span class="token punctuation">;</span> <span class="token comment">//指向下个边的指针</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span>            <span class="token comment">//该边的相关信息</span><span class="token punctuation">&#125;</span> ArcNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Vnode</span><span class="token punctuation">&#123;</span>    InfoType info<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>firstarc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> VNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    VNode adjlist<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//头节点数组</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> AdjGraph<span class="token punctuation">;</span><span class="token comment">//还有所谓的逆邻接表</span><span class="token comment">/*邻接表的表示不唯一，取决于算法和输入次序，适合边数目稀疏的图对于无向图，第i个单链表的边数目是顶点i的度，有向图则为出度，入度得统计所有的adjvex域为i的数目适合提取某个顶点的所有临界点*/</span><span class="token comment">//依次扫描，头插法插入。</span><span class="token keyword">void</span> <span class="token function">CreateAdj</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span><span class="token operator">&amp;</span>G<span class="token punctuation">,</span> <span class="token keyword">int</span> A<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//初始化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> INF<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                p <span class="token operator">=</span> <span class="token punctuation">(</span>ArcNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ArcNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token operator">-></span>adjvex <span class="token operator">=</span> j<span class="token punctuation">;</span>                p<span class="token operator">-></span>weight <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                p<span class="token operator">-></span>nextarc <span class="token operator">=</span> G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>                G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    G<span class="token operator">-></span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>    G<span class="token operator">-></span>e <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出规则为先输出头结点的定点信息，再依次输出所有结点的顶点编号</span><span class="token keyword">void</span> <span class="token function">DispAdj</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d:"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d[%d]"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">,</span> p<span class="token operator">-></span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestroyAdj</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span><span class="token operator">&amp;</span>G<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>pre<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        pre <span class="token operator">=</span> G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> pre<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                pre <span class="token operator">=</span> p<span class="token punctuation">;</span>                p <span class="token operator">=</span> pre<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">free</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//别忘了把头节点数组也释放掉</span><span class="token punctuation">&#125;</span><span class="token comment">//将邻接表转换为邻接矩阵</span><span class="token keyword">void</span> <span class="token function">ListToMat</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span><span class="token operator">&amp;</span>G<span class="token punctuation">,</span> MatGraph <span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>weight<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    g<span class="token punctuation">.</span>n <span class="token operator">=</span> G<span class="token operator">-></span>n<span class="token punctuation">;</span>    g<span class="token punctuation">.</span>e <span class="token operator">=</span> G<span class="token operator">-></span>e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*十字链表是给有向图用的，是邻接表和逆邻接表的结合，现在看其实非常简单。。不知道当时为啥讲那么久。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="图遍历及应用"><a href="#图遍历及应用" class="headerlink" title="图遍历及应用"></a>图遍历及应用</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//图的遍历，要求每个顶点仅被访问一次。</span><span class="token comment">//因为图不像树，存在回路，得设置一个访问标记数组visited,当访问过时置1，否则为0</span><span class="token comment">//深度优先Depyh First Search DFS</span><span class="token keyword">int</span> visited<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//全局置0,从v开始遍历</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span>G<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ArcNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2d"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//广度优先算法Breadth First Search BFS,显然这种结构要用到队列</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"linked_queue.cpp"</span></span><span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span>G<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> w<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    LinkQuNode <span class="token operator">*</span>qu<span class="token punctuation">;</span>    <span class="token function">InitQueue</span><span class="token punctuation">(</span>qu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> visited<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2d"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">enqueue</span><span class="token punctuation">(</span>qu<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>qu<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">dequeue</span><span class="token punctuation">(</span>qu<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2d"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span>                visited<span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token function">enqueue</span><span class="token punctuation">(</span>qu<span class="token punctuation">,</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历非连通图</span><span class="token keyword">void</span> <span class="token function">DFS1</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">BFS1</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">BFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">Connect</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    bool flag <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            flag <span class="token operator">=</span> false<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//图遍历算法的应用</span><span class="token comment">//深度搜索判断是否存在路径。</span><span class="token keyword">void</span> <span class="token function">ExitPath</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span>G<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> bool <span class="token operator">&amp;</span>has<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> w<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> v<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        has <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    p <span class="token operator">=</span> G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        w <span class="token operator">=</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">ExitPath</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> w<span class="token punctuation">,</span> v<span class="token punctuation">,</span> has<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出从u到v的一条路径，假设已知u到v间有路径。</span><span class="token comment">//只要正常遍历就好，绝对会输出一条路径，不过非常随机就是了。</span><span class="token keyword">void</span> <span class="token function">FindaPath</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span>G<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> path<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//d表示path中的路径长度，初始为-1</span>    <span class="token keyword">int</span> w<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    d<span class="token operator">++</span><span class="token punctuation">;</span>    path<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> v<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> d<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    p <span class="token operator">=</span> G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        w <span class="token operator">=</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">FindaPath</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> w<span class="token punctuation">,</span> v<span class="token punctuation">,</span> path<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//这个递归还是让人想了一会</span><span class="token keyword">void</span> <span class="token function">FindALLPath</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span>G<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> path<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//d表示path中的路径长度，初始为-1</span>    <span class="token keyword">int</span> w<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    d<span class="token operator">++</span><span class="token punctuation">;</span>    path<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> v<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> d<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    p <span class="token operator">=</span> G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        w <span class="token operator">=</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">FindALLPath</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> w<span class="token punctuation">,</span> v<span class="token punctuation">,</span> path<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>nextarc<span class="token punctuation">;</span> <span class="token comment">//递归体的核心就在这里</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//恢复环境，可以重复利用。</span><span class="token punctuation">&#125;</span><span class="token comment">//后面的广度优先算法的应用暂时没有更新</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><p>图的最小生成树是树的所有生成树中边上权值最小的。（实际上是选节点）</p><ul><li>n个顶点的话就有n - 1条边。</li><li>必须只使用该图中的边来构造</li><li>不能使用会产生回路的边。</li></ul><p>这个应用有很多，求最小生成树的算法：Prim 、克鲁斯卡尔</p><p>只要遍历一次，就能得到生成树，分为深度优先生成树和广度优先生成树。</p><p><strong>普利姆算法</strong></p><p>P281 依次选择最小边，因为需要频繁取边，所以图采用邻接矩阵更合适</p><p>这体现出了从算法逻辑设计到代码实现的过程也并非易事的，需要一些巧妙的构思</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// Prim算法</span><span class="token comment">//建议先阅读一下P284,搞清楚lowcost(到U中的最小边)和closet（最小边对应的顶点）,这种实时更新最值的思想很有用，简化了算法</span><span class="token keyword">void</span> <span class="token function">Prim</span><span class="token punctuation">(</span>MatGraph g<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> lowcost<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> MIN<span class="token punctuation">;</span>    <span class="token keyword">int</span> closet<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        lowcost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        closet<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token comment">//初始化</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//找出n - 1个顶点</span>    <span class="token punctuation">&#123;</span>        MIN <span class="token operator">=</span> INF<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> MIN<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                MIN <span class="token operator">=</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                k <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">//k记录最小边的顶点编号</span>            <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"边(%d,%d)权为%d\n"</span><span class="token punctuation">,</span> closet<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> MIN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出最小生成树的一条边</span>        lowcost<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                 <span class="token comment">//标记k已经加入U中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                closet<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>克鲁斯卡尔算法</strong></p><p>这才是正儿八经的选边。P285</p><p>当一个图有多个最小生成树时，这两个算法的求解结果不一定是相同的。</p><p>因为同样要频繁取边，也采用邻接矩阵来处理。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//关键在于如何判断选取一条边(i,j)加入到T中是否出现回路，可以通过判断顶点i,j是否同属于一个连通分量来解决</span><span class="token comment">//利用vset[0..n-1]数组来完成，太厉害了，i和j处理时，改成i或j的vset值都可以</span><span class="token comment">// Prim算法</span><span class="token comment">//建议先阅读一下P284,搞清楚lowcost(到U中的最小边)和closet（最小边对应的顶点）,这种实时更新最值的思想很有用，简化了算法</span><span class="token keyword">void</span> <span class="token function">Prim</span><span class="token punctuation">(</span>MatGraph g<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> lowcost<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> MIN<span class="token punctuation">;</span>    <span class="token keyword">int</span> closet<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        lowcost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        closet<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token comment">//初始化</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//找出n - 1个顶点</span>    <span class="token punctuation">&#123;</span>        MIN <span class="token operator">=</span> INF<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> MIN<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                MIN <span class="token operator">=</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                k <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">//k记录最小边的顶点编号</span>            <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"边(%d,%d)权为%d\n"</span><span class="token punctuation">,</span> closet<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> MIN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出最小生成树的一条边</span>        lowcost<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                 <span class="token comment">//标记k已经加入U中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                closet<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//克鲁斯卡尔</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> u<span class="token punctuation">;</span>    <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token keyword">int</span> w<span class="token punctuation">;</span>    <span class="token comment">//起始顶点，终止顶点和权值</span><span class="token punctuation">&#125;</span> Edge<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Maxsize</span> <span class="token expression"><span class="token number">20000</span> </span><span class="token comment">//最大边数</span></span><span class="token keyword">void</span> <span class="token function">Kruskal</span><span class="token punctuation">(</span>MatGraph g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> u1<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> sn1<span class="token punctuation">,</span> sn2<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">int</span> vset<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">;</span>    Edge E<span class="token punctuation">[</span>Maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//存放所有的边</span>    k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment">//e数组的下标</span>    <span class="token comment">//第一步，由g产生E</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> INF<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                E<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>u <span class="token operator">=</span> i<span class="token punctuation">;</span>                E<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> k<span class="token punctuation">;</span>                E<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token comment">//InsertSort(E,g.e)//对所有的边按照权值排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        vset<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">//初始化辅助数组</span>    k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment">//表示当前构造生成树的第几条边，初始为1</span>    j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment">//E中边的下标，初始为0</span>    <span class="token comment">//主体</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">)</span> <span class="token comment">//生成树有n-1条边</span>    <span class="token punctuation">&#123;</span>        u1 <span class="token operator">=</span> E<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">;</span>        v1 <span class="token operator">=</span> E<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>        sn1 <span class="token operator">=</span> vset<span class="token punctuation">[</span>u1<span class="token punctuation">]</span><span class="token punctuation">;</span>        sn2 <span class="token operator">=</span> vset<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sn1 <span class="token operator">!=</span> sn2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(%d,%d):%d\n"</span><span class="token punctuation">,</span> u1<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> E<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出一条边</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>vset<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sn2<span class="token punctuation">)</span>                    vset<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sn1<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h2><p>突然想研究一下能不能上传文件</p><p><a href="/papers/2021%E5%B9%BF%E4%B8%9C%E6%8B%9B%E7%94%9F%E8%AE%A1%E5%88%92.pdf">广东省2021招生计划</a></p><p>haha，那我到时候直接把源代码传上来好了，免得这个复制太难弄了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//不想做了。。狄克斯特拉算法和弗洛伊德算法，反正只考概念罢了</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><h3 id="AOV"><a href="#AOV" class="headerlink" title="AOV"></a>AOV</h3><p>AOV网，用顶点表示活动，用有向边表示活动之间优先关系的有向图称为AOV网（顶点表示活动的网）</p><p>选择没有前驱的顶点输出，删去该顶点以及该顶点发出的所有边，重复以上二步</p><p>若全部顶点被输出，则不存在回路，否则存在回路</p><h3 id="AOE"><a href="#AOE" class="headerlink" title="AOE"></a>AOE</h3><p>顶点表示事件，有向<strong>边表示活动</strong>，开始事件（源点），结束事件（汇点）</p><p>从源点到汇点所有路径中具有最大路径长度的路径称为<strong>关键路径</strong>。</p><p>建议看看P304</p><p>先进行一次拓扑排序，然后递归从头找最大，递归从尾找最小。</p><h1 id="8-查找"><a href="#8-查找" class="headerlink" title="8.查找"></a>8.查找</h1><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">//线性表分顺序和链式，只介绍顺序表，属于静态查找。</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> KeyType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> years<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> InfoType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    KeyType key<span class="token punctuation">;</span>   <span class="token comment">//关键字</span>    InfoType data<span class="token punctuation">;</span> <span class="token comment">//其他数据</span><span class="token punctuation">&#125;</span> RecType<span class="token punctuation">;</span><span class="token comment">//顺序查找，ASL成功 = (n+1)/2 ASL失败 = n</span><span class="token keyword">int</span> <span class="token function">SeqSearch</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> KeyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!=</span> k <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> n<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//逻辑值要加一</span><span class="token punctuation">&#125;</span><span class="token comment">//从精简算法，提高查找速度的角度说，可以在R末尾增加一个关键字为k的记录为哨兵，就不用判断i是否超界</span><span class="token keyword">int</span> <span class="token function">SeqSearch1</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> KeyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    R<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!=</span> k<span class="token punctuation">)</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//折半查找</span><span class="token comment">//要求有序表,mid = (low+high)/2向下取整，成功返回逻辑序号，失败返回0</span><span class="token keyword">int</span> <span class="token function">BinSearch</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> KeyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> R<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            <span class="token keyword">return</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//好精简的算法！</span><span class="token comment">//可以用判定树刻画，n种成功情况，成功时比较次数恰为层数和n+！种失败情况。失败时比较次数为层数-1</span><span class="token comment">//ASLbn = log2(n+1)-1  最坏性能和平均性能相当接近,归纳起来复杂度为O（log2n）</span><span class="token comment">//索引结构和分块查找</span><span class="token comment">/*索引项一般为（关键字，地址），可以现在有序索引表中快速查找，然后通过地址找到提高了查找效率，但是需要建立索引表会增加时空开销*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXI</span> <span class="token expression"><span class="token number">10000</span> </span><span class="token comment">//索引表最大容量。</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    KeyType key<span class="token punctuation">;</span>    <span class="token keyword">int</span> link<span class="token punctuation">;</span> <span class="token comment">//对应在存储表里的下标</span><span class="token punctuation">&#125;</span> IdxType<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">IdxSearch</span><span class="token punctuation">(</span>IdxType I<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> KeyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> b<span class="token punctuation">;</span> <span class="token comment">//s为每块的元素个数，I的长度为b</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>I<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">>=</span> k<span class="token punctuation">)</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//接下来在该块中顺序查找</span>    i <span class="token operator">=</span> I<span class="token punctuation">[</span>high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>link<span class="token punctuation">;</span> <span class="token comment">//记住是high+1，总会取到偏小的一个</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> I<span class="token punctuation">[</span>high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>link <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!=</span> k<span class="token punctuation">)</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> I<span class="token punctuation">[</span>high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>link <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*折半查找配合时，成功查找的平均长度为ASLblk = ASLbn + ASLsq= log2(b+1) -1 + (s+1)/2 = log2(n/s+1) + s/2 可见s即每块的长度越小越好*/</span><span class="token comment">/*顺序查找时，ASLblk = ((b+1)+(s+1))/2 =1/2(n/s +s) +1 因为b = n/s向上取值，当s=根号n时最佳*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树表"><a href="#树表" class="headerlink" title="树表"></a>树表</h2><p>如果要进行表的删除、插入操作，会带来很多额外开销，若要对动态查找表进行查找，可以用几种树来。</p><p>二叉排序树的中序序列就是排好序的表</p><p>查找的ASL成功和ASL失败在P328</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">//假设各结点的关键字是唯一的</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> KeyType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> years<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> InfoType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    KeyType key<span class="token punctuation">;</span>    InfoType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> BSTNode<span class="token punctuation">;</span><span class="token comment">//用根节点bt来唯一标识一棵二叉排序树</span><span class="token comment">//插入关键字k，若已有则返回假</span>bool <span class="token function">InsertBST</span><span class="token punctuation">(</span>BSTNode <span class="token operator">*</span><span class="token operator">&amp;</span>bt<span class="token punctuation">,</span> KeyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bt <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        bt <span class="token operator">=</span> <span class="token punctuation">(</span>BSTNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BSTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bt<span class="token operator">-></span>key <span class="token operator">=</span> k<span class="token punctuation">;</span>        bt<span class="token operator">-></span>lchild <span class="token operator">=</span> bt<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> bt<span class="token operator">-></span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> bt<span class="token operator">-></span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">InsertBST</span><span class="token punctuation">(</span>bt<span class="token operator">-></span>lchild<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">></span> bt<span class="token operator">-></span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">InsertBST</span><span class="token punctuation">(</span>bt<span class="token operator">-></span>rchild<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建一棵二叉排序树是从一个空树开始，一直调用插入就好了。</span>BSTNode <span class="token operator">*</span><span class="token function">CreateBST</span><span class="token punctuation">(</span>KeyType A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BSTNode <span class="token operator">*</span>bt <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">InsertBST</span><span class="token punctuation">(</span>bt<span class="token punctuation">,</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> bt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//销毁算法和普通的二叉树算法一样</span><span class="token comment">//查找就要方便很多</span>BSTNode <span class="token operator">*</span><span class="token function">SearchBST</span><span class="token punctuation">(</span>BSTNode <span class="token operator">*</span>bt<span class="token punctuation">,</span> KeyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bt<span class="token operator">-></span>key <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> bt<span class="token operator">-></span>key <span class="token operator">=</span> k<span class="token punctuation">)</span>        <span class="token keyword">return</span> bt<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> bt<span class="token operator">-></span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">SearchBST</span><span class="token punctuation">(</span>bt<span class="token operator">-></span>lchild<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">SearchBST</span><span class="token punctuation">(</span>bt<span class="token operator">-></span>rchild<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//求最大\最小结点可以利用性质</span>KeyType <span class="token function">maxnode</span><span class="token punctuation">(</span>BSTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>KeyType <span class="token function">minnode</span><span class="token punctuation">(</span>BSTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//一定是叶子节点</span><span class="token comment">//删除要分几种情况讨论，是最麻烦的。</span><span class="token comment">//是叶子就直接删除，只有左、右子树就接上去</span><span class="token comment">//同时有左右子树的话可以从左中选最大的结点r代替p，然后把r删除，也可以选右中最小的，一般前者</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>平衡因子：左子树高度 - 右子树高度</p><p>平衡条件：平衡因子的绝对值小于1</p><p>前提是二叉排序树，</p><p>四种类型 调整前后中序序列相同是前提条件。这个建议看学校发的教材P283</p><p>删除的时候，如果不平衡了，可以通过左右孩子的平衡因子来判断做哪一种调整，P337</p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>又称散列表，设要存储的元素个数为n，设置一个长度为m&gt;=n的连续内存单元，每个元素的关键字ki(i&lt;=n-1)</p><p>为自变量，通过哈希函数映射到内存单元的地址h(ki)，并存储在这个内存单元中。</p><p>哈希冲突，不同的自变量映射到同一个地址</p><p>通常情况是关键字的取值区间远大于哈希地址的变化区间</p><p>查找性能取决于：</p><ul><li>装填因子 α = n/m 应控制最终的α在0.6~0.9范围内</li><li>哈希函数应该使哈希地址尽可能均匀地分布在哈希地址空间上</li><li>合适的解决哈希冲突的策略。</li></ul><h3 id="构造哈希函数"><a href="#构造哈希函数" class="headerlink" title="构造哈希函数"></a>构造哈希函数</h3><p>构造哈希函数</p><p>根据关键字的结构和分布的不同可构造出许多不同的哈希函数，这里主要讨论几种常用的整数类型关键字的</p><ol><li><p>直接定址法 h(k) = k + c</p><p>当关键字分布基本连续时比较好</p></li><li><p>除留余数法 h(k) = k mod p (p &lt;= m) </p><p>这种该方法的关键是选好p，使得概率分布较平均，p奇数好，不大于m的素数效果最好</p></li><li><p>数字分析法</p><p>提取关键字较均匀的数字位，适合所有关键字值都已知的情况</p></li></ol><p>还有平方取中法，折叠法等。</p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>开放地址法(也叫再散列法)：</p><ol><li><p>线性探测法</p><p>容易产生堆积问题，d0 = h(k)  di = ( (d(i-1) + 1) mod m)</p></li><li><p>平方探测法</p><p>d0 = h(k)    di = ( (d0 +- i2) mod m)</p><p>不一定能探测到哈希表上的所有单元，但最少能探测到一半的单元</p></li><li><p>还有伪随机序列法，双哈希函数法等</p></li></ol><p>再哈希法：</p><p>同时构造多个哈希函数，一个冲突就换另一个</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">//用开放地址法构造的哈希表的运算算法</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NULLKEY</span> <span class="token expression"><span class="token operator">-</span><span class="token number">1</span> </span><span class="token comment">//空关键字值</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DELKEY</span> <span class="token expression"><span class="token operator">-</span><span class="token number">2</span>  </span><span class="token comment">//被删除关键字值</span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> KetType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    KetType key<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span> <span class="token comment">//探测次数域</span><span class="token punctuation">&#125;</span> HashTable<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InsertHT</span><span class="token punctuation">(</span>HashTable ha<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> KetType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> adr<span class="token punctuation">;</span>    adr <span class="token operator">=</span> k <span class="token operator">%</span> p<span class="token punctuation">;</span>                                         <span class="token comment">//adr是关键字k对应的哈希值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">==</span> NULLKEY <span class="token operator">||</span> ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">==</span> DELKEY<span class="token punctuation">)</span> <span class="token comment">//可以直接放入</span>    <span class="token punctuation">&#123;</span>        ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> k<span class="token punctuation">;</span>        ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//i 记录k发生的次数</span>        <span class="token keyword">do</span>        <span class="token punctuation">&#123;</span>            adr <span class="token operator">=</span> <span class="token punctuation">(</span>adr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> m<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!=</span> NULLKEY <span class="token operator">&amp;&amp;</span> ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!=</span> DELKEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> k<span class="token punctuation">;</span>        ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>count <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">//设置探测次数</span>    <span class="token punctuation">&#125;</span>    n<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//哈希表中总元素个数增1</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">CreateHT</span><span class="token punctuation">(</span>HashTable ha<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> KetType keys<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> nl<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//由关键字序列keys[0..nl-1]创建哈希表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ha<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> NULLKEY<span class="token punctuation">;</span>        ha<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nl<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">InsertHT</span><span class="token punctuation">(</span>ha<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> p<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//插入nl个</span><span class="token punctuation">&#125;</span><span class="token comment">//删除算法</span><span class="token comment">//在开放地址法处理的哈希表上不能简单的删除，因为在查找算法中空是查找失败，应该置特殊值</span>bool <span class="token function">DeleteHT</span><span class="token punctuation">(</span>HashTable ha<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> KetType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> adr<span class="token punctuation">;</span>    adr <span class="token operator">=</span> k <span class="token operator">&amp;</span> p<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!=</span> NULLKEY <span class="token operator">&amp;&amp;</span> ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!=</span> DELKEY<span class="token punctuation">)</span>        adr <span class="token operator">=</span> <span class="token punctuation">(</span>adr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> m<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">==</span> k<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> DELKEY<span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">SearchHT</span><span class="token punctuation">(</span>HashTable ha<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> KetType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> adr<span class="token punctuation">;</span>    adr <span class="token operator">=</span> k <span class="token operator">%</span> p<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!=</span> NULLKEY <span class="token operator">&amp;&amp;</span> ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!=</span> k<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        adr <span class="token operator">=</span> <span class="token punctuation">(</span>adr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> m<span class="token punctuation">;</span> <span class="token comment">//线性探测</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">==</span> k<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Success:%d compare %d times"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ASL成功为关键字列表中每个关键字的比较次数的平均数</p><p>ASL失败为直到空时的探测次数，P357 记得要算上自己的这次</p><p>拉链法：</p><p>此时的装填因子可以设定为大于1</p><p>优点：无堆积现象，平均查找长度较短，适合无法定长的情况，元素较大时指针开销可忽略不计，删除操作容易实现</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">//拉链法</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> KeyType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    KeyType key<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> NodeType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    NodeType <span class="token operator">*</span>firstp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> HashTable<span class="token punctuation">;</span><span class="token comment">//理解这个HashTable ha数组，下标即为“地址”</span><span class="token keyword">void</span> <span class="token function">InsertHT</span><span class="token punctuation">(</span>HashTable ha<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> KeyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> adr<span class="token punctuation">;</span>    adr <span class="token operator">=</span> k <span class="token operator">%</span> p<span class="token punctuation">;</span>    NodeType <span class="token operator">*</span>q<span class="token punctuation">;</span>    q <span class="token operator">=</span> <span class="token punctuation">(</span>NodeType <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NodeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-></span>key <span class="token operator">=</span> k<span class="token punctuation">;</span>    q<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>firstp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>firstp <span class="token operator">=</span> q<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        q<span class="token operator">-></span>next <span class="token operator">=</span> ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>firstp<span class="token punctuation">;</span>        ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>firstp <span class="token operator">=</span> q<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">CreateHT</span><span class="token punctuation">(</span>HashTable ha<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> KeyType keys<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> nl<span class="token punctuation">)</span><span class="token comment">//由关键字序列keys[0..nl-1]创建哈希表</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        ha<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nl<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">InsertHT</span><span class="token punctuation">(</span>ha<span class="token punctuation">,</span> n<span class="token punctuation">,</span> p<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//删除算法 在逻辑上更为简单，可以直接删除</span>bool <span class="token function">DeleteHT</span><span class="token punctuation">(</span>HashTable ha<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> KeyType k<span class="token punctuation">)</span> <span class="token comment">//删除哈希表中的关键字k</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> adr<span class="token punctuation">;</span>    adr <span class="token operator">=</span> k <span class="token operator">%</span> p<span class="token punctuation">;</span>    NodeType <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token operator">*</span>preq<span class="token punctuation">;</span>    q <span class="token operator">=</span> ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>firstp<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>key <span class="token operator">==</span> k<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>firstp <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//首节点不为k时</span>    preq <span class="token operator">=</span> q<span class="token punctuation">;</span>    q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>key <span class="token operator">==</span> k<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        preq<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">SearchHT</span><span class="token punctuation">(</span>HashTable ha<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> KeyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> adr<span class="token punctuation">;</span>    adr <span class="token operator">=</span> k <span class="token operator">%</span> p<span class="token punctuation">;</span>    NodeType <span class="token operator">*</span>q <span class="token operator">=</span> ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>firstp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>key <span class="token operator">==</span> k<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ASL成功就是比较次数求平均嘛</p><p>ASL不成功 就是每条链的结点数求平均哈哈，有几个结点就白比较了几次</p><h1 id="9-内排序"><a href="#9-内排序" class="headerlink" title="9.内排序"></a>9.内排序</h1><p>此处的关键字是可以重复的</p><p>根据相同关键字排序后相对次序是否改变可分为稳定和不稳定，这相对于<strong>所有可能的输入实例</strong></p><p>在排序中不需要进行数据的内、外存交换，称之为内排序。</p><p>需要关键字<strong>比较</strong>的方法有插入排序、选择排序、交换排序、归并排序</p><p>不需要的方法有基数排序</p><p>基于比较的排序主要进行两种操作：比较+移动</p><p>正序：关键字顺序正好和排序顺序相同，反序则相反。</p><p>比较排序的<strong>最好的平均理论时间</strong>复杂度为O(nlog2n) 比如堆排序、二路归并、快速排序 P367</p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//基本数据类型</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> KeyType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> one<span class="token punctuation">;</span>    <span class="token keyword">char</span> two<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> InfoType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    KeyType key<span class="token punctuation">;</span>    InfoType data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> RecType<span class="token punctuation">;</span><span class="token comment">//插入排序</span><span class="token comment">//直接插入排序</span><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    RecType tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token comment">//如果直接就大于有序区最大的，</span>        <span class="token punctuation">&#123;</span>            tmp <span class="token operator">=</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">&#123;</span>                R<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">></span> tmp<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            R<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//折半插入排序</span><span class="token comment">//在有序区查找位置时用折半查找就好了</span><span class="token keyword">void</span> <span class="token function">BinInsertSort</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> mid<span class="token punctuation">;</span>    RecType tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            tmp <span class="token operator">=</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            high <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>key <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>                    high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>                R<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            R<span class="token punctuation">[</span>high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//希尔排序</span><span class="token comment">//这和上一章查找好像啊，分组插入,原理我感觉是避免高次运算的爆炸增长</span><span class="token comment">//这里取di+1 = di/2向下取整,d1 = n/2</span><span class="token keyword">void</span> <span class="token function">ShellSort</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> d <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    RecType tmp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>d <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> d<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//这个上下界真是绝了，一步到位全部都排好，我还想了一会</span>        <span class="token punctuation">&#123;</span>            tmp <span class="token operator">=</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> i <span class="token operator">-</span> d<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tmp<span class="token punctuation">.</span>key <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                R<span class="token punctuation">[</span>j <span class="token operator">+</span> d<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                j <span class="token operator">=</span> j <span class="token operator">-</span> d<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            R<span class="token punctuation">[</span>j <span class="token operator">+</span> d<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        d <span class="token operator">=</span> d <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//交换排序</span><span class="token comment">//冒泡排序,从后开始，把有序的冒到最前面</span><span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    RecType tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">></span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                tmp <span class="token operator">=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                R<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                R<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//实际上，一旦某一趟不出现任何元素交换，就说明排好序了，可以用一个flag来达到这点</span><span class="token comment">//快速排序 当年初学感觉非常巧妙的算法哈哈</span><span class="token comment">//选一个枢纽（一般第一个），然后将所有的放在其前后，递归进行处理</span><span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//从头尾向中扫描</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> s<span class="token punctuation">,</span> j <span class="token operator">=</span> t<span class="token punctuation">;</span>    RecType tmp <span class="token operator">=</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> i <span class="token operator">&amp;&amp;</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">>=</span> tmp<span class="token punctuation">.</span>key<span class="token punctuation">)</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        R<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">></span> j <span class="token operator">&amp;&amp;</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;=</span> tmp<span class="token punctuation">.</span>key<span class="token punctuation">)</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        R<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    R<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token comment">//对R[s...t]元素进行快速排序</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> t<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        i <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">QuickSort</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span> s<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">QuickSort</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span> s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//选择排序</span><span class="token comment">//基本思路是每一趟都挑出最大、最小的，适合从大量元素中选择一部分排序元素</span><span class="token comment">//简单选择选择</span><span class="token comment">//分成有序区和无序区，从无序区选出最的后与无序区第一个元素交换，之所以叫简单排序是因为找最小值的方法是简单的两两比较</span><span class="token keyword">void</span> <span class="token function">SelectSort</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    RecType tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        k <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>                k <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">//k记录最值的位置</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            tmp <span class="token operator">=</span> R<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            R<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//堆排序</span><span class="token comment">/*看成是一颗完全二叉树的顺序存储结构，大根堆，小根堆，挑选最大元素是采用筛选方法实现的筛选：假定某节点左右子树是大根堆，选择子节点和本身最大的上来，由于可能会破坏子树，因此递归判断*/</span><span class="token keyword">void</span> <span class="token function">sift</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> low<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">;</span> <span class="token comment">//low是根节点,j指向当前结点的孩子</span>    RecType tmp <span class="token operator">=</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            j<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//看看两个孩子谁大</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>key <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            R<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> j<span class="token punctuation">;</span>            j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">;</span> <span class="token comment">//这个索引的变换有点巧妙</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>            <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//筛选结束</span>    <span class="token punctuation">&#125;</span>    R<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//构建初始堆，从最后一个分支点n/2向下取整开始，反复筛选</span><span class="token comment">//for(i = n/2;i>=1;i--) sift(R,i,n)</span><span class="token keyword">void</span> <span class="token function">HeapSort</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    RecType tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token function">sift</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//建立初始堆</span>    <span class="token comment">//每次抽掉“根”，就是堆上最大那个</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        tmp <span class="token operator">=</span> R<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        R<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        R<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token function">sift</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>多次将两个或以上的有序表合成一个新的有序表。我们研究二路归并</p><p>先分成n个长度为1的，两两归并成n/2个向上取整的有序序列，依次类推直到得到长度为n的有序序列</p><p>我不想写啦！！！！P389自己看图吧</p><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>借助多关键字排序的思想堆单关键字进行排序。通过“分配”、“收集”</p><p>单关键字R[i].key 由d位数字组成，每一位的值都在(0 , r)之间，二进制r为2</p><p>最低位LSD和最高位优先MSD。选择方式由数据序列特点决定，越重要的位越放在后面.</p><p>想看原理在P390</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//基数排序</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXD</span> <span class="token expression"><span class="token number">10000</span> </span><span class="token comment">//最大关键字位数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXR</span> <span class="token expression"><span class="token number">10</span>    </span><span class="token comment">//每一位的取值上限（开区间）</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> data<span class="token punctuation">[</span>MAXD<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//存放关键字的各位</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment">//指向下一个结点</span><span class="token punctuation">&#125;</span> NodeType<span class="token punctuation">;</span><span class="token comment">//输入数据为p为首节点的单链表</span><span class="token keyword">void</span> <span class="token function">RadixSort</span><span class="token punctuation">(</span>NodeType <span class="token operator">*</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    NodeType <span class="token operator">*</span>head<span class="token punctuation">[</span>MAXR<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>tail<span class="token punctuation">[</span>MAXR<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>t<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            head<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//初始化指针</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>             <span class="token comment">//将原链表所有节点分配到链队</span>        <span class="token punctuation">&#123;</span>            k <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span> <span class="token comment">//找到第k个链队</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                head<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>                tail<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                tail<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                tail<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//重新用p来收集所有节点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">//找到第一个非空链队,通过首位指针处理，中间已经连好了</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    p <span class="token operator">=</span> head<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    t <span class="token operator">=</span> tail<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    t<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    t <span class="token operator">=</span> tail<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//如果不是第一个,就连上来</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        t<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//别忘了！！！！！卧槽结束了！</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然课后习题一道没写</p><p>虽然后面跳过了一些明显不考的算法，但是终于在考试前5天写完了还是好开心</p><p>但是还有大雾和微积分:cry:</p><p>学弟学妹们，虽然这门数据结构在未来会被淘汰，但是它的绩点很重啊QWQ,不要向我一样临时抱佛脚QWQ</p><p>试验一下新功能，把我的代码看能不能直接放在这方便你们下载</p><p><a href="/papers/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0.zip">数据结构</a></p><p>👆</p><h1 id="待补充"><a href="#待补充" class="headerlink" title="待补充"></a>待补充</h1><p>串：KMP</p><p>稀疏矩阵快速转置</p><p>二叉树遍历的非递归</p><p>最短路径的两种算法</p><p>AOV和AOE</p><p>平衡二叉树的算法实现</p><p>归并排序</p><p>明年学算法设计前应该会写完这些</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;考前抱佛脚┭┮﹏┭┮&lt;/p&gt;
&lt;p&gt;记住这里大量用了c++的引用。。好方便，但是答题的时候记得换成 *和全局变量&lt;/p&gt;
&lt;p&gt;一个算法应该具有以下特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有穷性&lt;/li&gt;
&lt;li&gt;确定性  不存在二义性&lt;/li&gt;
&lt;li&gt;可行性&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    <category term="algorithm" scheme="https://darren-dong.com/categories/algorithm/"/>
    
    
    <category term="data-structure" scheme="https://darren-dong.com/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>python二刷</title>
    <link href="https://darren-dong.com/2021/05/21/python%E4%BA%8C%E5%88%B7/"/>
    <id>https://darren-dong.com/2021/05/21/python%E4%BA%8C%E5%88%B7/</id>
    <published>2021-05-21T06:28:04.000Z</published>
    <updated>2021-07-19T07:47:04.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="白嫖的python课件总结"><a href="#白嫖的python课件总结" class="headerlink" title="白嫖的python课件总结"></a>白嫖的python课件总结</h1><p>[toc]</p><p>ps：</p><p>这份笔记并不完整，是笔者学了一遍粗糙的python后二刷看课件觉得有用的东西，课件想要的私聊，不贵不贵，一杯奶茶:laughing:</p><p>还有那份课件的题目值得一做！</p><h2 id="1-语言基础"><a href="#1-语言基础" class="headerlink" title="1.语言基础"></a>1.语言基础</h2><p>面向对象 、 解释型 、 动态数据类型</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521101010.png" alt="image-20210521100915989" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521101018.png" alt="image-20210521100927400" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521101003.png" alt="image-20210521101003529" style="zoom:50%;" /><h3 id="变量与地址"><a href="#变量与地址" class="headerlink" title="变量与地址"></a>变量与地址</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521101121.png" alt="image-20210521101121410" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521101133.png" alt="image-20210521101133282" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521101142.png" alt="image-20210521101142697" style="zoom:50%;" /><p> Python  解释器会为每个出现的对象分配内存单元，即使它们的值相等，也会这样 </p><p>为了 提高内存利用效率，对于一些简单的对象，如一些数值 较小（-256~256 ）的 整型（int ）对象，Python  采取重用对象内存的办法</p><p>单独的下画线（_ ）是一个特殊变量，用于表示上一次运算的结果</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521110533.png" alt="image-20210521110532912" style="zoom:50%;" /><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>整数二进制0b\0B开头,八进制0o\0O开头，十六进制0x\0X开头</p><p>对于浮点数，Python 3.x  默认提供17  位有效数字的精度，相当<br>于C  语言中的双精度浮点数</p><p>可以通过x.real  和x.imag  来分别获取复数x  的实部和虚部，结果都是浮点型，是j不是i</p><p>数学常量：e  pi</p><p>函数：</p><p>fabs  sqrt  pow(x,y)   exp log(x[,base])（base默认是e）  log10()</p><p>ceil floor  </p><p>fmod(x,y) # x/y的余数 （浮点）</p><p>degrees  &lt;=&gt;  radians</p><p>sin cos tan asin acos atan（默认用弧度）</p><p>Cmath模块函数基本一致，但是对复数运算</p><p>cmath.sqrt(-1)  ij 用的是j不是i</p><p> cmath 模块包括复数 运算特有的 函数。</p><p>复数x=a+bi ，phase(x) 函数返回复数x 的幅 角，即atan(b/a) 。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521111433.png" alt="image-20210521111433154" style="zoom:50%;" /><h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3><p>seed设置种子，默认将<strong>系统时间</strong>设为种子值</p><p>choice(seq) ：从 序列的元素中随机挑选一个 元素 。</p><p>sample(seq,k) ：从 序列中随机挑选k 个元素。</p><p>shuffle(seq) ：将 序列的所有元素随机排序 ,这个只能用于可更改的，字符串不可用</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521111617.png" alt="image-20210521111617520" style="zoom:50%;" /><h3 id="时间和日历"><a href="#时间和日历" class="headerlink" title="时间和日历"></a>时间和日历</h3><p>datetime基于time进行了优化，更方便全面</p><h4 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span>date<span class="token punctuation">,</span>timedt <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>dt<span class="token punctuation">.</span>year<span class="token punctuation">,</span>month<span class="token punctuation">,</span>day<span class="token punctuation">,</span>hour<span class="token punctuation">,</span>minute<span class="token punctuation">,</span>seconddt<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token punctuation">)</span>输出前三个dt<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>输出后三个dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%x%x%x'</span><span class="token punctuation">)</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">'202151'</span><span class="token punctuation">,</span><span class="token string">"%Y%m%d"</span><span class="token punctuation">)</span><span class="token comment">#转换为datetime对象！！这个是datetime下的datetime子类！！！</span>datetime相减会产生datetime<span class="token punctuation">.</span>delta对象delta <span class="token operator">=</span> datetime2 <span class="token operator">-</span> datetime1delta <span class="token operator">==</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">7179</span><span class="token punctuation">)</span> <span class="token comment">#间隔99天,7179秒</span>timedelta和datetime可以做加减得到新的datetime<span class="token operator">%</span>y     两位数的年份表示（<span class="token number">00</span><span class="token operator">-</span><span class="token number">99</span>）<span class="token operator">*</span><span class="token operator">%</span>Y     四位数的年份表示（<span class="token number">000</span><span class="token operator">-</span><span class="token number">9999</span>）<span class="token operator">*</span><span class="token operator">%</span>m     月份（<span class="token number">01</span><span class="token operator">-</span><span class="token number">12</span>）<span class="token operator">*</span><span class="token operator">%</span>d     月内中的一天（<span class="token number">0</span><span class="token operator">-</span><span class="token number">31</span>）<span class="token operator">*</span><span class="token operator">%</span>H     <span class="token number">24</span>小时制小时数（<span class="token number">0</span><span class="token operator">-</span><span class="token number">23</span>）<span class="token operator">*</span><span class="token operator">%</span>I     <span class="token number">12</span>小时制小时数（<span class="token number">01</span><span class="token operator">-</span><span class="token number">12</span>）<span class="token operator">*</span><span class="token operator">%</span>M     分钟数（<span class="token number">00</span><span class="token operator">=</span><span class="token number">59</span>）<span class="token operator">*</span><span class="token operator">%</span>S     秒（<span class="token number">00</span><span class="token operator">-</span><span class="token number">59</span>）<span class="token operator">*</span><span class="token operator">%</span>a     本地简化星期名称<span class="token operator">*</span><span class="token operator">%</span>A     本地完整星期名称<span class="token operator">%</span>b     本地简化的月份名称<span class="token operator">%</span>B     本地完整的月份名称<span class="token operator">%</span>c     本地相应的日期表示和时间表示<span class="token operator">%</span>j     年内的一天（<span class="token number">001</span><span class="token operator">-</span><span class="token number">366</span>）<span class="token operator">%</span>p     本地A<span class="token punctuation">.</span>M<span class="token punctuation">.</span>或P<span class="token punctuation">.</span>M<span class="token punctuation">.</span>的等价符<span class="token operator">%</span>U     一年中的星期数（<span class="token number">00</span><span class="token operator">-</span><span class="token number">53</span>）星期天为星期的开始<span class="token operator">%</span>w     星期（<span class="token number">0</span><span class="token operator">-</span><span class="token number">6</span>），星期天为星期的开始<span class="token operator">%</span>W     一年中的星期数（<span class="token number">00</span><span class="token operator">-</span><span class="token number">53</span>）星期一为星期的开始<span class="token operator">%</span>x     本地相应的日期表示<span class="token operator">%</span>X     本地相应的时间表示<span class="token operator">%</span>Z     当前时区的名称<span class="token operator">%</span><span class="token operator">%</span>     <span class="token operator">%</span>号本身<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://zhuanlan.zhihu.com/p/101939095">详述</a></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521112059.png" alt="image-20210521112059712" style="zoom:50%;" /><h3 id="python内置"><a href="#python内置" class="headerlink" title="python内置"></a>python内置</h3><p>range  iter</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521112219.png" alt="image-20210521112219527" style="zoom:50%;" /><h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521112244.png" alt="image-20210521112243912" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521112255.png" alt="image-20210521112255877" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521112308.png" alt="image-20210521112308225" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521112324.png" alt="image-20210521112323868" style="zoom:50%;" /><p> Python 中能表示浮点数的有效数字是有限的，而在实际应用中数据的有效位数并无限制，这种矛盾，势必带来计算时的微小误差。</p><h2 id="2-顺序结构"><a href="#2-顺序结构" class="headerlink" title="2.顺序结构"></a>2.顺序结构</h2><p>在Python 中，语句行从解释器提示符后的第一列开始， 前面不能有任何空格 ，否则会产生语法错误</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521112701.png" alt="image-20210521112701209" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521112733.png" alt="image-20210521112733786" style="zoom:67%;" /><p>Python 中的赋值并不是直接将一个值赋给一个变量的，而是通过引用传递的，在赋值时，不管这个对象是新创建的还是一个已经存在的，都是将该对象的 引用（ 并不是值 ）</p><p>同步赋值指的是多变量一条式子赋值时，实际上先创建了一个元组，先后顺序不影响</p><p>eval（）去掉字符串最外侧的引号</p><p>print(xxx[,sep =][,end = ])</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113027.png" alt="image-20210521113027416" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113057.png" alt="image-20210521113057526" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113106.png" alt="image-20210521113106728" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113124.png" alt="image-20210521113124604" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113149.png" alt="image-20210521113149715" style="zoom:50%;" /><h3 id="字符串format方法"><a href="#字符串format方法" class="headerlink" title="字符串format方法"></a>字符串format方法</h3><p>这才是王道</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113226.png" alt="image-20210521113225998" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113241.png" alt="image-20210521113241114" style="zoom:50%;" /><p>用序号调整次序，重复什么的很方便</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113335.png" alt="image-20210521113335099" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113426.png" alt="image-20210521113426104" style="zoom:50%;" /><p>注意这个居中填充，还有居中不对称时左边少一个</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'what &#123;1:&lt;10&#125;&#123;0&#125;the &#123;c:&amp;&lt;10.1f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token number">21.311</span><span class="token punctuation">)</span><span class="token punctuation">)</span>what b         athe <span class="token number">21.3</span><span class="token operator">&amp;</span><span class="token operator">&amp;</span><span class="token operator">&amp;</span><span class="token operator">&amp;</span><span class="token operator">&amp;</span><span class="token operator">&amp;</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'what &#123;1:&lt;10&#125;&#123;0&#125;the &#123;c:&amp;=+10.1f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token number">21.311</span><span class="token punctuation">)</span><span class="token punctuation">)</span>what b         athe <span class="token operator">+</span><span class="token operator">&amp;</span><span class="token operator">&amp;</span><span class="token operator">&amp;</span><span class="token operator">&amp;</span><span class="token operator">&amp;</span><span class="token number">21.3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113449.png" alt="image-20210521113449101" style="zoom:50%;" /><h2 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3.循环结构"></a>3.循环结构</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210706145044.png" alt="image-20210706145037154" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210706145338.png" alt="image-20210706145338449" style="zoom:50%;" /><p>for 语句是通过遍历任意序列的元素进行来建立循环的，针对序列的每一个元素执行一次循环体</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113716.png" alt="image-20210521113716491" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113742.png" alt="image-20210521113742216" style="zoom: 67%;" /><p>首先Python 对关键字in 后的对象调用iter() 函数获得迭代 器，然后 调用next() 函数获得迭代器的 元素，直到 抛出stopIteration</p><p> while 语句多用于循环次数不确定的情况，而对于循环次数确定的情况，使用for</p><p>pass空语句</p><p>注意 ：布尔常量True 和False 首字母必须大写 ！</p><h2 id="4-字符串"><a href="#4-字符串" class="headerlink" title="4.字符串"></a>4.字符串</h2><p><strong>建议看看原文</strong></p><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>万国码Unicode是python选择的标准符号表，它每种语言中的每个字符设定了<strong>统一并且唯一的二进制编码</strong>，以满足跨语言、跨平台进行文本转换、处理的要求（翻译二进制码的方式）</p><p>ASCII 码中，一个英文字母（不分大小写）为一个字节，一个中文汉字为两个字节。</p><p>UTF-8 编码中，一个英文字为一个字节，一个中文为三个字节。</p><p>Unicode 编码中，一个英文为一个字节，一个中文为两个字节。</p><p>字节只是一个单位（8位）罢了，不同的编码中采用不同的规则存储字符，而这些规则实现的时候消耗字节大小不同</p><p>UTF-8</p><p>​    是 一种为Unicode 字符设计的变长编码系统</p><p>对于ASCII 字符，UTF-8 仅使用1 个字节来编码</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521123412.png" alt="image-20210521123412155" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521123508.png" alt="image-20210521123508039" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521123527.png" alt="image-20210521123527021" style="zoom:50%;" /><p>Unicode规定了，所有字符<strong>统一由两个字符</strong>来表示，也就是<strong>16位</strong></p><p>utf-8就是缩小一点，从4到8到12到16分段</p><p><a href="https://zhuanlan.zhihu.com/p/137875615">详述</a>有一点错误就是最后那个中文例子，看我的👇</p><p><strong>而python字符串默认是unicode编码</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token string">'卧槽'</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'卧'</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">b'\xe5\x8d\xa7\xe6\xa7\xbd'</span> <span class="token comment">#一个汉字拆成三个字节</span>    In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c <span class="token operator">=</span> <span class="token string">'dnoad'</span>In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">b'dnoad'</span><span class="token comment"># 英文在utf-8中不会发生转换，直接用一个字节表示</span>In <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'我'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">25105</span> <span class="token comment">#unicode</span>    In <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">25104</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'成'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分片的操作很灵活，开始和结束 的索引值 可以超<br>过字符串的长度 </p><p>字符串用 +  和 *</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130045.png" alt="image-20210521130045599" style="zoom:50%;" /><p>但是在解释器里面，都是输出普通的’abc’</p><p>Python 的字符串是不可变类型，只能通过新建一<br>个字符串去改变一个字符串的元素</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130119.png" alt="image-20210521130119501" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130139.png" alt="image-20210521130139086" style="zoom:50%;" /><p>字符比较是按其计算机内部字符编码值的大小进<br>行比较，西文字符按ASCII 码值大小进行比较</p><p>  比较的基本规则是，空格字符最小，数字比字母<br>小，大写字母比小写字母小（ 对应字母相 差32</p><h3 id="函数。。"><a href="#函数。。" class="headerlink" title="函数。。"></a>函数。。</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130239.png" alt="image-20210521130239820" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130256.png" alt="image-20210521130256308" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130327.png" alt="image-20210521130327372" style="zoom:50%;" /><p>prefix和suffix是字符串，start 可以选择开头位置，end我不知道干嘛的</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130413.png" alt="image-20210521130413589" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130614.png" alt="image-20210521130614495" style="zoom:50%;" /><p>split如果两个分隔符中没东西，也会拆出空字符串,从左右拆顺序不变，可能只影响matsplit参数</p><p>那个splitlines试了一下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> <span class="token string">'dada\nwdad'</span>cOut<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'dada\nwdad'</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>dadawdadc<span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'dada'</span><span class="token punctuation">,</span> <span class="token string">'wdad'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130715.png" alt="image-20210521130715304" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130738.png" alt="image-20210521130738151" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130818.png" alt="image-20210521130818046" style="zoom:50%;" /><h3 id="字节类型"><a href="#字节类型" class="headerlink" title="字节类型"></a>字节类型</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130927.png" alt="image-20210521130927256" style="zoom:50%;" /><p>和字符串一样，可以使用内置的len() 函数求bytes对象的长度，也可以 使用“+ ” 运算符连接两个bytes 对象，其操作结果是一个新的bytes 对象</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131019.png" alt="image-20210521131019853" style="zoom:50%;" /><p>如果需要改变某个字节，可以组合使用字符串的分片和连接操作（效果跟字符串是一样的）， 也可以 将bytes 对象转换为bytearray 对象，bytearray对象是可以被修改的</p><p>可以 使用编号给bytearray 对象的某个字节赋值 ， <strong>并且这个值必须是0~255 之间的一个整数</strong></p><p>  也 不允许针对bytes 对象的出现次数进行计数，因为字符串里面 根本没有字节字符</p><p>encode和decode可以在两者间转换</p><h2 id="5-正则"><a href="#5-正则" class="headerlink" title="5.正则"></a>5.正则</h2><p><a href="https://darren-dong.com/2021/03/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/">看我的博客了解基础知识</a></p><p>  在Python 中，正则表达式的功能通过正则表达式<br>模块re</p><p> re 模块提供各种正则表达式 的匹配 操作，在文本解析、复杂字符串分析和信息提取时是一个非常有用的工具。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131633.png" alt="image-20210521131633719" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131657.png" alt="image-20210521131656979" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131718.png" alt="image-20210521131718192" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131726.png" alt="image-20210521131726435" style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131733.png" alt="image-20210521131733299" style="zoom:33%;" /><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131810.png" alt="image-20210521131810221" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131819.png" alt="image-20210521131819869" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131839.png" alt="image-20210521131839279" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131907.png" alt="image-20210521131907897" style="zoom:50%;" /><p>正则表达式中，group（）用来提出分组截获的字符串<strong>，（）用来分组</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span>  rea  <span class="token operator">=</span>  <span class="token string">"123abc456"</span><span class="token keyword">print</span>  re<span class="token punctuation">.</span>search<span class="token punctuation">(</span> <span class="token string">"([0-9]*)([a-z]*)([0-9]*)"</span> <span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token comment">#123abc456,返回整体</span><span class="token keyword">print</span>  re<span class="token punctuation">.</span>search<span class="token punctuation">(</span> <span class="token string">"([0-9]*)([a-z]*)([0-9]*)"</span> <span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token comment">#123</span><span class="token keyword">print</span>  re<span class="token punctuation">.</span>search<span class="token punctuation">(</span> <span class="token string">"([0-9]*)([a-z]*)([0-9]*)"</span> <span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token comment">#abc</span><span class="token keyword">print</span>  re<span class="token punctuation">.</span>search<span class="token punctuation">(</span> <span class="token string">"([0-9]*)([a-z]*)([0-9]*)"</span> <span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span>    <span class="token comment">#456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>正则表达式中的三组<strong>括号</strong>把匹配结果分成三组</li></ol><ul><li> group() 同group（0）就是匹配正则表达式整体结果</li><li> group(1) 列出第一个括号匹配部分，group(2) 列出第二个括号匹配部分，group(3) 列出第三个括号匹配部分。</li></ul><ol start="2"><li>没有匹配成功的，re.search（）返回None</li></ol><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131927.png" alt="image-20210521131927335" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521132000.png" alt="image-20210521132000081" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521132021.png" alt="image-20210521132021191" style="zoom:50%;" /><p><strong>注意到匹配模式串使用了原始字符串r’  ‘</strong></p><p> match() 方法并不是完全匹配。当正则表达式结束时，若string 还有剩余字符 ，仍然视为 成功</p><p>  想 要完全匹配，可以在表达式末尾加上边界匹配符’$</p><hr><p>match() 函数只是在字符串 的左端位置 尝试匹配正则表达式，也就是只报告从位置0 开始的 匹配情况。</p><p>  如果想要搜索整个字符串来寻找匹配，应当用search() 函数 ,使用方法完全一样</p><p> findall() 函数搜索字符串，以列表形式返回全部能匹配正则表达式的子串 。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521132802.png" alt="image-20210521132802380" style="zoom:50%;" /><p>finditer()  与findall() 函数类似，在字符串中找到正则表达式所匹配的所有子串，并组成一个迭代器返回。</p><hr><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521132849.png" alt="image-20210521132849793" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521132909.png" alt="image-20210521132909898" style="zoom:50%;" /><p> subn() 函数的功能和sub() 函数 相同，但 返回新的字符串以及替换的次数组成的元组 。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521132944.png" alt="image-20210521132944377" style="zoom:50%;" /><hr><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521133009.png" alt="image-20210521133009552" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521133156.png" alt="image-20210521133156768" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521133228.png" alt="image-20210521133228087" style="zoom:50%;" /><p><strong>两个斜杠噢，第一次先让编译器把两个斜杠转成一个斜杠，第二步到正则字符串则把剩下的单斜杠看成是转义</strong></p><h2 id="6-列表-amp-元组"><a href="#6-列表-amp-元组" class="headerlink" title="6.列表&amp;元组"></a>6.列表&amp;元组</h2><p>len()  min()  max()</p><p>sum()返回序列s中所有元素和，元素必须为数值</p><p>reduce 位于functools模块中</p><p> reduce(f,s[,n]) ：reduce() 函数把序列s 的前两个元素作为 参数，传 给函数f ，返回 计算的结果和 序列的下一个元素重新作为f 的参数，直到序列的最后一个元素 </p><p>enumerate 和 zip不必多言</p><p>利用* 号操作符，可以将对象解压 还原</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> t<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> m<span class="token operator">=</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有sorted reversed  all any</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521141444.png" alt="image-20210521141444528" style="zoom:50%;" /><p>加星号的变量只允许一个，否则会出现语法错误syntaxError 。</p><p>列表可以进行元素赋值（索引不能超）</p><p>元素删除  del   分片赋值  在使用<strong>分片赋值</strong>时，<strong>可使用与原序列不等长的序列将分片替换</strong> </p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521141731.png" alt="image-20210521141731815" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210706154841.png" alt="image-20210706154841856" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521141802.png" alt="image-20210521141802120" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521141833.png" alt="image-20210521141833822" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521141849.png" alt="image-20210521141849468" style="zoom:50%;" /><p>for前面的部分是一个表达式，它必须根据<code>x</code>计算出一个结果，必须加上else，如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>x <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="列表常用方法"><a href="#列表常用方法" class="headerlink" title="列表常用方法"></a>列表常用方法</h3><ol><li><strong>序列都可以用</strong></li></ol><p>并不改变序列本身，可用于列表，元组，字符串</p><p>s.count(x) ：返回x 在序列s 中出现的次数</p><p>s.index(x) ：返回x 在s 中第一次出现的下标</p><p>不过x是完整的</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521142351.png" alt="image-20210521142351434" style="zoom:50%;" /><ol start="2"><li>仅使用列表</li></ol><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521143101.png" alt="image-20210521143101795" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521143117.png" alt="image-20210521143117118" style="zoom: 50%;" /><p>s.reverse() ：将列表s 中的元素逆序排</p><p> s.pop([i]) ：删除并返回列表s 中指定位置i 的元素，默认是最后一个元素。若i 超出列表长度 ，则 抛出IndexError 异常 </p><p> s.insert(i,x) ：在列表s 的i 位置处插入x 。<strong>如果i 大于列表的长度，则插入到列表最后 。</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521143709.png" alt="image-20210521143709148" style="zoom:50%;" /><p>可以看看题目</p><h2 id="7-字典"><a href="#7-字典" class="headerlink" title="7.字典"></a>7.字典</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144114.png" alt="image-20210521144114555" style="zoom:50%;" /><p>更新和创建都用索引，删除则用del，检查关键字用in / not in</p><p> len() 函数可以获取字典所包含“关键字: 值”对的数目，即字典长度 。虽然 也支持max() 、min() 、sum() 和sorted() 函数，但只针对字典的关键字进行计算，很多情况下没有实际意义。</p><p>  字典不支持连接(+) 和重复操作符(*) ，关系运算中只有“==”  和“!=”  有意义 </p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>dict三用法:</p><ol><li><p>使用dict() 函数创建一个空字典并给变量赋值</p></li><li><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210706160413.png" alt="image-20210706160413494" style="zoom:50%;" /><p><strong>第二种方法应该是大规模处理中用的多的</strong></p></li><li><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210706160432.png" alt="image-20210706160431903" style="zoom:50%;" /></li></ol><p>Python 字典和集合实际上也是对象，Python 提供了很多有用的方法。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144729.png" alt="image-20210521144729426" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144739.png" alt="image-20210521144739088" style="zoom:50%;" /><p>原先的键会被清除，字符串也可以做序列，   <strong>重复的键会被删除</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">d2 <span class="token operator">=</span> d<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'dwad'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>d2Out<span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144757.png" alt="image-20210521144757764" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144814.png" alt="image-20210521144813995" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144833.png" alt="image-20210521144833183" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144857.png" alt="image-20210521144857160" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144930.png" alt="image-20210521144930152" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144948.png" alt="image-20210521144948503" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144955.png" alt="image-20210521144955566" style="zoom:50%;" /><h2 id="8-集合"><a href="#8-集合" class="headerlink" title="8.集合"></a>8.集合</h2><p>  在Python 中， 集合（ set  ）是 一个无序排列的、不重复的数据集合体，类似于数学中的集合概念 ，可 对其 进行并、 交、 差等 运算</p><p>集合和字典都属于无序集合体，有许多操作是一致的 </p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521145206.png" alt="image-20210521145206585" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521145235.png" alt="image-20210521145235043" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521145238.png" alt="image-20210521145238355" style="zoom:50%;" /><p>  在Python 中，用大括号将集合元素括起来，这与字典的创建类似，但{} 表示空字典，空集合用set()表示。</p><p>集合 的 自动删除重复元素 这个特性非常有用，例如，要删除列表中大量的重复元素，可以先用set()函数将列表转换成集合，再用list() 函数将集合转换成列表，操作效率非常高。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521150012.png" alt="image-20210521150012137" style="zoom:50%;" /><p> Python 提供frozenset() 函数来创建不可变集合，不可变集合是不能修改的，因此能作为其他集合的元素，也能作为字典的关键字。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521150057.png" alt="image-20210521150057836" style="zoom:50%;" /><h3 id="传统运算"><a href="#传统运算" class="headerlink" title="传统运算"></a>传统运算</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521150124.png" alt="image-20210521150124822" style="zoom:50%;" /><p>比较用 == 和 ！=  还有包含真包含 &lt; &lt;=</p><p>当然还有赋值运算符 s1 |= s2</p><p>集合与for 循环语句配合使用，可实现对集合各个元素的遍历</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210706161507.png" alt="image-20210706161507749"></p><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><ol><li><strong>适用于可变和不可变集合</strong></li></ol><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521150431.png" alt="image-20210521150431883" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521150451.png" alt="image-20210521150451022" style="zoom:50%;" /><p> s.copy() ：复制集合s 。</p><ol start="2"><li><strong>适合可变集合的方法</strong></li></ol><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521150621.png" alt="image-20210521150621923" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521150630.png" alt="image-20210521150630836" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521150705.png" alt="image-20210521150705175" style="zoom:50%;" /><h2 id="9-函数与模块"><a href="#9-函数与模块" class="headerlink" title="9.函数与模块"></a>9.函数与模块</h2><p>在Python 中，实参向形参传送数据的方式是“值传递”，即“拷贝”或“复制”</p><p>  实参 的值传给形参 ，是对象间整体赋值，是 一种单向传递方式，不能由形参传回给实参。</p><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521151042.png" alt="image-20210521151042923" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521151105.png" alt="image-20210521151105021" style="zoom:50%;" /><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> 必选参数就是位置参数，必须填，<span class="token number">2</span><span class="token punctuation">.</span> 默认参数可填可不填。默认参数有个坑，就是每次调用函数，默认参数的指向不便且会保存，所以可修改，每次都不一样，因此定义默认参数要牢记一点：默认参数必须指向不变对象!<span class="token number">3</span><span class="token punctuation">.</span> 然后就到可变参数，指的是可以接受所有值的元组，<span class="token operator">*</span>args  放在第三位接受所有的<span class="token number">4</span><span class="token punctuation">.</span> 第四是命名关键字，或者说可变字典<span class="token operator">**</span>kw  接受所有的 a <span class="token operator">=</span> <span class="token string">'xxx'</span> 这样的参数，并赋给字典，但是key不用加引号<span class="token number">5</span><span class="token punctuation">.</span> 最后是关键字参数，不能省略的键值对！<span class="token comment">#其实就是无限接受的俩args放中间</span>如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：<span class="token keyword">def</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> city<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> city<span class="token punctuation">,</span> job<span class="token punctuation">)</span>    和关键字参数<span class="token operator">**</span>kw不同，命名关键字参数需要一个特殊分隔符<span class="token operator">*</span>，<span class="token operator">*</span>后面的参数被视为命名关键字参数。调用方式如下：<span class="token operator">>></span><span class="token operator">></span> person<span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">'Beijing'</span><span class="token punctuation">,</span> job<span class="token operator">=</span><span class="token string">'Engineer'</span><span class="token punctuation">)</span>Jack <span class="token number">24</span> Beijing Engineer如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符<span class="token operator">*</span>了：<span class="token keyword">def</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> city<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> args<span class="token punctuation">,</span> city<span class="token punctuation">,</span> job<span class="token punctuation">)</span>    命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错：<span class="token operator">>></span><span class="token operator">></span> person<span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'Beijing'</span><span class="token punctuation">,</span> <span class="token string">'Engineer'</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>TypeError<span class="token punctuation">:</span> person<span class="token punctuation">(</span><span class="token punctuation">)</span> takes <span class="token number">2</span> positional arguments but <span class="token number">4</span> were given<span class="token comment">#但是命名关键字参数可以有缺省值，从而简化调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数参数规则：</p><ol><li><em><strong>参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</strong></em></li><li>对于任意函数，都可以通过类似<code>func(*args, **kw)</code>的形式调用它，无论它的参数是如何定义的。</li><li><strong>虽然可以组合多达5种参数，但不要同时使用太多的组合，否则函数接口的可理解性很差。</strong></li></ol><hr><p>  当在 函数内部修改列表、字典的 元素时，形参的改变会影响实参，即双向传递，类似于“传地址”、“共享内存”、“借”，</p><p>匿名函数lambda</p><p> lambda [ 参数1[, 参数2,……, 参数n]]: 表达式</p><p>  关键字lambda 表示匿名函数，冒号前面是函数参数，可以有多个函数参数，但只有一个返回值 ，所以只能有一个表达式，返回值就是该表达式的结果。</p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>这个讲的比一般的清楚一点所以放在这。</p><p>  装饰器 （decorator ，[ˈdekəreɪtə(r)] ）可简单地理解为一个函数，这是一个用来包装函数的函数，经常用于为已经存在的函数添加额外的功能</p><p>  当多个函数有重复代码时，可以将此部分代码单独拿出来整理成一个 装饰 器，然后对每个函数调用该装饰器，这样可以实现代码的复用，而且可以让原来的函数更轻便 。</p><p>  当 需要为多个己经写好的函数添加一个共同功能，例如检查参数的合法性时，就可以单独写一个检查合法性的装饰器，然后在每个需要检查参数合法性的函数处调用即可，而不用去每个函数内部修改 </p><h4 id="无参数"><a href="#无参数" class="headerlink" title="无参数"></a>无参数</h4><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521153116.png" alt="image-20210521153116502" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521153130.png" alt="image-20210521153130269" style="zoom:50%;" /><p>  <strong>把@deco 语句放在函数square_sum() 定义之前，实际上是将square_sum 传递给装饰器deco  ，并将deco 返回的新函数对象赋给原来的函数名</strong> square_sum=deco(square_sum)</p><p>从本质上，装饰器起到的就是这样一个重新指向函数名的作用，让同一个对象名指向一个新返回的函数，从而达到修改可调用函数的目的 </p><h4 id="有参数"><a href="#有参数" class="headerlink" title="有参数"></a>有参数</h4><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521153708.png" alt="image-20210521153708816" style="zoom:50%;" /><p><strong>要注意多重装饰器的执行顺序，应该是先执行后面的装饰器，再执行前面的装饰器。</strong></p><p>global</p><p>在程序中定义全局变量的主要目的是，为函数间的数据联系提供一个直接传递的通道 。</p><p>  因此不要滥用全局变量</p><h3 id="模板有条件执行"><a href="#模板有条件执行" class="headerlink" title="模板有条件执行"></a>模板有条件执行</h3><p>模块 中可以是一段 可以 直接执行的 程序（也称为<br>脚本 ） ， 也可以定义一些变量、类或函数，让别的模块导入和调用， 类似于库。</p><p>  模块中的定义部分，例如全局变量定义、类定义、函数定义等，因为没有程序执行入口，所以 不能直接运行，但对主程序代码部分有时希望只让它在模块直接执行的时候才执行，被其他模块加载时就不执行。</p><p>  在Python 中，可以通过系统变量“__name__”（注意前后都是两个下画线）的值来区分这两种情况。  如果模块是被其他模块导入的，__name__ 的值是模块的名称，主动执行时它的值就是字符串“__main__” 。</p><p>  通过__name__ 变量的这个特性，可以将一个模块文件既作为普通的模块库供其他模块使用，又可以作为一个可执行文件进行 执行。</p><h2 id="10-面向对象"><a href="#10-面向对象" class="headerlink" title="10.面向对象"></a>10.面向对象</h2><p>  <strong>面向对象程序设计（Object-Oriented programming ，OOP ）则以对象作为程序的主体，将程序和数据封装于其中，以提高软件的重用性、灵活性和扩展性</strong></p><p>面向对象程序设计是按照人们认识客观世界的系统思维方式，采用基于对象的概念建立问题模型，模拟客观世界，分析、设计和实现软件的办法</p><p>面向对象语言的三大核心内容是封装（类和对象）、 继承（派生）和 多态 </p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521154319.png" alt="image-20210521154319176" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521154329.png" alt="image-20210521154329188" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521154351.png" alt="image-20210521154351462" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521154441.png" alt="image-20210521154441389" style="zoom:50%;" /><p>class  A：</p><p>   x = 5</p><p>我定义了一个类A，这个时候自动出现了个类对象A，我可以使用A.x调用类属性</p><p>  <strong>“ .” 运算符：成员运算符</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521154708.png" alt="image-20210521154708312" style="zoom:50%;" /><p>  类中的实例方法至少应有 一 个变量 参数，一般命名为“ self ”( 习惯，非语法要求) ) ，而且该参数必须 作为形参表的第一 个参数，即必须放 于形式参数 表的最左边 </p><p>实例的方法和对象只能实例调用，不能类调用，这不是废话嘛</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>  类 属性（class attribute ）是类的 属性，它被 所有类对象和实例对象共有 ，在内存中只存在一个副本</p><p>公有 的类属性，在类外可以通过类对象和实例对象访问 ，但是不提倡用实例对象访问，容易绕晕</p><p>  类属性还可以在类定义结束之后通过类 名（类对象）增加  比如 A.new  = 212</p><p>实例对象也 可以在类定义结束之后通过实例对象名增加实例属性</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155315.png" alt="image-20210521155315657" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155327.png" alt="image-20210521155327542" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155408.png" alt="image-20210521155408190" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521160210.png" alt="image-20210521160210328" style="zoom:50%;" /><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155453.png" alt="image-20210521155453156" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155458.png" alt="image-20210521155458075" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155511.png" alt="image-20210521155511650" style="zoom:50%;" /><p> 只要创建实例对象，就一定要调用构造方法</p><p> 只要调用了构造方法，就一定创建了实例对象</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155619.png" alt="image-20210521155619793" style="zoom:50%;" /><h3 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155658.png" alt="image-20210521155658845" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155717.png" alt="image-20210521155717661" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155752.png" alt="image-20210521155752443" style="zoom:50%;" /><p><a href="http://c.biancheng.net/view/4552.html">一点详解</a></p><h3 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h3><p>  从已有类产生新类的过程就称为类的派生（derivation）（派生是继承的另一种说法）</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521161333.png" alt="image-20210521161333762" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521161544.png" alt="image-20210521161544527" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521161554.png" alt="image-20210521161554706" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521161602.png" alt="image-20210521161602901" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521161627.png" alt="image-20210521161627564" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521161723.png" alt="image-20210521161723181" style="zoom:50%;" /><p>多重 继承（multiple inheritance ）是指一个子类有两个或多个直接父类，子类从两个或多个直接父类中继承所需的 属性和方法。</p><p>class  子类名( 父类名1, 父 类名2,…):</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521161843.png" alt="image-20210521161843346" style="zoom:50%;" /><p> Python 本身是一种 解释型语言 ，不进行编译，因此它就只在运行时 确定 其状态，故也可以说Python 是一种多态语言 。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521163054.png" alt="image-20210521163054417" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521163113.png" alt="image-20210521163113006" style="zoom:50%;" /><h2 id="11-文件操作"><a href="#11-文件操作" class="headerlink" title="11.文件操作"></a>11.文件操作</h2><p>这个把我的心态搞炸了一会 </p><p>首先python里的默认编码都是Unicode，所有的文件其实本质都是二进制码，二进制文件只能用bytes类型操作，读出来怎么解读自己来，一般都用Unicode规则来decode（  二进制文件 是把数据按其在内存中的存储形式原样输出到磁盘上存放。）</p><p>小心那个文件指针位置，你写入了以后会放在最后，再读取啥都读不出来类似的</p><p>Python你在读写文件的时候<strong>不要打开</strong>。。不然会出现更改不了。。</p><p>理解python的<a href="https://blog.csdn.net/qq_23953717/article/details/78434292">open</a>txt默认是ANSI编码，不是UTF-8，坑死了，解决方案👈</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521163612.png" alt="image-20210521163612734" style="zoom:50%;" /><p>经常需要用到“终端形式”阅读的，用文本，经常修改的，最好用二进制</p><p>  读/ 写操作是相对于磁盘文件而言的，而输入/ 输出操作是相对于内存储器而言的</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521163715.png" alt="image-20210521163714938"></p><p> r+是从最开始开始读的</p><p>文件对象=open( 文件说明符[, 打开方式][, 缓冲区])</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210706170109.png" alt="image-20210706170109487" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210706170146.png" alt="image-20210706170146451" style="zoom:50%;" /><hr><p>文件对象有一些属性</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521163754.png" alt="image-20210521163754079" style="zoom:50%;" /><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521163811.png" alt="image-20210521163811248"></p><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>文本文件是指以ASCII 码方式存储的文件：英文、数字等字符存储的是ASCII 码 ，而 汉字存储的是机内码。</p><p>  文本文件中除了存储文件有效字符信息（包括能用ASCII 码字符表示的回车、换行等信息）外，不能存储其他任何信息</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521164102.png" alt="image-20210521164102228" style="zoom:50%;" /><p>文本文件的 优点：方便 阅读和理解，使用常用的文本编辑器或文字处理器就可以对其创建和修改的，文件 对象提供了read() 、readline() 和readlines() 方法 用于读取文本文件的内容</p><p>  每次write() 方法 执行完后并不 换行，如果 需要换行则在字符串最后加 换行符“\n</p><p>读取中文问题：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">InIn <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'try.txt'</span><span class="token punctuation">,</span><span class="token string">'r+'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>UnicodeDecodeError                        Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span><span class="token builtin">input</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">648df9718e18</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> a <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>UnicodeDecodeError<span class="token punctuation">:</span> <span class="token string">'gbk'</span> codec can't decode byte <span class="token number">0xad</span> <span class="token keyword">in</span> position <span class="token number">8</span><span class="token punctuation">:</span> illegal multibyte sequence    默认gbkIn <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'try.txt'</span><span class="token punctuation">,</span><span class="token string">'r+'</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> aOut<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'我是中文'</span>    In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'现在能输中文吗'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">7</span> <span class="token comment">#成功了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521164604.png" alt="image-20210521164604296" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521164625.png" alt="image-20210521164625049" style="zoom:50%;" /><p>seek()偏移为正数表示朝文件尾方向移动，偏移为负数表示朝文件头方向移动；</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521165042.png" alt="image-20210521165042570" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521165103.png" alt="image-20210521165103850" style="zoom:50%;" /><p>  文本文件 存放的是与编码对应的字符，而二进制文件直接存储字节编码。</p><h3 id="struct模块"><a href="#struct模块" class="headerlink" title="struct模块"></a>struct模块</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521185801.png" alt="image-20210521185754351" style="zoom: 50%;" /><p>读文件的时候，可以一次读出4 个字节，然后用unpack() 方法转换成Python 的整数 。</p><p>注意：<strong>unpack() 方法执行后得到的结果是一个元组。</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521185829.png" alt="image-20210521185828948" style="zoom:50%;" /><p>  如果写入的数据是由多个数据构成的，则需要在pack() 方法中使用格式串</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521185901.png" alt="image-20210521185901390" style="zoom:50%;" /><p>  此时的bytes 就是二进制形式的数据了，可以直接写入二进制文件 。当需要时可以读出来，再通过struct.unpack() 方法解码成Python 变量</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521185938.png" alt="image-20210521185937879" style="zoom:50%;" /><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521185948.png" alt="image-20210521185948733"></p><h3 id="pickle模块"><a href="#pickle模块" class="headerlink" title="pickle模块"></a>pickle模块</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521190026.png" alt="image-20210521190026155" style="zoom:50%;" /><p>在pickle 模块中有2 个常用的方法：dump() 和load()</p><p>pickle.dump( 数据，文件对象）</p><p>  其功能是直接把数据对象转换为字节 字符串，并保存到文件中 。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521191834.png" alt="image-20210521191834518" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521191845.png" alt="image-20210521191845688" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521192855.png" alt="image-20210521192854801" style="zoom:50%;" /><h3 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h3><p> Python 的os 模块提供了类似于操作系统级的文件管理功能，如文件重命名、文件删除、目录管理等 </p><p>os.rename(“ 当前文件名”,” 新文件名”)</p><p>os.remove(“ 文件名”)</p><p>os.mkdir(“ 新目录名”)</p><p>os.chdir(“要成为当前目录的目录名”)</p><p>getcwd() 方法显示当前的工作目录。</p><p>os.rmdir(“ 待删除目录名”) <strong>在用rmdir() 方法删除一个目录前，先要删除目录中的所有内容。</strong></p><h2 id="12-异常"><a href="#12-异常" class="headerlink" title="12.异常"></a>12.异常</h2><p>程序中的错误通常分为 语法错误 、 运行错误 和 逻辑错误 。</p><p>语法 错误是由于程序中使用了不符合 语法规则 的信息而导致的 ，这类错误比较 容易 修改，因为编译器或解释器会指出错误的位置和性质</p><p>运行错误则不容易修改，因为其中的错误是 不可预料的，或者可以预料但无法避免 的，  例如：内存 空间不够、数组下标越界、文件打开失败等</p><p>逻辑错误 主要表现在程序运行后，得到的结果与设想的结果不一致，通常出现逻辑错误的程序都能正常运行系统 不会给出提示信息，所有很难发现。</p><p>良好的程序应该对用户的不当操作做出提示，能识别多种情况下的程序运行状况，并选择适当 的应对 策略 </p><p>在程序中，对各种可预见的异常情况进行处理称为异常处理（exception handling）</p><p>处理程序异常的方法有很多，最简单和最直接的办法是在发现异常时，由Python 系统进行 默认的异常处理 </p><p>如果 异常对象未被处理或者捕捉，程序就会用所谓的 回溯（Traceback ） 终止</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521194005.png" alt="image-20210521194005011" style="zoom:50%;" /><p>标准错误信息包括两个部分：错误类型（如NameError ）和错误说明（如name ‘A’ is not defined ），两者用冒号分隔</p><p> Python 系统还追溯错误发生的位置，并显示有关<br>信息</p><h3 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521194142.png" alt="image-20210521194142032" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521194153.png" alt="image-20210521194153163" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521194218.png" alt="image-20210521194218045" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521195131.png" alt="image-20210521195131606" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521195150.png" alt="image-20210521195150208" style="zoom:67%;" /><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    xxx<span class="token keyword">except</span> 异常类型<span class="token number">1</span><span class="token punctuation">[</span><span class="token keyword">as</span> 错误描述<span class="token punctuation">]</span><span class="token punctuation">:</span>    xxx<span class="token keyword">except</span> 异常类型<span class="token number">2</span><span class="token punctuation">[</span><span class="token keyword">as</span> 错误描述<span class="token punctuation">]</span><span class="token punctuation">:</span>    xx<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">except</span><span class="token punctuation">:</span>    默认异常处理语句块<span class="token keyword">else</span><span class="token punctuation">:</span>    语句块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521200428.png" alt="image-20210521200428383" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521200444.png" alt="image-20210521200444442" style="zoom:50%;" /><p>当发生异常时，直接跳转到except，try中没执行完的语句会被跳过嗷！</p><p>可以嵌套。</p><p><strong>finally 子句是指无论是否发生异常都将执行相应的</strong><br><strong>语句块 。</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521200807.png" alt="image-20210521200807334" style="zoom:50%;" /><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>在编写程序时，在程序调试阶段往往需要判断程序执行过程中变量的值，根据变量的值来分析程序的执行情况 </p><p>可以 使用print() 函数打印输出结果，也可以通过断点跟踪调试查看变量，但使用断言更加灵活高效 。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521201018.png" alt="image-20210521201018312" style="zoom:50%;" /><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">assert</span> b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'除数不可为0'</span>c <span class="token operator">=</span> a<span class="token operator">/</span>b<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>Lenovo@LAPTOP<span class="token operator">-</span>08D3H5DC MINGW64 <span class="token operator">~</span><span class="token operator">/</span>Desktop<span class="token operator">/</span>env$ D<span class="token punctuation">:</span><span class="token operator">/</span>Anaconda3<span class="token operator">/</span>envs<span class="token operator">/</span>TF2<span class="token operator">/</span>python<span class="token punctuation">.</span>exe c<span class="token punctuation">:</span><span class="token operator">/</span>Users<span class="token operator">/</span>Lenovo<span class="token operator">/</span>Desktop<span class="token operator">/</span>env<span class="token operator">/</span>one<span class="token punctuation">.</span>py<span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"c:/Users/Lenovo/Desktop/env/one.py"</span><span class="token punctuation">,</span> line <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">assert</span> b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'除数不可为0'</span>AssertionError<span class="token punctuation">:</span> 除数不可为<span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> AssertionError 异常可以被捕获，并像使用在try-except 语句中的任何其他异常处理，但如果不处理，它们将终止程序并产生回溯</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521201713.png" alt="image-20210521201712899" style="zoom:50%;" /><h3 id="主动引发异常与自定义类"><a href="#主动引发异常与自定义类" class="headerlink" title="主动引发异常与自定义类"></a>主动引发异常与自定义类</h3><p>前面的异常类都是由Python 库中提供的，产生的异常也都是由Python 解释器引发的</p><p>  在程序设计 过程中，有时需要在编写的程序中主动引发异常，还可能需要定义表示特定程序错误的异常类。</p><p>  在Python 中，要想自行引发异常，最简单的形式就是输入关键字raise ，后跟要引发的异常的名称 </p><p>异常 名称标识出具体的类，Python 异常处理是这些类的对象 。 raise 语句还可指定对异常对象进行初始化的参数  ，<strong>执行raise 语句时，Python 会创建指定的异常类的一个对象</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521201958.png" alt="image-20210521201958394" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521202026.png" alt="image-20210521202025813" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521202332.png" alt="image-20210521202332132" style="zoom:50%;" /><p>处理学生成绩时，成绩不能为负数。利用前面创建的NumberError 异常类，处理出现负数成绩的异常 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;白嫖的python课件总结&quot;&gt;&lt;a href=&quot;#白嫖的python课件总结&quot; class=&quot;headerlink&quot; title=&quot;白嫖的python课件总结&quot;&gt;&lt;/a&gt;白嫖的python课件总结&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;ps：&lt;/p&gt;
&lt;p&gt;这份</summary>
      
    
    
    
    <category term="python" scheme="https://darren-dong.com/categories/python/"/>
    
    
    <category term="python" scheme="https://darren-dong.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>数据科学手册</title>
    <link href="https://darren-dong.com/2021/05/17/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%89%8B%E5%86%8C/"/>
    <id>https://darren-dong.com/2021/05/17/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%89%8B%E5%86%8C/</id>
    <published>2021-05-17T09:28:04.000Z</published>
    <updated>2021-07-20T07:43:02.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言和环境"><a href="#前言和环境" class="headerlink" title="前言和环境"></a>前言和环境</h1><p>跨学科是数据科学的关键</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210510110540.png" alt="查看源图像" style="zoom:50%;" /><h2 id="ipython"><a href="#ipython" class="headerlink" title="ipython"></a>ipython</h2><p>？和？？    ？几乎适用任何对象包括魔法指令</p><p>有时候？？不能显示源代码，因为该对象不是用python实现的，此时等价于一个？</p><p>Tab补全，配合通配符 * 使用</p><p>一般带下划线的私有方法和特殊方法不会被默认显示，可以通过显式输入 _ 再tab来获取他们</p><p>甚至可以 import &lt;TAB&gt; 查看你能导入的包</p><p><a href="https://www.cnblogs.com/Pythonzrq/p/11346578.html#:~:text=2%E3%80%81pycharm%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%201%20%E3%80%81%E7%BC%96%E8%BE%91%EF%BC%88Editing%EF%BC%89%202%20%E3%80%81%E6%9F%A5%E6%89%BE%2F%E6%9B%BF%E6%8D%A2%20%28Search%2FReplace%29%203%20%E3%80%81%E8%BF%90%E8%A1%8C,History%209%20%E3%80%81%E6%A8%A1%E7%89%88%20%28Live%20Templates%29%2010%20%E3%80%81%E5%9F%BA%E6%9C%AC%20%28General%29"><strong>快捷键</strong></a></p><p>C + a/e </p><p>C + u/k 剪掉前面，后面</p><p>C + t 交换前两个字符，怪毙了</p><p>C + r对历史反向搜索，继续ctrl+r往前匹配下一个，找到后回车</p><p>C + l/c/d 清屏，中断当前python命令，退出ipython会话</p><p><strong>魔法指令</strong></p><p>ipython在普通python语法上的增强功能</p><p>行魔法 %</p><p>单元魔法 %%，用于处理多行输入比如%%timeit</p><pre class="line-numbers language-pytho" data-language="pytho"><code class="language-pytho">%quickref  快速参考卡%magic 探索所有魔术命令%debug从最后发生报错的底部进入交互式调试器  %pdb出现任意报错自动进入调试器%hist%paste   %cpaste 解决包含符号的多行输入&#x2F;复制问题%reset 清空所有变量&#x2F;名称  %xdel variable 删除变量和相关引用%page OBJECT  通过分页器更美观的打印一个对象%run   %prun statement  使用CProfile执行语句，报告输出%time 报告单个语句执行时间   %timeit 多次运行单语句，计算平均执行时间，用于估算代码最短执行时间%who  %who_ls  %whos  依次更加详细的展示变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://developer.51cto.com/art/202007/620863.htm">这个厉害</a></p><p>集成matplotlib:</p><ul><li>在ipython命令行中 %matplotlib</li><li>在jupyter中 %matplotlib inline</li></ul><p>In是一个列表，记录了历史命令</p><p><strong>Out是一个字典</strong>，将输入的索引对应起输出，很多命令没有输出（None），则不会被记录！</p><p><strong>Out[x] 的简写是_x</strong></p><p>print(_) 一二三条下划线对应倒数第几个历史输出，这个厉害，或者直接 _3</p><p><strong>但是如果输入的最后加上；就不会被添加到历史，也不会把输出显示出来</strong>，这样当其他引用被删除时，该空间可以被释放。</p><p><strong>shell</strong></p><p>很多教材说是用 ! 加shell指令，但是pycharm全是%呀</p><p>可以用赋值将任何shell命令的输出保存到一个python列表，这是一个长得像列表的特殊返回类型</p><p>在shell里面用{varname}来调用变量</p><p>很多shell的指令可以直接使用，比如%cd 可以直接cd</p><p><strong>调试</strong></p><p>%xmode Plain/Context/Verbose 异常模式，改变异常时的打印信息</p><p>plain只会输出函数和行号，context是默认，会显示出错行上下几行代码，verbose还会显示每一级的参数和出错位置的变量值，好方便</p><p>标准调试工具pdb 的Ipython增强版ipdb，ipython专用</p><p>还有个很方便的%debug魔法指令，在最近的异常点打开一个交互式调试指令符（是用了ipdb）</p><p>%pdb on 会在抛出异常时自动启动，pdb有 up down 等命令配合print来检查</p><p>有一些常用调试命令：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span> 显示路径h<span class="token punctuation">(</span><span class="token builtin">help</span><span class="token punctuation">)</span> 显示命令列表q<span class="token punctuation">(</span>uit<span class="token punctuation">)</span> 退出调试器和程序c<span class="token punctuation">(</span>ontinue<span class="token punctuation">)</span> 推出调试器，继续程序n<span class="token punctuation">(</span>ext<span class="token punctuation">)</span> 跳到程序下一步<span class="token operator">&lt;</span>enter<span class="token operator">></span> 重复前一个命令p<span class="token punctuation">(</span>rint<span class="token punctuation">)</span> 打印变量s<span class="token punctuation">(</span>tep<span class="token punctuation">)</span> 步入子进程r<span class="token punctuation">(</span>eturn<span class="token punctuation">)</span> 从子进程跳出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码的分析与计时</strong></p><p>“大约百分之97的时间，我们应该忘记微小的效率差别；过早优化是不被推荐的”</p><p>但是当代码跑起来后，提高运行效率是有用的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">%</span>time 对单个语句的执行时间进行计时<span class="token punctuation">(</span>适合不可重复的，或者时间较长的<span class="token punctuation">)</span><span class="token operator">%</span>timeit 对单个语句的重复执行进行计时，以获得更高的精确度<span class="token punctuation">(</span>但需要保证可重复性，别对排序这样干<span class="token punctuation">)</span>在进行相同操作时，timeit总是比time更快，因为timeit在底层采取了一些措施组织系统调用对计时过程的干扰，例如阻止清理未利用的python对象。👇需要安装line_profiler 和 memory_profiler 拓展python包含一个内置的代码分析器，可以通过魔法指令👇简单的调用<span class="token operator">%</span>prun 使用分析器运行代码，输出一个时间报告<span class="token operator">%</span>lprun 使用逐行分析器运行代码，逐行分析<span class="token operator">%</span>memit 测量单个语句的内存使用<span class="token operator">%</span>mprun 使用逐行的内存分析器运行代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>%%file 来写一个简单的模块文件</p><h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><p>将异构的各种数据都看成数组，第一步将这些数据转化成数值数组形式的可分析数据。</p><p>数据科学的绝对基础：有效存储数据，操作数值数组</p><p>这似乎不太符合大数据的理念。。。。。。。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>标准的python实现是用C编写的，这意味着每一个python对象都是一个聪明的伪C结构体</p><p>比如python的整形变量其实是一个指针，它的结构体里包含了大量额外信息，所以可以自由，动态编码，但也会成为负担。</p><p>python<strong>列表</strong>实质：指向一个指针域，域里的每一个指针指向一个确切的对象</p><p>numpy牺牲了这一点，指向一块类似C的域，但是能更有效地存储和操作数据。</p><p>所以numpy要求数组必须包含同一类型的数据，不匹配则向上转换</p><h2 id="数组基础"><a href="#数组基础" class="headerlink" title="数组基础"></a>数组基础</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>手打l<span class="token punctuation">)</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token operator">/</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token operator">/</span>full<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>full<span class="token punctuation">(</span>size<span class="token punctuation">,</span>fulfiller<span class="token punctuation">)</span> <span class="token comment">#用fulfiller填充</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#左闭右开 默认int</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">#左闭右闭 默认float,</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 0~1均匀分布</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 均值 方差 shape</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#左闭右开 区间[0,10)</span>np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">#n单位矩阵</span>np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span>shape<span class="token punctuation">)</span> <span class="token comment">#未初始化的数组，数组值是内存空间中的任意值</span>还有各种_alike<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dtype可以用字符串参数或者相关的Numpy对象来指定。</p><p>标准类型大概有bool_ int类 float类 complex类  可以查一查，还有更高级的数据类型指定P35</p><p>后面带一个下划线的代表默认的类型</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>ndim 维度  shape 形状（每个维度大小）   size 元素个数（数组大小）</p><p>dtype 数据类型   itemsize 每个元素的字节大小   nbytes  总字节大小</p><h3 id="索引切片"><a href="#索引切片" class="headerlink" title="索引切片"></a>索引切片</h3><p>与python类似，更改元素时自动发生类型变换</p><p>获取第一列x2[: , 0]</p><p>获取第一行x2[0 , :] #获取行时其实可以省略，直接x2[0]</p><p>抽取左上角的2x2数组，x2[:2，:2]</p><p><strong>切片返回的是视图</strong>，.copy() 才是复制，这意味着可以处理大型数据集的片段而不用花费额外的内存</p><h3 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h3><p>.reshape() 大小必须一致</p><p>或者在索引中使用newaxis 关键字，插入一个新维度，不过记得要加上前缀，即np.newaxis</p><p>x = x[np.newaxis,:] 在前面加了一个维度，反之则是在后面插入</p><h3 id="拼接和分裂"><a href="#拼接和分裂" class="headerlink" title="拼接和分裂"></a>拼接和分裂</h3><p><strong>np.concatenate</strong>(默认沿着第一个轴) #二维就是列，用axis  = 1 可以改成行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">grid <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span> concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>grid<span class="token punctuation">,</span>grid<span class="token punctuation">]</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前三维可以用<strong>np.vstack(垂直) np.hstack(水平) np.dstack(第三维)</strong> 来拼接</p><p>vertical horizontal deep</p><p>np.split(x, [3,5])#后面那个数组记录的是下一段首的索引位置，如果是3，那就在索引2（第3个元素）和3间断开，返回一个子元组</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> gridOut<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>x3 <span class="token operator">=</span> np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>grid<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x1Out<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x2Out<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#np.hsplit 和 np.vsplit 和 np.dsplit 差不多，记得后面那里要用索引列表</span>upper<span class="token punctuation">,</span>lower <span class="token operator">=</span> np<span class="token punctuation">.</span>vsplit<span class="token punctuation">(</span>grid<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#上下四行均分成两行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h2><p>Numpy高效的关键是采用 <strong>向量化</strong> 操作，通常用通用函数（ufunc）实现——提高了数组元素重复计算的效率</p><p>Python灵活的数据类型导致序列操作不能被编译成有效的机器码，所以循环操作超级慢</p><p>很多方案试图解决，比如Cpython，Cython，LLVM字节码，但是Cpython是最流行的</p><p>Cpython的主要瓶颈在于每次循环时必须做数据类型检查和函数的调度。</p><p><strong>Numpy为许多类型的操作提供了方便，静态，可编译程序的接口，被称为向量操作。这将被循环推送至Numpy下的编译层。</strong></p><p>只要看到python脚本有循环，就可以考虑能否用向量替代。</p><p>通用函数有两种形式，一元和二元。</p><p>python原生的算术运算符被重构了，相当于调用一些通用函数，比如 * 相当于 np.mulitiply</p><p><code> + - * /  //  **  %</code>都被重构了，还有布尔/位运算符</p><p>Numpy可以理解python内置的某些函数比如绝对值函数 abs(x)，对应的是np.absolute 或者别名np.abs，但这个numpy的处理复数时返回幅值。</p><p>三角函数：sin cos tan arcsin arccos acrtan  还有很多别的</p><p>指对数：exp exp2(2^)  power(底数，操作的数组x)       ||log  log2  log10</p><p>还有专门用来处理小量的：np.expm1(x)  == exp(x) - 1               np.log1p(x)  == log(1+x)   #在x很小时精度较高</p><p>还有很多双曲三角啊，比特位运算，比较运算，弧度角度转化等等等。可以查<a href="https://numpy.org/">文档</a></p><p>还有一个更专用的子模块scipy.special 里面有一堆牛逼函数比如伽马（广义阶乘）， 高斯积分啥的，可以搜索xxx function python</p><h3 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h3><p><strong>指定输出</strong></p><p>有一个out参数指定输出结果的存放位置，此时不创建临时数组而直接写入目标位置，对于较大的数据能有效节约内存，但是注意要提前创建好用来存放的nparray</p><p><strong>聚合</strong></p><p><strong>二元通用函数</strong>指的是对两个输入操作，它们有些非常有趣的聚合功能，可以直接在对象上计算，会对给定的元素和操作重复执行，直到得到单个结果，这是任何通用函数都有的方法</p><p>比如reduce，任何通用函数都有</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>add<span class="token punctuation">.</span><span class="token builtin">reduce</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>x <span class="token operator">==</span> <span class="token number">15</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果需要存储每次计算的中间结果，可以使用accumulate，项数不会变，但是除了第一项其他依次被处理</p><p>np.add.accumulate(x)     –array([1,3,6,10,15])</p><p><strong>外积</strong></p><p>任何输入函数都可以使用<strong>outer</strong>方法获得 两个不同输入数组 <strong>所有元素对</strong> 的函数运算结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">.</span>outer<span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多的通用函数信息可以在Numpy和SciPy的文档网站查到</p><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>在处理大量数据的时候第一步通常是计算相关概率的概括统计值，比如最常用的均值和方差。</p><p>Numpy又快速的内置聚合函数可用于数组，如下：</p><p>np.sum 和内置的sum都可以起作用，但是numpy的sum在编译码中运行，所以<strong>操作更快</strong>（1000倍），而且注意不要混淆，他们的参数有不同的意义，np.sum函数是知道数组的维度的</p><p>np.min  max啥的，还有一种更简洁的语法是数组对象直接调用这些方法: x.min()  x.sum()</p><p><strong>多维度聚合</strong></p><p>可以用axis指定处理的维度，但是要注意，这个指定的是数组将会被聚合（折叠）的维度，而不是要返回的维度，比如说axis = 0 意味着第一个轴（二维数组的列）将要被折叠。</p><p>numpy有很多内置的聚合函数，大多数聚合都有对NaN的安全处理策略，即计算的时候忽略所有缺失值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span><span class="token builtin">sum</span>  np<span class="token punctuation">.</span>nansumnp<span class="token punctuation">.</span>prod np<span class="token punctuation">.</span>nanprod 积np<span class="token punctuation">.</span>mean  平均值std  标准差 Standard deviationvar  方差  variance<span class="token builtin">min</span> <span class="token builtin">max</span>  最小最大argmin argmax 最小最大的索引median  中位数percentile  基于元素排序的统计值<span class="token punctuation">,</span>例子如下In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> xOut<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>percentile<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4.0</span>In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>percentile<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">5.0</span><span class="token builtin">any</span>  <span class="token builtin">all</span>  存在  任意为真 <span class="token comment">#无安全版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h2><p>可以理解为将低维数组拓展，拓展到匹配的维度，但是其实并没有发生这样的内存分配，只是便于理解。</p><p>规则如下：</p><ol><li>如果两个数组的维度不同，小维度数组<strong>的形状在最左边补1</strong></li><li>如果数组在任何一个维度上大小不相等，而且数组<strong>某维度为1</strong>，则会沿着该维度拓展到匹配另一个数组</li><li>如果数组在任何一个维度上大小不相等，而且并没有某个数组维度为1，那么引发异常。</li></ol><p>最值得注意的就是他补充一个维度是在左边补1而不是右边，如果希望右边补全，可以使用变形数组。</p><p>这些广播规则适用于<em><strong>任意二进制通用函数</strong></em></p><p><strong>实际应用</strong></p><p>数组的归一化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> X <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Xmean <span class="token operator">=</span> X<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#沿着第一个维度聚合</span>In <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> X_centered <span class="token operator">=</span> X <span class="token operator">-</span> XmeanIn <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> X_centered<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">8.88178420e-17</span><span class="token punctuation">,</span>  <span class="token number">0.00000000e+00</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.11022302e-17</span><span class="token punctuation">]</span><span class="token punctuation">)</span>妙啊<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>画一个二维函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">看不懂他的骚操作，可以翻一下书的P60页<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="比较，掩码，布尔"><a href="#比较，掩码，布尔" class="headerlink" title="比较，掩码，布尔"></a>比较，掩码，布尔</h2><p>当想<strong>基于某些准则</strong>来抽取，修改，技术或对一个数组中的值进行其他操作时，掩码就可以派上用场了，在Numpy中，布尔掩码是完成这类任务的最高效完成方式。</p><p>比较有六种运算符<code>== != &lt; &lt;= &gt; &gt;=</code> 两边可以是表达式，<strong>每次返回的结果是布尔数组</strong></p><p>利用复合表达式实现逐元素比较也是可行的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这些比较运算符也是<strong>借助通用函数</strong>来实现的，例如x &lt; 3 其实调用np.less(x,3) </p><h3 id="操作布尔数组"><a href="#操作布尔数组" class="headerlink" title="操作布尔数组"></a>操作布尔数组</h3><p>记录布尔数组中非零（其实就是True）的个数 np.count_nonzero(）</p><p>统计小于6的则np.count_nonzero(x&lt;6) </p><p>或者也可以 np.sum(x&lt;6) 都是返回为True的个数，sum的好处是可以沿着行或者列进行</p><p>np.any 和 np.all 快速检测全部 </p><p>需要提醒的是python有内置的sum，any，all函数，这些函数在numpy中有对应的版本，但是语法不同，如果在多维数组上混用这两个版本，会导致神奇的错误，请确保使用numpy版本</p><p><strong>布尔运算符</strong></p><p>逻辑运算符也被重载，可以实现对数组的逐位逻辑运算。有<code>&amp; | ^ ~</code></p><p>np.sum((inches &gt; 0.5) &amp; (inches &lt; 1))  注意用括号调整运算次序。表示inches在0.5到1间的数目</p><p>将布尔数组作为掩码</p><p>就是传说中的布尔矩阵作为索引呗，会得到一个一维数组</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">and</span> <span class="token keyword">or</span>  和  <span class="token operator">&amp;</span> <span class="token operator">|</span>  的区别<span class="token keyword">and</span> <span class="token operator">/</span> <span class="token keyword">or</span> 判断整个对象是真是假，而后两者是指每个对象中的比特位，依次化成二进制码进行操作而布尔矩阵可以被当成比特字符组成的，所以采用后者，而使用前者比较整个对象的时候会出错。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="花哨的索引"><a href="#花哨的索引" class="headerlink" title="花哨的索引"></a>花哨的索引</h2><p>花哨（fancy）的索引对多个维度也适用。</p><p><strong>花哨索引和前面的简单索引类似，但是传递的是索引数组，可以让我们快速获得并修改复杂的数组值的子数据集</strong></p><p>结果的形状与<strong>索引数组的形状</strong>一致，如果有广播，就是<strong>跟广播后的索引数组的形状</strong>一致,而不是被索引的数组</p><p>如果是普通的一维一维的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>row <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>col <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span>row<span class="token punctuation">,</span>col<span class="token punctuation">]</span>那就像坐标一样Out<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span>但如果b<span class="token punctuation">[</span>row<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span><span class="token punctuation">,</span>col<span class="token punctuation">]</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span>那就是广播，淦，当年为何困惑了我这么久，广播以后索引数组的每一个位置其实都是一个坐标。。就这么简单<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配合切片，简单索引，布尔效果更好。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>从一个矩阵中选择行的子集！</p><p>可以用花哨索引来修改值，但是重复的索引会有一些诡异的事情发生</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> i <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>In <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> xOut<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#应该看成x[i] = x[i] + 1就会发现神奇索引导致的诡异地方，解决方法是at👇</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>at函数可以对给定的操作，给定的索引，给定的值进行就地操作。</p><p>比如np.add.at(x,i,1) x为被操作的矩阵，i为索引，1为操作数（+1）</p><h2 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h2><p>python有内置的sort和sorted但是太慢了</p><p>np.sort 是快速排序【N log N】,另外可以选择归并排序和堆排序。</p><p>np.sort(X) 不会修改原始数组，x.sort()这种python内置的方法会替代原始数组</p><p>np.argsort(X)返回的是如果排序好的索引值。</p><p>利用axis可以选择行列排序噢,<strong>这是将行和列当成独立数组，任何关系都将丢失！</strong></p><p><strong>部分排序：分隔</strong></p><p>np.partition(x,3) 将最小的3个和其他的分隔开，两组数是任意排序的</p><p>当用<strong>axis时也会破坏行和列的关系</strong>，np.argpartition返回索引</p><h2 id="结构化数据"><a href="#结构化数据" class="headerlink" title="结构化数据"></a>结构化数据</h2><p>P82</p><p>numpy的结构化数组和记录数组</p><p>他们为复合的，异构的数据提供了非常有效的存储。</p><p>其实就是把dtype当作一个结构嘛</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span>age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">]</span>weight <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">21.21</span><span class="token punctuation">,</span><span class="token number">4.43</span><span class="token punctuation">,</span><span class="token number">4334.65</span><span class="token punctuation">,</span><span class="token number">45.9</span><span class="token punctuation">]</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'names'</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token string">'weight'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token string">'format'</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'U10'</span><span class="token punctuation">,</span><span class="token string">'i4'</span><span class="token punctuation">,</span><span class="token string">'f8'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">#U10表示长度不超过10的字符串，</span>data<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">=</span>namedata<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token operator">=</span>agedata<span class="token punctuation">[</span><span class="token string">'weight'</span><span class="token punctuation">]</span><span class="token operator">=</span>weight这样可以用连续的内存存储异构的数据，反映了他们间的关系可以用date<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>查看是<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">21.21</span><span class="token punctuation">)</span>然后就有很多骚操作比如data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token comment">#获得年龄小于30的人的年龄</span>数值类型可以用python类型或者Numpy的dtype来指定<span class="token number">2</span><span class="token operator">&lt;</span> 和 <span class="token operator">></span> 分别表示低字节序 和 高字节序b 字节型i u 有、无符号整形f 浮点型c 复数浮点型S a 字符串U Unicode编码字符串V 原生数据<span class="token comment">#还有一种格式是元组列表</span>np<span class="token punctuation">.</span>dtype<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'U10'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token string">'&lt;i4'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'weight'</span><span class="token punctuation">,</span><span class="token string">'f8'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>这样就直接生成一个结构化数组结构化数组的dtype属性里，第n个反映了每个单元中第n个数据的索引和属性，比如data<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">55.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">85.8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'Cathy'</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">68.0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>data<span class="token punctuation">.</span>dtype<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'&lt;U10'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token string">'&lt;i4'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'weight'</span><span class="token punctuation">,</span><span class="token string">'&lt;f8'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>np.dtype([(&#39;id&#39;,&#39;i8&#39;),(&#39;mat&#39;,&#39;f8&#39;,(3,3))])这样就定义了一个id和3x3矩阵的结构</code>由于numpy中的dtype直接映射到C结构定义，包含数组内容的缓存可以直接在C程序里使用，如果想写一个python接口与一个遗留的C\Fortran接口交互，非常有用</p><p>如果需要使用结构化数组，更好是掌握pandas包。</p><h1 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h1><p>Pandas是在Numpy基础上建立的新程序库，提供了一种高效的DataFrame结构。</p><p>DataFrame本质上是一种<u>带行标签和列标签、支持相同类型数据和缺失值的</u>多维数组。</p><p>Pandas不仅为各种带标签的数据提供了便利的存储界面，还实现了许多强大的操作，这些操作对数据库框架和电子表格程序的用户来说非常熟悉</p><p>当我们需要处理更灵活的数据任务（为数据添加标签，处理缺失值），或者需要分组数据计算，Numpy就会显露出限制，而Pandas为“数据清理”（data munging）任务提供了捷径</p><h2 id="对象简介"><a href="#对象简介" class="headerlink" title="对象简介"></a>对象简介</h2><p>如果从底层视角观察pandas对象，可以看成是增强版的Numpy结构化数组，行列不再是简单的整数索引，还可以带上标签！要理解基本数据结构内部的细节！</p><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p>带索引数据的一维数组</p><p>可以用<strong>数组</strong>创建Series对象 data = pd.Series([0.25,0.5,0.75,1.0])</p><p>values属性返回Numpy数组的对象</p><p>index返回一个类型为pd.Index的类数组对象，后续介绍</p><p>name属性会作为dataframe的列标签</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span>Darren     <span class="token number">21</span>Jack       <span class="token number">37</span>Jessica    <span class="token number">56</span>Name<span class="token punctuation">:</span> one<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int32In <span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nameOut<span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'one'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Series比它模仿的一维Numpy数组更加通用，灵活！！</strong></p><p>本质差别在索引</p><p>Numpy数组用的是隐式定义的索引，Series是显式定义，索引完全可以是任意类型，不按顺序</p><p>pd.Series([2,2,22,],index = [‘a’,’c’,’d’])</p><p>字典将任意键映射到一组任意值，Series将类型键映射到一组类型值，</p><p>Pandas Series的类型信息使得她在某些操作上<u>比Python的字典更高效</u></p><p>可以用<strong>字典</strong>创建一个Series对象</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span>Out<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'dadaa'</span><span class="token punctuation">:</span> <span class="token number">1223</span><span class="token punctuation">,</span> <span class="token string">'tda'</span><span class="token punctuation">:</span> <span class="token number">12124</span><span class="token punctuation">,</span> <span class="token string">'dada'</span><span class="token punctuation">:</span> <span class="token number">341</span><span class="token punctuation">&#125;</span>dict2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>dict2Out<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dadaa     <span class="token number">1223</span>tda      <span class="token number">12124</span>dada       <span class="token number">341</span>dtype<span class="token punctuation">:</span> int64<span class="token comment">#用字典创建对象时，索引按照默认顺序排列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Series支持索引切片！</p><p>dict2[‘dadaa’:’dada’] 牛皮啊</p><p>在pd.Series(data,index = index)中，data若是标量，则会填充到每一项上</p><p>索引默认0-n整数序列，RangeIndex（start = 0, stop = n, step = 1）</p><p>data可以是列表，字典（index是默认的排序字典键,也就是先会按照默认方式排序一遍）</p><p>每种类型都可以通过<strong>显式指定索引筛选</strong>需要的结果：<strong>但是字典这样做只会保留显式定义的部分键值对！</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>a<span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>ValueError                                Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span><span class="token builtin">input</span><span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">5bed21d603af</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> a1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>a<span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Anaconda3\lib\site<span class="token operator">-</span>packages\pandas\core\series<span class="token punctuation">.</span>py <span class="token keyword">in</span> __init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> index<span class="token punctuation">,</span> dtype<span class="token punctuation">,</span> name<span class="token punctuation">,</span> copy<span class="token punctuation">,</span> fastpath<span class="token punctuation">)</span>    <span class="token number">348</span>                 <span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token number">349</span>                     <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">350</span>                         <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span>    <span class="token number">351</span>                             <span class="token string-interpolation"><span class="token string">f"Length of passed values is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">, "</span></span>    <span class="token number">352</span>                             <span class="token string-interpolation"><span class="token string">f"index implies </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">."</span></span>ValueError<span class="token punctuation">:</span> Length of passed values <span class="token keyword">is</span> <span class="token number">5</span><span class="token punctuation">,</span> index implies <span class="token number">3</span><span class="token punctuation">.</span>    <span class="token comment">#当列表的时候index和data长度需一致吗</span>In <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>b<span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a1Out<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span>a    <span class="token number">4</span>c    <span class="token number">7</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><p>和Series一样，它也既可以作为一个通用型Numpy数组，也可以看作特殊的Python字典</p><p>可以看成一种既有灵活行索引，又有灵活列名的<strong>二维数组</strong></p><p>可以看成有序排列的若干Series对象。这里的“排列”指的是它们拥有共同的索引</p><p>假设a，b是两个Series对象，而且拥有相同的索引，那么可以</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'column1'</span><span class="token punctuation">:</span>a<span class="token punctuation">,</span><span class="token string">'column2'</span><span class="token punctuation">:</span>b<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">#其中a和b为长度一样的Series对象</span>ccolumn1   column2index1      <span class="token number">32423</span>     <span class="token number">32423</span>index2      <span class="token number">2189</span>      <span class="token number">2198128</span>index       <span class="token number">312312</span>    <span class="token number">21312</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DataFrame的index属性和Series一样，返回Index对象（如果是默认生成的，则是RangeIndex）</p><p>还有个columns属性，也返回Index对象，不过是每列的标签</p><p>DataFrame可看成特殊的字典，每列映射一个Series数据，通过列索引c[‘column1’]可以得到该Series对象</p><hr><p><strong>创建</strong></p><p>（1）可以用单个Series对象</p><p>pd.DataFrame(population,columns = [‘population’])</p><p>（2）可以用<strong>元素是字典的列表</strong>来创建,若是字典有一些键(作为列索引)不在，会用NaN补全</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span>i<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">&#125;</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>dataOut<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    a  b<span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0</span><span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">2</span><span class="token number">2</span>  <span class="token number">2</span>  <span class="token number">4</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      a  b    c<span class="token number">0</span>  <span class="token number">1.0</span>  <span class="token number">2</span>  NaN<span class="token number">1</span>  NaN  <span class="token number">3</span>  <span class="token number">4.0</span><span class="token comment">#这里的例子都是用默认Index</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）通过Series对象字典创建</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'column1'</span><span class="token punctuation">:</span>a<span class="token punctuation">,</span><span class="token string">'column2'</span><span class="token punctuation">:</span>b<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>ccolumn1   column2index1      <span class="token number">32423</span>     <span class="token number">32423</span>index2      <span class="token number">2189</span>      <span class="token number">2198128</span>index       <span class="token number">312312</span>    <span class="token number">21312</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(4)通过Numpy二维数组创建。假如有二维数组，就可以创建一个可以指定行列索引值的DataFrame，如果不指定，那么行列都是默认索引  IndexRange</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span>         foo       bara  <span class="token number">0.855538</span>  <span class="token number">0.595667</span>b  <span class="token number">0.575162</span>  <span class="token number">0.149108</span>d  <span class="token number">0.034177</span>  <span class="token number">0.156297</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(5)通过Numpy结构化数组创建</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'i8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'f8'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> AOut<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'&lt;i8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'&lt;f8'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>A<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>   A    B<span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0.0</span><span class="token number">1</span>  <span class="token number">0</span>  <span class="token number">0.0</span><span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">0.0</span>可以发现子结构的名字被作为了列标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>可以看成一个不可变数组或有序集合，可以包含重复值。这两种观点体现了其一些功能</p><ol><li><p>不可变数组</p><p>Index很多操作都像数组，比如切片，还有许多与Numpy数组相似的属性，比如</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ind <span class="token operator">=</span> pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> indOut<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Int64Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ind<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Int64Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>ind<span class="token punctuation">.</span>size<span class="token punctuation">,</span>ind<span class="token punctuation">.</span>shape<span class="token punctuation">,</span>ind<span class="token punctuation">.</span>ndim<span class="token punctuation">,</span>ind<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token number">5</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token number">1</span> int64<span class="token comment">#这几个属性竟然还保留了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最大的不同在于Index对象的索引是不可变的，ind[1]=0会报错，这使得索引共享更安全</p></li><li><p>有序集合</p><p>Index遵循python标准库的集合（set）数据结构的许多惯用法 &amp; | ^ ~</p><p>indA &amp; indB 也有indA.intersection(indB)</p></li></ol><h2 id="数据取值与选择"><a href="#数据取值与选择" class="headerlink" title="数据取值与选择"></a>数据取值与选择</h2><p>类推Numpy的各种花式操作</p><h3 id="Series-1"><a href="#Series-1" class="headerlink" title="Series"></a>Series</h3><p>两个类比：<strong>一维Numpy数组和Python标准字典</strong>，很多操作是一样的。</p><p><strong>看作字典</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.25</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.75</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0.5</span>In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'a'</span> <span class="token keyword">in</span> dataOut<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">True</span>In <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#这个失败了</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>TypeError                                 Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span><span class="token builtin">input</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">4b7ba670122a</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> data<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> <span class="token string">'numpy.ndarray'</span> <span class="token builtin">object</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token builtin">callable</span>In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token builtin">zip</span> at <span class="token number">0x201ee3bbcc0</span><span class="token operator">></span>In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">0.75</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'e'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.25</span>In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span>a    <span class="token number">0.25</span>b    <span class="token number">0.50</span>c    <span class="token number">0.75</span>d    <span class="token number">1.00</span>e    <span class="token number">1.25</span>dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Series对象的可变性</strong>是一个非常方便的特性，pandas在底层已经为可能发生的<strong>内存布局和数据复制</strong>自动决策，用户不用担心。</p><p><strong>看作一维数组</strong></p><p>包括索引，掩码，花哨索引都有</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token string">'c'</span><span class="token punctuation">]</span> <span class="token comment">#显示索引包含最后一位</span>Out<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span>a    <span class="token number">0.25</span>b    <span class="token number">0.50</span>c    <span class="token number">0.75</span>dtype<span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">#隐式索引不包含最后一位</span>Out<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span>a    <span class="token number">0.25</span>b    <span class="token number">0.50</span>dtype<span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token punctuation">(</span>data<span class="token operator">></span><span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>data<span class="token operator">&lt;</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">#布尔索引yyds</span>Out<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span>b    <span class="token number">0.50</span>c    <span class="token number">0.75</span>dtype<span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#fancy index</span>Out<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span>a    <span class="token number">0.25</span>e    <span class="token number">1.25</span>dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="索引器"><a href="#索引器" class="headerlink" title="索引器"></a><strong>索引器</strong></h4><p>切片和取值的习惯用法经常混乱，如果Series选了<strong>显式整数索引</strong>，那么data[1]这样取值会使用显式索引，而data[1:3]这样的切片操作却会使用隐式索引！</p><p>所以Pandas准备了一些索引器（indexer）来作为取值的方法</p><p>它们不是Series对象的方法，而是暴露切片接口的<strong>属性</strong></p><p><strong>loc属性</strong></p><p>表示使用显式切片和取值，<strong>左闭右闭！！</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'a'</span>In <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">1</span>    a<span class="token number">3</span>    bdtype<span class="token punctuation">:</span> <span class="token builtin">object</span>    <span class="token comment">#不然的话默认是隐式的</span>In <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">3</span>    b<span class="token number">5</span>    cdtype<span class="token punctuation">:</span> <span class="token builtin">object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理，iloc 表示都是python形式的隐式索引，左闭右开</p><p>ix是前两者的混合，在Series对象中ix等价隐式，主要用于DataFrame。<strong>已经被弃用了哈哈哈</strong></p><p>Python的设计原则之一是“<strong>显式优于隐式</strong>”，loc和iloc让代码更容易维护。</p><h3 id="DataFrame-1"><a href="#DataFrame-1" class="headerlink" title="DataFrame"></a>DataFrame</h3><p>DataFrame有些方面像<strong>二维或结构化数组</strong>，有些方面又像一个<strong>共享索引的若干Series对象构成的字典</strong></p><p><strong>看作字典</strong></p><p>看作由若干Series对象组成的字典</p><p>比如 area 和 pop是索引一样的两个Series</p><p>data = pd.DataFrame({‘area’: area,’pop’: pop})来构建列索引为area和pop的数组</p><p>可以通过对列名进行字典形式取值，也可以用属性形式选择<strong>纯字符串列名</strong>的数据</p><p><code>data[&#39;area&#39;] is data.area True </code>都是选取同一个Series对象</p><p>但是如果<strong>列名不是纯字符串</strong>，或者<strong>列名与DataFrame的方法同名</strong>，那么就不能使用，比如pop方法</p><p>由此还要避免用data.pop = z 这种形式赋值，而要用 data[‘pop’] = z来赋值</p><p>和前面介绍的Series对象一样，还可以用字典形式的语法调整/增加对象，如果要增加一列可以这样：</p><p>data[‘c’] = data[‘a’]/data[‘b’] 顺便展示了两个Series对象算术运算的简便语法，(｡･∀･)ﾉﾞ嗨</p><hr><p><strong>看作二维数组</strong></p><p>可以看成是一个增强版的二维数组，用values属性按行查看数组数据(还记得Series是没有values属性的)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> xOut<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span>          one      twoDarren    <span class="token number">123</span>   <span class="token number">123313</span>Jack    <span class="token number">21212</span>  <span class="token number">2131132</span>In <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">.</span>TOut<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     Darren     Jackone     <span class="token number">123</span>    <span class="token number">21212</span>two  <span class="token number">123313</span>  <span class="token number">2131132</span>In <span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">.</span>valuesOut<span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>    <span class="token number">123</span><span class="token punctuation">,</span>  <span class="token number">123313</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">21212</span><span class="token punctuation">,</span> <span class="token number">2131132</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">.</span>itemsOut<span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>bound method DataFrame<span class="token punctuation">.</span>items of           one      twoDarren    <span class="token number">123</span>   <span class="token number">123313</span>Jack    <span class="token number">21212</span>  <span class="token number">2131132</span><span class="token operator">></span>In <span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">.</span>columnsOut<span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">.</span>indexOut<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Darren'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">.</span>keysOut<span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>bound method NDFrame<span class="token punctuation">.</span>keys of           one      twoDarren    <span class="token number">123</span>   <span class="token number">123313</span>Jack    <span class="token number">21212</span>  <span class="token number">2131132</span><span class="token operator">></span><span class="token comment">#因为索引被用在了列上，我们取行的能力收到了限制，x['one']可以取出一列</span>x<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Darren      <span class="token number">123</span>Jack      <span class="token number">21212</span>Name<span class="token punctuation">:</span> one<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int32<span class="token comment">#但是取行得用values属性</span>x<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1213313</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>data.values，理解了”二维数组“这一点，就能引出很多骚操作：比如data.T转置</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#可以用索引器来帮助进行索引</span><span class="token comment">#loc 和 iloc 处理起来就像处理二维数组一样，而且行列标签会自动保存在结果中</span><span class="token comment">#ix的规则是，既可以使用隐式也可以使用显式，但是在遇到整数索引时，规则和之前的Series一样混乱</span><span class="token comment">#其他用于索引的功能全都可以用于这些索引器</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">,</span><span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Darren'</span><span class="token punctuation">,</span><span class="token string">'Jack'</span><span class="token punctuation">,</span><span class="token string">'Jessica'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dataOut<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span>          one  two  three  fourDarren    <span class="token number">21</span>   <span class="token number">34</span>     <span class="token number">12</span>    <span class="token number">45</span>Jack      <span class="token number">37</span>   <span class="token number">23</span>     <span class="token number">76</span>    <span class="token number">23</span>Jessica   <span class="token number">56</span>   <span class="token number">98</span>     <span class="token number">34</span>    <span class="token number">87</span>data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       threeJack     <span class="token number">76</span>data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'Darren'</span><span class="token punctuation">:</span><span class="token string">'Jack'</span><span class="token punctuation">,</span><span class="token string">'one'</span><span class="token punctuation">:</span><span class="token string">'three'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span>         one  two  threeDarren   <span class="token number">21</span>   <span class="token number">34</span>     <span class="token number">12</span>Jack     <span class="token number">37</span>   <span class="token number">23</span>     <span class="token number">76</span><span class="token comment">#任何用于处理Numpy形式的方法都可用于这些索引器比如掩码和花哨</span><span class="token comment">#结合使用来筛选一部分，先筛选行，再筛选列噢</span>In <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>data<span class="token punctuation">.</span>one<span class="token operator">></span><span class="token number">22</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span>         two  fourJack      <span class="token number">23</span>    <span class="token number">23</span>Jessica   <span class="token number">98</span>    <span class="token number">87</span><span class="token comment">#记住一定要加loc索引器，不然报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其他的取值方法</strong></p><p>有点奇怪但是很好用。对单个标签取值就是选择列，对<strong>多个标签</strong>用切片就选择行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">#隐式切片</span>Out<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span>          one  two  three  fourJack      <span class="token number">37</span>   <span class="token number">23</span>     <span class="token number">76</span>    <span class="token number">23</span>Jessica   <span class="token number">56</span>   <span class="token number">98</span>     <span class="token number">34</span>    <span class="token number">87</span>data<span class="token punctuation">[</span><span class="token string">'Darren'</span><span class="token punctuation">:</span><span class="token string">'Jessica'</span><span class="token punctuation">]</span> <span class="token comment">#显式切片</span>Out<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span>          one  two  three  fourDarren    <span class="token number">21</span>   <span class="token number">34</span>     <span class="token number">12</span>    <span class="token number">45</span>Jack      <span class="token number">37</span>   <span class="token number">23</span>     <span class="token number">76</span>    <span class="token number">23</span>Jessica   <span class="token number">56</span>   <span class="token number">98</span>     <span class="token number">34</span>    <span class="token number">87</span>data<span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Darren     <span class="token number">34</span>Jack       <span class="token number">23</span>Jessica    <span class="token number">98</span>Name<span class="token punctuation">:</span> two<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int32<span class="token comment">#掩码操作起到筛选某些行的作用</span>data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>three<span class="token operator">></span><span class="token number">20</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span>          one  two  three  fourJack      <span class="token number">37</span>   <span class="token number">23</span>     <span class="token number">76</span>    <span class="token number">23</span>Jessica   <span class="token number">56</span>   <span class="token number">98</span>     <span class="token number">34</span>    <span class="token number">87</span><span class="token comment"># 这两种操作方法其实和Numpy数组的语法类似，虽然它们与Pandas的操作习惯不太一致，但是非常好用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h2><p>Pandas继承了Numpy的功能，可以对元素进行快速运算</p><p>但是Pandas实现了一些高效的技巧：</p><ol><li>对于一元计算，通用函数在输出结果中<u>保留索引和列标签。</u></li><li>对于二元计算，Pandas在传递通用函数时会<strong>自动对齐索引</strong>进行计算</li></ol><p><strong>这意味着：保存数据内容  组合不同来源的数据  这两处在Numpy里容易出错的地方，成了Pandas杀手锏</strong></p><p>ps：补充一下伪随机数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span>这个设置的是全局随机数种子rng <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token comment">#设置单独的随机数种子</span>arr <span class="token operator">=</span> rng<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">#这样生成的就是独立的</span>seedpermutation<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment"># 返回一个序列的随机排列</span>shuffle <span class="token comment"># 随机排列一个序列,直接更改原来的</span>rand <span class="token comment">#从均匀分布[0,1)中抽取样本</span>randint <span class="token comment">#根据给定的从低到高的范围抽取随机一个整数</span>randn <span class="token comment">#从均值0方差1的正态分布</span>normal<span class="token punctuation">(</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#平均值，标准差，shape</span>binomial <span class="token comment">#从二项分布中抽取样本</span>beta <span class="token comment">#从beta分布中抽取样本</span>chisquare <span class="token comment">#从卡方分布中抽取样本</span>uniform<span class="token punctuation">(</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#从均匀分布中抽取样本</span>gamma <span class="token comment">#从伽马分布中抽取样本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="索引对齐"><a href="#索引对齐" class="headerlink" title="索引对齐"></a>索引对齐</h3><p><strong>当在两个Series或DataFrame对象上进行二元计算时，Pandas会在计算过程中对齐两个对象的索引，在处理不完整的数据时，这一点非常方便</strong></p><p>结果数组的索引是两个输入数组索引的<strong>并集</strong>，缺失位置填充NaN，这是通过python内置集合运算规则实现的</p><p>我们也可以通过a.index | b.index 来获得这个新索引</p><p>两个对象的行列顺序可以是不一样的，结果的索引会自动排序</p><p>当然也能自行设置缺失值，A.add(B,fill_value = 0) 这样会相加A和B并用0来填充</p><p>对于DataFrame其实大同小异：(下面有一些骚操作)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span> rng <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">:</span> A <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>rng<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'AB'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">:</span> B <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>rng<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'BAC'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span> AOut<span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    A   B<span class="token number">0</span>   <span class="token number">6</span>  <span class="token number">19</span><span class="token number">1</span>  <span class="token number">14</span>  <span class="token number">10</span>In <span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> BOut<span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span>   B  A  C<span class="token number">0</span>  <span class="token number">7</span>  <span class="token number">4</span>  <span class="token number">6</span><span class="token number">1</span>  <span class="token number">9</span>  <span class="token number">2</span>  <span class="token number">6</span><span class="token number">2</span>  <span class="token number">7</span>  <span class="token number">4</span>  <span class="token number">3</span>In <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span> A<span class="token operator">+</span>BOut<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      A     B   C<span class="token number">0</span>  <span class="token number">10.0</span>  <span class="token number">26.0</span> NaN<span class="token number">1</span>  <span class="token number">16.0</span>  <span class="token number">19.0</span> NaN<span class="token number">2</span>   NaN   NaN NaN<span class="token comment">#如果想要设置fill_value得用A.add(B,fill_value = x)</span>python运算符   映射  Pandas方法<span class="token operator">+</span>     add<span class="token operator">-</span>     sub<span class="token operator">*</span>     mul<span class="token operator">/</span>     div<span class="token operator">//</span>    floordiv<span class="token operator">%</span>     mod<span class="token operator">**</span>    <span class="token builtin">pow</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>DataFrame和Series的混合运算</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dfOut<span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span>   Q  R  S  T<span class="token number">0</span>  <span class="token number">7</span>  <span class="token number">7</span>  <span class="token number">2</span>  <span class="token number">5</span><span class="token number">1</span>  <span class="token number">4</span>  <span class="token number">1</span>  <span class="token number">7</span>  <span class="token number">5</span><span class="token number">2</span>  <span class="token number">1</span>  <span class="token number">4</span>  <span class="token number">0</span>  <span class="token number">9</span><span class="token comment">#在Pandas里默认按行运算</span>In <span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df <span class="token operator">-</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span>   Q  R  S  T<span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">-</span><span class="token number">6</span>  <span class="token number">5</span>  <span class="token number">0</span><span class="token number">2</span> <span class="token operator">-</span><span class="token number">6</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">-</span><span class="token number">2</span>  <span class="token number">4</span><span class="token comment">#按列计算就得调一下轴</span>In <span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'R'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span>   Q  R  S  T<span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token operator">-</span><span class="token number">2</span><span class="token number">1</span>  <span class="token number">3</span>  <span class="token number">0</span>  <span class="token number">6</span>  <span class="token number">4</span><span class="token number">2</span> <span class="token operator">-</span><span class="token number">3</span>  <span class="token number">0</span> <span class="token operator">-</span><span class="token number">4</span>  <span class="token number">5</span><span class="token comment">#否则结果会很坑爹</span>In <span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df <span class="token operator">-</span> df<span class="token punctuation">[</span><span class="token string">'R'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    Q   R   S   T   <span class="token number">0</span>   <span class="token number">1</span>   <span class="token number">2</span><span class="token number">0</span> NaN NaN NaN NaN NaN NaN NaN<span class="token number">1</span> NaN NaN NaN NaN NaN NaN NaN<span class="token number">2</span> NaN NaN NaN NaN NaN NaN NaN<span class="token comment">#值得注意的是在二元运算中缺失的直接判定为NaN而不是不进行操作</span><span class="token comment">#还是得注意“按行操作”的含义啊，name必须是index中的一个，Series的index必须是columns的子集</span>In <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">:</span> halfrowOut<span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">:</span>Q    <span class="token number">7</span>S    <span class="token number">2</span>Name<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int32In <span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df <span class="token operator">-</span> halfrowOut<span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     Q   R    S   T<span class="token number">0</span>  <span class="token number">0.0</span> NaN  <span class="token number">0.0</span> NaN<span class="token number">1</span> <span class="token operator">-</span><span class="token number">3.0</span> NaN  <span class="token number">5.0</span> NaN<span class="token number">2</span> <span class="token operator">-</span><span class="token number">6.0</span> NaN <span class="token operator">-</span><span class="token number">2.0</span> NaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理缺失值"><a href="#处理缺失值" class="headerlink" title="处理缺失值"></a>处理缺失值</h2><h3 id="缺失值"><a href="#缺失值" class="headerlink" title="缺失值"></a>缺失值</h3><p>缺失值的问题十分普遍，处理不同数据源缺失值的方法不同</p><p>本节介绍一些处理缺失值的通用规则，Pandas对缺失值的表现形式，并演示Pandas自带的几个处理缺失值的工具</p><p>本书涉及的缺失值主要有三种形式：<strong>null 、NaN、 NA</strong></p><p>不愧是作者，列举了他在创建pandas时对于这个问题的看法，最终他选择了<strong>用标签方法表示缺失值</strong></p><p>这包括两种python原有的缺失值：浮点数据的NaN值，还有None对象</p><p>当然，Numpy支持掩码数据，Pandas也集成了这个功能，但由于存储、维护的资源浪费，并不可取</p><hr><p>P106</p><p><strong>None</strong></p><p>这是一个Python单体对象，不能作为任何Numpy/Pandas数组类型的缺失值，只能用于’object’数组类型</p><p>即由python对象构成的数组，dtype = object 就是这个意思。</p><p>这样的类型对数据的任何操作最终都会在python层面完成，进行常见快速操作时会消耗更多资源。</p><p>同时，python没有定义整数与None之间的加减运算，Sum和min（）这些都会出错。</p><p><strong>NaN</strong></p><p>这是一种按照IEEE浮点数标准设计，在任何系统中都兼容的<strong>特殊浮点数</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span> vals1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> vals1Out<span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">object</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> vals2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> vals2<span class="token punctuation">.</span>dtypeOut<span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dtype<span class="token punctuation">(</span><span class="token string">'float64'</span><span class="token punctuation">)</span><span class="token comment">#Numpy会自动为这个数组选择一个原生浮点类型，这意味着与object不同，该数组会被编译成C代码从而实现快速操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而且NaN无论进行何种操作，结果都是NaN，跟病毒一样。</p><p>但还记得Numpy提供了一些特殊的累计函数来规避NaN，np.nansum(vals2) == 8</p><p><strong>NA</strong></p><p>Pandas把NaN和None看作是可以等价交换的</p><p>Pandas会将没有标签的数据类型自动转换为NA，规则见P109</p><table><thead><tr><th>类型</th><th>存在缺失值时转换</th><th>NA标签值</th></tr></thead><tbody><tr><td>float</td><td>无变化</td><td>np.nan</td></tr><tr><td>object</td><td>无变化</td><td>np.nan或None</td></tr><tr><td>integer</td><td>强制转换为float64</td><td>np.nan</td></tr><tr><td>boolean</td><td>强制转换为object</td><td>np.nan或None</td></tr></tbody></table><p>*Pandas中字符串类型的数据通常是用object类型存储的</p><h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><p><strong>发现缺失值</strong></p><p>isnull 和notnull 会返回布尔类型的掩码数组，以此可以直接用作索引</p><p><strong>剔除缺失值</strong></p><p>dropna </p><p>这两个操作在Series里没有什么问题</p><p>但在DataFrame中就需要注意，并没有办法单独剔除一个值，只能剔除缺失值所在整行或整列</p><p>dropna默认剔除整行，如果加参数df.fropna(axis = 1)或者axis = ‘columns’那就是整列</p><p>可以用how或参数设置阈值，默认是how =’any’，可以是all(必须整行、列都是缺失值才剔除)</p><p>thresh参数可以设置非缺失值的最小数量，thresh = 3则非缺失值&lt;3的行、列被剔除。</p><p><strong>填充缺失值</strong></p><p>fillna返回填充了缺失值后的数组副本</p><p>参数可以选择method = ‘ffill/bfill’ 用缺失值前/后的有效值来依次填充，也可以改axis来左右填充。</p><p>但是如果前面一直找不到有效值填充，那就还是缺失值。。。</p><h2 id="层级索引"><a href="#层级索引" class="headerlink" title="层级索引"></a>层级索引</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言和环境&quot;&gt;&lt;a href=&quot;#前言和环境&quot; class=&quot;headerlink&quot; title=&quot;前言和环境&quot;&gt;&lt;/a&gt;前言和环境&lt;/h1&gt;&lt;p&gt;跨学科是数据科学的关键&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Darr</summary>
      
    
    
    
    <category term="data" scheme="https://darren-dong.com/categories/data/"/>
    
    
    <category term="data-sience" scheme="https://darren-dong.com/tags/data-sience/"/>
    
  </entry>
  
  <entry>
    <title>复变函数和积分应用</title>
    <link href="https://darren-dong.com/2021/05/12/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0/"/>
    <id>https://darren-dong.com/2021/05/12/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0/</id>
    <published>2021-05-12T04:38:47.000Z</published>
    <updated>2021-06-15T12:26:09.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言和资源"><a href="#前言和资源" class="headerlink" title="前言和资源"></a>前言和资源</h1><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514130415.png" alt="image-20210514130415193" style="zoom: 67%;" /><p>推荐一个宝藏up主  “乐乐老师的网络课堂”，是个狼灭</p><p>华中科技大学的慕课</p><h1 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h1><h2 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514130633.png" alt="image-20210514130632874" style="zoom: 33%;" /><p><strong>实数域是复数域的一个真子集，实数是有序数，复数不是，因此复数不可比较</strong></p><p>*四则运算</p><p>z*z共轭 = z模长的平方</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514131813.png" alt="image-20210514131813188" style="zoom:33%;" /><h3 id="极坐标形式"><a href="#极坐标形式" class="headerlink" title="极坐标形式"></a>极坐标形式</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514131923.png" alt="image-20210514131922841" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514132008.png" alt="image-20210514132008357" style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514132027.png" alt="image-20210514132027596" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514132647.png" alt="image-20210514132647070" style="zoom:33%;" /><p><strong>结合arctany/x的图会比较好理解，起到一个调整范围的作用。</strong></p><p>两个复数相等≠模和辐角分别相等，前不能推后，后可以推前，可能差了2npi，<strong>模和辐角主值相等则复数相等</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514143939.png" alt="image-20210514143938809" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514144025.png" alt="image-20210514144025303" style="zoom:33%;" /><h3 id="乘幂与方根"><a href="#乘幂与方根" class="headerlink" title="乘幂与方根"></a>乘幂与方根</h3><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514144329.png" alt="image-20210514144328951"></p><p>由乘法直接看出</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514144805.png" alt="image-20210514144804825" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514144826.png" alt="image-20210514144826328" style="zoom: 50%;" /><p>方根</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514145219.png" alt="image-20210514145219363" style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514145319.png" alt="image-20210514145319534" style="zoom:33%;" /><p><strong>单位根：</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514145634.png" alt="image-20210514145634348" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514130456.png" alt="image-20210514130455936" style="zoom: 25%;" /><p>给一个例子：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514145958.png" alt="image-20210514145957933" style="zoom: 33%;" /><h3 id="复数域扩充"><a href="#复数域扩充" class="headerlink" title="复数域扩充"></a>复数域扩充</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514150150.png" alt="image-20210514150150279" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514150310.png" alt="image-20210514150310049" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514150548.png" alt="image-20210514150548090" style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514150705.png" alt="image-20210514150705367" style="zoom:33%;" /><p>复球面</p><p>由古老的测地投影法（绘制世界地图），衍生出复球面</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514150941.png" alt="image-20210514150941335" style="zoom: 33%;" /><p>这样全体复数都可以被球面的点表示，N点表示无穷远点，这称为黎曼球面</p><h3 id="平面点集补充"><a href="#平面点集补充" class="headerlink" title="平面点集补充"></a>平面点集补充</h3><p>复变函数的基础，邻域，去心邻域</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514151404.png" alt="image-20210514151404504" style="zoom: 33%;" /><p>内点，开集，闭集，边界点以及边界，孤立点（孤立一定是边界），有界集，无界集，连通集</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514151735.png" alt="image-20210514151735288" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514152143.png" alt="image-20210514152143345" style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言和资源&quot;&gt;&lt;a href=&quot;#前言和资源&quot; class=&quot;headerlink&quot; title=&quot;前言和资源&quot;&gt;&lt;/a&gt;前言和资源&lt;/h1&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren</summary>
      
    
    
    
    <category term="math" scheme="https://darren-dong.com/categories/math/"/>
    
    
    <category term="复变" scheme="https://darren-dong.com/tags/%E5%A4%8D%E5%8F%98/"/>
    
  </entry>
  
  <entry>
    <title>利用python进行数据分析</title>
    <link href="https://darren-dong.com/2021/05/01/%E5%88%A9%E7%94%A8python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <id>https://darren-dong.com/2021/05/01/%E5%88%A9%E7%94%A8python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</id>
    <published>2021-05-01T14:02:08.000Z</published>
    <updated>2021-06-15T12:39:11.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h3 id="ipython"><a href="#ipython" class="headerlink" title="ipython"></a>ipython</h3><p>Ctrl-D退出</p><p>tab自动补全神器</p><p>但是ipython默认隐藏了下划线开始的方法和属性，比如魔术方法，“私有”方法和属性，要先输入下划线才看得到</p><p>内省：变量名前后使用 ? 显示关于对象的概要信息（包括docstring）</p><p>??来显示函数的源代码</p><p>？的终极用途：搜索命名空间，比如np.*load*?</p><p>% file.py 运行文件中的代码，如果需要参数就加参数<strong>如果想让待运行的脚本使用ipython空间中有的变量，用%run -i filename.py</strong></p><p>%paste 和 %cpaste (–终止)黏贴代码</p><p>一些终端指令：ctrl-L清屏  C+U删除当前行  ….</p><h4 id="魔术命令"><a href="#魔术命令" class="headerlink" title="魔术命令"></a>魔术命令</h4><p>没有内建到python中去，调用示例:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">%</span>timeit np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>大部分魔术指令可以用?看到额外的选项</p><p>魔术函数在不冲突时可以不加百分号调用，%automagic 可以启用、禁用</p><p>一些魔术函数像python函数一样，输出可以赋给一个变量</p><p>a = %pwd</p><pre class="line-numbers language-pytho" data-language="pytho"><code class="language-pytho">%quickref  快速参考卡%magic 探索所有魔术命令%debug从最后发生报错的底部进入交互式调试器  %pdb出现任意报错自动进入调试器%hist%paste   %cpaste%reset 清空所有变量&#x2F;名称  %xdel variable 删除变量和相关引用%page OBJECT  通过分页器更美观的打印一个对象%run   %prun statement  使用CProfile执行语句，报告输出%time 报告单个语句执行时间   %timeit 多次运行单语句，计算平均执行时间，用于估算代码最短执行时间%who  %who_ls  %whos  依次更加详细的展示变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://developer.51cto.com/art/202007/620863.htm">这个厉害</a></p><h3 id="jupyter"><a href="#jupyter" class="headerlink" title="jupyter"></a>jupyter</h3><p>核心组件是 notebook 交互式的文档类型</p><p>python的jupyter内核使用ipython系统进行内部活动</p><p>集成matplotlib:</p><ul><li>在ipython命令行中 %matplotlib</li><li>在jupyter中 %matplotlib inline</li></ul><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><p>一切皆为对象，对象模型的一致性！！！</p><p>几乎所有的python对象都有内部函数，称为方法</p><p>python虽然没有显示声明类型，但却是<strong>强类型语言</strong>，比如’5’+5会报错，而不是像很多语言一样发生隐式转换</p><p>只有在特定，明显的情况下才会发生隐式转换比如float + int</p><p>tips: isinstance(a,(int,float))检查对象类型是否在右边的元组中</p><p>python。。。鸭子类型，不管具体类型，只要它拥有某个特殊的方法，就一定有某种属性</p><p>iter(x)检查可否迭代</p><p>if not isinstance(x,list) and isiterable(x):</p><p>​    x = list(x) 不是列表就转换为列表</p><p>None 是NoneType类型的唯一实例，如果函数没有显式返回值，那就返回None</p><p><strong>三元表达式</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">5</span><span class="token string">'a'</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">5</span> <span class="token keyword">else</span> <span class="token string">'b'</span><span class="token string">'a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span>date<span class="token punctuation">,</span>timedt <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token string">'2021,5,1,21,8,30'</span><span class="token punctuation">)</span>dt<span class="token punctuation">.</span>year<span class="token punctuation">,</span>month<span class="token punctuation">,</span>day<span class="token punctuation">,</span>hour<span class="token punctuation">,</span>minute<span class="token punctuation">,</span>seconddt<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token punctuation">)</span>输出前三个dt<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>输出后三个dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%x%x%x'</span><span class="token punctuation">)</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">'202151'</span><span class="token punctuation">,</span><span class="token string">"%Y%m%d"</span><span class="token punctuation">)</span><span class="token comment">#转换为datetime对象</span>datetime相减会产生datetime<span class="token punctuation">.</span>delta对象delta <span class="token operator">=</span> datetime2 <span class="token operator">-</span> datetime1delta <span class="token operator">==</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">7179</span><span class="token punctuation">)</span> <span class="token comment">#间隔99天,7179秒</span>timedelta和datetime可以做加减得到新的datetime<span class="token operator">%</span>y     两位数的年份表示（<span class="token number">00</span><span class="token operator">-</span><span class="token number">99</span>）<span class="token operator">*</span><span class="token operator">%</span>Y     四位数的年份表示（<span class="token number">000</span><span class="token operator">-</span><span class="token number">9999</span>）<span class="token operator">*</span><span class="token operator">%</span>m     月份（<span class="token number">01</span><span class="token operator">-</span><span class="token number">12</span>）<span class="token operator">*</span><span class="token operator">%</span>d     月内中的一天（<span class="token number">0</span><span class="token operator">-</span><span class="token number">31</span>）<span class="token operator">*</span><span class="token operator">%</span>H     <span class="token number">24</span>小时制小时数（<span class="token number">0</span><span class="token operator">-</span><span class="token number">23</span>）<span class="token operator">*</span><span class="token operator">%</span>I     <span class="token number">12</span>小时制小时数（<span class="token number">01</span><span class="token operator">-</span><span class="token number">12</span>）<span class="token operator">*</span><span class="token operator">%</span>M     分钟数（<span class="token number">00</span><span class="token operator">=</span><span class="token number">59</span>）<span class="token operator">*</span><span class="token operator">%</span>S     秒（<span class="token number">00</span><span class="token operator">-</span><span class="token number">59</span>）<span class="token operator">*</span><span class="token operator">%</span>a     本地简化星期名称<span class="token operator">*</span><span class="token operator">%</span>A     本地完整星期名称<span class="token operator">%</span>b     本地简化的月份名称<span class="token operator">%</span>B     本地完整的月份名称<span class="token operator">%</span>c     本地相应的日期表示和时间表示<span class="token operator">%</span>j     年内的一天（<span class="token number">001</span><span class="token operator">-</span><span class="token number">366</span>）<span class="token operator">%</span>p     本地A<span class="token punctuation">.</span>M<span class="token punctuation">.</span>或P<span class="token punctuation">.</span>M<span class="token punctuation">.</span>的等价符<span class="token operator">%</span>U     一年中的星期数（<span class="token number">00</span><span class="token operator">-</span><span class="token number">53</span>）星期天为星期的开始<span class="token operator">%</span>w     星期（<span class="token number">0</span><span class="token operator">-</span><span class="token number">6</span>），星期天为星期的开始<span class="token operator">%</span>W     一年中的星期数（<span class="token number">00</span><span class="token operator">-</span><span class="token number">53</span>）星期一为星期的开始<span class="token operator">%</span>x     本地相应的日期表示<span class="token operator">%</span>X     本地相应的时间表示<span class="token operator">%</span>Z     当前时区的名称<span class="token operator">%</span><span class="token operator">%</span>     <span class="token operator">%</span>号本身<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p><strong>tuple</strong></p><p>可以用tuple函数将任意序列或迭代器转换为元组，比如tuple(‘ab’)-&gt;(‘a’,’b’)</p><p>同样可以使用 + 来连接，可以使用 * 来组成大元组</p><p>嵌套元组拆包(为啥python不用临时变量的原因)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tup <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span> <span class="token operator">=</span> tup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>collections有很多封装好的数据结构，比如collections.deque</strong></p><p>他们适合不同的场景，拥有特定的操作和某些特性下的加速，比如deque是双端数列，头尾插入快</p><p>list的remove很方便，但是内存占用比较高，还有insert代价比append更高</p><p>与字典，集合相比，对列表使用in时非常缓慢</p><p>list.extent(元素)比起创建新列表再使用+来连接节省很多内存</p><p>bisect模块可用于排序好的序列(实现了二分搜索，已排序列表的插值)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> bisectc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>bisect<span class="token punctuation">.</span>bisect<span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">#5要插在哪</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">6</span>bisect<span class="token punctuation">.</span>insort<span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>序列函数enumerate,zip,sorted,reversed</p><p>zip取决于最短的那一项，enumerate,zip,reversed都返回生成器</p><p>字典的keys values items 返回的是迭代器！</p><p>a.update({xxxxxx})可以合并字典，如果冲突，则原来的被覆盖</p><p>由于字典本质是2-元组（含有两个元素的元组）的集合，字典可以接受一个2-元组为参数</p><p><code>dictionary = dict(zip(range(5),reversed(range(5))))</code></p><p>value = dict.get(key,default_value)，不加默认值就返回None，pop也可以，不过默认抛出异常</p><p>dict.setdefault(key, default=None)查找key，如果不存在就设置为default，可以用[]</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">by_letter <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>    letter <span class="token operator">=</span> word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    by_letter<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>letter<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span>    <span class="token comment">#设置首字母序列</span><span class="token comment">#也可以直接from collections import defaultdict</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.jianshu.com/p/bbd258f99fd3">defaultdict</a></p><p>字典的键必须是不可变，它们将被哈希化，用hash(x)检查能否哈希化</p><p>为了将列表作为键，可以转换为元组，元组只要内部元素可以哈希化，它自身就可以哈希化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>d<span class="token punctuation">[</span><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>d<span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span> <span class="token comment">#...真的有必要把元组作为键吗</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#集合操作</span>a<span class="token punctuation">.</span>add<span class="token punctuation">(</span>x<span class="token punctuation">)</span>a<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#清空</span>a<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>x<span class="token punctuation">)</span>a<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#移除任意元素，空的则抛出keyerror</span>a<span class="token operator">|</span>ba<span class="token operator">&amp;</span>ba<span class="token operator">-</span>ba<span class="token operator">^</span>b<span class="token comment">#这几个都可以 a x= b</span>a<span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>b<span class="token punctuation">)</span> a包含于b则返回turea<span class="token punctuation">.</span>issuperset<span class="token punctuation">(</span>b<span class="token punctuation">)</span> 如果a包含b返回truea<span class="token punctuation">.</span>isdisjoint<span class="token punctuation">(</span>b<span class="token punctuation">)</span> ab没有交集返回truea<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>用于赋值，免得指向同一个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字典，集合都有推导式！推导式和map功能有些重复</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#字典示范</span>dictionary <span class="token operator">=</span> <span class="token punctuation">&#123;</span>val<span class="token punctuation">:</span>index <span class="token keyword">for</span> index<span class="token punctuation">,</span>val <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>嵌套列表推导式的for顺序排列,要区别于列表推导式中的列表推导式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">some_tuples <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>flattend <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> <span class="token builtin">tuple</span> <span class="token keyword">in</span> some_tuples <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">tuple</span><span class="token punctuation">]</span>flattend <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">tuple</span><span class="token punctuation">]</span> <span class="token keyword">for</span> tup <span class="token keyword">in</span> some_tuples<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>global</p><p>返回多个值是以元组形式，甚至可以返回一个字典，啥都行</p><p>将函数作为参数传递，这种更函数化的编程有更强的复用性和通用性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">complex</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>ops<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> op <span class="token keyword">in</span> ops<span class="token punctuation">:</span>        op<span class="token punctuation">(</span>a<span class="token punctuation">)</span>operation <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">]</span><span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token string">'wocao'</span><span class="token punctuation">,</span>operation<span class="token punctuation">)</span>妙啊！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>lambda本身没有显式的__name__属性</p><p><strong>柯里化</strong></p><p>通过部分参数应用的方式从已有的函数里衍生出新的函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> partialadd five <span class="token operator">=</span> partial<span class="token punctuation">(</span>add_numbers<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成器表达式可以作为函数参数用于替代列表推导式</p><p><code>sum(x ** 2 for x in range(100))</code></p><p><strong>itertools</strong></p><p>适用于大多数数据算法的生成器集合</p><p>可以查一下手册，需要的时候</p><p>except(xx,xx)来结合多个异常</p><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">read<span class="token punctuation">(</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">)</span>seek<span class="token punctuation">(</span>pos<span class="token punctuation">)</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#随机三件套</span>readlines<span class="token punctuation">(</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>writelines<span class="token punctuation">(</span>strings<span class="token punctuation">)</span>closeflush <span class="token comment">#将内部I/O缓冲区内容刷新到硬盘</span>closed在文本模式下，f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">#读取了10个字符所需要的字节并解码</span>而在二进制模式下<span class="token punctuation">,</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">#读取了10个字节，并未解码，显示b'xxxx'</span>解码如果不完整，则会报错文本模式配合<span class="token builtin">open</span>的encoding参数读取不同编码类型<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">'xt'</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><p>数组和向量化计算</p><ul><li>高校多维数组，提供数组算术操作和灵活的广播(不同尺寸数组)</li><li>线性代数，随机数，傅里叶变换</li><li>提供非常易用的C API，使得调用<strong>底层语言</strong>变得极其简单</li><li>诸多外部库都基于Numpy，这是数值计算最重要的python库</li></ul><p>Numpy的方法比python方法快10-100倍，并且使用的内存也更少</p><p><strong>核心特征ndarry 快速，灵活的大型数据集容器，允许使用类似标量的操作语法在整块数据上进行数学计算</strong></p><p><strong>生成</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span>列表，元组，数组<span class="token punctuation">)</span>asarray<span class="token punctuation">(</span><span class="token punctuation">)</span>将输入转换为ndarray？？arrangeones<span class="token operator">/</span>zeros<span class="token operator">/</span>empty<span class="token operator">/</span>full<span class="token operator">+</span><span class="token operator">/</span>_likeeye<span class="token operator">/</span>identity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>dtype</strong></p><p>能和吉他系统数据灵活交互的原因</p><p>dtype和astype（new type）方法</p><p>转换时小数-&gt;整数截断，string转换为合适的，</p><p><strong>但在用numpy.string_作数据时，numpy会修正大小或删除输入而不发出警告</strong></p><p><strong>数组算术</strong></p><p>所谓向量化运算，逐元素操作。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>ndarray可以用”切片”赋值<code>b[1:4] = 5</code>把b的2-4号元素都赋值5</p><p><strong>ndarray的切片事原数组的视图，而不是复制！！！不然得多慢</strong>，要想复制得：arr[5:8].copy()</p><p>高维索引：可以arr2d[2][1]   也可以arr2d[2,1]</p><p>切片配合索引可以很好的进行切片，全选用单独 :</p><p><strong>布尔索引</strong></p><p>names是一个字符串ndarray</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">names <span class="token operator">==</span> <span class="token string">'Bob'</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token comment">#输出一个布尔值数组</span>可以将布尔数组当作数组的索引，但是其长度必须和数组轴索引长度一致，不一致时不会报错，要小心date <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>date<span class="token punctuation">[</span>date<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">#好厉害的功能</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>布尔索引也能配合切片使用</p><p>布尔索引总是生成数据的拷贝</p><p><code>~()表示对某个通用条件取反</code></p><p><strong>神奇索引</strong></p><p>真的很神奇。。使用整数数组进行数据索引（Numpy专用）</p><p>相当于是一维一维的选择数据，也可以把每个数组的对应位置组合起来看成索引</p><p>神奇索引的结果总是一维的，他也总是复制数据到新的数组中</p><p>假设arr是二维数组</p><p>arr[:,[2,1,0]] 相当于是把前三列倒过来再复制出来，很奇怪的用法</p><p>换轴：arr3d.transpose((1,0,2)) 换了轴的次序，有点抽象</p><p>arr.swapaxes(1,2)交换俩轴，返回视图而不是复制</p><h2 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h2><p>快速的逐元素数组函数</p><p><strong>一元</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">abs</span><span class="token operator">/</span>fabs  sqrtsquareexplog log10 log2 log1p<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#返回ln(1+x)</span>sign <span class="token comment">#返回符号值，正数1，0为0，负数-1</span>ceil floorrint <span class="token comment">#保留整数，保持dtype</span>modf <span class="token comment">#分别返回小数部分和整数部分</span>isnan <span class="token comment">#返回布尔数组</span>isfinite <span class="token comment">#既非inf又非NaN </span>isinfcos<span class="token punctuation">,</span>cosh<span class="token punctuation">,</span>sin<span class="token punctuation">,</span>sinh<span class="token punctuation">,</span>tan<span class="token punctuation">,</span>tanharc<span class="token operator">*</span><span class="token number">6</span>logical_not<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#按位取反</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>二元</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add subtract multiply divide<span class="token operator">/</span>floor_dividepower<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token comment">#每项依次xi ** yi</span>maximum<span class="token operator">/</span>minimum<span class="token operator">/</span>fmax<span class="token operator">/</span>fmin <span class="token comment">#后两个忽略NaN</span>mod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#模</span>copysign <span class="token comment">#将第一个数组的符号值改为第二个数组的符号值</span>greater<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>不如直接用操作符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数学和统计"><a href="#数学和统计" class="headerlink" title="数学和统计"></a>数学和统计</h2><p>用数组表达式完成多种数据操作任务，代替显式循环，称为向量化，速度会快很多</p><p>np.where(布尔数组，标量/向量，标量/向量)是向量界的三元表达式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">sum</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token punctuation">)</span>meanstd<span class="token punctuation">,</span>var 标准差<span class="token operator">/</span>方差 ，可以选择自由度调整<span class="token builtin">min</span> <span class="token builtin">max</span>argmin argmax 最小值和最大值的位置<span class="token comment">#axis可以省略，直接写维度</span>cumsum cumprod 累和 和 累积 有中间结果<span class="token comment">#</span>sort<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>布尔数组妙用</strong></p><p>arr = np.random.randn(100)</p><p>(arr&gt;0).sum()正值的个数</p><p>还有bools.any()检查是否至少一个true</p><p>bools.all()检查是否每个值都是True，里面可能放轴</p><p><strong>唯一值与其他集合逻辑</strong></p><p>有一些针对一维ndarray的基础集合操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">unique<span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token comment">#对唯一值排序</span>intersect1d<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>交集union1d<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>并集in1d<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>x项是否在y中，返回布尔数组setdiff1d<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>返回x<span class="token operator">-</span>ysetxor1d<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>返回x<span class="token operator">^</span>y 不共有的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>文件</strong></p><p>numpy可以将数据以文本/二进制文件形式存入硬盘或载入，pandas或其他来载入文本/表格更被人们推崇</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#默认后缀是.npy</span>arr <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'Iamfile'</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span>np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'Iamfile.npy'</span><span class="token punctuation">)</span><span class="token comment">#多个就是</span>np<span class="token punctuation">.</span>savez<span class="token punctuation">(</span><span class="token string">'Iammanyfile'</span><span class="token punctuation">,</span>a <span class="token operator">=</span> arr<span class="token punctuation">,</span> b <span class="token operator">=</span> arr<span class="token punctuation">)</span><span class="token comment">#load以后变成一个字典对象</span>arch <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'Iammanyfile.npy'</span><span class="token punctuation">)</span>arch<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">==</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#如果数据已经压缩好了，仍能存入压缩的文件</span>np<span class="token punctuation">.</span>savez_compressed<span class="token punctuation">(</span><span class="token string">'small.npz'</span><span class="token punctuation">,</span>a <span class="token operator">=</span> arr<span class="token punctuation">,</span> b <span class="token operator">=</span> arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>点乘</strong></p><p>a.dot(b)</p><p>np.dot(a,b)</p><p>a @ b</p><h3 id="linalg"><a href="#linalg" class="headerlink" title="linalg"></a>linalg</h3><p>顾名思义，numpy.linalg 拥有一个矩阵分解的标准函数集，以及其他常用函数比如求逆/行列式</p><p>这都是通过在MATLAB和R等其他语言使用的行业标准线性代数库实现的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> numpy<span class="token punctuation">.</span>linalg <span class="token keyword">import</span> inv<span class="token punctuation">,</span>qrdiag<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#返回方针的对角元一维数组，一维数组就准换为对角矩阵</span>dottrace <span class="token comment">#考考你“迹”</span>det eig <span class="token comment">#方阵特征值和特征向量</span>inv 逆矩阵pinv Moore<span class="token operator">-</span>Penrose伪逆qr QR分解svd 奇异值分解solve 求解x的线性系统Ax <span class="token operator">=</span> b，其中A是方阵lstsq 计算Ax <span class="token operator">=</span> b的最小二乘解<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="伪随机数生成"><a href="#伪随机数生成" class="headerlink" title="伪随机数生成"></a>伪随机数生成</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span>这个设置的是全局随机数种子rng <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>arr <span class="token operator">=</span> rng<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">#这样生成的就是独立的</span>seedpermutation<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment"># 返回一个序列的随机排列</span>shuffle <span class="token comment"># 随机排列一个序列,直接更改原来的</span>rand <span class="token comment">#从均匀分布[0,1)中抽取样本</span>randint <span class="token comment">#根据给定的从低到高的范围抽取随机一个整数</span>randn <span class="token comment">#从均值0方差1的正态分布</span>normal<span class="token punctuation">(</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#平均值，标准差，shape</span>binomial <span class="token comment">#从二项分布中抽取样本</span>beta <span class="token comment">#从beta分布中抽取样本</span>chisquare <span class="token comment">#从卡方分布中抽取样本</span>uniform<span class="token punctuation">(</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#从均匀分布中抽取样本</span>gamma <span class="token comment">#从伽马分布中抽取样本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>随机漫步</strong></p><h1 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h1><p>numpy像序列化好的矩阵，序列，pandas相当于是字典(有名称的数据)</p><p>numpy适合处理同质型的数值类数组数据</p><p>pandas用来处理表格型或异质性数据</p><h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><p>一维的数组型对象，包含一个值序列（类似numpy），和数据标签（索引 index）</p><p>默认索引0 - N-1 ，用values和index得到其值和索引</p><p>比numpy数组特殊的是可以用标签来索引：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">.</span>indexOut<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">.</span>valuesOut<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span>    In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d    <span class="token number">4</span>s    <span class="token number">7</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>可以考虑它是一个长度固定且有序的字典，在可以使用字典的上下文中Series都能用</strong></p><p>使用numpy的函数或按numpy风格的操作，比如布尔数组索引，数学函数，都能用，且保存索引值链接</p><p>还能把字典变成Series  pd.Series(dict)</p><p><code>obj3 = pd.Series(list1,[index = list])</code>如果list里没有，则被舍弃，如果list里有没对上的，就NaN</p><p>Pandas用 isnull 和 notnull检查数据，也返回类似布尔值Series的东东</p><p><strong>自动对齐索引是非常有用的</strong></p><p>Series对象自身和其索引都有name属性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'population'</span>In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">.</span>index<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'state'</span>In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2Out<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> stated    <span class="token number">4</span>s    <span class="token number">7</span>c   <span class="token operator">-</span><span class="token number">5</span>a    <span class="token number">3</span>Name<span class="token punctuation">:</span> population<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>索引可以通过按位置赋值的方式进行改变 obj.index = [new list]</p><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>表示矩阵的数据表,它包含已排序的列集合，每一列可以是不同的值类型（数值，字符串，布尔值等），DataFrame既有行索引，又有列索引</p><p>在DataFrame中数据被存储为一个以上的二维块。</p><p>可以利用分层索引在DataFrame中展现更高层次的维度。</p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>利用包含等长度列表或numpy数组的字典</p><p>在jupyter notebook里面dataframe对象会展示一个更好康的HTML表格</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>frame2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">,</span><span class="token string">'second'</span><span class="token punctuation">,</span><span class="token string">'third'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>colunmns指定列的顺序，索引指定索引。。如果columns里出现data没有的列，则填充缺失值NaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>frame2[‘a’] == frame2.a  这是一个Series对象，frame2.a只在a是有效变量名时可用，前者则总可用</p><p>也可以用这个更改一列👆，用列表/数组赋值时请确保长度匹配，</p><p>将Series付给一列时，索引会尝试匹配，空缺补缺失值，如果a（被赋值的列）不存在，会产生新列（<strong>此时不能用frame2.a的语法！！</strong>），可以用del关键词来删除dataframe的列</p><p>返回的Series对象索引继承dataframe的，而且name属性被设置成字典的索引</p><p>从DateFrame中选的列同样是数据的视图，拷贝得用.copy()</p><p>另一种常用的数据形式是包含字典的嵌套字典:</p><p>pandas会将字典的键作为列，将内部字典的键作为行索引，自动补全NaN</p><p>可以用Numpy语法转置 frame3.T</p><p>内部字典的键会被联合，排序，但是如果显式指明索引，键不会被排列</p><p>frame3.index.name 和 frame3.columns.name 也是可以设置的</p><p>如果列是不同的dtypes，那么values的dtype会自动选择适合所有列的类型</p><h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><p>reindex([]) 创建一个符合新索引的新对象</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'yellow'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3Out<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>      blue<span class="token number">2</span>    yellow<span class="token number">4</span>     greendtype<span class="token punctuation">:</span> <span class="token builtin">object</span>In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token string">'ffill'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>      blue<span class="token number">1</span>      blue<span class="token number">2</span>    yellow<span class="token number">3</span>    yellow<span class="token number">4</span>     green<span class="token number">5</span>     greendtype<span class="token punctuation">:</span> <span class="token builtin">object</span><span class="token comment">#ffill会将值向前传递</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">reindex方法的参数index <span class="token comment">#作为默认参数，可以省略</span>columns <span class="token operator">=</span> xx <span class="token comment">#此关键字用于重建列的索引</span>ps<span class="token punctuation">:</span>可以用frame<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span>行索引<span class="token punctuation">]</span>，<span class="token punctuation">[</span>列索引<span class="token punctuation">]</span><span class="token punctuation">]</span>method <span class="token comment">#ffill前向，bfiil后向填充</span>fill_value <span class="token comment">#选择缺失时使用的替代值</span>limit <span class="token comment">#前后填充时，填充的最大元素数量</span>tolerance <span class="token comment">#前后填充时，填充的最大绝对数字距离</span>copy <span class="token comment">#True时总是复制底层数据，False在索引相同时不复制数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除</strong></p><p>data.drop([xxx])删除索引，默认是轴9</p><p>data.drop([xxx],axis = 1) #也可以写axis = ‘columns’ 只删除一个的就不用列表</p><p>像drop这类函数会修改Series或DataFrame的尺寸或形状，直接操作原对象，不返回新对象</p><h3 id="索引对象"><a href="#索引对象" class="headerlink" title="索引对象"></a>索引对象</h3><p>不可变的，用obj.index拿出来，构造Series和DataFrame时，内部产生索引对象</p><p>可以用pd.Index([list])显式生成</p><p>它具备集合的特征，比如使用 in方法</p><p>但是它可以包含重复标签，根据重复标签筛选会选取所有匹配的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">append<span class="token punctuation">(</span><span class="token punctuation">)</span>differenceintersectionunionisindelete<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">#删除位置i的索引并产生新的索引</span>drop<span class="token punctuation">(</span><span class="token string">'xx'</span><span class="token punctuation">)</span><span class="token comment">#删除xx索引并产生新的索引,可以传递列表来删除多个</span>insert<span class="token punctuation">(</span>i<span class="token punctuation">)</span>is_monotonic <span class="token comment">#是否递增</span>is_unique <span class="token comment">#是否唯一</span>unique <span class="token comment">#得到索引的唯一值序列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Series</strong> 既可以使用obj[2:4]这样传统的顺序，也可以使用obj[[‘b’,’c’]]用索引里截取的列表来</p><p><strong>甚至可以obj[‘b’:’c’] 而且这个是包含尾部的</strong>，series只有一列，这些都是选择行</p><p><strong>对dataFrame可以直接用obj[‘two’]来索引某一列或用一个列表来选择！这是列选择语法</strong></p><p><strong>但是切片语法obj[2:4]时选择行的（这才是特殊的），传入单个/列表只能选择列！！！</strong></p><p><strong>loc和iloc选择(更准确，更无歧义)</strong></p><p>date.loc [[],[]] 前者选择行，后者选择列，必须是索引名</p><p>date.iloc [ xxx ]就只能用数字索引</p><p>当用列表时形式和原来相仿，当选了某一个行时，会发生转置</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourOHIO        <span class="token number">0</span>    <span class="token number">1</span>      <span class="token number">2</span>     <span class="token number">3</span>COLORADO    <span class="token number">4</span>    <span class="token number">5</span>      <span class="token number">6</span>     <span class="token number">7</span>UTAH        <span class="token number">8</span>    <span class="token number">9</span>     <span class="token number">10</span>    <span class="token number">11</span>NEWYORK    <span class="token number">12</span>   <span class="token number">13</span>     <span class="token number">14</span>    <span class="token number">15</span>In <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'OHIO'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> one      <span class="token number">0</span>three    <span class="token number">2</span>Name<span class="token punctuation">:</span> OHIO<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int32        In <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> three    <span class="token number">2</span>two      <span class="token number">1</span>Name<span class="token punctuation">:</span> OHIO<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两种方法是可以使用切片的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span>val<span class="token punctuation">]</span> 选择单列或列序列，特殊是数字切片选择行df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val<span class="token punctuation">]</span> 选择行df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>val<span class="token punctuation">]</span> 选择列df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val1<span class="token punctuation">,</span>val2<span class="token punctuation">]</span>选择某部分df<span class="token punctuation">.</span>iloc同理df<span class="token punctuation">.</span>ai<span class="token punctuation">[</span>label_i<span class="token punctuation">,</span>label_j<span class="token punctuation">]</span>根据索引选择单个标量df<span class="token punctuation">.</span>iat<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span>根据位置选择单个标量get_value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ps:当对标签使用切片时是包含尾部的，比如loc里面和series的标签切片，即使有时候标签就是数字</strong></p><h3 id="算数和数据对齐"><a href="#算数和数据对齐" class="headerlink" title="算数和数据对齐"></a>算数和数据对齐</h3><p>相加对象时，当索引对不同，返回结果的索引将时索引对的并集，没有交叠的部分全都变成NaN</p><p>灵活算术方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">,</span>raddsub<span class="token punctuation">,</span>rsubdiv<span class="token punctuation">,</span>rdivfloordiv<span class="token punctuation">,</span>rfloordivmul<span class="token punctuation">,</span>rmul<span class="token builtin">pow</span><span class="token punctuation">,</span>rpow参数fill_value设定了以后有必要会保留两边的，带r的都是参数翻转<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>DataFrame和Series间的操作</strong></p><p>类似不同维度数组间的操作类似</p><p>当arr(np数组)减去一行时，减法依次在每一行进行了操作，这就是所谓的广播机制</p><p>二DataFrame和Series之间的操作是类似的，Series的索引和DataFrame的列进行匹配，然后广播到各行</p><p>如果索引值不在DataFrame的列中，也不在Series的索引中，对象会重建索引并进行联合。补NaN</p><p>如果想在行上匹配，列上广播，必须得用算术方法，然后指定参数axis = ‘index’或axis = 0</p><p>Numpy的通用函数们可以直接使用到pandas对象进行逐元素操作</p><p>DataFrame的apply方法可以将函数应用到一列或一行上，默认是对每一列调用一次，</p><p>用axis = ‘columns’ 或 1来对行调用，索引仍保留对应的，但大部分常用的功能都已经实现了</p><p>applymap就是对每个元素使用！</p><p>先到这吧</p><h2 id="文件-1"><a href="#文件-1" class="headerlink" title="文件"></a>文件</h2><p>有一大坨，我挑了几个</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">read_csv 从文件，url，文件型对象读取分隔好的数据，逗号是默认分隔符read_table从文件，url，文件型对象读取分隔好的数据，制表符是默认分隔符read_fwf 从特定宽度格式的文件中读取数据（无分隔符）read_excelread_htmlread_json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于现实世界的数据非常混乱，随着时间推移，一些数据加载函数的可选参数变得非常复杂，pandas的在线文档中有大量实例展示，可以借鉴</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">一些参数pathsep<span class="token operator">/</span>delimiter 分隔符，可以是正则表达式header 用作列名的行号index_col 用作行索引的列好<span class="token operator">/</span>列名names 列名列表，必须header <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h1><p>如果不是用了%matplot notebook/inline，就得用plt.</p><p>最终目标可能是构建网络交互式可视化</p><p>matplotlib用来制作静态或动态的可视化文件，生成出版级质量图表（一般二维）</p><p>matplotlib支持所有操作系统上的各种GUI后端，还可以导出为常见的矢量和光栅图形格式！</p><p>现在有了一些matplotlib数据可视化的附加工具包，（调用matplotlib进行底层绘图）比如seaborn</p><p><strong>尽管seaborn等库和pandas内建的绘图函数可以处理大部分绘图的普通细节，但是要更好的定制，必须得学习一些maplotlib的API</strong></p><p><strong>导入惯例</strong></p><p>import matplotlib.pyplot as plt</p><p>首先在jupyter notebook 来一句 %matplotlib notebook(Ipython则是%matplotlib)</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>这些图位于图片（Figure）对象中，可以使用plt.figure()生成一个新的图片</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210504114242.png" alt="image-20210503162615865"></p><p>Jupyter好像优化了，不仅可以提前显示，而且在后续单元格执行时不会重置图表</p><p>当再绘图时，会在最后一个子图上画画</p><p>fig.add_subplot返回的是Axes Subplot对象，可以调用这些对象绘图</p><p>可以去matplotlib官方文档找完整的图形类型</p><p>使用子图网格创建图片时非常常见的任务，所以有一个方法plt.subplots(size)，返回包含了已生成的子图对象的Numpy数组</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210504114253.png" alt="image-20210503171947679"></p><p>牛批啊，fig是一个尺寸对象Figure，axes则是返回的numpy数组</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210504114249.png" alt="image-20210503172248820"></p><p>有几个参数，sharex(True/all  False/None) sharey</p><p>subplot_kw：可选的，字典类型。包含传递给用于创建子图的调用add_subplot的关键字参数。</p><p>gridspec_kw：可选的，字典类型。包含传递给用于创建子图网格的GridSpec构造函数的关键字参数。</p><p>**fig_kw：所有传递给matplotlib.pyplot.figure调用的额外关键字参数。</p><p>比如plt.subplots(2,2,figsize = (8,6)最后一项传入figure对象</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><a href="https://blog.csdn.net/htuhxf/article/details/82863630">https://blog.csdn.net/htuhxf/article/details/82863630</a></p><p><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html">https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html</a></p><p>可以用图对象的subplots_adjust方法，或者当作顶层函数用，调整间距</p><p>fig.subplots_adjust(left,bottom,right,top,wspace,hspace)</p><p>很多配置字符串可以合到一起，也可以分开来使得表达清晰</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'ko--'</span><span class="token punctuation">)</span>等价于ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>color <span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">,</span>linestyle <span class="token operator">=</span> <span class="token string">'dashed'</span><span class="token punctuation">,</span>marker <span class="token operator">=</span> <span class="token string">'o'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>大多数图表修饰工作有两种主要的方式：<strong>程序性的pyplot接口或更多面向对象的原生matplotlib API</strong></p><p>pyplot接口设计为交互式使用，包含xlim,xticks,xticklabels方法，他们在没有函数参数时返回当前参数值，在传入参数时设置参数值，<strong>他们默认在当前活动或最新创建的AxeSubplot上生效</strong>。他们分别对应于子图的两个方法，比如xlim对应于ax.get_lim和ax.set_lim，<strong>后者更为显式，单独操作子图</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#实例</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ticks <span class="token operator">=</span> ax<span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">750</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#设置刻度</span>labels <span class="token operator">=</span> ax<span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">,</span><span class="token string">'four'</span><span class="token punctuation">,</span><span class="token string">'five'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rotation <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span>fontsize <span class="token operator">=</span> <span class="token string">'small'</span><span class="token punctuation">)</span><span class="token comment">#设置标签</span>ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'My first matplotlib plot'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Stages'</span><span class="token punctuation">)</span><span class="token comment">#也可以这样设置</span>props<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">'title'</span><span class="token punctuation">:</span> <span class="token string">'My first matplotlib plot'</span><span class="token punctuation">,</span>    <span class="token string">'xlabel'</span><span class="token punctuation">:</span><span class="token string">'Stages'</span><span class="token punctuation">&#125;</span>ax<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token operator">**</span>props<span class="token punctuation">)</span><span class="token comment">#通用的一种方法</span><span class="token keyword">print</span><span class="token punctuation">(</span>ticks<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210504114302.png" alt="image-20210503194818033"></p><p><strong>添加图例</strong></p><p>最简单的式在添加图表的时候ax.plot(加一个参数label = ‘xx’)</p><p>再执行ax.lengend(loc =’xx’)或者plt.legend就能自动生成图例，best会找到最合适的位置</p><p>好文章：</p><p><a href="https://zhuanlan.zhihu.com/p/110656183">一，折线图调整</a></p><p><a href="https://zhuanlan.zhihu.com/p/110902615">二，坐标轴</a></p><p><a href="https://zhuanlan.zhihu.com/p/110976210">三，挪动坐标轴</a></p><p><a href="https://zhuanlan.zhihu.com/p/111108841">四，设置label</a></p><p><a href="https://zhuanlan.zhihu.com/p/111331057">五，散点图</a></p><p><a href="https://zhuanlan.zhihu.com/p/113657235">六，柱状图</a></p><p><strong>注释与子图加工</strong></p><p>text,arrow,annote方法可以添加注释和文本</p><p>比如：ax.text(x,y,’Hello world!’,family = ‘monospace’,fontsize = 10)</p><p>matplotlib含有表示多种常见图形的对象，这些对象的引用时patched。</p><p>全集位于matplotlib.patched中，少部分比如Rectangle和Circle可以在matplotlib.pyplot中找到</p><p>这个暂时用不到。。先略过吧</p><h3 id="保存到文件"><a href="#保存到文件" class="headerlink" title="保存到文件"></a>保存到文件</h3><p>使用plt.savefig将活动图片保存到文件，等价于图片对象的savefig实例方法</p><p>plt.savefig( ‘  xxx . svg’)文件类型会从文件拓展名自动推断</p><p>其他的参数/选项：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fname <span class="token comment">#默认参数，是一个路径+文件型对象名</span>dpi <span class="token comment">#每英寸点数的分辨率，默认100</span>facecolor<span class="token punctuation">,</span>edgecolor <span class="token comment">#图形背景的颜色，默认是'w'就是白色</span><span class="token builtin">format</span> <span class="token comment">#文件格式，比如'png','pdf',svg,ps,eps啥的，好像时可以覆盖</span>bbox_inched <span class="token comment">#要保存的图片范围，如果是'tight'，将会去掉图片周围空白的部分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>matplotlib配置</strong></p><p>几乎所有的默认行为都可以通过广泛的全局参数来定制，者通过plt.rc来实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#第一个参数时要自定义的组件,比如'figure',axes,xtick,ytick,grid,legend</span>然后其他的就可以自定义了<span class="token punctuation">,</span>比如：font_options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'family'</span> <span class="token punctuation">:</span> <span class="token string">'monospace'</span><span class="token punctuation">,</span>    <span class="token string">'weight'</span> <span class="token punctuation">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>    <span class="token string">'size'</span> <span class="token punctuation">:</span> <span class="token string">'5'</span><span class="token punctuation">&#125;</span>plt<span class="token punctuation">.</span>rc<span class="token punctuation">(</span><span class="token string">'font'</span><span class="token punctuation">,</span> <span class="token operator">**</span>font_options<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用pandas和seaborn绘图"><a href="#使用pandas和seaborn绘图" class="headerlink" title="使用pandas和seaborn绘图"></a>使用pandas和seaborn绘图</h2><p>pandas有很多内建的方法简化dataframe和series对象生成可视化的过程，另一个库时seaborn</p><p>导入seaborn会修改默认的matplot配色方案和绘图央视</p><p>Series.plot的参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">label ax 选用的子图对象，默认是当前活动的stylealphakind 默认<span class="token string">'line'</span>logy <span class="token comment">#在y上使用对数缩放</span>use_index 使用对象索引刻度标签（默认x，水平图则是y）rotxticksyticksxlimylimgrid <span class="token comment">#展示轴网格，默认打开</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DataFrame的plot参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">subplots <span class="token comment">#将每一列绘制在独立的子图中</span>sharex<span class="token operator">/</span>sharey <span class="token comment">#当独立子图时可以设置的</span>figsize 生成图片尺寸的元组title 标题字符串legend 添加子图图例，默认是<span class="token boolean">True</span>sort_columns 按字母顺序绘制各列，默认为<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>折线图</strong></p><p>会把Series索引默认当作x轴</p><p>DataFrame默认划到一起去，可以设置</p><p>注意到DataFrame的列名称(column.name)成为了图例标题</p><p><strong>柱状图</strong></p><p>plot.bar() 竖直 plot.barh()水平柱状图,同样索引默认当作x轴、y轴</p><p>注意到DataFrame的列名称(column.name)成为了图例标题</p><p>stackedd = True 参数可以让DataFrame每一行的值叠在一起</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210504114307.png" alt="image-20210503205130179"></p><p><strong>直方图和密度图</strong></p><p>hist和density</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h1&gt;&lt;h3 id=&quot;ipython&quot;&gt;&lt;a href=&quot;#ipython&quot; class=&quot;headerlink&quot; title=&quot;ipy</summary>
      
    
    
    
    <category term="data" scheme="https://darren-dong.com/categories/data/"/>
    
    
  </entry>
  
  <entry>
    <title>tensorflow-note</title>
    <link href="https://darren-dong.com/2021/04/26/tensorflow-note/"/>
    <id>https://darren-dong.com/2021/04/26/tensorflow-note/</id>
    <published>2021-04-26T14:02:08.000Z</published>
    <updated>2021-06-15T12:21:27.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Copy一下大佬的总结！</p><p><a href="https://blog.csdn.net/weixin_42186072/article/details/106669979">https://blog.csdn.net/weixin_42186072/article/details/106669979</a></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155209.png" alt="课程概览"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155220.png" alt="引入"></p><h2 id="人工智能三学派"><a href="#人工智能三学派" class="headerlink" title="人工智能三学派"></a>人工智能三学派</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426224228.png" alt="image-20210426224227762"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/20210426222525.png" alt="image-20210426222525560"></p><p>那么仿制过程就像这样：</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/20210426222631.png" alt="image-20210426222631384"></p><h2 id="鸢尾花1"><a href="#鸢尾花1" class="headerlink" title="鸢尾花1"></a>鸢尾花1</h2><p>专家系统是理性的。（if case。）</p><p>但是有些花农直接可以看出种类，因为他们见了太多，而且经验越丰富，识别准确率越高</p><p>这是一种感性的直觉，是这门课介绍的神经网络方法</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/20210426223114.png" alt="image-20210426223114751"></p><hr><p>具体实现</p><p>MP模型，每个输入特征乘以线上的权重，再通过一个非线性函数输出，简化是去掉非线性函数</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426224043.png" alt="image-20210426224042748"></p><p>每个输出节点都链接了所有的输入关系，称为全连接网络</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426224129.png" alt="image-20210426224129109"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426224149.png" alt="image-20210426224149049"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426224534.png" alt="image-20210426224533641"></p><p>看一个例子</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426225106.png" alt="image-20210426225106282"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426225453.png" alt="image-20210426225453483"></p><p>好神奇！原来这么简单</p><h2 id="TF2"><a href="#TF2" class="headerlink" title="TF2"></a>TF2</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426225602.png" alt="image-20210426225602306"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426225705.png" alt="image-20210426225704756"></p><p>数据类型：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426225810.png" alt="image-20210426225810424"></p><h3 id="创建张量"><a href="#创建张量" class="headerlink" title="创建张量"></a>创建张量</h3><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426230148.png" alt="image-20210426230148638"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426230237.png" alt="image-20210426230237443"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426230355.png" alt="image-20210426230355041"></p><p>比如这个a的shape：第一个维度有俩元素，第二个维度有仨元素</p><p>正态：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426230717.png" alt="image-20210426230717430"></p><p>均匀：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426230844.png" alt="image-20210426230843745"></p><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155247.png" alt="在这里插入图片描述"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155255.png" alt="在这里插入图片描述"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426231026.png" alt="image-20210426231025877"></p><p>axis = n 则表示处理n+1维的</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426231330.png" alt="image-20210426231330288"></p><p>所以tensorflow里的向量是列向量！</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426231940.png" alt="image-20210426231939729"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426232546.png" alt="image-20210426232546124"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426232612.png" alt="image-20210426232612177"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426232638.png" alt="image-20210426232638470"></p><p><strong>配对特征和标签：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426232859.png" alt="image-20210426232859750"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426233027.png" alt="image-20210426233027400"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426233321.png" alt="image-20210426233321529"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426233504.png" alt="image-20210426233504518"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426233858.png" alt="image-20210426233858363"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426234107.png" alt="image-20210426234106875"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426234243.png" alt="image-20210426234242794"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426234353.png" alt="image-20210426234352747"></p><p> 归一化：１）把数据变成(０，１)或者（1,1）之间的小数。主要是为了数据处理方便提出来的，把数据映射到0～1范围之内处理，更加便捷快速。２）把有量纲表达式变成无量纲表达式，便于不同单位或量级的指标能够进行比较和加权。归一化是一种简化计算的方式，即将有量纲的表达式，经过变换，化为无量纲的表达式，成为纯量。归一化/标准化实质是一种线性变换，线性变换有很多良好的性质，这些性质决定了对数据改变后不会造成“失效”，反而能提高数据的表现，这些性质是归一化/标准化的前提。比如有一个很重要的性质：线性变换不会改变原始数据的数值排序。</p><p><a href="https://www.jianshu.com/p/95a8f035c86c">大佬链接</a></p><p>参数自更新</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426234507.png" alt="image-20210426234507351"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426234621.png" alt="image-20210426234621653"></p><h2 id="鸢尾花2"><a href="#鸢尾花2" class="headerlink" title="鸢尾花2"></a>鸢尾花2</h2><h3 id="数据读入"><a href="#数据读入" class="headerlink" title="数据读入"></a>数据读入</h3><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426235316.png" alt="image-20210426235316370"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426235340.png" alt="image-20210426235340183"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426235530.png" alt="image-20210426235530705"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427092516.png" alt="image-20210427092508918"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427093046.png" alt="image-20210427093045917"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427093447.png" alt="image-20210427093446319"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427093705.png" alt="image-20210427093704998"></p><h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155310.png" alt="第二章"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427094602.png" alt="image-20210427094601274"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427095155.png" alt="image-20210427095154111"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427095313.png" alt="image-20210427095312159"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427095555.png" alt="image-20210427095554858"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427095925.png" alt="image-20210427095924361"></p><h2 id="复杂度学习率"><a href="#复杂度学习率" class="headerlink" title="复杂度学习率"></a>复杂度学习率</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427132521.png" alt="image-20210427132521189"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427132837.png" alt="image-20210427132837285"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427132843.png" alt="image-20210427132843385"></p><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427190842.png" alt="image-20210427190841912"></p><p>从此神经网络可以随层数的增加提示表达能力了</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427191332.png" alt="image-20210427191331703"></p><h3 id="常见激活函数"><a href="#常见激活函数" class="headerlink" title="常见激活函数"></a>常见激活函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427191556.png" alt="image-20210427191555569"></p><p>因为从输出层向输入层逐层求导，每一层的导数都落在0-0.25，多了以后趋于0，称为梯度消失</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427191737.png" alt="image-20210427191736628"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427192058.png" alt="image-20210427192057509"></p><p>通过调整初始化来避免“神经元死亡”，可以设置更小的学习率，减少参数分布的巨大变化，来👆</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427192342.png" alt="image-20210427192341285"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427192420.png" alt="image-20210427192419591"></p><p>对零均值化的解释：</p><p><a href="https://blog.csdn.net/wtrnash/article/details/87893725">https://blog.csdn.net/wtrnash/article/details/87893725</a></p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427194702.png" alt="image-20210427194701731"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427200949.png" alt="image-20210427200948436"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427201314.png" alt="image-20210427201313381"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427201845.png" alt="image-20210427201844108"></p><h2 id="欠拟合和过拟合"><a href="#欠拟合和过拟合" class="headerlink" title="欠拟合和过拟合"></a>欠拟合和过拟合</h2><p>欠拟合是对现有数据集学习的不太彻底，拟合效果不好</p><p>过拟合是对现有数据拟合的太好，却对新数据难以处理</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427202023.png" alt="image-20210427202022905"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427202203.png" alt="image-20210427202203477"></p><p>ps：</p><p>在机器学习的<a href="https://baike.baidu.com/item/%E4%B8%8A%E4%B8%8B%E6%96%87">上下文</a>中，超参数是在开始学习过程之前设置值的参数。 相反，其他参数的值通过训练得出。</p><p>超参数：</p><ul><li>定义关于模型的更高层次的概念，如复杂性或学习能力。</li><li>不能直接从标准模型培训过程中的数据中学习，需要预先定义。</li><li>可以通过设置不同的值，训练不同的模型和选择更好的测试值来决定</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427202855.png" alt="image-20210427202854377"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427203023.png" alt="image-20210427203022383"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427204015.png" alt="image-20210427204014435"></p><p>把区分0和1的分界线0.5标出颜色</p><h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><p>神经网络参数优化器</p><p>当<strong>网络结构固定后</strong>（达到学龄的孩子脑结构大致相仿），不同参数的选取（不同的引导方法）对模型的表达力影响很大，（成年达到高度不同）</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212011.png" alt="image-20210427212002917"></p><h3 id="常用的优化器"><a href="#常用的优化器" class="headerlink" title="常用的优化器"></a>常用的优化器</h3><p>gt是梯度</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212319.png" alt="image-20210427212319347"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212651.png" alt="image-20210427212650534"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212820.png" alt="image-20210427212819603"></p><hr><p>通过增加了一个二阶动量</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212903.png" alt="image-20210427212902304"></p><p>移动平均-&gt;指数滑动平均：</p><p>指数平滑法是在<a href="https://baike.baidu.com/item/%E7%A7%BB%E5%8A%A8%E5%B9%B3%E5%9D%87%E6%B3%95/10785547">移动平均法</a>基础上发展起来的，它具有移动平均法的优点，又可以减少运算过程中的数据储存量，同时还考虑了不同时期的数据所起的不同作用。采用指数平滑法的关键是确定α值。一般情况下，α值的大小，既和反映近期数据的能力有关，也和数据波动状况有关。通常不直接利用一次指数平滑法来预测，而是利用二次指数平滑法，求出平滑系数，建立起预测模型，再进行预测</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427213327.png" alt="image-20210427213326655"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427213358.png" alt="image-20210427213357398"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427213417.png" alt="image-20210427213415984"></p><h1 id="八股文！"><a href="#八股文！" class="headerlink" title="八股文！"></a>八股文！</h1><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155317.png" alt="第三章"></p><p>使用keras搭建</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427213648.png" alt="image-20210427213647692"></p><h2 id="Sequential"><a href="#Sequential" class="headerlink" title="Sequential"></a>Sequential</h2><p>六步：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155521.png" alt="image-20210428155453398"></p><p><strong>导入，设定训练、测试集，前向传播，配置训练方法，执行训练过程，打印网络结构和参数统计</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155749.png" alt="image-20210428155635348"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155802.png" alt="image-20210428155713205"></p><p>入门先写名字，牛逼了再去官网查看函数用法，调整超参数</p><p>注意from_logits判断是否经过了概率分布，后面经常使用sparse_categorical_accuracy</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428160240.png" alt="image-20210428160225553"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428161322.png" alt="image-20210428160233012"></p><p>其中设置图形级随机数可以看这个：</p><p><a href="https://zhuanlan.zhihu.com/p/109238035?from_voters_page=true">https://zhuanlan.zhihu.com/p/109238035?from_voters_page=true</a></p><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428172612.png" alt="image-20210428162339160"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428172607.png" alt="image-20210428162646672"></p><p>param = (输入+1)*输出    1是因为bias(偏差？)</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428170337.png" alt="image-20210428170337212"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Copy一下大佬的总结！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_42186072/art</summary>
      
    
    
    
    <category term="ML" scheme="https://darren-dong.com/categories/ML/"/>
    
    
    <category term="八股" scheme="https://darren-dong.com/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>当年数模论文</title>
    <link href="https://darren-dong.com/2021/04/15/%E6%95%B0%E6%A8%A1%E8%AE%BA%E6%96%87/"/>
    <id>https://darren-dong.com/2021/04/15/%E6%95%B0%E6%A8%A1%E8%AE%BA%E6%96%87/</id>
    <published>2021-04-15T15:26:54.000Z</published>
    <updated>2021-07-21T12:16:35.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排版格式"><a href="#排版格式" class="headerlink" title="排版格式"></a>排版格式</h1><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210416163718840.png" alt="image-20210416163718840" style="zoom:33%;" /><p>表格，图形之类的，还有Excel可视化啥的</p><p>公式，公式识别</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>word vs Latex</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210416164354583.png" alt="image-20210416164354583" style="zoom: 33%;" /><p>国赛Latex用得少，而美赛用得很多Latex</p><p><strong>优秀论文排版</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210416165419679.png" alt="image-20210416165419679" style="zoom:50%;" /><p>图形的配色。。避免大段的空行，不要水空间。格式规范，审美哈哈哈</p><h2 id="word基础"><a href="#word基础" class="headerlink" title="word基础"></a>word基础</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417000312818.png" alt="image-20210417000312818" style="zoom:50%;" /><h3 id="常用功能和快捷键"><a href="#常用功能和快捷键" class="headerlink" title="常用功能和快捷键"></a>常用功能和快捷键</h3><ul><li><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417000618699.png" alt="image-20210417000618699" style="zoom:50%;" /><p>比如空格显示为小点</p></li><li><p>打印预览功能</p></li></ul><hr><ul><li><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417000906546.png" alt="image-20210417000906546" style="zoom:50%;" /></li><li><p>强大的F4，在ppt和excel都能用，重复上一步操作，但是仅仅记录一步噢</p><p>对光标所在的符合要求的对象进行该操作</p></li><li><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417001349006.png" alt="image-20210417001349006" style="zoom: 67%;" /></li><li><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417001611043.png" alt="image-20210417001611043" style="zoom:50%;" /></li><li><p>“书签栏” 对选中的功能使用“添加到快速访问工具栏”</p></li><li><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417001949722.png" alt="image-20210417001949722" style="zoom:33%;" /></li><li><p>每个功能区的<strong>右下角是完整菜单</strong></p></li></ul><hr><p><strong>字体功能区</strong></p><ul><li>粘贴选项，常用的只保留文本，还有强大的粘贴为图片，比如把ppt的形状复制过来</li><li>格式刷：单击只能用一次，双击可以连续使用，Esc取消</li><li>上下标是俩个X2<img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417103542242.png" alt="image-20210417103542242"></li><li>字体颜色，背景颜色，艺术字！加拼音，更改大小写，清除所有格式</li></ul><hr><p><strong>段落功能区</strong></p><ul><li><p>对齐，两端对齐一般好看，行间距，底纹，框线（用光标）</p></li><li><p>加编号，调整缩进量</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417105224584.png" alt="image-20210417105224584"></p></li><li><p>重复编号，左边有一个自动更重编号，按住ctrl选中多行再添加编号</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417105657108.png" alt="image-20210417105657108"></p><p>这两个勾，很可能会<strong>坑人</strong></p></li><li><p>图片上方紧接着有文字，可以设置段前行距</p><p><img src="C:/Users/Lenovo/Desktop/image-20210417105834906.png" alt="image-20210417105834906"></p></li></ul><hr><p><strong>插入功能区</strong></p><ul><li>页面-&gt;封面 空白页（原理是分页符）</li><li>插入表格记得行和列是和线性代数反的，选中文本-&gt;<strong>文本转换为表格</strong></li><li>插入图片-&gt;此设备，调段落格式，小心首行缩进导致左边间距更大</li><li>插入形状，新建画布，和ppt一样</li><li>插入页眉，每一页都有，去掉横线方法：去除格式，改一改缩进，还有页码</li><li>插入文本框，四周型和嵌入性，浮于文字上方，改边框的形状轮廓</li></ul><hr><p><strong>布局功能区</strong></p><ul><li>页边距，页面方向，分成两栏，但是图片太宽则不行，两栏三栏</li><li>分隔符里的分节符，默认整个文档是一节，要分节来<strong>防止全局操作</strong></li><li>视图有标尺，选中表格，双击标尺，就可以改一些设置，包括纸张方向</li></ul><h3 id="样式和多级列表"><a href="#样式和多级列表" class="headerlink" title="样式和多级列表"></a>样式和多级列表</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417111817711.png" alt="image-20210417111817711" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417112018930.png" alt="image-20210417112018930" style="zoom: 33%;" /><p>还可用于导航窗格导航</p><p><strong>目录！！！</strong></p><p>引用-&gt;目录，直接根据标题插入目录，还可以直接设置格式</p><p>导出为PDF的时候！</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417112706180.png" alt="image-20210417112706180" style="zoom:33%;" /><h3 id="国赛规范和模板制作"><a href="#国赛规范和模板制作" class="headerlink" title="*国赛规范和模板制作"></a>*国赛规范和模板制作</h3><p>在官网查资料。。这里是2020版的，最后两页为纸质版才有的</p><p>第二页开始编号，</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417114000963.png" alt="image-20210417114000963" style="zoom:50%;" /><p>页边距2.5厘米，其他细节格式根据赛区自定，如果没有赛区要求，则自己定：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417114133736.png" alt="image-20210417114133736" style="zoom: 50%;" /><hr><ul><li>调出标题三，样式右下角，管理样式，推荐，显示标题3</li><li>右键样式进入设置，先设置中文，再设置英文</li><li>段落直接用所有脚本设置黑体，记得取消加粗</li><li>新建一个“图片和表格”样式</li></ul><hr><p><strong>多级列表</strong></p><p>空白处创建新的多级列表，更多，链接到样式，加上标题的格式</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417140707541.png" alt="image-20210417140707541" style="zoom:33%;" /><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417140728583.png" alt="image-20210417140728583"></p><p>编号之后改成空格</p><p>二级标题勾选：正规格式编号</p><p>关闭文档，重新打开，把标题的缩进都去掉</p><p>国赛控制在页边距，可以根据内容调整页边距大小</p><hr><p>加个页码，记得把缩进关了，把上面的横线清除格式</p><h3 id="表格制作"><a href="#表格制作" class="headerlink" title="表格制作"></a>表格制作</h3><p>左上角的十字，全选表格和拖动位置，右下角拖动更改表格大小，居中对齐</p><p>退格键删除表格，delete键清空内容，虚线是“查看网格线”，其实啥都没有</p><p>布局里面调一下布局方式，还有个自动调整功能，用的不是很多</p><p>左下角和右上角分别是插入行和列</p><p>可以用边框刷，也可以设置上下左右边框这样的</p><p>记得在上面写一行字，写表格标题</p><hr><p>表格样式就是模板一样的</p><p>把文字环绕设置成无，因为一拖动就会自动设置成环绕</p><p>改了样式后，记得在段落里把样式里的首行缩进改成无</p><h4 id="长表格"><a href="#长表格" class="headerlink" title="长表格"></a>长表格</h4><p>行数太多了，把标题多复制一份，然后套用三线表，改一下对齐方式，加一条中间的竖直边框</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417145355812.png" alt="image-20210417145355812"></p><h4 id="宽表格"><a href="#宽表格" class="headerlink" title="宽表格"></a>宽表格</h4><p>列数太多了，可以使用横向排列之类的，但是建模肯定要分行，用Excel帮忙</p><p>记得加上续表俩字</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417145727529.png" alt="image-20210417145727529"></p><h4 id="拼接表格"><a href="#拼接表格" class="headerlink" title="拼接表格"></a>拼接表格</h4><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417145851642.png" alt="image-20210417145851642"></p><p>当作一个整体，中间这一列设置为无边框</p><h4 id="有合并单元格"><a href="#有合并单元格" class="headerlink" title="有合并单元格"></a>有合并单元格</h4><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417150114299.png" alt="image-20210417150114299"></p><p>在Excel里面就可以使用合并单元格，给特定单元格加框线</p><p>分隔效果是加了无色的竖线</p><p>有一些特殊软件生成的表格跳过了</p><h4 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h4><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417150937068.png" alt="image-20210417150937068"></p><p>取消所有框线，加上部分下框线</p><h4 id="自动编号"><a href="#自动编号" class="headerlink" title="自动编号"></a>自动编号</h4><p>引用-&gt;插入题注，勾选自动插入题注，来自动更新</p><p>还可以关联你写的引用和相应表：交叉引用，引用类型为表，这样会自动变化，要刷新F9</p><p>但其实比赛论文不太需要这些，直接手打就好了。</p><p>表前的文字和表格间距0.5行。。可以用上面的段后</p><h3 id="图形制作和排版"><a href="#图形制作和排版" class="headerlink" title="图形制作和排版"></a>图形制作和排版</h3><p>国赛风格简约，黑白，而美赛。。。很酷</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417155000260.png" alt="image-20210417155000260" style="zoom:50%;" /><p>以后得自学前两者</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417155446780.png" alt="image-20210417155446780"></p><h4 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h4><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417155639823.png" alt="image-20210417155639823"></p><p>调好缩进，直接右键转化为smartart，先选大类，再选小类</p><p>设计里更改颜色啥的，然后再在格式里面调整具体的样式，粘贴为图片</p><p>还有Xmind和process on</p><h4 id="简单示意图"><a href="#简单示意图" class="headerlink" title="简单示意图"></a>简单示意图</h4><p><strong>ppt绘制</strong></p><p>插入各种形状，无填充等样式，添加形状，文本窗格</p><p>格式里有<strong>对齐和横向分布在右边</strong>，旋转</p><p>C + 按住图形可以直接拖出新的，按住shift拉线不会歪</p><p>选中需要的图形，右键组合，还能取消组合</p><p>图表标题通用的。。写在下面就好了</p><p>强大的ppt组合图形，组合可以嵌套</p><hr><p><strong>任意多边形</strong>记住shift不动，Esc就画完了</p><p>曲线大致描几个点，格式，形状轮廓，箭头和样式啥的</p><p>竟然是iconfont阿里巴巴卧槽，下SVG格式的，没想到哇</p><hr><p><strong>ppt后期加工</strong></p><p>其实也还是加一堆图形哈哈，</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417171000183.png" alt="image-20210417171000183" style="zoom:50%;" /><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417171042537.png" alt="image-20210417171042537" style="zoom: 50%;" /><p>选择全部，居中对齐什么的，processOn</p><p>YeD之类的</p><h4 id="物理示意图"><a href="#物理示意图" class="headerlink" title="物理示意图"></a>物理示意图</h4><p>直接ppt，哈哈哈，AxGlyph软件，和Axmath一样是word插件</p><p>ppt，绘制圆，按照ctrl就是标准⚪，还能调节角度卧槽。还有旋转。</p><hr><p>还有亿图（有水印），有很多模板，美赛用的多</p><p>GeoGraph，动态的，免费的</p><p><strong>Echarts，需要一定的前端，数据可视化方向的</strong></p><p>也可以学python中的pyecharts这个包</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417181153530.png" alt="image-20210417181153530" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417181547695.png" alt="image-20210417181547695" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417184523976.png" alt="image-20210417184523976" style="zoom:50%;" /><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417213014215.png" alt="image-20210417213014215" style="zoom:50%;" /><p>直接查到论文，然后引用</p><p>正文格式，编号格式，手动添加上标</p><h3 id="公式编辑"><a href="#公式编辑" class="headerlink" title="公式编辑"></a>公式编辑</h3><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417213539208.png" alt="image-20210417213539208"></p><p><strong>mathpix</strong></p><h1 id="写作方法"><a href="#写作方法" class="headerlink" title="写作方法"></a>写作方法</h1><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417184905778.png" alt="image-20210417184905778"></p><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>基于啊哈哈。。50%</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417185146499.png" alt="image-20210417185146499" style="zoom:50%;" /><p>表达准确。。</p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417185252729.png" alt="image-20210417185252729" style="zoom:50%;" /><p>最后写，反复修改</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417185510665.png" alt="image-20210417185510665" style="zoom:50%;" /><p>平均800-1000</p><hr><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417185558584.png" alt="image-20210417185558584" style="zoom:50%;" /><hr><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417185925628.png" alt="image-20210417185925628" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417190146004.png" alt="image-20210417190146004" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417190320644.png" alt="image-20210417190320644" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417190458831.png" alt="image-20210417190458831" style="zoom:50%;" /><hr><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417190805813.png" alt="image-20210417190805813" style="zoom:50%;" /><hr><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417190834259.png" alt="image-20210417190834259" style="zoom:50%;" /><h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417191010259.png" alt="image-20210417191010259" style="zoom:50%;" /><p>多放主要模型！</p><h2 id="问题重述"><a href="#问题重述" class="headerlink" title="问题重述"></a>问题重述</h2><p>一级标题的第一个</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417191206893.png" alt="image-20210417191206893" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417191311203.png" alt="image-20210417191311203" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417191358234.png" alt="image-20210417191358234" style="zoom:50%;" /><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417191500357.png" alt="image-20210417191500357" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417191905011.png" alt="image-20210417191905011" style="zoom:50%;" /><p>甚至思维导图和思维框图</p><h2 id="模型假设"><a href="#模型假设" class="headerlink" title="模型假设"></a>模型假设</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417192156795.png" alt="image-20210417192156795" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417192226678.png" alt="image-20210417192226678" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417195904468.png" alt="image-20210417195904468" style="zoom:50%;" /><hr><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417200139452.png" alt="image-20210417200139452" style="zoom:50%;" /><h2 id="符号说明"><a href="#符号说明" class="headerlink" title="符号说明"></a>符号说明</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417200444421.png" alt="image-20210417200444421"></p><p>写在最后。。不是所有都要放。</p><h2 id="模型建立与求解"><a href="#模型建立与求解" class="headerlink" title="模型建立与求解"></a>模型建立与求解</h2><p>ps：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417201120942.png" alt="image-20210417201120942" style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417201501252.png" alt="image-20210417201501252" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417201700798.png" alt="image-20210417201700798" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417201731556.png" alt="image-20210417201731556" style="zoom:50%;" /><p>这就是结合的利用</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417201821269.png" alt="image-20210417201821269" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417201950243.png" alt="image-20210417201950243" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417202044451.png" alt="image-20210417202044451" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417202306738.png" alt="image-20210417202306738" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417202327970.png" alt="image-20210417202327970" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417202413624.png" alt="image-20210417202413624" style="zoom: 33%;" /><h2 id="模型分析或检验"><a href="#模型分析或检验" class="headerlink" title="模型分析或检验"></a>模型分析或检验</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417202623048.png" alt="image-20210417202623048" style="zoom:33%;" /><h3 id="灵敏度分析"><a href="#灵敏度分析" class="headerlink" title="灵敏度分析"></a>灵敏度分析</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417203408032.png" alt="image-20210417203408032" style="zoom: 25%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417211229051.png" alt="image-20210417211229051" style="zoom:33%;" /><h3 id="稳定性检验"><a href="#稳定性检验" class="headerlink" title="稳定性检验"></a>稳定性检验</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417211856247.png" alt="image-20210417211856247" style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417211955682.png" alt="image-20210417211955682" style="zoom:33%;" /><h3 id="误差分析"><a href="#误差分析" class="headerlink" title="误差分析"></a>误差分析</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417212037424.png" alt="image-20210417212037424" style="zoom:33%;" /><h2 id="评价，改进-推广"><a href="#评价，改进-推广" class="headerlink" title="评价，改进(推广)"></a>评价，改进(推广)</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417212142176.png" alt="image-20210417212142176" style="zoom:33%;" /><h2 id="参考文献-1"><a href="#参考文献-1" class="headerlink" title="参考文献"></a>参考文献</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417212253184.png" alt="image-20210417212253184" style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417212402948.png" alt="image-20210417212402948" style="zoom:33%;" /><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417212528558.png" alt="image-20210417212528558" style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417212627609.png" alt="image-20210417212627609" style="zoom:33%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;排版格式&quot;&gt;&lt;a href=&quot;#排版格式&quot; class=&quot;headerlink&quot; title=&quot;排版格式&quot;&gt;&lt;/a&gt;排版格式&lt;/h1&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-gre</summary>
      
    
    
    
    <category term="memory" scheme="https://darren-dong.com/categories/memory/"/>
    
    
    <category term="word" scheme="https://darren-dong.com/tags/word/"/>
    
  </entry>
  
  <entry>
    <title>统计</title>
    <link href="https://darren-dong.com/2021/04/10/%E7%BB%9F%E8%AE%A1/"/>
    <id>https://darren-dong.com/2021/04/10/%E7%BB%9F%E8%AE%A1/</id>
    <published>2021-04-10T09:30:55.000Z</published>
    <updated>2021-06-15T12:42:39.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="描述性统计"><a href="#描述性统计" class="headerlink" title="描述性统计"></a>描述性统计</h1><p>这个还是太简单了</p><p>先看概率导论吧</p><h1 id="1-入门"><a href="#1-入门" class="headerlink" title="1.入门"></a>1.入门</h1><p>当这门课完结的时，将会掌握对数据集进行收集，整理，计算和可视化的所需要工具</p><p>创建一个谷歌账户</p><h2 id="BBC记忆测试"><a href="#BBC记忆测试" class="headerlink" title="BBC记忆测试"></a>BBC记忆测试</h2><p>这个例子目前已经被取消了</p><p>可惜，BBC 已经不再提供人脸记忆测试了。</p><p>下面是此测试的简单描述，以帮助你跟上课程其余部分。该测试包含三个部分：</p><ol><li>在第一部分向用户展示 12 张照片。</li><li>在第二部分向用户展示另外 12 张照片。</li><li>在第三部分向用户展示 48 张照片，并询问他们是否在第一部分/第二部分见过每一张照片或在这两个部分都没见过。</li></ol><p>测试之后，用户会得到两个分数：</p><ul><li>“识别得分”，用户正确猜出某张人脸他是否见过的比例，不论用户看到的是人脸的哪个部分。</li><li>“短期记忆得分”，用户正确猜出某张人脸属于第一部分还是第二部分的比例。</li></ul><p>测试建议用户在完成第一部分，开始第二部分前休息5分钟。</p><p>BBC 是如何测量记忆的？</p><ul><li>你记住了哪些面孔？</li><li>你从第一部分和第二部分正确识别和放置的百分比？</li><li>你是否知道你是第一次还是第二次见到某个面孔？</li><li>你是否知道某个面孔已存在？</li><li>你记住的面孔数量？</li></ul><p>答案是百分比。</p><p>当选取了一种度量方法，也有了一种可操作的定义，此处为正确识别的百分比</p><p>抽象概念很难定义和度量</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410194240953.png" alt="image-20210410194240953"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410194335563.png" alt="image-20210410194335563"></p><p>我们必须仔细思考如何定义和度量“构建”</p><p>我们给出的构建的描述，让我们可以直接测量这个构建</p><p><strong>这样的描述被称为 可操作 的定义</strong></p><p>然后我们假设并分析了影响记忆的因素！</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410195157781.png" alt="image-20210410195157781"></p><p>当更多的因素为常量时，我们更加相信结果</p><h2 id="思考样本"><a href="#思考样本" class="headerlink" title="思考样本"></a>思考样本</h2><p>当比较所有参与测试的人员（大样本）和其中的学生时（小样本）</p><p>总体<strong>参数</strong>（如 mu 或 \mu）是用来描述整个总体的值。</p><p>样本<strong>统计量</strong>（如 X-bar 或 \bar x<em>x</em>¯）是用来描述<strong>样本的值</strong>；我们使用统计量来估计总体参数。<strong>估计值是我们对总体参数的最佳猜测</strong>。所以，我们可以使用 X-bar 来<strong>估计</strong> mu。</p><p>而二者的区别叫做抽样误差。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410195644531.png" alt="image-20210410195644531"></p><p>样本越大越优质，越随机越优质</p><p>我们通过数据可视化（此处表格转化成图表）发现其中可能蕴藏的规律，但别忘了隐藏的因素</p><p>即使表现出了明显的规律，但我们无法确认原因</p><h2 id="金拱门理论"><a href="#金拱门理论" class="headerlink" title="金拱门理论"></a>金拱门理论</h2><p>记住：Correlation does not prove causation  （相关并不代表因果）</p><p>这是个非常重要的概念</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410200633367.png" alt="image-20210410200633367"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410200901278.png" alt="image-20210410200901278"></p><p>所以即使表现出了明显的规律，但我们无法确认原因。</p><p>如果我们想要显示因果关系，即某个特定因素导致了另一个因素，我们要开展 <strong>对照试验</strong></p><h3 id="Survey"><a href="#Survey" class="headerlink" title="Survey"></a><strong>Survey</strong></h3><ul><li>它是了解总体的最简单方式之一</li><li>相对来说成本较低</li><li>可以远程进行</li><li>任何人都可以访问并分析调查结果</li></ul><p>不足</p><ul><li>不真实的回答      –可能是心理原因或者啥</li><li>有偏见的回答        –环境，教育等因素的影响</li><li>参与者没理解问题的意思     –这得出的答案叫做<strong>应答偏差</strong></li><li>参与者拒绝回答       –某个群体因为某些原因拒绝回答，带来<strong>无应答偏差</strong></li></ul><p>还记得同一个属性有很多种衡量方法，我们在问卷里要尽量采用主观衡量的方法，</p><p>仔细斟酌调查问卷并认真措辞</p><h3 id="对照试验"><a href="#对照试验" class="headerlink" title="对照试验"></a>对照试验</h3><h4 id="单盲"><a href="#单盲" class="headerlink" title="单盲"></a>单盲</h4><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410202316929.png" alt="image-20210410202316929"></p><p>不告诉它们情况的目的是控制主观带来的相当大的偏差，这称为blinding(盲法)</p><p>这常用于主观影响行为时，这种无效药丸叫做安慰剂</p><p>但是知情同意书会说明参与者可能会进入对照组。。不如不说</p><h4 id="双盲"><a href="#双盲" class="headerlink" title="双盲"></a>双盲</h4><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410202949583.png" alt="image-20210410202949583"></p><p>随机性非常重要，而更大的样本更容易实现随机性</p><p>顺便附上一个<a href="https://www.kqed.org/mindshift/26079/why-sleeping-may-be-more-important-than-studying">睡眠调查</a></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410203510980.png" alt="image-20210410203510980"></p><p>答案是C</p><h2 id="基础习题"><a href="#基础习题" class="headerlink" title="基础习题"></a>基础习题</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410204407058.png" alt="image-20210410204407058"><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410204413964.png" alt="image-20210410204413964"></p><p>选取样本，研究总体，呈现的特征是统计量，</p><p>简单来说，参数与总体对应在一起，统计量与样本对应在一起。参数往往是未知的，所以才要通过抽样调查的方法来估计，根据样本算出统计量。统计量就是用来估计参数的。这跟原来的意思不搭边啊。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410204850957.png" alt="image-20210410204850957"><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410204858044.png" alt="image-20210410204858044"></p><p><strong>样本和总体平均值之间的差异称为抽样误差。。sampling error</strong></p><p><strong>Population differences are differences between different populations</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410205312486.png" alt="image-20210410205312486"></p><p>答案3，5，6</p><p><strong>变量是指参加研究的个体间可能不同的量。。</strong></p><p>hypothesis  假设</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410210156556.png" alt="image-20210410210156556"></p><p>答案1，2，4，5</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410210317870.png" alt="image-20210410210317870"></p><p>3，4</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410210412280.png" alt="image-20210410210412280"></p><p>4，5</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410213243525.png" alt="image-20210410213243525"></p><p><strong>1，6，7我们不能下结论，但是可以合理预测</strong></p><p>independent  自变量</p><p>dependent  因变量</p><p>lurking  潜伏变量</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410213701731.png" alt="image-20210410213701731"></p><p>答案是3，5，6</p><p>第一项错的，因为这个<strong>实验性研究</strong>不像<strong>观察性研究</strong>，已经足够缩小无关变量的影响，我们得出结论是合理的</p><p>第四项是干扰，我们得出治疗成果的操作其实是根据它们之间的差值，而不是分数</p><h2 id="进阶习题"><a href="#进阶习题" class="headerlink" title="进阶习题"></a>进阶习题</h2><p>用n代表样本大小</p><p>construct （抽象概念）是不可被直接观察和测量的变量</p><p>你每天走的距离是construct  但如果指定按米测量，它就不是</p><p>从少数样本的研究得出的现象不能说明任何问题：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410215056385.png" alt="image-20210410215056385"></p><h1 id="2-集中趋势"><a href="#2-集中趋势" class="headerlink" title="2.集中趋势"></a>2.集中趋势</h1><h2 id="频率"><a href="#频率" class="headerlink" title="频率"></a>频率</h2><p>绝对数量（频率）和相对频率（百分比）</p><p>通过整理数据，我们可以清晰地观察变化</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411184322489.png" alt="image-20210411184322489"></p><h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411184838387.png" alt="image-20210411184838387"></p><p>组距 = 区间大小</p><p>percentage百分比 != porpation比例</p><p>简便性有失会牺牲一些信息</p><p>小心信息被过大的组距隐藏起来了</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411185724576.png" alt="image-20210411185724576"></p><p>直方图横坐标是同一属性的分布，可以改变组距，而且有顺序</p><p>柱状图的不同柱子是相互独立的，顺序不重要，分类或定性的</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411190847179.png" alt="image-20210411190847179"></p><p>正偏斜分布</p><p>频率低的分布在右边</p><p>Excel的一些小操作，c和s键，函数公式里，$E$2是常量E2</p><hr><p>这些都是x轴上的自变量</p><p>众数mode   直方图里用最大区间的中位数，受组距影响，与呈现数据的方式有很大关系</p><p>均匀分布没有众数，但是多峰分布由多个众数</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411194036544.png" alt="image-20210411194036544"></p><p>第一个对的</p><hr><p>中位数median</p><p>用之前要排序噢</p><p>处理高偏斜分布时中位数更可信</p><hr><p>平均数average</p><p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20210411194453701.png" alt="image-20210411194453701"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411195527966.png" alt="image-20210411195527966"></p><p>全是对的</p><p>robust 强大且稳定  符合统计的定义</p><p>使用这三个数都是中心测量方法，因为他们都描述分布中心的情况</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411200914056.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411204640630.png" alt="image-20210411204640630"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411204952662.png" alt="image-20210411204952662"><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411205002462.png" alt="image-20210411205002462"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/4938065-f641e015cbe17d86" alt="img"></p><p>平均数和中位数本来一样，但是平均数被稀少的数据拉过去了</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411211835965.png" alt="image-20210411211835965"></p><p>所以注意自变量和因变量是谁，此处分数为自变量，人数为因变量，直方图的自变量是均匀的</p><h1 id="3-可变性"><a href="#3-可变性" class="headerlink" title="3.可变性"></a>3.可变性</h1><h2 id="IQR"><a href="#IQR" class="headerlink" title="IQR"></a>IQR</h2><p>值域提供了一个关于分布的概要信息，但是方便会牺牲一些东西</p><p>因为它参考的是最极端的数据，受到异常数据影响很大</p><p>习惯上，统计学家忽略较低和较高的各25%！</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412234924656.png" alt="image-20210412234924656"></p><p>Q1  Q2  Q3   Q1和Q3间是<strong>四分位距/四分差</strong>IQR Interquartile range</p><h3 id="异常值"><a href="#异常值" class="headerlink" title="异常值"></a>异常值</h3><p>定义：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412235434276.png" alt="image-20210412235434276"></p><h3 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a><strong>箱线图</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412235721975.png" alt="image-20210412235721975"></p><p>小点表示异常数据</p><p>均值不一定在IQR中</p><p><strong>不足</strong></p><p>值域和IQR无法考虑所有数据</p><p>完全不同的俩数据分布也可以有相同的IQR</p><p>因此我们需要一个数字，既能显示分布，又能考虑所有的数据</p><p>我们找的是找出每个值与数据集均值之间差的平均值</p><h2 id="平均偏差"><a href="#平均偏差" class="headerlink" title="平均偏差"></a>平均偏差</h2><p>离均差是某个数据减去平均值</p><p>平均偏差 = 离均差之合/n  = 0<img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413000641459.png" alt="image-20210413000641459"></p><p>但这并不能反映甚么，问题是负值会抵消，我们不关心正负，我们只关心绝对距离！平方和取绝对值就可以处理负数。</p><p>引入绝对偏差对应离均差</p><p>平均绝对偏差对应平均偏差</p><p>平方偏差和平均平方偏差（方差）</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413001254455.png" alt="image-20210413001254455"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413001417511.png" alt="image-20210413001417511"></p><p>方差可以看成那个橙色的，而标准差即为边长。</p><p>标准差是最常用的分布测量方法，小写西格玛</p><p>步骤：平均值-&gt;离均差（平均差）-&gt;每个偏差的平方值-&gt;方差-&gt;标准差</p><hr><p>思考：</p><p>为何不直接获得平均绝对偏差。</p><p>它具有重要意义，比如正态分布中，68% 和 95%是一个和两个</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413094303444.png" alt="image-20210413094303444"></p><p>所选样本的标准偏差</p><h3 id="贝塞尔矫正"><a href="#贝塞尔矫正" class="headerlink" title="贝塞尔矫正"></a>贝塞尔矫正</h3><p>通常，抽样中会低估了总体中差异性的数量</p><p>因为抽样往往是总体居于中间的值，用贝塞尔矫正系数，来矫正</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413100446583.png" alt="image-20210413100446583"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413101551728.png" alt="image-20210413101551728"></p><p>如果用n，那就是样本的标准差</p><p>如果用n-1，那就是对真实的总体标准差更准确的估算</p><p>具体理论没讲</p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><h1 id="4-归一化"><a href="#4-归一化" class="headerlink" title="4.归一化"></a>4.归一化</h1><p>你已经了解了分析图表的四个值，分布，那么还有什么需要分析的呢？</p><p>象棋：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414131710341.png" alt="image-20210414131710341" style="zoom: 50%;" /><p>第一个不直观，大家不了解，第二个只知道多少人高，不知道有多少人参加</p><h2 id="绝对和相对"><a href="#绝对和相对" class="headerlink" title="绝对和相对"></a>绝对和相对</h2><p>当我们关心的是比例以及和其它元素的关系时，使用相对频率</p><p>相对频率直方图</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414131958647.png" alt="image-20210414131958647"></p><p>形状几乎一样</p><p>但对于这个图，我们无法说出190-200的比例，这些信息被隐藏起来了</p><p>可以通过减小组距来显示这些信息，看看减小组距会发生怎样的现象</p><p><video class="vjs-tech" id="vjs_video_3_html5_api" tabindex="-1" role="application" crossorigin="anonymous" src="https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/9ftDJRsfEUI.mp4"></video></p><p>如果再减小时，分布图的形状就会变得松散起来</p><p>问题出现了：</p><p><strong>组距太小，我们会丢失分布图的形状，太大会有信息被隐藏起来</strong></p><p>解决方法是采用连续分布</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414132617168.png" alt="image-20210414132617168" style="zoom:50%;" /><p>答案是1</p><h2 id="理论正态分布"><a href="#理论正态分布" class="headerlink" title="理论正态分布"></a>理论正态分布</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414132718010.png" alt="image-20210414132718010" style="zoom:33%;" /><p>而众数，中位数，平均数相等</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414132753312.png" alt="image-20210414132753312"></p><p><strong>Z</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415130123307.png" alt="image-20210415130123307"></p><p>就可以知道小于或大于该值的百分比</p><p>确认比例不能通过数字，得通过多少z，这个视频有一步是讲两个图进行“标准化”</p><p><video class="vjs-tech" id="vjs_video_22416_html5_api" tabindex="-1" role="application" crossorigin="anonymous" src="https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/W5qXCZ-nrHM.mp4"></video></p><h2 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415130950473.png" alt="image-20210415130950473" style="zoom:50%;" /><p>即将正态分布中的任何值转换为z值</p><p>z为负数说明x在 μ的左边，σ是标准偏差</p><p>归一化后，平均值则为0，新标准偏差为1</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415131521357.png" alt="image-20210415131521357"></p><p>对于任何正态分布：</p><ol><li>减去平均值</li><li>平移到0</li><li>除以标准偏差，使新的标准偏差为0</li></ol><p>则成为了一个<strong>标准正态分布</strong>。现在数据集中的每个值都用距离平均值的标准偏差表示</p><h2 id="Z"><a href="#Z" class="headerlink" title="Z"></a>Z</h2><p>我们可以把任何正态分布转换为标准正态分布，然后按照任何方式拓展</p><p>它们之间的桥梁是 Z</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415132218585.png" alt="image-20210415132218585" style="zoom:50%;" /><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415132405152.png" alt="image-20210415132405152"></p><h1 id="5-正态分布"><a href="#5-正态分布" class="headerlink" title="5.正态分布"></a>5.正态分布</h1><h2 id="概率密度函数"><a href="#概率密度函数" class="headerlink" title="概率密度函数"></a>概率密度函数</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210419230030983.png" alt="image-20210419230030983" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210419230926414.png" alt="image-20210419230926414" style="zoom: 67%;" /><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210419231612242.png" alt="image-20210419231612242"></p><h2 id="Z表格"><a href="#Z表格" class="headerlink" title="Z表格"></a>Z表格</h2><p>用微积分可以计算任意处的比例，而这被做成了一张表格</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/ZTable.jpg" style="zoom:33%;" /><h1 id="6-抽样分布"><a href="#6-抽样分布" class="headerlink" title="6.抽样分布"></a>6.抽样分布</h1><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210419235247878.png" alt="image-20210419235247878" style="zoom:50%;" /><h2 id="抽样分布"><a href="#抽样分布" class="headerlink" title="抽样分布"></a>抽样分布</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420084731208.png" alt="image-20210420084731208" style="zoom: 33%;" /><p>抽样分布大致满足正态分布</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420084904044.png" alt="image-20210420084904044" style="zoom:33%;" /><h2 id="样本均值"><a href="#样本均值" class="headerlink" title="样本均值"></a>样本均值</h2><p>在比较均值时需要的信息：</p><p><strong>样本均值是正态分布的，所有样本均值的均值就是总体均值</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420085324314.png" alt="image-20210420085324314" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420085536447.png" alt="image-20210420085536447" style="zoom:33%;" /><p><strong>SE是样本均值分布（亦称为抽样分布）的标准偏差</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420084425804.png" alt="image-20210420084425804" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420090002918.png" alt="image-20210420090002918" style="zoom:33%;" /><p>所以SE=σ/√n￣</p><h2 id="中心极限定理"><a href="#中心极限定理" class="headerlink" title="中心极限定理"></a>中心极限定理</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420090746977.png" alt="image-20210420090746977" style="zoom:50%;" /><p>适用于适用于任意形体，总体可以是任意数量，然后迭代的抽取其中的n个样本并计算出均值</p><p>假设样本量足够大，则画出均值分布图（抽样分布图），是近似正态分布的</p><h2 id="投骰子"><a href="#投骰子" class="headerlink" title="投骰子"></a>投骰子</h2><p>如果只投一次，那么其实就是用原来的总体分布，样本量 = 1，画出来应该是均匀分布</p><p>但是如果每轮投两次，样本量 = 2</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420092512384.png" alt="image-20210420092512384" style="zoom:33%;" /><p>而SE可以用中心极限定理算出来</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420092945271.png" alt="image-20210420092945271" style="zoom: 33%;" /><p>随着样本量的增大，标准误差增大了，而原来默认的是1，我好像有些悟了</p><p>通常我们希望样本量更大，因为标准偏差会告诉我们总体均值更可能落在哪片区域。</p><p>当增大时，标准差变小，区域变窄，更加趋近于那个M，又因为M = μ，就更精确的找到了μ所在的区域</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420093536425.png" alt="image-20210420093536425" style="zoom:50%;" /><p>可以自己<a href="https://onlinestatbook.com/stat_sim/sampling_dist/index.html">尝试</a>一下！不过这里用了贝塞尔矫正</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420093749342.png" alt="image-20210420093749342"></p><h2 id="Klout应用"><a href="#Klout应用" class="headerlink" title="Klout应用"></a>Klout应用</h2><p>计算投掷四面体骰子，平均值至少达到3的概率。</p><p><strong>通过该定理，我们可以知道给定的任意均值会处在样本均值分布的哪个位置</strong></p><p>还可以以此判断该样本是否典型</p><p><a href="http://klout.com/corp/score">Klout</a> 是什么？它的原理是什么？</p><p><video class="vjs-tech" id="vjs_video_402492_html5_api" tabindex="-1" role="application" crossorigin="anonymous" src="https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/3q0oPuWxFpA.mp4"></video></p><p>平均分低于中位数，很标准的双峰分布</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420101118057.png" alt="image-20210420101118057"></p><hr><h1 id="推理统计"><a href="#推理统计" class="headerlink" title="推理统计"></a>推理统计</h1><h1 id="1-评估"><a href="#1-评估" class="headerlink" title="1.评估"></a>1.评估</h1><p>Estimation</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;描述性统计&quot;&gt;&lt;a href=&quot;#描述性统计&quot; class=&quot;headerlink&quot; title=&quot;描述性统计&quot;&gt;&lt;/a&gt;描述性统计&lt;/h1&gt;&lt;p&gt;这个还是太简单了&lt;/p&gt;
&lt;p&gt;先看概率导论吧&lt;/p&gt;
&lt;h1 id=&quot;1-入门&quot;&gt;&lt;a href=&quot;#1-入门&quot; </summary>
      
    
    
    
    <category term="math" scheme="https://darren-dong.com/categories/math/"/>
    
    
    <category term="statistics" scheme="https://darren-dong.com/tags/statistics/"/>
    
  </entry>
  
  <entry>
    <title>crawler</title>
    <link href="https://darren-dong.com/2021/04/10/crawler/"/>
    <id>https://darren-dong.com/2021/04/10/crawler/</id>
    <published>2021-04-10T08:34:23.000Z</published>
    <updated>2021-06-15T12:16:59.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景和配置"><a href="#背景和配置" class="headerlink" title="背景和配置"></a>背景和配置</h1><p>对大数据的获取，处理和分析，以及基于大数据的智能应用，已成为提高竞争力的关键因素</p><p>我们需要的数据大多源于各个网站，但是不同网站结构不一，布局复杂，渲染方式多样</p><p>有的网站还采取了一系列“反爬”，我们也需要针对的反制措施！</p><p>爬虫是服务机器学习和人工智能发展非常重要的技术！为其提供优质的数据</p><p>崔佬提供了多种安装python库的方式：</p><ul><li>pip/conda</li><li>wheel</li><li>去官网/github下载源码再安装</li></ul><p>爬虫可以简单分为：爬取页面，分析页面，存储数据</p><p><strong>请求库：</strong></p><ol><li><p>requests:  爬取html</p></li><li><p>Selenium  自动化测试，驱动浏览器执行某些（点击，下拉）操作，渗透JS渲染</p><p>但还要配置浏览器，此处用最好的ChromeDriver，先更新chrome</p><p>下载后直接放进环境的Scripts里面，或者单独设置环境变量</p></li><li><p>PhantomJS 无界面，可脚本编程的webkit浏览器引擎，被selenium弃用了，推荐chrome无界面模式</p></li><li><p>aiohttp  提供异步web服务，顺便安装cchardet aiodns</p></li></ol><p>下面装解析库，虽然提取信息方式多样，但写起来麻烦，不如强大的库，库还提供解析</p><p><strong>解析库：</strong></p><ol><li><p>lxml 解析HTML /XML  支持XPath解析方式，且效率非常高</p></li><li><p>beautiful soup 解析HTML /XML，可以很方便的提取数据，有强大的API和多样的解析方式</p></li><li><p>pyquery  提供了和jQuery类似的语法来解析HTML文档，还支持CSS选择器</p></li><li><p>tesserocr  通过OCR对抗验证码，是对<a href="https://github.com/UB-Mannheim/tesseract/wiki">tesseract</a>的再封装，先装后者</p><p>ps:(Optical Character Recognition 光学字符识别)扫描字符并转换成电子文本</p><p>一直失败。。。选择了替代的pytesseract</p></li></ol><p><strong>数据库</strong></p><p>关系型如SQLite  ,<strong>MySQL</strong>  ,Oracle   ,SQL Server  ,DB2     按表存储</p><p>非关系型如 <strong>MongoDB   Redis</strong>    键值对，更灵活</p><ol><li>MySQL  官网</li><li>mongodb懒得装了</li><li>redis还是装一下，还有可视化管理工具redis desktop manager</li></ol><p><strong>存储库</strong></p><p>用来和python交互，MySQL需要PyMySQL,  MongoDB需要PyMongo</p><p>我只下了PyMySQL</p><p><strong>web库</strong></p><p>搭建一些API接口供爬虫使用，比如维护一个代理池</p><ol><li>flask   轻量级web服务程序</li><li>tornado   支持异步的web框架</li></ol><p><strong>APP爬取库</strong></p><p>先不装了。。。</p><p>又是一堆。。。。还跟Android有关</p><p><strong>爬虫框架</strong></p><p>我们直接用requests , selenium等库写爬虫，当小型时很好，但写多了就有些麻烦和凌乱</p><p>上框架！这样我们只用关心爬取逻辑，而不是具体功能的实现！</p><ol><li><strong>pyspider  失败。。。</strong></li><li>Scrapy要配合splash和其python库  成功。。</li><li>scrapy-redius  成功。。</li></ol><p><strong>部署库</strong></p><ol><li><p>Docker  成功</p><p>容器技术，打包应用和环境，极大方便了应用服务的部署，</p></li><li><p>Scrapyd  部署和运行Scrapy的工具，针对linux，那没事了</p></li></ol><p>cao</p><p>没装的有：</p><p>tessorocr 图形识别码,有替代</p><p>mongodb 和配套的，。。希望别用这破玩意</p><p>app 爬取库  。。我吐了</p><p>scrapyd 部署工具。。应该用不着吧</p><p>pyspider bug  。。还早</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景和配置&quot;&gt;&lt;a href=&quot;#背景和配置&quot; class=&quot;headerlink&quot; title=&quot;背景和配置&quot;&gt;&lt;/a&gt;背景和配置&lt;/h1&gt;&lt;p&gt;对大数据的获取，处理和分析，以及基于大数据的智能应用，已成为提高竞争力的关键因素&lt;/p&gt;
&lt;p&gt;我们需要的数据大多源</summary>
      
    
    
    
    <category term="data" scheme="https://darren-dong.com/categories/data/"/>
    
    
    <category term="crawler" scheme="https://darren-dong.com/tags/crawler/"/>
    
  </entry>
  
  <entry>
    <title>matlab</title>
    <link href="https://darren-dong.com/2021/04/06/Matlab/"/>
    <id>https://darren-dong.com/2021/04/06/Matlab/</id>
    <published>2021-04-06T12:00:25.000Z</published>
    <updated>2021-06-15T12:15:16.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官网教程"><a href="#官网教程" class="headerlink" title="官网教程"></a>官网教程</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li>无需声明</li><li>save + filename+ var 保存工作区 (或某些变量)</li><li>clear 清空工作区   clc  清除命令行窗口</li><li>load + filename + var 加载工作区(或某些变量)</li><li><strong>加分号会不输出结果</strong>，直接输入变量名会输出变量</li><li>内置了一些常量，pi为Π，虽然显示四位，但内部用高精度存储</li><li>内置了一堆函数，如abs，eig（计算特征值）</li><li>直接转换为虚数，在运算出现时</li><li>format long 切换至高精度显示  format short 默认4位</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210408110030944.png" alt="image-20210408110030944"></p><p>类似jupyterbook 的模式，可以插入描述，右边可以改变输出显示模式</p><p>点击命令行，会自动高亮输出行</p><p>用section break功能分块，然后单独执行，会在输出中单独实时更改，不会影响其他块</p><p>在layout调布局，可同时使用脚本和命令行！</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>x = [1;3]  空格或逗号分隔组成行向量，用 ; 就是列向量，结合起来可以创建矩阵</p><p>numel(x)  显示x中的元素数目</p><p>用 ：创建等间距向量 ，中间那个指定间距</p><p>如果您知道向量中所需的元素数目（而不是每个元素之间的间距），则可以改用 <code>linspace</code> 函数：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">linspace</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span>last<span class="token punctuation">,</span>number_of_elements<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，请使用逗号 (<code>,</code>) 分隔 <code>linspace</code> 函数的输入。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>x <span class="token operator">=</span>     <span class="token number">0</span>    <span class="token number">0.250</span>    <span class="token number">0.500</span>    <span class="token number">0.750</span>    <span class="token number">1.000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>x’   为转置， x = x’  </p><hr><p>rand(2)  生成2*2随机数矩阵  （0-1）</p><p>rand (m,n)  生成 m*n</p><p>zeros(m,n)</p><p>size(x)  返回x的大小 是一个1x2矩阵，[m n]</p><hr><p>x(2) 索引用的是括号      x(m:n) 提取 m-n</p><p>对多行：x(m,n)提取  x(1,:) 第一行  x(:,3) 第三列</p><p>关键字：end</p><p>矩阵中的单项也允许算术运算，y = A(end-1,end-2)</p><p>如果对矩阵使用单索引，则从上至下遍历每列</p><p>可以用变量当作data的索引</p><hr><p>也可以结合使用冒号运算符</p><p>冒号运算符可以引用某个值范围。以下语法会创建一个包含矩阵 <code>A</code> 的第 1 行、第 2 行和第 3 行所有元素的矩阵。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个是1，而不是0</p><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>标量+数组，则数组的每一个元素都与该标量相加</p><p>等同大小的数组则可以直接相加</p><p>您可以将数组中的所有元素与某个标量相乘或相除。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">z <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>xy <span class="token operator">=</span> x<span class="token operator">/</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>max 求出最大项，接受两项则第二项为索引值<code>[vMax,ivMax] = max(v2)</code></p><p>round  四舍五入为整数</p><p>矩阵乘法 <code>*</code>   按元素相乘 <code>.*</code></p><p>如果列数为1和非1但是行数相等，也可以按元素乘，每行×对应标量</p><p>size(x)  返回x的大小 是一个1x2矩阵，[m n]，也可以分别接收<code>[dr,dc] = size(data)</code></p><p>如果只需函数的第二个输出，可以使用波浪号字符 (<code>~</code>) 忽略特定输出。[~,ivMax] = max(v2)</p><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><p>可以直接搜索函数哟！！</p><p>每个函数都有完整的支持文档，说明了所有用法</p><p>randi函数好多用法，一次成功！</p><p>第一个参数指定随机整数值  从一到指定数字  </p><p>您也可以使用 <code>doc</code> 函数打开文档。文档名就是函数名</p><h2 id="向量图"><a href="#向量图" class="headerlink" title="向量图"></a>向量图</h2><p>plot(x,y)绘制向量图，横向量和列向量对应项对应坐标</p><p>利用<a href="https://ww2.mathworks.cn/help/matlab/ref/linespec.html">文档</a>修改线条设定，参数任意顺序哟</p><p>使用hold on 命令保留之前的plot留下的痕迹</p><p>hold on 会启用保留模式，hold off 回到默认模式</p><p>当您单独绘制一个向量时，MATLAB 会使用向量值作为 y 轴数据，并将 x 轴数据的范围设置为从 <code>1</code> 到 <code>n</code>（向量中的元素数目）。</p><p><code>Line</code> 属性控制 <code>Line</code> 对象的外观和行为。通过更改属性值，您可以修改线图的某些方面。使用圆点表示法查询和设置属性。<a href="https://ww2.mathworks.cn/help/matlab/ref/matlab.graphics.chart.primitive.line-properties.html">https://ww2.mathworks.cn/help/matlab/ref/matlab.graphics.chart.primitive.line-properties.html</a></p><p><strong>MATLAB 中还有许多其他绘图函数。您可以在 <a href="https://www.mathworks.com/products/matlab/plot-gallery.html">MATLAB 图库</a>中看到一个详尽的列表。</strong></p><p>卧槽太强大了！matlab yyds</p><hr><p>title(“xx”)为现有绘图添加标签，此类函数的输入是一个字符串。MATLAB 中的字符串是用双引号 (<code>&quot;</code>) 引起来的。</p><p>字符串串联(“Sample “ + sample(3) + “ Data”)</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'t_&#123;seconds&#125;'</span><span class="token punctuation">)</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'e^t'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下标和上标的写法！</p><p>您可以使用 <code>legend</code> 函数为绘图添加图例。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">legend</span><span class="token punctuation">(</span>"a"<span class="token punctuation">,</span>"b"<span class="token punctuation">,</span>"c"<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>xlim([xmin xmax])放大并查看这部分， 使用输出窗格中的数据游标查看频率位置。<br><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/tooltip.gif" alt="img"></p><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>import dat</p><p>.mat 文件工作区保存的变量将被导入</p><p>图片的话<img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210408232359673.png" alt="image-20210408232359673" style="zoom:67%;" /></p><p>文本文件或者电子表格</p><p>因为有很多方式导入，这时会打开导入工具(import tools)</p><p>被导入的是蓝色区域，缺失数据是橙色，将会被默认替换为NaN</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210408232547731.png" alt="image-20210408232547731"></p><p>可以选择导出模式，表将导入一个变量，变量名参考文件名，标题会被识别成变量名</p><p>比如：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210408234720795.png" alt="image-20210408234720795"><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210408234728901.png" alt="image-20210408234728901"></p><p>您可以通过在实时脚本的输出窗格中点击表来与表进行交互。例如，您可以使用表的一个变量对表进行排序。<br>![img](<a href="https://matlabacademy-content.mathworks.com/4.26/R2020b/cn/content/Importing">https://matlabacademy-content.mathworks.com/4.26/R2020b/cn/content/Importing</a> Data/Importing Data as a Table/images/sorttablesmall.jpg)<br>在您对表感到满意时，您可以通过更新代码使更改永久化。<br>![img](<a href="https://matlabacademy-content.mathworks.com/4.26/R2020b/cn/content/Importing">https://matlabacademy-content.mathworks.com/4.26/R2020b/cn/content/Importing</a> Data/Importing Data as a Table/images/updatecodesmall.jpg)</p><p>这会在脚本里自动生成相应的代码</p><p>用变量和 : 提取表格，生成的变量仍是表格，<strong>即使单个，也是表格！</strong></p><h2 id="逻辑索引"><a href="#逻辑索引" class="headerlink" title="逻辑索引"></a>逻辑索引</h2><p>内置了布尔值系统，但这里类型是logical      <img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210408235343375.png" alt="image-20210408235343375"></p><p>您可以使用关系运算符将某个向量或矩阵与单个标量值进行比较。结果是与原始数组相同大小的逻辑数组。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">10</span> <span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">12</span>ans <span class="token operator">=</span>     <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>您可以使用逻辑数组作为数组索引，在这种情况下，MATLAB 会提取索引为 <code>true</code> 的数组元素。以下示例将会提取 <code>v1</code> 中大于 6 的所有元素。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">v <span class="token operator">=</span> <span class="token function">v1</span><span class="token punctuation">(</span>v1 <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span>v <span class="token operator">=</span>    <span class="token number">6.6678</span>    <span class="token number">9.0698</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>您可以使用逻辑索引在数组中重新赋值。例如，如果您要将数组 <code>x</code> 中等于 <code>999</code> 的所有值都替换为值 <code>1</code>，请使用以下语法。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">x</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">999</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的和和或是  <code>&amp;  |</code></p><h2 id="编程构造"><a href="#编程构造" class="headerlink" title="编程构造"></a>编程构造</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">if</span> xxxxxxxxxxxx<span class="token keyword">elseif</span> xxxxxxx<span class="token keyword">else</span>xxx<span class="token keyword">end</span>  <span class="token operator">/</span><span class="token operator">/</span>这些语言非得加个<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">for</span> 向量（有多个值）xxxxxxxxx<span class="token keyword">end</span><span class="token function">disp</span><span class="token punctuation">(</span>"done<span class="token punctuation">!</span>"<span class="token punctuation">)</span>  <span class="token operator">/</span><span class="token operator">/</span>display可还行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是如果只是简单的对向量进行处理，matlab提供了更简单的做法</p><p>比如点乘<code>.*</code>，比如<code>.^</code></p><p>length() 求长度 pause(second) 可以观察其生成过程，奇异值</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">基本语法示例说明x <span class="token operator">=</span> <span class="token keyword">pi</span>使用等号 <span class="token punctuation">(</span><span class="token operator">=</span><span class="token punctuation">)</span> 创建变量。左侧 <span class="token punctuation">(</span>x<span class="token punctuation">)</span> 是变量的名称，其值为右侧 <span class="token punctuation">(</span><span class="token keyword">pi</span><span class="token punctuation">)</span> 的值。y <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>您可以使用括号提供函数的输入。 桌面管理函数示例说明savesave data<span class="token punctuation">.</span>mat将当前工作区保存到 MAT 文件中。loadload data<span class="token punctuation">.</span>mat将 MAT 文件中的变量加载到工作区。clearclear清除工作区中的所有变量。clcclc清除命令行窗口中的所有文本。formatformat long更改数值输出的显示方式。 数组类型示例说明<span class="token number">4</span>标量<span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">5</span><span class="token punctuation">]</span>行向量<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">]</span>列向量<span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span><span class="token punctuation">]</span>矩阵 等间距向量示例说明<span class="token number">1</span><span class="token operator">:</span><span class="token number">4</span>使用冒号 <span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">)</span> 运算符，创建一个从 <span class="token number">1</span> 到 <span class="token number">4</span>，间距为 <span class="token number">1</span> 的向量。<span class="token number">1</span><span class="token operator">:</span><span class="token number">0.5</span><span class="token operator">:</span><span class="token number">4</span>创建一个从 <span class="token number">1</span> 到 <span class="token number">4</span>，间距为 <span class="token number">0.5</span> 的向量。<span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>创建一个包含 <span class="token number">5</span> 个元素的向量。这些值从 <span class="token number">1</span> 到 <span class="token number">10</span> 均匀间隔。 创建矩阵示例说明<span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>创建一个 <span class="token number">2</span> 行 <span class="token number">2</span> 列的方阵。<span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>创建一个 <span class="token number">2</span> 行 <span class="token number">3</span> 列的矩形矩阵。 索引示例说明<span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>访问最后一行的第二列中的元素。<span class="token function">A</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span>访问第二行所有元素。<span class="token function">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span>访问前三行的所有列。<span class="token function">A</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">11</span>将数组中第二个元素的值更改为 <span class="token number">11</span>。 数组运算示例说明<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">]</span>ans <span class="token operator">=</span>     <span class="token number">4</span>    <span class="token number">4</span>     <span class="token number">4</span>    <span class="token number">4</span>执行矩阵乘法。<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">.*</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">]</span>ans <span class="token operator">=</span>     <span class="token number">2</span>    <span class="token number">2</span>     <span class="token number">2</span>    <span class="token number">2</span>执行按元素乘法。 多个输出示例说明<span class="token punctuation">[</span>xrow<span class="token punctuation">,</span>xcol<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>将 x 中的行数和列数保存为两个不同变量。<span class="token punctuation">[</span>xMax<span class="token punctuation">,</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>计算 x 的最大值及其对应的索引值。 文档示例说明doc randi打开 randi 函数的文档页。 绘图示例说明<span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>"ro<span class="token operator">-</span>"<span class="token punctuation">,</span>"LineWidth"<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>绘制一条红色 <span class="token punctuation">(</span>r<span class="token punctuation">)</span> 虚线 <span class="token punctuation">(</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">)</span>并使用圆圈 <span class="token punctuation">(</span>o<span class="token punctuation">)</span> 标记，线宽很大。hold on在现有绘图中新增一行。hold off为下一个绘图线条创建一个新坐标区。<span class="token function">title</span><span class="token punctuation">(</span>"My Title"<span class="token punctuation">)</span>为绘图添加标签。 使用表示例说明data<span class="token punctuation">.</span>HeightYards从表 data 中提取变量 HeightYards。data<span class="token punctuation">.</span>HeightMeters <span class="token operator">=</span> data<span class="token punctuation">.</span>HeightYards<span class="token operator">*</span><span class="token number">0.9144</span>从现有数据中派生一个表变量。 逻辑运算示例说明<span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">10</span> <span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">12</span>将向量与值 <span class="token number">12</span> 进行比较。<span class="token function">v1</span><span class="token punctuation">(</span>v1 <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span>提取 v1 中大于 <span class="token number">6</span> 的所有元素。<span class="token function">x</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">999</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>用值 <span class="token number">1</span> 替换 x 中等于 <span class="token number">999</span> 的所有值。 编程示例说明<span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">0.5</span>    y <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">else</span>    y <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">end</span>如果 x 大于 <span class="token number">0.5</span>，则将 y 的值设置为 <span class="token number">3</span>。否则，将 y 的值设置为 <span class="token number">4</span>。<span class="token keyword">for</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span>    <span class="token function">disp</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">end</span>循环计数器 <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 遍历值 <span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span>（<span class="token number">1</span>、<span class="token number">2</span> 和 <span class="token number">3</span>）。循环体显示 c 的每个值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="大佬教程"><a href="#大佬教程" class="headerlink" title="大佬教程"></a>大佬教程</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210409091948941.png" alt="image-20210409091948941"></p><p>先看完前五节基础必看！后面是选学</p><h2 id="基本操作和矩阵输入"><a href="#基本操作和矩阵输入" class="headerlink" title="基本操作和矩阵输入"></a>基本操作和矩阵输入</h2><p>第一步，把matlab当作基本的计算机</p><p>第二部，利用matlab进行矩阵运算</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;官网教程&quot;&gt;&lt;a href=&quot;#官网教程&quot; class=&quot;headerlink&quot; title=&quot;官网教程&quot;&gt;&lt;/a&gt;官网教程&lt;/h1&gt;&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h</summary>
      
    
    
    
    <category term="data" scheme="https://darren-dong.com/categories/data/"/>
    
    
    <category term="matlab" scheme="https://darren-dong.com/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>算法1:KMP</title>
    <link href="https://darren-dong.com/2021/04/06/%E7%AE%97%E6%B3%951%EF%BC%9ATMP/"/>
    <id>https://darren-dong.com/2021/04/06/%E7%AE%97%E6%B3%951%EF%BC%9ATMP/</id>
    <published>2021-04-06T11:13:12.000Z</published>
    <updated>2021-06-15T12:41:36.251Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="算法1：KMP"><a href="#算法1：KMP" class="headerlink" title="算法1：KMP"></a>算法1：KMP</h1><h2 id="宏观理解"><a href="#宏观理解" class="headerlink" title="宏观理解"></a>宏观理解</h2><p>KMP能够优化查询，比起暴力主要优化在两点：一是略去了目标字符串的回溯，二是优化了模式字符串的回溯效率，这都是基于前后缀表来实现的。前后缀表的实现有3种以上方法，我学的是整体右移那种，但是其实这只会导致细微的差距。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>获取前缀表：</p><p>初始化时使后缀表与前缀表错开一位（-1 和 0）</p><p>由于数学规律，在求解某项的next值时，若所有项一一对应，则k一直++，这是最顺利的情况</p><p>但是当某项不匹配时，要通过回退来试图找到稍小的字符串来与开头字符串比较。</p><p>此时把开头字符串通过next表回退一次，这时相当于是找上一个对应好的k，这个k是上一组对应好的前缀组和后缀组，此时肯定大于当前的，这里用到了递归的思想。。因为一组一组都是配好的，发生不匹配的情况时，就往已经匹配好的地方回退。</p><p>需要注意的是，不知道为啥老是想到对称上去。。他这个是前后顺序相同（感觉这样说好蠢），但就是会犯错。。和对称得出的规律差距挺大的</p><p>不管啦就这样吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;算法1：KMP&quot;&gt;&lt;a href=&quot;#算法1：KMP&quot; class=&quot;headerlink&quot; title=&quot;算法1：KMP&quot;&gt;&lt;/a&gt;算法1：KMP&lt;/h1&gt;&lt;h2 id=&quot;宏观理解&quot;&gt;&lt;a href=&quot;#宏观理解&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="algorithm" scheme="https://darren-dong.com/categories/algorithm/"/>
    
    
    <category term="KMP" scheme="https://darren-dong.com/tags/KMP/"/>
    
  </entry>
  
</feed>

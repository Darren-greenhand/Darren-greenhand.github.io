<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浮华一隅</title>
  
  <subtitle>See more, see further.      own the courage to change, be willing to challenge</subtitle>
  <link href="https://darren-dong.com/atom.xml" rel="self"/>
  
  <link href="https://darren-dong.com/"/>
  <updated>2021-05-03T15:32:28.865Z</updated>
  <id>https://darren-dong.com/</id>
  
  <author>
    <name>Darren</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sklearn-application.md</title>
    <link href="https://darren-dong.com/2021/05/03/sklearn-application/"/>
    <id>https://darren-dong.com/2021/05/03/sklearn-application/</id>
    <published>2021-05-03T15:02:08.000Z</published>
    <updated>2021-05-03T15:32:28.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Copy一下大佬的总结！</p><p><a href="https://blog.csdn.net/weixin_42186072/article/details/106669979">https://blog.csdn.net/weixin_42186072/article/details/106669979</a></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155209.png" alt="课程概览"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155220.png" alt="引入"></p><h2 id="人工智能三学派"><a href="#人工智能三学派" class="headerlink" title="人工智能三学派"></a>人工智能三学派</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426224228.png" alt="image-20210426224227762"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/20210426222525.png" alt="image-20210426222525560"></p><p>那么仿制过程就像这样：</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/20210426222631.png" alt="image-20210426222631384"></p><h2 id="鸢尾花1"><a href="#鸢尾花1" class="headerlink" title="鸢尾花1"></a>鸢尾花1</h2><p>专家系统是理性的。（if case。）</p><p>但是有些花农直接可以看出种类，因为他们见了太多，而且经验越丰富，识别准确率越高</p><p>这是一种感性的直觉，是这门课介绍的神经网络方法</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/20210426223114.png" alt="image-20210426223114751"></p><hr><p>具体实现</p><p>MP模型，每个输入特征乘以线上的权重，再通过一个非线性函数输出，简化是去掉非线性函数</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426224043.png" alt="image-20210426224042748"></p><p>每个输出节点都链接了所有的输入关系，称为全连接网络</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426224129.png" alt="image-20210426224129109"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426224149.png" alt="image-20210426224149049"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426224534.png" alt="image-20210426224533641"></p><p>看一个例子</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426225106.png" alt="image-20210426225106282"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426225453.png" alt="image-20210426225453483"></p><p>好神奇！原来这么简单</p><h2 id="TF2"><a href="#TF2" class="headerlink" title="TF2"></a>TF2</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426225602.png" alt="image-20210426225602306"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426225705.png" alt="image-20210426225704756"></p><p>数据类型：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426225810.png" alt="image-20210426225810424"></p><h3 id="创建张量"><a href="#创建张量" class="headerlink" title="创建张量"></a>创建张量</h3><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426230148.png" alt="image-20210426230148638"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426230237.png" alt="image-20210426230237443"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426230355.png" alt="image-20210426230355041"></p><p>比如这个a的shape：第一个维度有俩元素，第二个维度有仨元素</p><p>正态：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426230717.png" alt="image-20210426230717430"></p><p>均匀：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426230844.png" alt="image-20210426230843745"></p><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155247.png" alt="在这里插入图片描述"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155255.png" alt="在这里插入图片描述"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426231026.png" alt="image-20210426231025877"></p><p>axis = n 则表示处理n+1维的</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426231330.png" alt="image-20210426231330288"></p><p>所以tensorflow里的向量是列向量！</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426231940.png" alt="image-20210426231939729"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426232546.png" alt="image-20210426232546124"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426232612.png" alt="image-20210426232612177"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426232638.png" alt="image-20210426232638470"></p><p><strong>配对特征和标签：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426232859.png" alt="image-20210426232859750"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426233027.png" alt="image-20210426233027400"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426233321.png" alt="image-20210426233321529"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426233504.png" alt="image-20210426233504518"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426233858.png" alt="image-20210426233858363"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426234107.png" alt="image-20210426234106875"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426234243.png" alt="image-20210426234242794"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426234353.png" alt="image-20210426234352747"></p><p> 归一化：１）把数据变成(０，１)或者（1,1）之间的小数。主要是为了数据处理方便提出来的，把数据映射到0～1范围之内处理，更加便捷快速。２）把有量纲表达式变成无量纲表达式，便于不同单位或量级的指标能够进行比较和加权。归一化是一种简化计算的方式，即将有量纲的表达式，经过变换，化为无量纲的表达式，成为纯量。归一化/标准化实质是一种线性变换，线性变换有很多良好的性质，这些性质决定了对数据改变后不会造成“失效”，反而能提高数据的表现，这些性质是归一化/标准化的前提。比如有一个很重要的性质：线性变换不会改变原始数据的数值排序。</p><p><a href="https://www.jianshu.com/p/95a8f035c86c">大佬链接</a></p><p>参数自更新</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426234507.png" alt="image-20210426234507351"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426234621.png" alt="image-20210426234621653"></p><h2 id="鸢尾花2"><a href="#鸢尾花2" class="headerlink" title="鸢尾花2"></a>鸢尾花2</h2><h3 id="数据读入"><a href="#数据读入" class="headerlink" title="数据读入"></a>数据读入</h3><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426235316.png" alt="image-20210426235316370"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426235340.png" alt="image-20210426235340183"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426235530.png" alt="image-20210426235530705"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427092516.png" alt="image-20210427092508918"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427093046.png" alt="image-20210427093045917"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427093447.png" alt="image-20210427093446319"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427093705.png" alt="image-20210427093704998"></p><h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155310.png" alt="第二章"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427094602.png" alt="image-20210427094601274"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427095155.png" alt="image-20210427095154111"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427095313.png" alt="image-20210427095312159"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427095555.png" alt="image-20210427095554858"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427095925.png" alt="image-20210427095924361"></p><h2 id="复杂度学习率"><a href="#复杂度学习率" class="headerlink" title="复杂度学习率"></a>复杂度学习率</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427132521.png" alt="image-20210427132521189"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427132837.png" alt="image-20210427132837285"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427132843.png" alt="image-20210427132843385"></p><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427190842.png" alt="image-20210427190841912"></p><p>从此神经网络可以随层数的增加提示表达能力了</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427191332.png" alt="image-20210427191331703"></p><h3 id="常见激活函数"><a href="#常见激活函数" class="headerlink" title="常见激活函数"></a>常见激活函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427191556.png" alt="image-20210427191555569"></p><p>因为从输出层向输入层逐层求导，每一层的导数都落在0-0.25，多了以后趋于0，称为梯度消失</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427191737.png" alt="image-20210427191736628"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427192058.png" alt="image-20210427192057509"></p><p>通过调整初始化来避免“神经元死亡”，可以设置更小的学习率，减少参数分布的巨大变化，来👆</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427192342.png" alt="image-20210427192341285"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427192420.png" alt="image-20210427192419591"></p><p>对零均值化的解释：</p><p><a href="https://blog.csdn.net/wtrnash/article/details/87893725">https://blog.csdn.net/wtrnash/article/details/87893725</a></p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427194702.png" alt="image-20210427194701731"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427200949.png" alt="image-20210427200948436"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427201314.png" alt="image-20210427201313381"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427201845.png" alt="image-20210427201844108"></p><h2 id="欠拟合和过拟合"><a href="#欠拟合和过拟合" class="headerlink" title="欠拟合和过拟合"></a>欠拟合和过拟合</h2><p>欠拟合是对现有数据集学习的不太彻底，拟合效果不好</p><p>过拟合是对现有数据拟合的太好，却对新数据难以处理</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427202023.png" alt="image-20210427202022905"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427202203.png" alt="image-20210427202203477"></p><p>ps：</p><p>在机器学习的<a href="https://baike.baidu.com/item/%E4%B8%8A%E4%B8%8B%E6%96%87">上下文</a>中，超参数是在开始学习过程之前设置值的参数。 相反，其他参数的值通过训练得出。</p><p>超参数：</p><ul><li>定义关于模型的更高层次的概念，如复杂性或学习能力。</li><li>不能直接从标准模型培训过程中的数据中学习，需要预先定义。</li><li>可以通过设置不同的值，训练不同的模型和选择更好的测试值来决定</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427202855.png" alt="image-20210427202854377"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427203023.png" alt="image-20210427203022383"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427204015.png" alt="image-20210427204014435"></p><p>把区分0和1的分界线0.5标出颜色</p><h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><p>神经网络参数优化器</p><p>当<strong>网络结构固定后</strong>（达到学龄的孩子脑结构大致相仿），不同参数的选取（不同的引导方法）对模型的表达力影响很大，（成年达到高度不同）</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212011.png" alt="image-20210427212002917"></p><h3 id="常用的优化器"><a href="#常用的优化器" class="headerlink" title="常用的优化器"></a>常用的优化器</h3><p>gt是梯度</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212319.png" alt="image-20210427212319347"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212651.png" alt="image-20210427212650534"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212820.png" alt="image-20210427212819603"></p><hr><p>通过增加了一个二阶动量</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212903.png" alt="image-20210427212902304"></p><p>移动平均-&gt;指数滑动平均：</p><p>指数平滑法是在<a href="https://baike.baidu.com/item/%E7%A7%BB%E5%8A%A8%E5%B9%B3%E5%9D%87%E6%B3%95/10785547">移动平均法</a>基础上发展起来的，它具有移动平均法的优点，又可以减少运算过程中的数据储存量，同时还考虑了不同时期的数据所起的不同作用。采用指数平滑法的关键是确定α值。一般情况下，α值的大小，既和反映近期数据的能力有关，也和数据波动状况有关。通常不直接利用一次指数平滑法来预测，而是利用二次指数平滑法，求出平滑系数，建立起预测模型，再进行预测</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427213327.png" alt="image-20210427213326655"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427213358.png" alt="image-20210427213357398"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427213417.png" alt="image-20210427213415984"></p><h1 id="八股文！"><a href="#八股文！" class="headerlink" title="八股文！"></a>八股文！</h1><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155317.png" alt="第三章"></p><p>使用keras搭建</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427213648.png" alt="image-20210427213647692"></p><h2 id="Sequential"><a href="#Sequential" class="headerlink" title="Sequential"></a>Sequential</h2><p>六步：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155521.png" alt="image-20210428155453398"></p><p><strong>导入，设定训练、测试集，前向传播，配置训练方法，执行训练过程，打印网络结构和参数统计</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155749.png" alt="image-20210428155635348"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155802.png" alt="image-20210428155713205"></p><p>入门先写名字，牛逼了再去官网查看函数用法，调整超参数</p><p>注意from_logits判断是否经过了概率分布，后面经常使用sparse_categorical_accuracy</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428160240.png" alt="image-20210428160225553"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428161322.png" alt="image-20210428160233012"></p><p>其中设置图形级随机数可以看这个：</p><p><a href="https://zhuanlan.zhihu.com/p/109238035?from_voters_page=true">https://zhuanlan.zhihu.com/p/109238035?from_voters_page=true</a></p><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428172612.png" alt="image-20210428162339160"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428172607.png" alt="image-20210428162646672"></p><p>param = (输入+1)*输出    1是因为bias(偏差？)</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428170337.png" alt="image-20210428170337212"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Copy一下大佬的总结！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_42186072/art</summary>
      
    
    
    
    <category term="ML" scheme="https://darren-dong.com/categories/ML/"/>
    
    
  </entry>
  
  <entry>
    <title>tensorflow-note</title>
    <link href="https://darren-dong.com/2021/04/26/tensorflow-note/"/>
    <id>https://darren-dong.com/2021/04/26/tensorflow-note/</id>
    <published>2021-04-26T14:02:08.000Z</published>
    <updated>2021-04-28T09:26:15.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Copy一下大佬的总结！</p><p><a href="https://blog.csdn.net/weixin_42186072/article/details/106669979">https://blog.csdn.net/weixin_42186072/article/details/106669979</a></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155209.png" alt="课程概览"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155220.png" alt="引入"></p><h2 id="人工智能三学派"><a href="#人工智能三学派" class="headerlink" title="人工智能三学派"></a>人工智能三学派</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426224228.png" alt="image-20210426224227762"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/20210426222525.png" alt="image-20210426222525560"></p><p>那么仿制过程就像这样：</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/20210426222631.png" alt="image-20210426222631384"></p><h2 id="鸢尾花1"><a href="#鸢尾花1" class="headerlink" title="鸢尾花1"></a>鸢尾花1</h2><p>专家系统是理性的。（if case。）</p><p>但是有些花农直接可以看出种类，因为他们见了太多，而且经验越丰富，识别准确率越高</p><p>这是一种感性的直觉，是这门课介绍的神经网络方法</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/20210426223114.png" alt="image-20210426223114751"></p><hr><p>具体实现</p><p>MP模型，每个输入特征乘以线上的权重，再通过一个非线性函数输出，简化是去掉非线性函数</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426224043.png" alt="image-20210426224042748"></p><p>每个输出节点都链接了所有的输入关系，称为全连接网络</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426224129.png" alt="image-20210426224129109"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426224149.png" alt="image-20210426224149049"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426224534.png" alt="image-20210426224533641"></p><p>看一个例子</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426225106.png" alt="image-20210426225106282"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426225453.png" alt="image-20210426225453483"></p><p>好神奇！原来这么简单</p><h2 id="TF2"><a href="#TF2" class="headerlink" title="TF2"></a>TF2</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426225602.png" alt="image-20210426225602306"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426225705.png" alt="image-20210426225704756"></p><p>数据类型：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426225810.png" alt="image-20210426225810424"></p><h3 id="创建张量"><a href="#创建张量" class="headerlink" title="创建张量"></a>创建张量</h3><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426230148.png" alt="image-20210426230148638"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426230237.png" alt="image-20210426230237443"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426230355.png" alt="image-20210426230355041"></p><p>比如这个a的shape：第一个维度有俩元素，第二个维度有仨元素</p><p>正态：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426230717.png" alt="image-20210426230717430"></p><p>均匀：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426230844.png" alt="image-20210426230843745"></p><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155247.png" alt="在这里插入图片描述"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155255.png" alt="在这里插入图片描述"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426231026.png" alt="image-20210426231025877"></p><p>axis = n 则表示处理n+1维的</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426231330.png" alt="image-20210426231330288"></p><p>所以tensorflow里的向量是列向量！</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426231940.png" alt="image-20210426231939729"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426232546.png" alt="image-20210426232546124"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426232612.png" alt="image-20210426232612177"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426232638.png" alt="image-20210426232638470"></p><p><strong>配对特征和标签：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426232859.png" alt="image-20210426232859750"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426233027.png" alt="image-20210426233027400"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426233321.png" alt="image-20210426233321529"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426233504.png" alt="image-20210426233504518"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426233858.png" alt="image-20210426233858363"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426234107.png" alt="image-20210426234106875"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426234243.png" alt="image-20210426234242794"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426234353.png" alt="image-20210426234352747"></p><p> 归一化：１）把数据变成(０，１)或者（1,1）之间的小数。主要是为了数据处理方便提出来的，把数据映射到0～1范围之内处理，更加便捷快速。２）把有量纲表达式变成无量纲表达式，便于不同单位或量级的指标能够进行比较和加权。归一化是一种简化计算的方式，即将有量纲的表达式，经过变换，化为无量纲的表达式，成为纯量。归一化/标准化实质是一种线性变换，线性变换有很多良好的性质，这些性质决定了对数据改变后不会造成“失效”，反而能提高数据的表现，这些性质是归一化/标准化的前提。比如有一个很重要的性质：线性变换不会改变原始数据的数值排序。</p><p><a href="https://www.jianshu.com/p/95a8f035c86c">大佬链接</a></p><p>参数自更新</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426234507.png" alt="image-20210426234507351"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426234621.png" alt="image-20210426234621653"></p><h2 id="鸢尾花2"><a href="#鸢尾花2" class="headerlink" title="鸢尾花2"></a>鸢尾花2</h2><h3 id="数据读入"><a href="#数据读入" class="headerlink" title="数据读入"></a>数据读入</h3><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426235316.png" alt="image-20210426235316370"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426235340.png" alt="image-20210426235340183"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426235530.png" alt="image-20210426235530705"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427092516.png" alt="image-20210427092508918"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427093046.png" alt="image-20210427093045917"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427093447.png" alt="image-20210427093446319"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427093705.png" alt="image-20210427093704998"></p><h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155310.png" alt="第二章"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427094602.png" alt="image-20210427094601274"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427095155.png" alt="image-20210427095154111"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427095313.png" alt="image-20210427095312159"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427095555.png" alt="image-20210427095554858"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427095925.png" alt="image-20210427095924361"></p><h2 id="复杂度学习率"><a href="#复杂度学习率" class="headerlink" title="复杂度学习率"></a>复杂度学习率</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427132521.png" alt="image-20210427132521189"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427132837.png" alt="image-20210427132837285"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427132843.png" alt="image-20210427132843385"></p><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427190842.png" alt="image-20210427190841912"></p><p>从此神经网络可以随层数的增加提示表达能力了</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427191332.png" alt="image-20210427191331703"></p><h3 id="常见激活函数"><a href="#常见激活函数" class="headerlink" title="常见激活函数"></a>常见激活函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427191556.png" alt="image-20210427191555569"></p><p>因为从输出层向输入层逐层求导，每一层的导数都落在0-0.25，多了以后趋于0，称为梯度消失</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427191737.png" alt="image-20210427191736628"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427192058.png" alt="image-20210427192057509"></p><p>通过调整初始化来避免“神经元死亡”，可以设置更小的学习率，减少参数分布的巨大变化，来👆</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427192342.png" alt="image-20210427192341285"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427192420.png" alt="image-20210427192419591"></p><p>对零均值化的解释：</p><p><a href="https://blog.csdn.net/wtrnash/article/details/87893725">https://blog.csdn.net/wtrnash/article/details/87893725</a></p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427194702.png" alt="image-20210427194701731"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427200949.png" alt="image-20210427200948436"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427201314.png" alt="image-20210427201313381"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427201845.png" alt="image-20210427201844108"></p><h2 id="欠拟合和过拟合"><a href="#欠拟合和过拟合" class="headerlink" title="欠拟合和过拟合"></a>欠拟合和过拟合</h2><p>欠拟合是对现有数据集学习的不太彻底，拟合效果不好</p><p>过拟合是对现有数据拟合的太好，却对新数据难以处理</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427202023.png" alt="image-20210427202022905"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427202203.png" alt="image-20210427202203477"></p><p>ps：</p><p>在机器学习的<a href="https://baike.baidu.com/item/%E4%B8%8A%E4%B8%8B%E6%96%87">上下文</a>中，超参数是在开始学习过程之前设置值的参数。 相反，其他参数的值通过训练得出。</p><p>超参数：</p><ul><li>定义关于模型的更高层次的概念，如复杂性或学习能力。</li><li>不能直接从标准模型培训过程中的数据中学习，需要预先定义。</li><li>可以通过设置不同的值，训练不同的模型和选择更好的测试值来决定</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427202855.png" alt="image-20210427202854377"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427203023.png" alt="image-20210427203022383"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427204015.png" alt="image-20210427204014435"></p><p>把区分0和1的分界线0.5标出颜色</p><h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><p>神经网络参数优化器</p><p>当<strong>网络结构固定后</strong>（达到学龄的孩子脑结构大致相仿），不同参数的选取（不同的引导方法）对模型的表达力影响很大，（成年达到高度不同）</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212011.png" alt="image-20210427212002917"></p><h3 id="常用的优化器"><a href="#常用的优化器" class="headerlink" title="常用的优化器"></a>常用的优化器</h3><p>gt是梯度</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212319.png" alt="image-20210427212319347"></p><hr><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212651.png" alt="image-20210427212650534"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212820.png" alt="image-20210427212819603"></p><hr><p>通过增加了一个二阶动量</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212903.png" alt="image-20210427212902304"></p><p>移动平均-&gt;指数滑动平均：</p><p>指数平滑法是在<a href="https://baike.baidu.com/item/%E7%A7%BB%E5%8A%A8%E5%B9%B3%E5%9D%87%E6%B3%95/10785547">移动平均法</a>基础上发展起来的，它具有移动平均法的优点，又可以减少运算过程中的数据储存量，同时还考虑了不同时期的数据所起的不同作用。采用指数平滑法的关键是确定α值。一般情况下，α值的大小，既和反映近期数据的能力有关，也和数据波动状况有关。通常不直接利用一次指数平滑法来预测，而是利用二次指数平滑法，求出平滑系数，建立起预测模型，再进行预测</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427213327.png" alt="image-20210427213326655"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427213358.png" alt="image-20210427213357398"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427213417.png" alt="image-20210427213415984"></p><h1 id="八股文！"><a href="#八股文！" class="headerlink" title="八股文！"></a>八股文！</h1><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155317.png" alt="第三章"></p><p>使用keras搭建</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427213648.png" alt="image-20210427213647692"></p><h2 id="Sequential"><a href="#Sequential" class="headerlink" title="Sequential"></a>Sequential</h2><p>六步：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155521.png" alt="image-20210428155453398"></p><p><strong>导入，设定训练、测试集，前向传播，配置训练方法，执行训练过程，打印网络结构和参数统计</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155749.png" alt="image-20210428155635348"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155802.png" alt="image-20210428155713205"></p><p>入门先写名字，牛逼了再去官网查看函数用法，调整超参数</p><p>注意from_logits判断是否经过了概率分布，后面经常使用sparse_categorical_accuracy</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428160240.png" alt="image-20210428160225553"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428161322.png" alt="image-20210428160233012"></p><p>其中设置图形级随机数可以看这个：</p><p><a href="https://zhuanlan.zhihu.com/p/109238035?from_voters_page=true">https://zhuanlan.zhihu.com/p/109238035?from_voters_page=true</a></p><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428172612.png" alt="image-20210428162339160"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428172607.png" alt="image-20210428162646672"></p><p>param = (输入+1)*输出    1是因为bias(偏差？)</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428170337.png" alt="image-20210428170337212"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Copy一下大佬的总结！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_42186072/art</summary>
      
    
    
    
    <category term="ML" scheme="https://darren-dong.com/categories/ML/"/>
    
    
  </entry>
  
  <entry>
    <title>第二次数模</title>
    <link href="https://darren-dong.com/2021/04/18/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%95%B0%E6%A8%A1/"/>
    <id>https://darren-dong.com/2021/04/18/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%95%B0%E6%A8%A1/</id>
    <published>2021-04-17T16:25:21.000Z</published>
    <updated>2021-04-18T13:41:20.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大一下新生赛"><a href="#大一下新生赛" class="headerlink" title="大一下新生赛"></a>大一下新生赛</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>​        4.16-4.18日，数模新生赛开赛，这是我参加的第二次数模，也是某博，某锐俩巨佬参加的第一次数模。这次数模过程和理想过程仍有较大差距，在第二天晚上，暂时起不到作用（可能有作用但是不知道。。），我开始在两位辛勤的巨佬面前写起了日记。</p><h2 id="赛前准备"><a href="#赛前准备" class="headerlink" title="赛前准备"></a>赛前准备</h2><p>​        这次赛前准备。。。非常不理想，主要是临时起意打数模，并且沉迷学习线代和机器学习前置数学知识等，再加上蓝桥杯和数据结构作业带来的压力，导致准备非常不充分，在赛前一晚上疯狂准备，恶补了数模的一些概念，准备了一些画图软件以供使用。并没有提前学习其他的数学建模知识。</p><h2 id="开赛"><a href="#开赛" class="headerlink" title="开赛"></a>开赛</h2><h3 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h3><p>​        被某博骗去考了个假的蓝桥杯，明明是星期天才考淦，但是因此翘掉了早上的体育课嘿嘿，因祸得福。。。吧，早上花了3个小时分析题目，但是这里太急了，发生了 <strong>第一个错误：没有逐字逐句的分析题目</strong>，数模题目中，由于许多概念都不熟悉，一不小心就离题千里，就像本次数模发生了好几次纠正理解偏差，一定要真正读懂题意！！</p><p>​        博找了个超好的地方，物质条件远胜酒店，而且各种条件超级方便，这为后面三天的爆肝和肆意讨论提供了非常棒的场所支持，果然。。生活中总是藏着一些不为人见的好地方哈哈。。。</p><p>​        见面后，三个人很快进入状态，开始各抒己见，但是都得出了大致一致的结论，而且受我上午找的资料带来的影响很深（我的锅嘤嘤嘤），一开始都跑偏了，而且这里团队也出现了一个问题，就是<strong>揪住了某个点</strong>，比如那个宕机是啥不放，这样子大概浪费了30分钟，所幸。。。吃过上次的亏，即使止住了，嘿嘿还好队友很棒，没有上次那么咳咳。。</p><p>​        然后我们从头开始梳理题意，一开始就发现一堆概念不会。。啥负载啊，什么什么的，这个时候其实有一个小错误：就是<strong>不了解数模规则</strong>，开始准备随意设变量，这就跟我上次一样哈哈:joy:，这次还好我有一点点经验，不然会浪费很多时间，这确实提醒，一定要熟悉比赛的规则，有方向的用力！还有讨论过程中好几次陷入某个牛角尖，偏离主线，不过这个问题马上就被众人杜绝了，这就是大佬的学习能力嘛，可怕:man_shrugging:，还好是队友哈哈，下次打数模肯定不会这么被动了。</p><p>​        开始我们关注点放在云计算上，找了一堆“调度算法”，静态的，动态的，想着是找一个能够满足约束条件的现实模型，然后对他选择一个算法，比如启发式算法啊，巴拉巴拉的，结果弄了半天，甚至拉上了xxx，分析头疼到晚上八点，然后。。。我从头看题的时候tm的灵光一现。。这个第一句话。。。“并行计算”，tm的是个这么大的方向！所以，<strong>一定要细读题目，确保真正理解题意</strong>，我全国一卷130的语文，阅读题从来都是接近满分，就这还被坑了好久，而且后面第二句也是个被忽略的点好像。切记啊！！！</p><p>​        晚上，我犯了个打错。。就是“偷懒”，我感觉三个人一起想有些浪费，而队伍里没有会写论文的人！！！然后我当时挺慌，就马上临时抱佛脚，开始找了个b站好点的教程开始啃格式和写作要求，虽然读完发现真的很重要，但是这本来是可以避免的，这也导致我错过了他们的思路，后来的分析从3个人变成了2个人，我只能提供技术支持，还有准备本不应该在建模时准备的模板啥的。。第一天比正常效率低很多，一方面是因为上午下午都有一些事情，如果是正规比赛，<strong>绝对要提前做好准备</strong>，不过我们不至于请假哈哈QWQ。</p><h3 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h3><p>​        八点起床嘿嘿嘿，果然还是没有太大的压力，聚在一起以后大家又开始继续一些错误的思路，但是少了一位神秘大佬的帮助QWQ，我仍是尽量借助自己辛勤经营了大半年的信息搜索系统，尽量帮大佬们准备资料，然后就是努力啃教程，这部分主要是他们俩讨论，研究，下午的时候。。。大家心态都炸了，我因为连续看了6，7小时教程好恶心，他们也是长期的高速思考，而且中途不断推翻，假设新模型，这个他们是真辛苦，我大概受不了:cry:。</p><p>​        然后下午大概四点有一段时间挺浮躁的，还好不久，而且有了一个突破，于是还是熬过去了，五点就赶紧去吃饭缓解一下，干饭的时候交流了一下，其实我们仨可以组一个长期队伍，队伍里仨，应该说是各有特色，而且智商都不戳，理解能力和沟通能力都挺好（外联每月之星带带我吧QWQ）。</p><p>​        <em>我应该算是那种不喜欢钻研，喜欢寻找各种各样方便的工具（有兴趣找我拿噢，各种功能的小软件，小网站，还有很多领域的最佳学习路线我都有。。。吧），而且了解很多各个领域，但是都是一知半解，而且英语还不戳，高中英语挺好，四级660，语文也行，不如以后向写论文和制作图片，爬虫收集数据，辅助方向发展。。但是不能拉下基本知识学习</em></p><p>​        <em>锐佬很强，他的电脑让我一言难尽。。。只能说基本配废了（和我同款），不过他啃问题是真的强，看论文也看得下去，不像我。。神马鬼论文，看十几篇就快死了（每篇都是浏览大意然后甩给队友嘿嘿），这样的特点是真的强，不过锐佬感觉比较适合钻研某个问题，而不是总结方向。</em></p><p>​        <em>博佬也很强，感觉是我们俩的综合版嘛，电脑还不戳，好歹不会像大部分的电脑一样被我嫌弃。。。智商也很高，能和锐佬一起讨论，并提出很多建设性的意见，流弊！！！而且会的小工具啥的也挺多的，不戳不戳，以后不愁找不到女朋友。。。啊不是偏题了。</em></p><p>​        <em>个人感觉以后分工可以是：三个人读题，然后一起弄清楚概念，我尽量帮助他们提供资料和工具，图片上的支援（跑腿买奶茶也行O(∩_∩)O），然后三个人开始建模，先确定正确的方向，然后开始现场学习相关理论，（主要靠锐佬和博佬），然后建模！这个还得学公式的使用，不过我买了Axmath永久的，到时候看看怎么分任务，最后开始写论文，如果是美赛，我可以直接查谷歌翻译敲，国赛我就尽量在他们肝的时候写一些内容比如问题分析，重述啥的。大概设想吧只是。。。</em></p><p>​        周二晚上，仍然讨论到九点才开始写论文，这时我也基本了解了工具和写法，并写了个总结快速给他们介绍了一下，然后写出了问题重述和大致模板，他俩也肝出了（好苦啊。。我看的都苦，一点一点的挤出了）问题分析，中途还出了几个让人心态爆炸的bug（我记得有一个是好像以为从头理解错了啥的。。搞得我整个人都佛了，好歹后来好像⚪回来了）。</p><p>​        明早蓝桥杯，但是估计打不了多久，也没啥准备，数模最难的论文主体，那些公式和图片！！表格啥的。。哎，希望这个能有个稍微不错的结果，不要太打击人吧！锐哥好像还在肝，真是辛苦了。:vulcan_salute:</p><h3 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h3><p>​        打完了！！！！！！！！没想到啊，蓝桥杯我和x博俩菜笔十一点就交卷了哈哈，都只写了三道题，然后赶紧回来打数模，真的，要是打到一点，这次数模绝对凉凉，从上午开始逐步写论文，做图片，调格式，还有棒队友们打公式。。。中午草草的吃了一餐饭，回来连觉都没睡，将符号和公式慢慢实现成了论文，不过写的时候还是出现了很多的问题，比如本来负责写论文的我，由于听不懂他们在讲什么。。。好多地方没法写，只能帮忙做做语言上的修改和格式上的美化。。。呜呜呜我是废物QWQ，还有就是效率，锐哥写公式效率有亿点慢，对电脑的操作也不行。。。或者说是不是他把电脑配炸了。。但是即使这样，一切还是比较顺利的进行着，当然，中途比较混乱，有时候一会写这个，一会写那个，这里有个问题就是他俩，甚至我都对论文内容不是很熟悉，有好几次都是写错位置，还需要改改放到别的地方啥的，这是个新手问题吧哈哈哈QWQ。</p><p>​        最后心态还是很炸的，因为只有不到一个小时写摘要，还有一些其他的补充内容，比如问题一的结论图都是临时x博赶紧随便编的，我当时心态还炸了哈哈，以后这些工具还是得多学学，别再坑队友了，而且搞到最后才发现连第二问都没做，我把第一问一部分抽取过来，加上某锐临时写的一长段瞎编的，凑成了奇奇怪怪的第二个问题哈哈哈哈哈。</p><p>​        最后十分钟！汇总成一篇摘要，调好格式，导出PDF，在27分的时候提交了，提交了以后发现要压缩，又赶回来压缩了重新交了一份，交完后整个人都要飞了，博博放了植物大战僵尸背景曲哈哈，我们仨光在原地兴奋就兴奋了20分钟，有好队友真的爽啊！虽然我们这次过程比起正规比赛还差的很远，但是那种氛围是真的喜欢，这就是好队友加成吧！</p><p>​        晚上第一次去了传说中的海底捞，真的惊艳到了！服务员小哥哥小姐姐超级超级好，还有各种想不到的服务！真是上帝般的体验，我们仨说了几百句谢谢哈哈，有些不习惯这么好的服务，而且菜也超级好吃，总的来说真的体验炒鸡炒鸡棒，让本就好的心情锦上添花！</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>谢谢两位大佬这仨天的陪伴，真的开心！</p><p>希望下次打数模的时候我们每个人都有了极大的进步！下次就是真正的比赛了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;大一下新生赛&quot;&gt;&lt;a href=&quot;#大一下新生赛&quot; class=&quot;headerlink&quot; title=&quot;大一下新生赛&quot;&gt;&lt;/a&gt;大一下新生赛&lt;/h1&gt;&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="log" scheme="https://darren-dong.com/categories/log/"/>
    
    
    <category term="数模" scheme="https://darren-dong.com/tags/%E6%95%B0%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>数模论文格式和内容</title>
    <link href="https://darren-dong.com/2021/04/15/%E6%95%B0%E6%A8%A1%E8%AE%BA%E6%96%87/"/>
    <id>https://darren-dong.com/2021/04/15/%E6%95%B0%E6%A8%A1%E8%AE%BA%E6%96%87/</id>
    <published>2021-04-15T15:26:54.000Z</published>
    <updated>2021-04-17T13:46:31.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排版格式"><a href="#排版格式" class="headerlink" title="排版格式"></a>排版格式</h1><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210416163718840.png" alt="image-20210416163718840" style="zoom:33%;" /><p>表格，图形之类的，还有Excel可视化啥的</p><p>公式，公式识别</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>word vs Latex</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210416164354583.png" alt="image-20210416164354583" style="zoom: 33%;" /><p>国赛Latex用得少，而美赛用得很多Latex</p><p><strong>优秀论文排版</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210416165419679.png" alt="image-20210416165419679" style="zoom:50%;" /><p>图形的配色。。避免大段的空行，不要水空间。格式规范，审美哈哈哈</p><h2 id="word基础"><a href="#word基础" class="headerlink" title="word基础"></a>word基础</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417000312818.png" alt="image-20210417000312818" style="zoom:50%;" /><h3 id="常用功能和快捷键"><a href="#常用功能和快捷键" class="headerlink" title="常用功能和快捷键"></a>常用功能和快捷键</h3><ul><li><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417000618699.png" alt="image-20210417000618699" style="zoom:50%;" /><p>比如空格显示为小点</p></li><li><p>打印预览功能</p></li></ul><hr><ul><li><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417000906546.png" alt="image-20210417000906546" style="zoom:50%;" /></li><li><p>强大的F4，在ppt和excel都能用，重复上一步操作，但是仅仅记录一步噢</p><p>对光标所在的符合要求的对象进行该操作</p></li><li><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417001349006.png" alt="image-20210417001349006" style="zoom: 67%;" /></li><li><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417001611043.png" alt="image-20210417001611043" style="zoom:50%;" /></li><li><p>“书签栏” 对选中的功能使用“添加到快速访问工具栏”</p></li><li><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417001949722.png" alt="image-20210417001949722" style="zoom:33%;" /></li><li><p>每个功能区的<strong>右下角是完整菜单</strong></p></li></ul><hr><p><strong>字体功能区</strong></p><ul><li>粘贴选项，常用的只保留文本，还有强大的粘贴为图片，比如把ppt的形状复制过来</li><li>格式刷：单击只能用一次，双击可以连续使用，Esc取消</li><li>上下标是俩个X2<img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417103542242.png" alt="image-20210417103542242"></li><li>字体颜色，背景颜色，艺术字！加拼音，更改大小写，清除所有格式</li></ul><hr><p><strong>段落功能区</strong></p><ul><li><p>对齐，两端对齐一般好看，行间距，底纹，框线（用光标）</p></li><li><p>加编号，调整缩进量</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417105224584.png" alt="image-20210417105224584"></p></li><li><p>重复编号，左边有一个自动更重编号，按住ctrl选中多行再添加编号</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417105657108.png" alt="image-20210417105657108"></p><p>这两个勾，很可能会<strong>坑人</strong></p></li><li><p>图片上方紧接着有文字，可以设置段前行距</p><p><img src="C:/Users/Lenovo/Desktop/image-20210417105834906.png" alt="image-20210417105834906"></p></li></ul><hr><p><strong>插入功能区</strong></p><ul><li>页面-&gt;封面 空白页（原理是分页符）</li><li>插入表格记得行和列是和线性代数反的，选中文本-&gt;<strong>文本转换为表格</strong></li><li>插入图片-&gt;此设备，调段落格式，小心首行缩进导致左边间距更大</li><li>插入形状，新建画布，和ppt一样</li><li>插入页眉，每一页都有，去掉横线方法：去除格式，改一改缩进，还有页码</li><li>插入文本框，四周型和嵌入性，浮于文字上方，改边框的形状轮廓</li></ul><hr><p><strong>布局功能区</strong></p><ul><li>页边距，页面方向，分成两栏，但是图片太宽则不行，两栏三栏</li><li>分隔符里的分节符，默认整个文档是一节，要分节来<strong>防止全局操作</strong></li><li>视图有标尺，选中表格，双击标尺，就可以改一些设置，包括纸张方向</li></ul><h3 id="样式和多级列表"><a href="#样式和多级列表" class="headerlink" title="样式和多级列表"></a>样式和多级列表</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417111817711.png" alt="image-20210417111817711" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417112018930.png" alt="image-20210417112018930" style="zoom: 33%;" /><p>还可用于导航窗格导航</p><p><strong>目录！！！</strong></p><p>引用-&gt;目录，直接根据标题插入目录，还可以直接设置格式</p><p>导出为PDF的时候！</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417112706180.png" alt="image-20210417112706180" style="zoom:33%;" /><h3 id="国赛规范和模板制作"><a href="#国赛规范和模板制作" class="headerlink" title="*国赛规范和模板制作"></a>*国赛规范和模板制作</h3><p>在官网查资料。。这里是2020版的，最后两页为纸质版才有的</p><p>第二页开始编号，</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417114000963.png" alt="image-20210417114000963" style="zoom:50%;" /><p>页边距2.5厘米，其他细节格式根据赛区自定，如果没有赛区要求，则自己定：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417114133736.png" alt="image-20210417114133736" style="zoom: 50%;" /><hr><ul><li>调出标题三，样式右下角，管理样式，推荐，显示标题3</li><li>右键样式进入设置，先设置中文，再设置英文</li><li>段落直接用所有脚本设置黑体，记得取消加粗</li><li>新建一个“图片和表格”样式</li></ul><hr><p><strong>多级列表</strong></p><p>空白处创建新的多级列表，更多，链接到样式，加上标题的格式</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417140707541.png" alt="image-20210417140707541" style="zoom:33%;" /><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417140728583.png" alt="image-20210417140728583"></p><p>编号之后改成空格</p><p>二级标题勾选：正规格式编号</p><p>关闭文档，重新打开，把标题的缩进都去掉</p><p>国赛控制在页边距，可以根据内容调整页边距大小</p><hr><p>加个页码，记得把缩进关了，把上面的横线清除格式</p><h3 id="表格制作"><a href="#表格制作" class="headerlink" title="表格制作"></a>表格制作</h3><p>左上角的十字，全选表格和拖动位置，右下角拖动更改表格大小，居中对齐</p><p>退格键删除表格，delete键清空内容，虚线是“查看网格线”，其实啥都没有</p><p>布局里面调一下布局方式，还有个自动调整功能，用的不是很多</p><p>左下角和右上角分别是插入行和列</p><p>可以用边框刷，也可以设置上下左右边框这样的</p><p>记得在上面写一行字，写表格标题</p><hr><p>表格样式就是模板一样的</p><p>把文字环绕设置成无，因为一拖动就会自动设置成环绕</p><p>改了样式后，记得在段落里把样式里的首行缩进改成无</p><h4 id="长表格"><a href="#长表格" class="headerlink" title="长表格"></a>长表格</h4><p>行数太多了，把标题多复制一份，然后套用三线表，改一下对齐方式，加一条中间的竖直边框</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417145355812.png" alt="image-20210417145355812"></p><h4 id="宽表格"><a href="#宽表格" class="headerlink" title="宽表格"></a>宽表格</h4><p>列数太多了，可以使用横向排列之类的，但是建模肯定要分行，用Excel帮忙</p><p>记得加上续表俩字</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417145727529.png" alt="image-20210417145727529"></p><h4 id="拼接表格"><a href="#拼接表格" class="headerlink" title="拼接表格"></a>拼接表格</h4><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417145851642.png" alt="image-20210417145851642"></p><p>当作一个整体，中间这一列设置为无边框</p><h4 id="有合并单元格"><a href="#有合并单元格" class="headerlink" title="有合并单元格"></a>有合并单元格</h4><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417150114299.png" alt="image-20210417150114299"></p><p>在Excel里面就可以使用合并单元格，给特定单元格加框线</p><p>分隔效果是加了无色的竖线</p><p>有一些特殊软件生成的表格跳过了</p><h4 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h4><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417150937068.png" alt="image-20210417150937068"></p><p>取消所有框线，加上部分下框线</p><h4 id="自动编号"><a href="#自动编号" class="headerlink" title="自动编号"></a>自动编号</h4><p>引用-&gt;插入题注，勾选自动插入题注，来自动更新</p><p>还可以关联你写的引用和相应表：交叉引用，引用类型为表，这样会自动变化，要刷新F9</p><p>但其实比赛论文不太需要这些，直接手打就好了。</p><p>表前的文字和表格间距0.5行。。可以用上面的段后</p><h3 id="图形制作和排版"><a href="#图形制作和排版" class="headerlink" title="图形制作和排版"></a>图形制作和排版</h3><p>国赛风格简约，黑白，而美赛。。。很酷</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417155000260.png" alt="image-20210417155000260" style="zoom:50%;" /><p>以后得自学前两者</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417155446780.png" alt="image-20210417155446780"></p><h4 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h4><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417155639823.png" alt="image-20210417155639823"></p><p>调好缩进，直接右键转化为smartart，先选大类，再选小类</p><p>设计里更改颜色啥的，然后再在格式里面调整具体的样式，粘贴为图片</p><p>还有Xmind和process on</p><h4 id="简单示意图"><a href="#简单示意图" class="headerlink" title="简单示意图"></a>简单示意图</h4><p><strong>ppt绘制</strong></p><p>插入各种形状，无填充等样式，添加形状，文本窗格</p><p>格式里有<strong>对齐和横向分布在右边</strong>，旋转</p><p>C + 按住图形可以直接拖出新的，按住shift拉线不会歪</p><p>选中需要的图形，右键组合，还能取消组合</p><p>图表标题通用的。。写在下面就好了</p><p>强大的ppt组合图形，组合可以嵌套</p><hr><p><strong>任意多边形</strong>记住shift不动，Esc就画完了</p><p>曲线大致描几个点，格式，形状轮廓，箭头和样式啥的</p><p>竟然是iconfont阿里巴巴卧槽，下SVG格式的，没想到哇</p><hr><p><strong>ppt后期加工</strong></p><p>其实也还是加一堆图形哈哈，</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417171000183.png" alt="image-20210417171000183" style="zoom:50%;" /><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417171042537.png" alt="image-20210417171042537" style="zoom: 50%;" /><p>选择全部，居中对齐什么的，processOn</p><p>YeD之类的</p><h4 id="物理示意图"><a href="#物理示意图" class="headerlink" title="物理示意图"></a>物理示意图</h4><p>直接ppt，哈哈哈，AxGlyph软件，和Axmath一样是word插件</p><p>ppt，绘制圆，按照ctrl就是标准⚪，还能调节角度卧槽。还有旋转。</p><hr><p>还有亿图（有水印），有很多模板，美赛用的多</p><p>GeoGraph，动态的，免费的</p><p><strong>Echarts，需要一定的前端，数据可视化方向的</strong></p><p>也可以学python中的pyecharts这个包</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417181153530.png" alt="image-20210417181153530" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417181547695.png" alt="image-20210417181547695" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417184523976.png" alt="image-20210417184523976" style="zoom:50%;" /><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417213014215.png" alt="image-20210417213014215" style="zoom:50%;" /><p>直接查到论文，然后引用</p><p>正文格式，编号格式，手动添加上标</p><h3 id="公式编辑"><a href="#公式编辑" class="headerlink" title="公式编辑"></a>公式编辑</h3><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417213539208.png" alt="image-20210417213539208"></p><p><strong>mathpix</strong></p><h1 id="写作方法"><a href="#写作方法" class="headerlink" title="写作方法"></a>写作方法</h1><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417184905778.png" alt="image-20210417184905778"></p><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>基于啊哈哈。。50%</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417185146499.png" alt="image-20210417185146499" style="zoom:50%;" /><p>表达准确。。</p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417185252729.png" alt="image-20210417185252729" style="zoom:50%;" /><p>最后写，反复修改</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417185510665.png" alt="image-20210417185510665" style="zoom:50%;" /><p>平均800-1000</p><hr><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417185558584.png" alt="image-20210417185558584" style="zoom:50%;" /><hr><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417185925628.png" alt="image-20210417185925628" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417190146004.png" alt="image-20210417190146004" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417190320644.png" alt="image-20210417190320644" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417190458831.png" alt="image-20210417190458831" style="zoom:50%;" /><hr><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417190805813.png" alt="image-20210417190805813" style="zoom:50%;" /><hr><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417190834259.png" alt="image-20210417190834259" style="zoom:50%;" /><h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417191010259.png" alt="image-20210417191010259" style="zoom:50%;" /><p>多放主要模型！</p><h2 id="问题重述"><a href="#问题重述" class="headerlink" title="问题重述"></a>问题重述</h2><p>一级标题的第一个</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417191206893.png" alt="image-20210417191206893" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417191311203.png" alt="image-20210417191311203" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417191358234.png" alt="image-20210417191358234" style="zoom:50%;" /><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417191500357.png" alt="image-20210417191500357" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417191905011.png" alt="image-20210417191905011" style="zoom:50%;" /><p>甚至思维导图和思维框图</p><h2 id="模型假设"><a href="#模型假设" class="headerlink" title="模型假设"></a>模型假设</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417192156795.png" alt="image-20210417192156795" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417192226678.png" alt="image-20210417192226678" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417195904468.png" alt="image-20210417195904468" style="zoom:50%;" /><hr><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417200139452.png" alt="image-20210417200139452" style="zoom:50%;" /><h2 id="符号说明"><a href="#符号说明" class="headerlink" title="符号说明"></a>符号说明</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417200444421.png" alt="image-20210417200444421"></p><p>写在最后。。不是所有都要放。</p><h2 id="模型建立与求解"><a href="#模型建立与求解" class="headerlink" title="模型建立与求解"></a>模型建立与求解</h2><p>ps：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417201120942.png" alt="image-20210417201120942" style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417201501252.png" alt="image-20210417201501252" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417201700798.png" alt="image-20210417201700798" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417201731556.png" alt="image-20210417201731556" style="zoom:50%;" /><p>这就是结合的利用</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417201821269.png" alt="image-20210417201821269" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417201950243.png" alt="image-20210417201950243" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417202044451.png" alt="image-20210417202044451" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417202306738.png" alt="image-20210417202306738" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417202327970.png" alt="image-20210417202327970" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417202413624.png" alt="image-20210417202413624" style="zoom: 33%;" /><h2 id="模型分析或检验"><a href="#模型分析或检验" class="headerlink" title="模型分析或检验"></a>模型分析或检验</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417202623048.png" alt="image-20210417202623048" style="zoom:33%;" /><h3 id="灵敏度分析"><a href="#灵敏度分析" class="headerlink" title="灵敏度分析"></a>灵敏度分析</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417203408032.png" alt="image-20210417203408032" style="zoom: 25%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417211229051.png" alt="image-20210417211229051" style="zoom:33%;" /><h3 id="稳定性检验"><a href="#稳定性检验" class="headerlink" title="稳定性检验"></a>稳定性检验</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417211856247.png" alt="image-20210417211856247" style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417211955682.png" alt="image-20210417211955682" style="zoom:33%;" /><h3 id="误差分析"><a href="#误差分析" class="headerlink" title="误差分析"></a>误差分析</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417212037424.png" alt="image-20210417212037424" style="zoom:33%;" /><h2 id="评价，改进-推广"><a href="#评价，改进-推广" class="headerlink" title="评价，改进(推广)"></a>评价，改进(推广)</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417212142176.png" alt="image-20210417212142176" style="zoom:33%;" /><h2 id="参考文献-1"><a href="#参考文献-1" class="headerlink" title="参考文献"></a>参考文献</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417212253184.png" alt="image-20210417212253184" style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417212402948.png" alt="image-20210417212402948" style="zoom:33%;" /><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417212528558.png" alt="image-20210417212528558" style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210417212627609.png" alt="image-20210417212627609" style="zoom:33%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;排版格式&quot;&gt;&lt;a href=&quot;#排版格式&quot; class=&quot;headerlink&quot; title=&quot;排版格式&quot;&gt;&lt;/a&gt;排版格式&lt;/h1&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-gre</summary>
      
    
    
    
    <category term="数模" scheme="https://darren-dong.com/categories/%E6%95%B0%E6%A8%A1/"/>
    
    
    <category term="数模论文" scheme="https://darren-dong.com/tags/%E6%95%B0%E6%A8%A1%E8%AE%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>linear algebra</title>
    <link href="https://darren-dong.com/2021/04/12/linear-algebra/"/>
    <id>https://darren-dong.com/2021/04/12/linear-algebra/</id>
    <published>2021-04-12T04:38:47.000Z</published>
    <updated>2021-04-20T13:14:01.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>为了学机器学习，重拾已经快忘干净的线代，接着上学期看的MIT，从头开始看起，没有考试的压力，单纯的探索线代世界，实在是太快乐了！而从中发现的诸多新鲜的，被忽略的知识，更是让人相见恨晚。</p><h1 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h1><h2 id="1-方程组的几何解释"><a href="#1-方程组的几何解释" class="headerlink" title="1.方程组的几何解释"></a>1.方程组的几何解释</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412124757970.png" alt="image-20210412124757970" style="zoom:33%;" /><p>老师给出了方程组（n维）按行来解和按列来解完全不一样的几何意义</p><p>按行：</p><p>每一个方程都得出n-1维的超平面，最后交出一个点</p><p>按列：</p><p>每个方程都是n维中的一个向量，最后进行线性组合，得出结果</p><p>显然按列意义更强，也更符合“线性”这一说。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412125559614.png" alt="image-20210412125559614" style="zoom:33%;" /><p>这样子真的好理解很多！</p><h2 id="2-矩阵消元"><a href="#2-矩阵消元" class="headerlink" title="2.矩阵消元"></a>2.矩阵消元</h2><p>也是高斯，听说现在有更高效的了</p><p>依次用主元pivot消去下列的⚪，主元为0则用下面不为0的行变换，如果全为0，那就是一个奇异矩阵。。。“坏矩阵”</p><p>解出Upper上三角矩阵后，就可以回代了</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412131953821.png" alt="image-20210412131953821"></p><p>从Ax = B  到  Ux = C</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412132249094.png" alt="image-20210412132249094" style="zoom:33%;" /><p><em><strong>即分别用行和列进行矩阵操作</strong></em></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412132432705.png" alt="image-20210412132432705" style="zoom:50%;" /><p>然后从行列对矩阵的影响引出了初等矩阵E elementary</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412132624337.png" alt="image-20210412132624337" style="zoom:33%;" /><p>所以我们原来学的教材是逻辑有问题的，先引入了初等矩阵的概念，然后告诉我们有这些性质。</p><p>像MIT就解释的很好，先引入了左右矩阵其实是对矩阵的行和列进行线性组合，然后由单位矩阵不影响出发，推导出初等矩阵会具有这些作用！</p><p><strong>那甚么矩阵可以一次完成A -&gt; U呢？</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412181828766.png" alt="image-20210412181828766" style="zoom:33%;" /><p>当然是一堆初等矩阵的叠加啦！而这是通过增减括号实现的，associative law 结合律，证明非常复杂。。</p><p>permutation 置换</p><h2 id="3-乘法和逆矩阵"><a href="#3-乘法和逆矩阵" class="headerlink" title="3.乘法和逆矩阵"></a>3.乘法和逆矩阵</h2><p>他是这样引入逆矩阵的</p><p>初等矩阵会对某个矩阵进行变换，那逆矩阵相当于抵消这个变换，将其复原。</p><p>效果就是，初等矩阵再X逆矩阵得到 单位矩阵，即不进行行列变换</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412182739963.png" alt="image-20210412182739963" style="zoom:50%;" /><p>矩阵乘法。。没有新奇的地方，还是原来的概念</p><p>不过中国是一开始就这样讲，他是铺垫了整行整列，再分析单个元素。。都不错吧</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412183207354.png" alt="image-20210412183207354" style="zoom: 33%;" /><p>但是。。。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412183220306.png" alt="image-20210412183220306" style="zoom:50%;" /><p>来了来了！整行整列的</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412183305325.png" alt="image-20210412183305325" style="zoom:50%;" /><p>其实还建立在第一章基础之上</p><p>因为在我们分析某一列时<img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412183352548.png" alt="image-20210412183352548" style="zoom:50%;" /></p><p>我们就可以把右矩阵拆成多条对矩阵的排列再合起来，左边同理</p><p>A(mxn) B(nxp) = C(mxp)   列的角度看，C的各列，是A中各列的线性组合，B为组合方法</p><p>第三种方法就是按行同理啦</p><p>第四种方法！用列乘行，会得到一个完整的矩阵</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412183942271.png" alt="image-20210412183942271" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412184048797.png" alt="image-20210412184048797" style="zoom:50%;" /><p><strong>列X行得到的矩阵，列空间和行空间都是一条直线</strong></p><p>第五种，分块相乘，他并没有过多解释，好像在他眼里。。这跟普通矩阵性质一样的。</p><hr><p>可逆就是非奇异！invertible  non-singular</p><p>为什么没有逆！3B1B的解释非常清晰，维度是不可能升高的</p><p>他从单位矩阵出发分析，[1 3 / 2 6]这构成一条线，而单位向量不在这条线上</p><p>另一个解释，如果存在向量X使得AX = 0，但是X不是0向量，那样总能成立<img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412185525071.png" alt="image-20210412185525071"></p><p>如果有逆，左右×一个逆，得出x为0，与x不为0相悖，看来这么课也不是像3B1B一样那么痴迷几何</p><p><strong>因为A -&gt; 0时其列能通过线性组合（非零向量0）得到0，但是不可逆矩阵只可以通过0来达到</strong></p><p>但是也必须提个醒，不能太依赖几何，更高深的问题抽象程度太高，难以借用几何</p><p>现在继续回到可逆情况，可以通过第一节学的方法快速解决，解n（此处2）个方程罢了</p><p>这回到了高斯思想，但是右侧是两列，它引出了Jordan思想</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412190308614.png" alt="image-20210412190308614"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412190523846.png" alt="image-20210412190523846"></p><p>！！！</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412190656445.png" alt="image-20210412190656445" style="zoom: 50%;" /><p>Jordan说，两个一起来吧，不就是解俩吗，于是右侧写成了一个矩阵</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412190923982.png" alt="image-20210412190923982" style="zoom:50%;" /><p>而当左侧还原成原先（单位阵）的时候，右侧得出了每一列的还原方式，合起来就是可逆矩阵，还原每一列</p><p>但是比起高斯只消到U，他还要继续消掉上面的得到单位阵</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412191048072.png" alt="image-20210412191048072" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412191237395.png" alt="image-20210412191237395" style="zoom:50%;" /><p>分开想，E*A = I  E就是A逆，然后I * A逆得到A逆，怎么理解都行哈哈</p><h2 id="4-A的LU分解"><a href="#4-A的LU分解" class="headerlink" title="4.A的LU分解"></a>4.A的LU分解</h2><p>transpose 转置  upper   lower</p><p>消元快完了，A=LU是最基本的分解，我们之前把A消到U，但是中间的联系是什么？</p><p>——是<strong>L</strong></p><p>因为总是消除下面的，所以上面的乘以某倍数到下面，变成了L矩阵</p><p><em>插一句：二阶矩阵逆是主对角线交换，副对角线变号</em></p><p>首先研究不进行行变换的</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412195154414.png" alt="image-20210412195154414"></p><p>为什么要把这些初等矩阵除到右边？</p><p><em>初等矩阵简单的变换完全可以根据意义直接写出逆，比如2倍乘下来，那就-2倍乘下来抵消</em></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412195611223.png" alt="image-20210412195611223" style="zoom: 33%;" /><p>上面是E，下面是L</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412200221340.png" alt="image-20210412200221340"></p><p>L的顺序不会引入奇怪的“杂质”比如那个10，而且消元的乘数还留在矩阵里面一目了然，就是2和5</p><p>第一行乘2加到第二行，第二行再乘5加到第三行</p><p><strong>而这也是最牛逼的地方，想得到L不需要运算（没有行变换的情况）</strong>，只要：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412200416518.png" alt="image-20210412200416518"></p><p><strong>可以在得到LU的过程可以抛开A</strong>，比如完成A的第二行的消元，得到了U中新的第二行，同时得到了<strong>消元用的乘数</strong></p><p>这样就不用管A了，信息都在LU里，E不重要，但：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412195950377.png" alt="image-20210412195950377"></p><hr><p>拓展：nxn矩阵要进行多少次操作，指的是计算机的操作</p><p>我们这里讲一次乘法+一次减法算一次操作</p><p>n的平方 + n-1的平方 +………..   n(n+1)(2n+1)/6  约等于1/3n的三次方 或者说从1-n对n平方积分</p><p>但线性代数是离散的，，以后不准用微积分哈哈</p><p>这是A的，b的是n的平方次</p><hr><p>下面允许行互换</p><p>3 x 3矩阵行互换的可能性一共有6种，其实是有序排列 <strong>n!</strong></p><p>这个矩阵群怎么相乘都在6个之中，逆矩阵也在6个之中哈哈</p><h2 id="5-转置，置换，向量空间R"><a href="#5-转置，置换，向量空间R" class="headerlink" title="5.转置，置换，向量空间R"></a>5.转置，置换，向量空间R</h2><p>真正的线性代数开始于向量空间！</p><p>继续上节课的话题，再碰到需要行变换的时候，A=LU怎么处理，他介绍了Matlab的方法</p><p>Matlab不仅检查0元，还检查趋近0的主元，因为这些非常难处理的</p><p>答案是</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412202651492.png" alt="image-20210412202651492" style="zoom:50%;" /><p>P是行重新排列的单位矩阵，又称<strong>置换矩阵，对A进行行置换</strong></p><p>记住n阶矩阵的数量n!，置换矩阵的<strong>逆矩阵等于其转置</strong>，还有一个<strong>很关键的性质</strong>，这可真是数量稀少</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412203042685.png" alt="image-20210412203042685" style="zoom:50%;" /><p>还有一个书上的性质</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412203439256.png" alt="image-20210412203439256" style="zoom: 25%;" /><p>证明很简单。。利用对称矩阵性质，本身 = 转置</p><hr><p>来了，向量空间</p><p>向量有什么性质：加法，数乘，这是基础，而且要满足一些规则</p><p>R2(up)  代表二维实向量域，所有向量空间必须有原点，就是零向量</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412204019656.png" alt="image-20210412204019656" style="zoom:50%;" /><p>向量空间的性质：</p><p>加减，数乘，线性运算。八条规则，而且最关键的是运算完以后仍在原空间内</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412204207306.png" alt="image-20210412204207306" style="zoom: 33%;" /><p>即对线性组合“封闭”</p><p>而满足这些性质，却不包含所有二维向量的，引出子空间</p><p>子空间必须穿过原点，因为必须允许数乘0而得到一个0向量</p><p>现在列出R2的子空间</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412204746785.png" alt="image-20210412204746785" style="zoom: 50%;" /><p>然后R3有四种，多了一种过原点的平面</p><p>现在考虑这个<img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412205044363.png" alt="image-20210412205044363"></p><p>A的列的所有线性组合会构成一个子空间，线性组合意味着进行加法和数乘两种运算</p><p>只要包含了所有线性组合，必然会张成一个子空间，叫列空间，C(A)</p><p>也是今天的核心思想，通过某些向量构造一个向量空间，关键是对其进行线性组合后仍在该空间内。</p><p>这个思维应该理解，就是在n维空间中，m个n维向量张成一个子空间。。挺好理解的哈哈</p><h2 id="6-列空间和零空间"><a href="#6-列空间和零空间" class="headerlink" title="6.列空间和零空间"></a>6.列空间和零空间</h2><p>假设俩子空间，平面P和直线L  PUL = 存在两者里的所有向量</p><p>这个集合不是子空间，连加法都显然不封闭。</p><p>但对于任何子空间， S并T却一定是子空间，这相当于条件增加了，想象其中两个向量，他们对于S和T任一一个都满足子空间的性质，合起来当然仍然满足</p><p>这是两个很重要的结论。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412211300192.png" alt="image-20210412211300192" style="zoom:50%;" /><p>而这个A的列空间由所有列的线性组合张成，那具体是怎样的呢</p><p>下面把他和线性方程组联系起来，因为：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412211454511.png" alt="image-20210412211454511"></p><p>这里的目的就是研究Ax = b，对任意右侧向量都有解吗？</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412211635844.png" alt="image-20210412211635844"></p><p>首先注意，方程组不总有解，比如这里的3个列向量无法张成整个四维空间</p><p>而且这里四个方程，3个未知数，通常我们认为此时无解，但是</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412211759888.png" alt="image-20210412211759888"></p><p>今天的问题就是取怎样的b能符合这种👆</p><p>b为0当然是一个解，而实际情况是当且仅当b属于A的列空间，即b是各列的线性组合，这也是为啥老师喜欢列空间，这能告诉我们何时方程有解。淦，他竟然讲了independent 线性无关卧槽</p><p>这里可以描述为<img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412212443287.png" alt="image-20210412212443287" style="zoom:33%;" /></p><hr><p>现在讲零空间嘿嘿，这是一种<strong>完全不同</strong>的子空间！Nullspace</p><p>它不包含b，它包含x，看看这个关键字“零”，因此它包含Ax = 0中所有的解</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412212655491.png" alt="image-20210412212655491" style="zoom:50%;" /><p>这些x向量包含3个分量，因此零空间是R3的子空间</p><p>对于m x n矩阵  列空间的维度是m  零空间是n，因为列的个数n，等于未知数的个数</p><p>现在开始找零空间，正常应该消元，但是这里直接可以看出来</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412213300727.png" alt="image-20210412213300727" style="zoom:33%;" /><p>现在来检验，这确实张成一个空间，很容易用性质验证。。</p><p>现在到关键了，对于Ax = b</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412213808400.png" alt="image-20210412213808400"></p><p>两个问题：1. 所有解x构成向量空间吗？    当然不。</p><p>这里的<strong>解</strong>有很多个，但是他们不构成子空间，它其实是一个<strong>不穿过原点的平面，或直线</strong>，子空间平移</p><p>所以，向量空间必须包含0，<strong>如果考虑的是是x，那么Ax 一定等于 0</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412214027947.png" alt="image-20210412214027947" style="zoom: 33%;" /><p>已知的信息只有向量必须满足的方程组。</p><p>这就是两种构筑子空间的方法：</p><ol><li>从向量出发，通过线性组合构筑向量空间</li><li>也可以从一个方程组中，通过让x满足特定条件来得到子空间</li></ol><p>终于理解了。。当年咋都看不懂，不要死扣几何意义。。真的信我。。诱人但坑人</p><h2 id="7-求解AX-0主变量-特解"><a href="#7-求解AX-0主变量-特解" class="headerlink" title="7.求解AX = 0主变量 特解"></a>7.求解AX = 0主变量 特解</h2><p>这节课是定义到算法的转折</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412214959512.png" alt="image-20210412214959512"></p><p>还是消元，不过是长方形，所以即使出现0⚪我们仍要继续</p><p>注意，消元的时候解是不会变的，因此零空间也不会变</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412215120182.png" alt="image-20210412215120182" style="zoom: 33%;" /><p>这里第二列消元没法了。。这说明第二列是前面列的<strong>线性组合</strong>，但我们继续</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412215233635.png" alt="image-20210412215233635" style="zoom:33%;" /><p>这次只有两个主元，这个数量我们称为rank，秩，<strong>意义非凡</strong></p><p>这里区别列为 主列 pivot columns 和自由列 free columns，现在要求的是Ux = 0</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412215501466.png" alt="image-20210412215501466"></p><p>这里又到回代的过程，而自由列对应的自由变量可以自由取。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412215621954.png" alt="image-20210412215621954"></p><p>此处赋值（一般的我们倾向于给一个1，其他为0）后得到了一个x特解，当然，它的任意倍数也是解。</p><p>然后再给自由变量赋值，得到另一个（组）解，然后就可以构造出零向量空间。简单的证明。。u满足，v满足，那么u+v也满足之类的。。这就是结论，<strong>零空间是特解的线性组合张成的。每个自由变量对应一个特解</strong></p><p>m x n   r个主元（即r个方程起作用）  n-r个自由变量</p><p>下面谈到 简化行阶梯型式，用 R替代  把U的主元上面的给消掉，使主元所在列除了主元均为0，再把主元所在行做加减（不影响解），使得主元为1</p><p>rref()函数直接得出👆，如果用这个矩阵回代，就是RX=<strong>0 这个过程A -&gt; U -&gt; R 解均相同</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412222103731.png" alt="image-20210412222103731" style="zoom: 67%;" /><p><strong>典型在I 是个R X R矩阵   则Rx = 0  这里求解构造一个“零空间矩阵”N，各列由特解组成，即RN=0</strong></p><p>显然<img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412222327626.png" alt="image-20210412222327626" style="zoom:33%;" />可以达到目的，但如果左边写成[主元 自由]  那N的上面就是-F 下面是主元<strong>而这也正是特解（由自由变的和主的组成）构成的矩阵</strong>，该矩阵可由null（）求出</p><p><strong>Matlab</strong>先算出R，然后找出主变量和自由变量，将1和0分配到自由变量中，复制出主变量，他会使用回代（I是单位阵，<strong>F是自由部分</strong>）得到这个矩阵很迷，<strong>因为I F其实是 两种x的特殊形式吧</strong>，本来左边也应该写成俩个x，然后推出右边，但是左边可以等效化成这个好形式，那再好不过了</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412222807202.png" alt="image-20210412222807202" style="zoom:50%;" /><p>这是回代的最终结果。意味着<strong>主变量(一条) + F乘自由变量(一条) = 0(主变量总数+自由变量总数 = n)<strong>（卧槽我懂了，x那一列里面有自由变量，也有不能变，要求的主变量）（这里每项都是矩阵）如果我们给xfree（自由变量）分配</strong>单位阵，那么主变量就等于 -F</strong>，下个例子就是这样干的</p><p>矩阵主列的个数与其转置相同，秩相同，举个例子</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412224133262.png" alt="image-20210412224133262"></p><p>然后给自由变量赋值，这里是x[]最下面那个，<strong>如果赋0，则主变量都为0没啥意义，还是给1</strong></p><p>就求出<img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412224403553.png" alt="image-20210412224403553" style="zoom:50%;" />检验正确，其<strong>主变量（俩-1）刚好为-F</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412223319067.png" alt="image-20210412223319067" style="zoom:50%;" />这里的F就是右边那俩竖着的1</p><p>最后得到的解空间<img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412223401018.png" alt="image-20210412223401018" style="zoom: 33%;" /></p><p>验证了之前的结果！全新的看法啊。。妙啊！！！！！！！！！！</p><p>那这样子也太好算了吧，左边化成[I F]的过程其实就已经把方程解完了</p><h2 id="8-求解Ax-b可解性和解的结构"><a href="#8-求解Ax-b可解性和解的结构" class="headerlink" title="8.求解Ax = b可解性和解的结构"></a>8.求解Ax = b可解性和解的结构</h2><p>Ax = b 是否有解，有多少解</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413233103119.png" alt="image-20210413233103119" style="zoom:50%;" /><p>Augmented matrix 增广矩阵</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413233326657.png" alt="image-20210413233326657" style="zoom:50%;" /><p>这就是有解的条件，左边等价右边，这是显然的，而不是给个概念哈哈</p><p>所以solvability: </p><p>当且仅当b属于A的列空间，即是A各列的线性组合</p><p>如果A各行的线性组合得到0，b端的分量也必为0</p><p>这两种描述是等价的</p><hr><p>下面到算法：<strong>求Ax=b的所有解</strong></p><p>第一步，找一个特解</p><p>因为变量数多于方程数，能找出一堆解，方便的做法是令<strong>所有自由变量为0</strong></p><p>然后求出主变量，组成一个特解</p><p>接下来的关键是，可以加上零空间中的任意x，因为不会影响结果，即为所求全部解</p><p>他给的证明也是<img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413234026689.png" alt="image-20210413234026689" style="zoom:50%;" /></p><p><em><strong>解为：特解加上零空间内任意向量</strong></em>     x = xp + xn</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413234346430.png" alt="image-20210413234346430" style="zoom: 33%;" /><p>但此时并不过原点，而是穿过xp（特解），不是子空间，而是子空间从原点平移得到的二维平面</p><hr><p>m x n矩阵  秩（主元数）为 r      r&lt;=m  and  r&lt;=n   两种<strong>满秩情况</strong></p><p><strong>列满秩(r = n ,r&lt;m)：</strong></p><p>没有自由变量，零空间里只有一个零向量  Ax = b 如果有解，那么只剩下一个特解！！</p><p>或者无解，所以只有 0 或 1 个解</p><p>一个例子：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413235134468.png" alt="image-20210413235134468" style="zoom:25%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413235213091.png" alt="image-20210413235213091" style="zoom:25%;" /></p><p>最终化为最简是上面单位阵，下面为0</p><p>此时Ax = b 只有当b正好位于那个二维子空间才有解，此时特解显然为两列之合[4 3 7 6]`</p><p>当然，是可以为 0 的</p><hr><p><strong>行满秩(r = m ,r&lt;n)：</strong></p><p>问题：b取什么时，Ax= b有解？</p><p>消元时，不会出现零行！因此b没有要求（出现零行则b为0那个要求）</p><p><strong>所以对任意b，Ax = b 都有解</strong></p><p><strong>此时有r/m个主变量，自由变量为 n - r/n - m 个</strong></p><p>还是上面那个例子，转置一下</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413235826318.png" alt="image-20210413235826318" style="zoom:25%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413235844601.png" alt="image-20210413235844601" style="zoom:25%;" /></p><p>还记得那个 I F吗</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412222327626.png" alt="image-20210412222327626" style="zoom:33%;" /><p>这里就是那种情况，所以说这部分构成零空间的特殊解！牛啊！</p><p>这里左边的 I 和 右边的 F 是可以<strong>交织，混搭</strong>的！</p><p><strong>此时总有无穷解，因为总是有零空间需要处理</strong></p><hr><p>r = m = n，这意味着这是一个令人愉快的可逆矩阵</p><p>而简化后就是单位阵</p><p>零空间只包含零向量，而且这种情况肯定有解，所以，必然仅有一个<strong>唯一解</strong>！！！</p><p>突然感觉好委屈QWQ，当年线代讲空间的时候，理解了好久，现在直接二倍速看懂了</p><hr><p>那 r&lt;m , r&lt;n 的情况就很显然了</p><p>又存在零空间，又可能出现零行，<strong>所以要么无解，要么无穷多解</strong></p><p>所以秩包含了好多有用的信息，这节课为什么没有早点明白QWQ，太惨了</p><p>他给的图是：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414000943462.png" alt="image-20210414000943462" style="zoom:50%;" /><p>感谢strang老师！</p><h2 id="9-线性相关性、基、维数"><a href="#9-线性相关性、基、维数" class="headerlink" title="9.线性相关性、基、维数"></a>9.线性相关性、基、维数</h2><p>线性无关是用来形容向量组，而不是矩阵</p><p>它对无关的定义和我们学的一样。只要出现零向量就必然线性相关。很好理解。</p><p>列向量相关 &lt;=&gt; 零空间存在除了零向量以外的向量,r&lt;n</p><p>列向量无关 &lt;=&gt; 零空间仅存在零向量,r&lt;n ，无自由变量</p><p>向量组“<strong>生成（span）</strong>”一个空间：</p><p><strong>这个空间包含这些向量的所有线性组合</strong></p><hr><p>某空间的基：</p><p>一个拥有两大性质：线性无关，且张成整个空间 的向量组</p><p><strong>子空间的基包含这个子空间的全部有用信息</strong></p><p>对于<strong>方阵</strong>，所选的向量组为基的条件是组成的矩阵<strong>可逆</strong>，显然</p><hr><p>维数：</p><p>每个空间，基向量的个数即为空间的维数</p><p>当然这里讨论的是完整的n维空间，而不是残破的子空间</p><p>矩阵的秩 = 空间的维数 = 主元数量</p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20210414092552773.png" alt="image-20210414092552773" style="zoom:50%;" /><p>而在这个秩为2的例子里，零空间的基可以分别设1 0 来找</p><p>零空间的维度是自由变量的个数</p><h2 id="10-四个基本子空间"><a href="#10-四个基本子空间" class="headerlink" title="10.四个基本子空间"></a>10.四个基本子空间</h2><p>核心内容，四个子空间的关系</p><p>其中行空间也是所有行向量的线性组合，<strong>或者说A转置的列的所有组合</strong>，这样考虑就可以使用之前的结论</p><p>列空间C(A)   零空间N(A)   行空间C(AT)   左零空间N(AT)</p><p>列空间在m维，行空间在n维</p><p>零空间在n维，左零空间在m维</p><p>列维数 + 左零维数 = m        行维数 + 零维数 = n </p><p>经典的图片：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414093802197.png" alt="image-20210414093802197" style="zoom: 33%;" /><p>关键在basis 和 dimension</p><p>关键结论是：<strong>A 和 AT 的秩相同，确实同一个矩阵从不同方向看，秩不是一个有方向的属性，所以理应是不变的</strong></p><p>对列空间，一组基就是主列，维数就是r</p><p>对列空间，一组基就是主行，维数就是r</p><p>对零空间，一组基就是特殊解们，n - r 个free var 即为维数</p><p>对左零空间，一组基就是特殊解们，m - r 个free var 即为维数</p><p>又根据那个结论，所以 n - r = m - r 个锤子哟，零空间和左零空间的关系<strong>不是</strong>列和行这样作为一个矩阵的两面噢！</p><p>先看求行空间的基</p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20210414094758222.png" alt="image-20210414094758222" style="zoom: 33%;" /><p>这进行了行变换之后，<strong>列空间变化了！</strong>行空间没变，基发生了变化。</p><p><strong>所以基是R的前r行</strong>，因为是单位阵，所以还是<strong>最佳</strong>的基。</p><p>因为R 执行逆运算 可以得到A，所以A行确实是R行的线性组合</p><hr><p>左零</p><p>为了运用之前的方法，用A来代替AT，转置后，yT到左边去了</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414095528916.png" alt="image-20210414095528916" style="zoom: 33%;" /><p>但是老师还是习惯用 AT * y = 0来做</p><p>那怎么求它的基呢，直觉告诉。。。<strong>秘密藏在把A -&gt; R 的过程里</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414100050545.png" alt="image-20210414100050545" style="zoom:50%;" /><p>同样也是高斯 - jordan，E记录了A -&gt; R 的过程</p><p>所以相当于左边乘了一个 E  即  EA = R   EI = E ，当时(chapter2)是个方阵R = I ， 所以E是A的逆</p><p>但是现在 A 不可逆， 但 E 仍能描述很多特性，<strong>先算E</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414125257549.png" alt="image-20210414125257549" style="zoom:50%;" /><p>此处左零空间应该是一维的因为  m -r = 3 - 2 = 1</p><p>即存在一个线性组合使得A这三行结果为0，这个线性组合可以确定左零空间的基。</p><p>因此尝试着找一个能产生零行向量的行组合。此处就是E的最后一行，因为R的最后一行就是该行对A中行向量的线性组合，而结果为0，卧槽！！！所以左零的基就是这些使得R中出现0行的行，牛啊！！</p><p><strong>这样不用把矩阵转置然后从头开始计算。</strong></p><hr><p>新的向量空间：所有的 3 x 3矩阵，把每个矩阵看成一个”向量”</p><p>矩阵可以相加，数乘，也有”零向量”，所以满足向量空间的条件，暂时不考虑乘法！</p><p>用M表示所有3x3矩阵组成的矩阵空间。</p><p>则每个位置放1，其他置0，便可作为所谓的”基“，然后又有上三角和对称矩阵这俩子空间的交是对角矩阵。</p><p>反正就是这种思想，把Rn推广到Rn*n</p><h2 id="11-矩阵空间，秩一矩阵，小世界图"><a href="#11-矩阵空间，秩一矩阵，小世界图" class="headerlink" title="11.矩阵空间，秩一矩阵，小世界图"></a>11.矩阵空间，秩一矩阵，小世界图</h2><p>接着上面的问题，我们不考虑矩阵乘法，因为向量空间仅仅考虑矩阵相加和数乘</p><p>M的基就是9个不同的秩一矩阵</p><p>交集很明显，就是同属两边的向量的组合，如上三角 U 和对称矩阵 S 这俩子空间的交是对角矩阵。</p><p>而并集不是一个子空间，所以我们用 S + U 来描述他们的和而不是并集。</p><p>这代表任取S中的一个元素，再加上U中的任意一个元素，这会得到全部，也就是M的基</p><p><strong>这里 dim S + dim U = 6 + 6    dim(S+U) = 9  dim(S∪U）=3</strong></p><p><strong>前者相加 等于后者相加！</strong>画个韦恩图。。这是显然的结论，重叠了3个（类似鸽笼原理吗）</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414232350750.png" alt="image-20210414232350750" style="zoom: 50%;" /><p>然后看看微分方程里的类似思想</p><p><strong>要知道线性微分方程里一个重要内容就是寻找解空间的一组基</strong></p><p>这里的基不像方向，而是函数，但是这样的线性思想是通用的。</p><hr><p>秩一矩阵都可以表示为一列乘以一行</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414233317891.png" alt="image-20210414233317891" style="zoom: 50%;" /><p>它就像积木一样</p><p>比如秩为n的矩阵，他就需要n个秩一矩阵来构建</p><p>这里提出了一个问题 M = all 5 x 17 matrics   那么一个由秩四矩阵构成的子集是子空间吗？</p><p>显然不是，因为两个秩四矩阵相加都不一定是秩四矩阵，5维里面挑四维，可能相同，也可能变成五维的空间，这里很好理解，但不好表述。。感觉像是一种排列的关系。</p><p><strong>而秩一矩阵也是这样的原理，它不是子空间。</strong></p><p>一个例子：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414234947572.png" alt="image-20210414234947572"></p><p>根据这个条件，如何描述出S的维数？首先得找到一组基</p><p>因为[1 1 1 1] [v1 v2 v3 v4]` = 0  所以这个S其实是一个零空间，然后用Ax = 0去研究四个子空间就好了</p><hr><p>小世界图：</p><p>图论和线性代数。。。Graph</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414235251527.png" alt="image-20210414235251527" style="zoom:33%;" /><p>如果用点代表一个人，线代表两者认识，那么美国1个人认识另一个人的最远距离是？</p><p>六度分离猜想，大约6步，“小世界”哈哈</p><h2 id="12-图和网络"><a href="#12-图和网络" class="headerlink" title="12.图和网络"></a>12.图和网络</h2><p>这节课专注于线代的应用</p><p>而真正需要人们处理的矩阵来源于生活中的各种问题</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414235738751.png" alt="image-20210414235738751" style="zoom:50%;" /><p>今天来探讨图，这是非常重要的应用数学概念，也是矩阵的发源之一</p><p>Nodes and Edges 节点和边</p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20210414235940380.png" alt="image-20210414235940380" style="zoom:50%;" /><p>这些是有向线段来区别方向，它将用 potential电势 potential difference 电势差 currents 电流等词汇</p><p>当然这只是一个例子，图能表示各种现实意义上的，我们称这个矩阵为关联矩阵 incidence matrix</p><p>m x n 的矩阵  在第一条边上是节点1到2 所以 1号位为 -1，2号位为 1</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415000303262.png" alt="image-20210415000303262" style="zoom: 80%;" /><p>这个子图被称为loop（回路），对图来说，回路的数量和位置至关重要，回路意味着“相关”</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415000656107.png" alt="image-20210415000656107" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415000709211.png" alt="image-20210415000709211" style="zoom:50%;" /><p>现在提问题：(这是一个非常稀疏的矩阵，一行只有俩非零)</p><p>零空间是啥，这里仍研究Ax = 0</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415001052557.png" alt="image-20210415001052557" style="zoom:50%;" /><p>所以A所进行的组合相当于计算每条边上的差值。</p><p>如果把 x = x1 x2 x3 x4 作为各个节点的电势，</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415001208855.png" alt="image-20210415001208855" style="zoom:50%;" /><p>将会得到电势差，牛逼啊！！</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415001316165.png" alt="image-20210415001316165" style="zoom:50%;" /><p>乘以一个常数C得C x [1 1 1 1]` 就是整个零空间，维数为1，这个零空间意味着结点电势都是由一个常数C决定。矩阵的秩为3</p><p>这样的可以任意选取，但是有意义的C在现实生活中十分广泛，比如微积分的常量C。</p><p>那么这里的Ax * C就是物理意义上的电流。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415103146096.png" alt="image-20210415103146096" style="zoom: 33%;" /><p>这个数值是<strong>电导</strong>，而不是电阻噢</p><p>再研究AT y = 0 <img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415103013929.png" alt="image-20210415103013929" style="zoom:33%;" /></p><p>显然。。m - r = 2维</p><p>回到原来的。</p><p>这个时候他指出，ATy = 0是👇，也是平衡方程，守恒定律，但是并没有解释为什么。淦。我是这样理解，之前的A每列代表一个节点与各边的关系，Ax = 0 解的是<strong>节点</strong>间的关系，而这个关系体现为电势。这里A转置的列代表一条边，ATy = 0 找的是<strong>边</strong>之间的关系，这个关系体现为电流！</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415103440461.png" alt="image-20210415103440461" style="zoom:33%;" /><p>列出以后，AT 对y向量(电流)的组合方程组就是基尔霍夫方程组</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415103817906.png" alt="image-20210415103817906" style="zoom: 25%;" /><p>现在回到线性代数，如何求AT的零向量(左零空间)，也就是求两个特定的y</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415104203613.png" alt="image-20210415104203613" style="zoom:33%;" /><p>他通过研究每个小回路，由回路不积累电流，一直流通的意义得到线性无关的两个y，而大回路则是这俩小回路得出的y的和</p><p>还要研究行空间（列向量代表边），r = 3 </p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415104424526.png" alt="image-20210415104424526" style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415104453122.png" alt="image-20210415104453122" style="zoom:50%;" /><p>这些描粗的边与各主列相对应，这一小部分——没有回路。相关性均来自回路，<strong>没有回路的图叫做”树”(tree)</strong></p><p>再根据四个子空间的性质推导：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415104754834.png" alt="image-20210415104754834" style="zoom: 25%;" /><p>因为零向量必为[11111…..]`只有一维，所以r = n -1</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415104939049.png" alt="image-20210415104939049" style="zoom:50%;" /><p><strong>结点 - 边长 + 回路数 = 1  这就是欧拉公式，任何图中都具有的一种拓扑性质</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415105217496.png" alt="image-20210415105217496" style="zoom:50%;" /><p>但是这里没考虑外部电源的影响</p><p>如果加入电压源，则加入最左边那一条，电流源则ATy = f</p><p>梳理一下：</p><p>矩阵A是一切的开始，Ax得到电势差，然后再乘以一个物理常量C得CAx = y  </p><p>再用AT乘以y = f 所以 <strong>AT*C*Ax = f</strong></p><p>而AT * A总是对称的，重新理解一遍大概懂了</p><h2 id="13-复习一"><a href="#13-复习一" class="headerlink" title="13.复习一"></a>13.复习一</h2><p>算了。。忍住了跳过的欲望，反正是思修课</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415112435261.png" alt="image-20210415112435261" style="zoom:50%;" /><p>因为b和x都是3维的，所以矩阵A = 3x3 ，别忘了格式。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415113438382.png" alt="image-20210415113438382" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415113619522.png" alt="image-20210415113619522" style="zoom:33%;" /><p>B是 3x4的，N(B) ∈ R4    左矩阵可逆，这里有个结论：可逆矩阵不影响所乘的矩阵的零空间。</p><p>假设 Bx =0  A可逆  那么ABx=0</p><p>这里的秩一看就是2，所以令3，4这俩自由列分别对应的变量赋值为1，另一个为0，算出基。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415114513006.png" alt="image-20210415114513006" style="zoom:50%;" /><p>A和 -A有相同的四个子空间</p><p>如果A 和 B有相同的四个子空间，那么A是B的倍数</p><p>所有满秩方阵都可以。显然是错的</p><p>交换矩阵的两行，行空间和零空间没变，其他的变了</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415120710838.png" alt="image-20210415120710838" style="zoom:50%;" /><p>好问题！</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415120818364.png" alt="image-20210415120818364" style="zoom:50%;" /><p><strong>行空间和零空间的交集只有零向量！</strong>列空间同理，他们是正交的</p><h2 id="14-正交向量与子空间"><a href="#14-正交向量与子空间" class="headerlink" title="14.正交向量与子空间"></a>14.正交向量与子空间</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415151139335.png" alt="image-20210415151139335" style="zoom:50%;" /><p>这个图的性质很明显。两组正交关系</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415151310235.png" alt="image-20210415151310235" style="zoom:50%;" /><p>正交的向量：</p><p>这意味着两个向量锤子，夹角为90°</p><p>也是用点乘来定义：👇</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415151457618.png" alt="image-20210415151457618" style="zoom:33%;" /><p>得到一个<strong>向量长度的平方 xT * x</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415151955142.png" alt="image-20210415151955142" style="zoom: 25%;" /><p>对于正交的向量  ||x|| 2  +   ||y||2   =  ||x+y||2</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415152111503.png" alt="image-20210415152111503" style="zoom:33%;" /><p>如果一个是0向量，另一个就任意了，结果总是0</p><hr><p>推广到正交子空间：</p><p>S和T子空间正交，意味着任何位于两者中的向量与另一者的全部向量正交。</p><p>且它们一定不会拥有某个公共的非零向量</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415154204699.png" alt="image-20210415154204699" style="zoom:50%;" /><p><strong>这个等式说明行空间的所有基底都与 x 正交</strong></p><p>很好验证，他们的线性组合，即整个行空间的所有向量，都与x正交。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415155952963.png" alt="image-20210415155952963" style="zoom:50%;" /><p>零空间包含所有垂直行空间的向量</p><hr><p><strong>如何求一个无解的Ax = b 的 “解”</strong></p><p>比如当m &gt; n时大部分情况是无解的，情景引入：</p><p>一个卫星经过，测量位置，你测量了1000次，或为体检者测量频率。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415160341547.png" alt="image-20210415160341547" style="zoom:50%;" /><p>于是Ax = b解不出来了</p><p>去掉坏数据是不现实的，根本没有判断依据。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415160501205.png" alt="image-20210415160501205"></p><p>这样会得到完整的信息。</p><hr><p><strong>至关重要的矩阵——ATA</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415160657584.png" alt="image-20210415160657584" style="zoom:50%;" /><p>当我们遇到坏矩阵时，可以通过左乘逆来处理</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415160747586.png" alt="image-20210415160747586" style="zoom:50%;" /><p>当然，上下两个x是不一样的。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415160924180.png" alt="image-20210415160924180" style="zoom: 33%;" /><p><strong>ATA并不总是可逆的！</strong></p><p>当且仅当A的各列线性无关时，ATA是可逆的，下节课至关重要！</p><h2 id="15-子空间投影"><a href="#15-子空间投影" class="headerlink" title="15.子空间投影"></a>15.子空间投影</h2><p>非常重要，名留青史</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415211634652.png" alt="image-20210415211634652" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415211808092.png" alt="image-20210415211808092" style="zoom:50%;" /><p>p是b在a上的投影，e是b和p间的误差，如果引入角度，会导出很复杂的公式，p在a的子空间内，我们要找的就是那个x使得p = xa  关键是垂直a垂直于e</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415211946824.png" alt="image-20210415211946824" style="zoom:67%;" /><p>导出两个关键式子：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415212128075.png" alt="image-20210415212128075" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415212149485.png" alt="image-20210415212149485" style="zoom:80%;" /></p><p>如果b翻倍，则p翻倍，如果a翻倍无影响，因为分子和分母的倍数抵消了</p><p>这里上升到线代的高度，投影是由矩阵完成的，这个矩阵作用于b得到投影p，设为P👇</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415212451637.png" alt="image-20210415212451637" style="zoom:50%;" /> <p>现在研究这个矩阵的性质</p><p><strong>列空间的作用：你用任何向量b乘以这个矩阵，总会落到列空间里</strong>，b对列进行线性组合嘛。。当然</p><p>那么Pb = p，落到了这条线上，此处为a那条线，只有一维</p><p>还有这个矩阵是对称的，如果投影两次，第二次没有作用，所以P平方 = P</p><p>请记住x 和 p 和 P的三个公式</p><hr><p>why project？为什么要投影</p><p>因为Ax = b 可能无解，只能求解最接近的。而Ax总是在列空间里，但b不一定在，所以微调b成p</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415213158197.png" alt="image-20210415213158197" style="zoom:50%;" /><p>现在研究三维：</p><p>找一个向量b投影到平面的漂亮公式，设平面的一组基为  a1 a2 ，这个平面是[a1 a2] 的列空间</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415213351976.png" alt="image-20210415213351976" style="zoom:50%;" /><p>仍然引进e = b-p 垂直于平面</p><p>p = x1a1 + x2a2 写成p = Ax(帽)我们的任务是寻找合适的列组合，让误差e垂直于这个平面，也垂直于俩基</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415213719636.png" alt="image-20210415213719636" style="zoom:50%;" /><p>如果换成一个矩阵形式，</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415213838851.png" alt="image-20210415213838851" style="zoom: 33%;" /><p>这与之前的二维的方程非常像，因为之前的A是一维的，写成一个a向量而已。</p><p>由方程得出e在左零空间里，然后又由左零和列空间的正交关系得：e垂直于A的列空间</p><p>仍按当时解方程的步骤继续:</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415214223925.png" alt="image-20210415214223925" style="zoom: 33%;" /><p>当时的aTa是一个数字，现在是一个n*n的矩阵</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415214410254.png" alt="image-20210415214410254" style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415214607486.png" alt="image-20210415214607486" style="zoom:25%;" /><p>hahh,好坑啊，不能直接化为 I，如果是可逆方阵，它的列空间为整个n维空间，自然</p><p>经验证，另外两个性质仍然是成立的哈哈。</p><hr><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415215717027.png" alt="image-20210415215717027" style="zoom:50%;" /><p>通过最小二乘法拟合一条直线</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415220041277.png" alt="image-20210415220041277"></p><p>3个点，产生了3处误差，列出矩阵</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415220211668.png" alt="image-20210415220211668" style="zoom:50%;" /><p>下节课求解哈哈</p><h2 id="16-投影矩阵和最小二乘"><a href="#16-投影矩阵和最小二乘" class="headerlink" title="16.投影矩阵和最小二乘"></a>16.投影矩阵和最小二乘</h2><p>当b投影到平面A的时候两个极端：</p><ol><li>b如果直接就在列空间里，Pb = b</li><li>b如果垂直于列空间，则Pb = 0</li></ol><p>那么其实Pb的作用是保留第一条的部分，去除第二条的部分（分运动呗。）</p><p>在A列空间里的b可以表现为Ax，这个结论用的很多。。也很好理解</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210416151113284.png" alt="image-20210416151113284" style="zoom: 50%;" /><p>那么把b投影到列和左零空间（<strong>图一</strong>）：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210416151251339.png" alt="image-20210416151251339" style="zoom:50%;" /><p>显然，由性质理解一下，也是容易证明的结论，p和e的平方等于本身</p><p>而只要有了A和b，就能导出x，就能得出P和p 和 e</p><hr><p>继续数学问题：</p><p>首先要定义并最小化“误差”的概念，然后用最小二乘（拥有最小平方和的解）</p><p>这里的“误差”是Ax - b，就是e，当然要取其长度。得了解两幅图</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210416152236280.png" alt="image-20210416152236280" style="zoom:33%;" /><p>这里其实就是线性回归分析，统计学中并不对“离群值”进行处理，因为那很可能是错误的值。</p><p>而线性回归容易受到离群值的影响，当然他仍然很常用。然后用bpe来表示，<strong>图二：</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210416152609502.png" alt="image-20210416152609502" style="zoom: 33%;" /><p>p是用来代替b的，它们是列的组合，是最接近的组合。那接下来解一下<strong>ATAx = ATb</strong></p><p>代入A和b，都是已知的，利用公式得到x(此处为[C D])</p><p>含C 和 D 的方程组称为正规方程组。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210416162119769.png" alt="image-20210416162119769" style="zoom:33%;" /><p>没想到啊，竟然两种方法都能得到这个方程。(求偏导和线性)</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210416153511992.png" alt="image-20210416153511992" style="zoom:50%;" /><p>然后就能写出新的方程最优直线y，由此解出p和e来，<strong>而且对应的p+e = b</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210416153909050.png" alt="image-20210416153909050" style="zoom:33%;" /><p>当然e垂直于整个列空间，包括p在内，请记住图一和图二，C和D在图二代表那条直线，而在第一张图却并没有出现，<strong>但他们的线性组合就是p</strong></p><p>这样就完成了最小二乘法</p><hr><p>14课末尾的疑问：</p><p>当且仅当A的各列线性无关时，则ATA是可逆的，这是最小二乘法成立的大前提。</p><p>假设ATAx = 0 并且ATA是可逆的，可以推出x只有零解。这里有个我们学的诡异技巧。。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210416155411342.png" alt="image-20210416155411342" style="zoom:50%;" /><p>这就证明了Ax = 0，又A列向量无关，所以x所在的零空间只有零向量，所以ATA可逆。</p><hr><p>提出一种情况：</p><p>互相垂直的向量必然线性无关，排除0向量，引入术语：正交，标准正交向量组</p><h2 id="17-正交矩阵和Gram-Schmidt正交化"><a href="#17-正交矩阵和Gram-Schmidt正交化" class="headerlink" title="17.正交矩阵和Gram-Schmidt正交化"></a>17.正交矩阵和Gram-Schmidt正交化</h2><p>用q来作为向量的符号提示正交</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420172240548.png" alt="image-20210420172240548" style="zoom:50%;" /><p>在标准正交的情况下</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420172448080.png" alt="image-20210420172448080" style="zoom:50%;" /><p><strong>但是只有在Q为方阵的时候，根据惯例我们才叫它正交矩阵，此时QT = Q-</strong></p><p>这和置换矩阵的性质是一样的，只要将1放在不同位置哈哈就是正交的</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420172940446.png" alt="image-20210420172940446"></p><p>注意除了列之间正交，还要保证列向量长度为1</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420182510033.png" alt="image-20210420182510033" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420182658450.png" alt="image-20210420182658450" style="zoom:50%;" /><hr><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420183921298.png" alt="image-20210420183921298" style="zoom: 50%;" /><p>还是提醒一下，正交矩阵得是方阵，不然得这样说👆</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420184017949.png" alt="image-20210420184017949" style="zoom:50%;" /><p>如果Q是方阵，又有Q各列向量线性无关，则列空间为整个n维，那么投影矩阵为 I</p><p>而事实上，在这种情况下，Q为正交矩阵，那QT = Q-，则得到单位阵，此时投影矩阵的两个性质：平方等于本身，对称都满足。</p><p>而此时的投影有很大的优势！</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420184624095.png" alt="image-20210420184624095" style="zoom:50%;" /><p><strong>非常重要的式子！！！</strong></p><p>向量和标准正交基作点乘，则投影到标准正交空间（编的名词），此时的性质非常棒！</p><hr><p><strong>Graham-Schmidt 格拉姆-施密特正交化法</strong></p><p>这里的大写字母表示正交化后的基</p><p>使列向量正交化，即A -&gt; Q，记得向量点乘是一个数字！</p><p>先得到<strong>正交的向量</strong>，再标准化，这里求正交的向量其实是求当年的误差向量e</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420185445350.png" alt="image-20210420185445350" style="zoom:50%;" /><p>现在求第三个向量C，此时也就是求C分别对A和B的误差。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420190752725.png" alt="image-20210420190752725"></p><p>几何上很好理解</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420191126160.png" alt="image-20210420191126160" style="zoom:33%;" /><p>而A和正交化的Q的列空间是一样的。只是把基换成正交来优化而已</p><hr><p>类比A = LU这样，那么必然存在A = QR，这也是正交化方法的表达式</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420192238053.png" alt="image-20210420192238053"></p><h2 id="18-行列式及其性质"><a href="#18-行列式及其性质" class="headerlink" title="18.行列式及其性质"></a>18.行列式及其性质</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420195953318.png" alt="image-20210420195953318" style="zoom:50%;" /><p>三个性质：</p><ol><li><p>单位矩阵行列式为1</p></li><li><p>交换两行，行列数符号取反，这里有啥逆序啥的（任何一种置换都分奇偶！）</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420200617195.png" alt="image-20210420200617195"></p></li><li><p>两列成倍数，则行列式为0，以后的结论都可以从上面3个结论推出来，确实简单，倍数提出来，交换后行列数相等，但是又要加符号，所以。。</p></li><li><p>任意行加减任意行不改变行列式，先用性质三拆出来，再用性质四</p></li><li><p>要是有一行为0，则行列式为0</p></li><li><p><strong>任意矩阵化为U则行列式为对角元乘积</strong>（这揭示了提出行列式的部分目的。。）</p><p>应用性质5消去上面的不变，然后用性质三提出系数，再用性质1</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420204658436.png" alt="image-20210420204658436" style="zoom:50%;" /><p>如果主元存在0，那么得到0</p></li><li><p>detA = 0  &lt;=&gt; A是奇异的，不可逆，而可逆必然detA≠0</p></li></ol><p>任何性质都离不开消元法</p><ol start="9"><li>det(AB) = detA * detB</li><li>det AT = detA，连接了行和列</li></ol><h2 id="19-行列式公式和代数余子式"><a href="#19-行列式公式和代数余子式" class="headerlink" title="19.行列式公式和代数余子式"></a>19.行列式公式和代数余子式</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;为了学机器学习，重拾已经快忘干净的线代，接着上学期看的MIT，从头开始看起，没有考试的压力，单纯的探索线代世界，实在是太快乐了！而从中发现的</summary>
      
    
    
    
    <category term="math" scheme="https://darren-dong.com/categories/math/"/>
    
    
    <category term="线代" scheme="https://darren-dong.com/tags/%E7%BA%BF%E4%BB%A3/"/>
    
  </entry>
  
  <entry>
    <title>data-analyze</title>
    <link href="https://darren-dong.com/2021/04/10/data-analyze/"/>
    <id>https://darren-dong.com/2021/04/10/data-analyze/</id>
    <published>2021-04-10T11:23:24.000Z</published>
    <updated>2021-04-10T11:26:50.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
      
    
    
    
    <category term="python" scheme="https://darren-dong.com/categories/python/"/>
    
    
    <category term="python-data" scheme="https://darren-dong.com/tags/python-data/"/>
    
  </entry>
  
  <entry>
    <title>统计</title>
    <link href="https://darren-dong.com/2021/04/10/%E7%BB%9F%E8%AE%A1/"/>
    <id>https://darren-dong.com/2021/04/10/%E7%BB%9F%E8%AE%A1/</id>
    <published>2021-04-10T09:30:55.000Z</published>
    <updated>2021-04-20T03:46:45.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="描述性统计"><a href="#描述性统计" class="headerlink" title="描述性统计"></a>描述性统计</h1><h1 id="1-入门"><a href="#1-入门" class="headerlink" title="1.入门"></a>1.入门</h1><p>当这门课完结的时，将会掌握对数据集进行收集，整理，计算和可视化的所需要工具</p><p>创建一个谷歌账户</p><h2 id="BBC记忆测试"><a href="#BBC记忆测试" class="headerlink" title="BBC记忆测试"></a>BBC记忆测试</h2><p>这个例子目前已经被取消了</p><p>可惜，BBC 已经不再提供人脸记忆测试了。</p><p>下面是此测试的简单描述，以帮助你跟上课程其余部分。该测试包含三个部分：</p><ol><li>在第一部分向用户展示 12 张照片。</li><li>在第二部分向用户展示另外 12 张照片。</li><li>在第三部分向用户展示 48 张照片，并询问他们是否在第一部分/第二部分见过每一张照片或在这两个部分都没见过。</li></ol><p>测试之后，用户会得到两个分数：</p><ul><li>“识别得分”，用户正确猜出某张人脸他是否见过的比例，不论用户看到的是人脸的哪个部分。</li><li>“短期记忆得分”，用户正确猜出某张人脸属于第一部分还是第二部分的比例。</li></ul><p>测试建议用户在完成第一部分，开始第二部分前休息5分钟。</p><p>BBC 是如何测量记忆的？</p><ul><li>你记住了哪些面孔？</li><li>你从第一部分和第二部分正确识别和放置的百分比？</li><li>你是否知道你是第一次还是第二次见到某个面孔？</li><li>你是否知道某个面孔已存在？</li><li>你记住的面孔数量？</li></ul><p>答案是百分比。</p><p>当选取了一种度量方法，也有了一种可操作的定义，此处为正确识别的百分比</p><p>抽象概念很难定义和度量</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410194240953.png" alt="image-20210410194240953"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410194335563.png" alt="image-20210410194335563"></p><p>我们必须仔细思考如何定义和度量“构建”</p><p>我们给出的构建的描述，让我们可以直接测量这个构建</p><p><strong>这样的描述被称为 可操作 的定义</strong></p><p>然后我们假设并分析了影响记忆的因素！</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410195157781.png" alt="image-20210410195157781"></p><p>当更多的因素为常量时，我们更加相信结果</p><h2 id="思考样本"><a href="#思考样本" class="headerlink" title="思考样本"></a>思考样本</h2><p>当比较所有参与测试的人员（大样本）和其中的学生时（小样本）</p><p>总体<strong>参数</strong>（如 mu 或 \mu）是用来描述整个总体的值。</p><p>样本<strong>统计量</strong>（如 X-bar 或 \bar x<em>x</em>¯）是用来描述<strong>样本的值</strong>；我们使用统计量来估计总体参数。<strong>估计值是我们对总体参数的最佳猜测</strong>。所以，我们可以使用 X-bar 来<strong>估计</strong> mu。</p><p>而二者的区别叫做抽样误差。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410195644531.png" alt="image-20210410195644531"></p><p>样本越大越优质，越随机越优质</p><p>我们通过数据可视化（此处表格转化成图表）发现其中可能蕴藏的规律，但别忘了隐藏的因素</p><p>即使表现出了明显的规律，但我们无法确认原因</p><h2 id="金拱门理论"><a href="#金拱门理论" class="headerlink" title="金拱门理论"></a>金拱门理论</h2><p>记住：Correlation does not prove causation  （相关并不代表因果）</p><p>这是个非常重要的概念</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410200633367.png" alt="image-20210410200633367"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410200901278.png" alt="image-20210410200901278"></p><p>所以即使表现出了明显的规律，但我们无法确认原因。</p><p>如果我们想要显示因果关系，即某个特定因素导致了另一个因素，我们要开展 <strong>对照试验</strong></p><h3 id="Survey"><a href="#Survey" class="headerlink" title="Survey"></a><strong>Survey</strong></h3><ul><li>它是了解总体的最简单方式之一</li><li>相对来说成本较低</li><li>可以远程进行</li><li>任何人都可以访问并分析调查结果</li></ul><p>不足</p><ul><li>不真实的回答      –可能是心理原因或者啥</li><li>有偏见的回答        –环境，教育等因素的影响</li><li>参与者没理解问题的意思     –这得出的答案叫做<strong>应答偏差</strong></li><li>参与者拒绝回答       –某个群体因为某些原因拒绝回答，带来<strong>无应答偏差</strong></li></ul><p>还记得同一个属性有很多种衡量方法，我们在问卷里要尽量采用主观衡量的方法，</p><p>仔细斟酌调查问卷并认真措辞</p><h3 id="对照试验"><a href="#对照试验" class="headerlink" title="对照试验"></a>对照试验</h3><h4 id="单盲"><a href="#单盲" class="headerlink" title="单盲"></a>单盲</h4><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410202316929.png" alt="image-20210410202316929"></p><p>不告诉它们情况的目的是控制主观带来的相当大的偏差，这称为blinding(盲法)</p><p>这常用于主观影响行为时，这种无效药丸叫做安慰剂</p><p>但是知情同意书会说明参与者可能会进入对照组。。不如不说</p><h4 id="双盲"><a href="#双盲" class="headerlink" title="双盲"></a>双盲</h4><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410202949583.png" alt="image-20210410202949583"></p><p>随机性非常重要，而更大的样本更容易实现随机性</p><p>顺便附上一个<a href="https://www.kqed.org/mindshift/26079/why-sleeping-may-be-more-important-than-studying">睡眠调查</a></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410203510980.png" alt="image-20210410203510980"></p><p>答案是C</p><h2 id="基础习题"><a href="#基础习题" class="headerlink" title="基础习题"></a>基础习题</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410204407058.png" alt="image-20210410204407058"><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410204413964.png" alt="image-20210410204413964"></p><p>选取样本，研究总体，呈现的特征是统计量，</p><p>简单来说，参数与总体对应在一起，统计量与样本对应在一起。参数往往是未知的，所以才要通过抽样调查的方法来估计，根据样本算出统计量。统计量就是用来估计参数的。这跟原来的意思不搭边啊。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410204850957.png" alt="image-20210410204850957"><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410204858044.png" alt="image-20210410204858044"></p><p><strong>样本和总体平均值之间的差异称为抽样误差。。sampling error</strong></p><p><strong>Population differences are differences between different populations</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410205312486.png" alt="image-20210410205312486"></p><p>答案3，5，6</p><p><strong>变量是指参加研究的个体间可能不同的量。。</strong></p><p>hypothesis  假设</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410210156556.png" alt="image-20210410210156556"></p><p>答案1，2，4，5</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410210317870.png" alt="image-20210410210317870"></p><p>3，4</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410210412280.png" alt="image-20210410210412280"></p><p>4，5</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410213243525.png" alt="image-20210410213243525"></p><p><strong>1，6，7我们不能下结论，但是可以合理预测</strong></p><p>independent  自变量</p><p>dependent  因变量</p><p>lurking  潜伏变量</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410213701731.png" alt="image-20210410213701731"></p><p>答案是3，5，6</p><p>第一项错的，因为这个<strong>实验性研究</strong>不像<strong>观察性研究</strong>，已经足够缩小无关变量的影响，我们得出结论是合理的</p><p>第四项是干扰，我们得出治疗成果的操作其实是根据它们之间的差值，而不是分数</p><h2 id="进阶习题"><a href="#进阶习题" class="headerlink" title="进阶习题"></a>进阶习题</h2><p>用n代表样本大小</p><p>construct （抽象概念）是不可被直接观察和测量的变量</p><p>你每天走的距离是construct  但如果指定按米测量，它就不是</p><p>从少数样本的研究得出的现象不能说明任何问题：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210410215056385.png" alt="image-20210410215056385"></p><h1 id="2-集中趋势"><a href="#2-集中趋势" class="headerlink" title="2.集中趋势"></a>2.集中趋势</h1><h2 id="频率"><a href="#频率" class="headerlink" title="频率"></a>频率</h2><p>绝对数量（频率）和相对频率（百分比）</p><p>通过整理数据，我们可以清晰地观察变化</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411184322489.png" alt="image-20210411184322489"></p><h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411184838387.png" alt="image-20210411184838387"></p><p>组距 = 区间大小</p><p>percentage百分比 != porpation比例</p><p>简便性有失会牺牲一些信息</p><p>小心信息被过大的组距隐藏起来了</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411185724576.png" alt="image-20210411185724576"></p><p>直方图横坐标是同一属性的分布，可以改变组距，而且有顺序</p><p>柱状图的不同柱子是相互独立的，顺序不重要，分类或定性的</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411190847179.png" alt="image-20210411190847179"></p><p>正偏斜分布</p><p>频率低的分布在右边</p><p>Excel的一些小操作，c和s键，函数公式里，$E$2是常量E2</p><hr><p>这些都是x轴上的自变量</p><p>众数mode   直方图里用最大区间的中位数，受组距影响，与呈现数据的方式有很大关系</p><p>均匀分布没有众数，但是多峰分布由多个众数</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411194036544.png" alt="image-20210411194036544"></p><p>第一个对的</p><hr><p>中位数median</p><p>用之前要排序噢</p><p>处理高偏斜分布时中位数更可信</p><hr><p>平均数average</p><p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20210411194453701.png" alt="image-20210411194453701"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411195527966.png" alt="image-20210411195527966"></p><p>全是对的</p><p>robust 强大且稳定  符合统计的定义</p><p>使用这三个数都是中心测量方法，因为他们都描述分布中心的情况</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411200914056.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411204640630.png" alt="image-20210411204640630"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411204952662.png" alt="image-20210411204952662"><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411205002462.png" alt="image-20210411205002462"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/4938065-f641e015cbe17d86" alt="img"></p><p>平均数和中位数本来一样，但是平均数被稀少的数据拉过去了</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210411211835965.png" alt="image-20210411211835965"></p><p>所以注意自变量和因变量是谁，此处分数为自变量，人数为因变量，直方图的自变量是均匀的</p><h1 id="3-可变性"><a href="#3-可变性" class="headerlink" title="3.可变性"></a>3.可变性</h1><h2 id="IQR"><a href="#IQR" class="headerlink" title="IQR"></a>IQR</h2><p>值域提供了一个关于分布的概要信息，但是方便会牺牲一些东西</p><p>因为它参考的是最极端的数据，受到异常数据影响很大</p><p>习惯上，统计学家忽略较低和较高的各25%！</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412234924656.png" alt="image-20210412234924656"></p><p>Q1  Q2  Q3   Q1和Q3间是<strong>四分位距/四分差</strong>IQR Interquartile range</p><h3 id="异常值"><a href="#异常值" class="headerlink" title="异常值"></a>异常值</h3><p>定义：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412235434276.png" alt="image-20210412235434276"></p><h3 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a><strong>箱线图</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210412235721975.png" alt="image-20210412235721975"></p><p>小点表示异常数据</p><p>均值不一定在IQR中</p><p><strong>不足</strong></p><p>值域和IQR无法考虑所有数据</p><p>完全不同的俩数据分布也可以有相同的IQR</p><p>因此我们需要一个数字，既能显示分布，又能考虑所有的数据</p><p>我们找的是找出每个值与数据集均值之间差的平均值</p><h2 id="平均偏差"><a href="#平均偏差" class="headerlink" title="平均偏差"></a>平均偏差</h2><p>离均差是某个数据减去平均值</p><p>平均偏差 = 离均差之合/n  = 0<img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413000641459.png" alt="image-20210413000641459"></p><p>但这并不能反映甚么，问题是负值会抵消，我们不关心正负，我们只关心绝对距离！平方和取绝对值就可以处理负数。</p><p>引入绝对偏差对应离均差</p><p>平均绝对偏差对应平均偏差</p><p>平方偏差和平均平方偏差（方差）</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413001254455.png" alt="image-20210413001254455"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413001417511.png" alt="image-20210413001417511"></p><p>方差可以看成那个橙色的，而标准差即为边长。</p><p>标准差是最常用的分布测量方法，小写西格玛</p><p>步骤：平均值-&gt;离均差（平均差）-&gt;每个偏差的平方值-&gt;方差-&gt;标准差</p><hr><p>思考：</p><p>为何不直接获得平均绝对偏差。</p><p>它具有重要意义，比如正态分布中，68% 和 95%是一个和两个</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413094303444.png" alt="image-20210413094303444"></p><p>所选样本的标准偏差</p><h3 id="贝塞尔矫正"><a href="#贝塞尔矫正" class="headerlink" title="贝塞尔矫正"></a>贝塞尔矫正</h3><p>通常，抽样中会低估了总体中差异性的数量</p><p>因为抽样往往是总体居于中间的值，用贝塞尔矫正系数，来矫正</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413100446583.png" alt="image-20210413100446583"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210413101551728.png" alt="image-20210413101551728"></p><p>如果用n，那就是样本的标准差</p><p>如果用n-1，那就是对真实的总体标准差更准确的估算</p><p>具体理论没讲</p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><h1 id="4-归一化"><a href="#4-归一化" class="headerlink" title="4.归一化"></a>4.归一化</h1><p>你已经了解了分析图表的四个值，分布，那么还有什么需要分析的呢？</p><p>象棋：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414131710341.png" alt="image-20210414131710341" style="zoom: 50%;" /><p>第一个不直观，大家不了解，第二个只知道多少人高，不知道有多少人参加</p><h2 id="绝对和相对"><a href="#绝对和相对" class="headerlink" title="绝对和相对"></a>绝对和相对</h2><p>当我们关心的是比例以及和其它元素的关系时，使用相对频率</p><p>相对频率直方图</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414131958647.png" alt="image-20210414131958647"></p><p>形状几乎一样</p><p>但对于这个图，我们无法说出190-200的比例，这些信息被隐藏起来了</p><p>可以通过减小组距来显示这些信息，看看减小组距会发生怎样的现象</p><p><video class="vjs-tech" id="vjs_video_3_html5_api" tabindex="-1" role="application" crossorigin="anonymous" src="https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/9ftDJRsfEUI.mp4"></video></p><p>如果再减小时，分布图的形状就会变得松散起来</p><p>问题出现了：</p><p><strong>组距太小，我们会丢失分布图的形状，太大会有信息被隐藏起来</strong></p><p>解决方法是采用连续分布</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414132617168.png" alt="image-20210414132617168" style="zoom:50%;" /><p>答案是1</p><h2 id="理论正态分布"><a href="#理论正态分布" class="headerlink" title="理论正态分布"></a>理论正态分布</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414132718010.png" alt="image-20210414132718010" style="zoom:33%;" /><p>而众数，中位数，平均数相等</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210414132753312.png" alt="image-20210414132753312"></p><p><strong>Z</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415130123307.png" alt="image-20210415130123307"></p><p>就可以知道小于或大于该值的百分比</p><p>确认比例不能通过数字，得通过多少z，这个视频有一步是讲两个图进行“标准化”</p><p><video class="vjs-tech" id="vjs_video_22416_html5_api" tabindex="-1" role="application" crossorigin="anonymous" src="https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/W5qXCZ-nrHM.mp4"></video></p><h2 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415130950473.png" alt="image-20210415130950473" style="zoom:50%;" /><p>即将正态分布中的任何值转换为z值</p><p>z为负数说明x在 μ的左边，σ是标准偏差</p><p>归一化后，平均值则为0，新标准偏差为1</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415131521357.png" alt="image-20210415131521357"></p><p>对于任何正态分布：</p><ol><li>减去平均值</li><li>平移到0</li><li>除以标准偏差，使新的标准偏差为0</li></ol><p>则成为了一个<strong>标准正态分布</strong>。现在数据集中的每个值都用距离平均值的标准偏差表示</p><h2 id="Z"><a href="#Z" class="headerlink" title="Z"></a>Z</h2><p>我们可以把任何正态分布转换为标准正态分布，然后按照任何方式拓展</p><p>它们之间的桥梁是 Z</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415132218585.png" alt="image-20210415132218585" style="zoom:50%;" /><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210415132405152.png" alt="image-20210415132405152"></p><h1 id="5-正态分布"><a href="#5-正态分布" class="headerlink" title="5.正态分布"></a>5.正态分布</h1><h2 id="概率密度函数"><a href="#概率密度函数" class="headerlink" title="概率密度函数"></a>概率密度函数</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210419230030983.png" alt="image-20210419230030983" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210419230926414.png" alt="image-20210419230926414" style="zoom: 67%;" /><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210419231612242.png" alt="image-20210419231612242"></p><h2 id="Z表格"><a href="#Z表格" class="headerlink" title="Z表格"></a>Z表格</h2><p>用微积分可以计算任意处的比例，而这被做成了一张表格</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/ZTable.jpg" style="zoom:33%;" /><h1 id="6-抽样分布"><a href="#6-抽样分布" class="headerlink" title="6.抽样分布"></a>6.抽样分布</h1><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210419235247878.png" alt="image-20210419235247878" style="zoom:50%;" /><h2 id="抽样分布"><a href="#抽样分布" class="headerlink" title="抽样分布"></a>抽样分布</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420084731208.png" alt="image-20210420084731208" style="zoom: 33%;" /><p>抽样分布大致满足正态分布</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420084904044.png" alt="image-20210420084904044" style="zoom:33%;" /><h2 id="样本均值"><a href="#样本均值" class="headerlink" title="样本均值"></a>样本均值</h2><p>在比较均值时需要的信息：</p><p><strong>样本均值是正态分布的，所有样本均值的均值就是总体均值</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420085324314.png" alt="image-20210420085324314" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420085536447.png" alt="image-20210420085536447" style="zoom:33%;" /><p><strong>SE是样本均值分布（亦称为抽样分布）的标准偏差</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420084425804.png" alt="image-20210420084425804" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420090002918.png" alt="image-20210420090002918" style="zoom:33%;" /><p>所以SE=σ/√n￣</p><h2 id="中心极限定理"><a href="#中心极限定理" class="headerlink" title="中心极限定理"></a>中心极限定理</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420090746977.png" alt="image-20210420090746977" style="zoom:50%;" /><p>适用于适用于任意形体，总体可以是任意数量，然后迭代的抽取其中的n个样本并计算出均值</p><p>假设样本量足够大，则画出均值分布图（抽样分布图），是近似正态分布的</p><h2 id="投骰子"><a href="#投骰子" class="headerlink" title="投骰子"></a>投骰子</h2><p>如果只投一次，那么其实就是用原来的总体分布，样本量 = 1，画出来应该是均匀分布</p><p>但是如果每轮投两次，样本量 = 2</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420092512384.png" alt="image-20210420092512384" style="zoom:33%;" /><p>而SE可以用中心极限定理算出来</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420092945271.png" alt="image-20210420092945271" style="zoom: 33%;" /><p>随着样本量的增大，标准误差增大了，而原来默认的是1，我好像有些悟了</p><p>通常我们希望样本量更大，因为标准偏差会告诉我们总体均值更可能落在哪片区域。</p><p>当增大时，标准差变小，区域变窄，更加趋近于那个M，又因为M = μ，就更精确的找到了μ所在的区域</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420093536425.png" alt="image-20210420093536425" style="zoom:50%;" /><p>可以自己<a href="https://onlinestatbook.com/stat_sim/sampling_dist/index.html">尝试</a>一下！不过这里用了贝塞尔矫正</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420093749342.png" alt="image-20210420093749342"></p><h2 id="Klout应用"><a href="#Klout应用" class="headerlink" title="Klout应用"></a>Klout应用</h2><p>计算投掷四面体骰子，平均值至少达到3的概率。</p><p><strong>通过该定理，我们可以知道给定的任意均值会处在样本均值分布的哪个位置</strong></p><p>还可以以此判断该样本是否典型</p><p><a href="http://klout.com/corp/score">Klout</a> 是什么？它的原理是什么？</p><p><video class="vjs-tech" id="vjs_video_402492_html5_api" tabindex="-1" role="application" crossorigin="anonymous" src="https://s3.cn-north-1.amazonaws.com.cn/u-vid-hd/3q0oPuWxFpA.mp4"></video></p><p>平均分低于中位数，很标准的双峰分布</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210420101118057.png" alt="image-20210420101118057"></p><hr><h1 id="推理统计"><a href="#推理统计" class="headerlink" title="推理统计"></a>推理统计</h1><h1 id="1-评估"><a href="#1-评估" class="headerlink" title="1.评估"></a>1.评估</h1><p>Estimation</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;描述性统计&quot;&gt;&lt;a href=&quot;#描述性统计&quot; class=&quot;headerlink&quot; title=&quot;描述性统计&quot;&gt;&lt;/a&gt;描述性统计&lt;/h1&gt;&lt;h1 id=&quot;1-入门&quot;&gt;&lt;a href=&quot;#1-入门&quot; class=&quot;headerlink&quot; title=&quot;1.入门&quot;</summary>
      
    
    
    
    <category term="math" scheme="https://darren-dong.com/categories/math/"/>
    
    
    <category term="statistics" scheme="https://darren-dong.com/tags/statistics/"/>
    
  </entry>
  
  <entry>
    <title>crawler</title>
    <link href="https://darren-dong.com/2021/04/10/crawler/"/>
    <id>https://darren-dong.com/2021/04/10/crawler/</id>
    <published>2021-04-10T08:34:23.000Z</published>
    <updated>2021-04-11T05:01:43.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景和配置"><a href="#背景和配置" class="headerlink" title="背景和配置"></a>背景和配置</h1><p>对大数据的获取，处理和分析，以及基于大数据的智能应用，已成为提高竞争力的关键因素</p><p>我们需要的数据大多源于各个网站，但是不同网站结构不一，布局复杂，渲染方式多样</p><p>有的网站还采取了一系列“反爬”，我们也需要针对的反制措施！</p><p>爬虫是服务机器学习和人工智能发展非常重要的技术！为其提供优质的数据</p><p>崔佬提供了多种安装python库的方式：</p><ul><li>pip/conda</li><li>wheel</li><li>去官网/github下载源码再安装</li></ul><p>爬虫可以简单分为：爬取页面，分析页面，存储数据</p><p><strong>请求库：</strong></p><ol><li><p>requests:  爬取html</p></li><li><p>Selenium  自动化测试，驱动浏览器执行某些（点击，下拉）操作，渗透JS渲染</p><p>但还要配置浏览器，此处用最好的ChromeDriver，先更新chrome</p><p>下载后直接放进环境的Scripts里面，或者单独设置环境变量</p></li><li><p>PhantomJS 无界面，可脚本编程的webkit浏览器引擎，被selenium弃用了，推荐chrome无界面模式</p></li><li><p>aiohttp  提供异步web服务，顺便安装cchardet aiodns</p></li></ol><p>下面装解析库，虽然提取信息方式多样，但写起来麻烦，不如强大的库，库还提供解析</p><p><strong>解析库：</strong></p><ol><li><p>lxml 解析HTML /XML  支持XPath解析方式，且效率非常高</p></li><li><p>beautiful soup 解析HTML /XML，可以很方便的提取数据，有强大的API和多样的解析方式</p></li><li><p>pyquery  提供了和jQuery类似的语法来解析HTML文档，还支持CSS选择器</p></li><li><p>tesserocr  通过OCR对抗验证码，是对<a href="https://github.com/UB-Mannheim/tesseract/wiki">tesseract</a>的再封装，先装后者</p><p>ps:(Optical Character Recognition 光学字符识别)扫描字符并转换成电子文本</p><p>一直失败。。。选择了替代的pytesseract</p></li></ol><p><strong>数据库</strong></p><p>关系型如SQLite  ,<strong>MySQL</strong>  ,Oracle   ,SQL Server  ,DB2     按表存储</p><p>非关系型如 <strong>MongoDB   Redis</strong>    键值对，更灵活</p><ol><li>MySQL  官网</li><li>mongodb懒得装了</li><li>redis还是装一下，还有可视化管理工具redis desktop manager</li></ol><p><strong>存储库</strong></p><p>用来和python交互，MySQL需要PyMySQL,  MongoDB需要PyMongo</p><p>我只下了PyMySQL</p><p><strong>web库</strong></p><p>搭建一些API接口供爬虫使用，比如维护一个代理池</p><ol><li>flask   轻量级web服务程序</li><li>tornado   支持异步的web框架</li></ol><p><strong>APP爬取库</strong></p><p>先不装了。。。</p><p>又是一堆。。。。还跟Android有关</p><p><strong>爬虫框架</strong></p><p>我们直接用requests , selenium等库写爬虫，当小型时很好，但写多了就有些麻烦和凌乱</p><p>上框架！这样我们只用关心爬取逻辑，而不是具体功能的实现！</p><ol><li><strong>pyspider  失败。。。</strong></li><li>Scrapy要配合splash和其python库  成功。。</li><li>scrapy-redius  成功。。</li></ol><p><strong>部署库</strong></p><ol><li><p>Docker  成功</p><p>容器技术，打包应用和环境，极大方便了应用服务的部署，</p></li><li><p>Scrapyd  部署和运行Scrapy的工具，针对linux，那没事了</p></li></ol><p>cao</p><p>没装的有：</p><p>tessorocr 图形识别码,有替代</p><p>mongodb 和配套的，。。希望别用这破玩意</p><p>app 爬取库  。。我吐了</p><p>scrapyd 部署工具。。应该用不着吧</p><p>pyspider bug  。。还早</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景和配置&quot;&gt;&lt;a href=&quot;#背景和配置&quot; class=&quot;headerlink&quot; title=&quot;背景和配置&quot;&gt;&lt;/a&gt;背景和配置&lt;/h1&gt;&lt;p&gt;对大数据的获取，处理和分析，以及基于大数据的智能应用，已成为提高竞争力的关键因素&lt;/p&gt;
&lt;p&gt;我们需要的数据大多源</summary>
      
    
    
    
    <category term="python" scheme="https://darren-dong.com/categories/python/"/>
    
    
    <category term="crawler" scheme="https://darren-dong.com/tags/crawler/"/>
    
  </entry>
  
  <entry>
    <title>matlab</title>
    <link href="https://darren-dong.com/2021/04/06/Matlab/"/>
    <id>https://darren-dong.com/2021/04/06/Matlab/</id>
    <published>2021-04-06T12:00:25.000Z</published>
    <updated>2021-05-01T09:39:08.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官网教程"><a href="#官网教程" class="headerlink" title="官网教程"></a>官网教程</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li>无需声明</li><li>save + filename+ var 保存工作区 (或某些变量)</li><li>clear 清空工作区   clc  清除命令行窗口</li><li>load + filename + var 加载工作区(或某些变量)</li><li><strong>加分号会不输出结果</strong>，直接输入变量名会输出变量</li><li>内置了一些常量，pi为Π，虽然显示四位，但内部用高精度存储</li><li>内置了一堆函数，如abs，eig（计算特征值）</li><li>直接转换为虚数，在运算出现时</li><li>format long 切换至高精度显示  format short 默认4位</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210408110030944.png" alt="image-20210408110030944"></p><p>类似jupyterbook 的模式，可以插入描述，右边可以改变输出显示模式</p><p>点击命令行，会自动高亮输出行</p><p>用section break功能分块，然后单独执行，会在输出中单独实时更改，不会影响其他块</p><p>在layout调布局，可同时使用脚本和命令行！</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>x = [1;3]  空格或逗号分隔组成行向量，用 ; 就是列向量，结合起来可以创建矩阵</p><p>numel(x)  显示x中的元素数目</p><p>用 ：创建等间距向量 ，中间那个指定间距</p><p>如果您知道向量中所需的元素数目（而不是每个元素之间的间距），则可以改用 <code>linspace</code> 函数：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">linspace</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span>last<span class="token punctuation">,</span>number_of_elements<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，请使用逗号 (<code>,</code>) 分隔 <code>linspace</code> 函数的输入。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>x <span class="token operator">=</span>     <span class="token number">0</span>    <span class="token number">0.250</span>    <span class="token number">0.500</span>    <span class="token number">0.750</span>    <span class="token number">1.000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>x’   为转置， x = x’  </p><hr><p>rand(2)  生成2*2随机数矩阵  （0-1）</p><p>rand (m,n)  生成 m*n</p><p>zeros(m,n)</p><p>size(x)  返回x的大小 是一个1x2矩阵，[m n]</p><hr><p>x(2) 索引用的是括号      x(m:n) 提取 m-n</p><p>对多行：x(m,n)提取  x(1,:) 第一行  x(:,3) 第三列</p><p>关键字：end</p><p>矩阵中的单项也允许算术运算，y = A(end-1,end-2)</p><p>如果对矩阵使用单索引，则从上至下遍历每列</p><p>可以用变量当作data的索引</p><hr><p>也可以结合使用冒号运算符</p><p>冒号运算符可以引用某个值范围。以下语法会创建一个包含矩阵 <code>A</code> 的第 1 行、第 2 行和第 3 行所有元素的矩阵。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个是1，而不是0</p><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>标量+数组，则数组的每一个元素都与该标量相加</p><p>等同大小的数组则可以直接相加</p><p>您可以将数组中的所有元素与某个标量相乘或相除。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">z <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>xy <span class="token operator">=</span> x<span class="token operator">/</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>max 求出最大项，接受两项则第二项为索引值<code>[vMax,ivMax] = max(v2)</code></p><p>round  四舍五入为整数</p><p>矩阵乘法 <code>*</code>   按元素相乘 <code>.*</code></p><p>如果列数为1和非1但是行数相等，也可以按元素乘，每行×对应标量</p><p>size(x)  返回x的大小 是一个1x2矩阵，[m n]，也可以分别接收<code>[dr,dc] = size(data)</code></p><p>如果只需函数的第二个输出，可以使用波浪号字符 (<code>~</code>) 忽略特定输出。[~,ivMax] = max(v2)</p><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><p>可以直接搜索函数哟！！</p><p>每个函数都有完整的支持文档，说明了所有用法</p><p>randi函数好多用法，一次成功！</p><p>第一个参数指定随机整数值  从一到指定数字  </p><p>您也可以使用 <code>doc</code> 函数打开文档。文档名就是函数名</p><h2 id="向量图"><a href="#向量图" class="headerlink" title="向量图"></a>向量图</h2><p>plot(x,y)绘制向量图，横向量和列向量对应项对应坐标</p><p>利用<a href="https://ww2.mathworks.cn/help/matlab/ref/linespec.html">文档</a>修改线条设定，参数任意顺序哟</p><p>使用hold on 命令保留之前的plot留下的痕迹</p><p>hold on 会启用保留模式，hold off 回到默认模式</p><p>当您单独绘制一个向量时，MATLAB 会使用向量值作为 y 轴数据，并将 x 轴数据的范围设置为从 <code>1</code> 到 <code>n</code>（向量中的元素数目）。</p><p><code>Line</code> 属性控制 <code>Line</code> 对象的外观和行为。通过更改属性值，您可以修改线图的某些方面。使用圆点表示法查询和设置属性。<a href="https://ww2.mathworks.cn/help/matlab/ref/matlab.graphics.chart.primitive.line-properties.html">https://ww2.mathworks.cn/help/matlab/ref/matlab.graphics.chart.primitive.line-properties.html</a></p><p><strong>MATLAB 中还有许多其他绘图函数。您可以在 <a href="https://www.mathworks.com/products/matlab/plot-gallery.html">MATLAB 图库</a>中看到一个详尽的列表。</strong></p><p>卧槽太强大了！matlab yyds</p><hr><p>title(“xx”)为现有绘图添加标签，此类函数的输入是一个字符串。MATLAB 中的字符串是用双引号 (<code>&quot;</code>) 引起来的。</p><p>字符串串联(“Sample “ + sample(3) + “ Data”)</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'t_&#123;seconds&#125;'</span><span class="token punctuation">)</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'e^t'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下标和上标的写法！</p><p>您可以使用 <code>legend</code> 函数为绘图添加图例。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">legend</span><span class="token punctuation">(</span>"a"<span class="token punctuation">,</span>"b"<span class="token punctuation">,</span>"c"<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>xlim([xmin xmax])放大并查看这部分， 使用输出窗格中的数据游标查看频率位置。<br><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/tooltip.gif" alt="img"></p><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>import dat</p><p>.mat 文件工作区保存的变量将被导入</p><p>图片的话<img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210408232359673.png" alt="image-20210408232359673" style="zoom:67%;" /></p><p>文本文件或者电子表格</p><p>因为有很多方式导入，这时会打开导入工具(import tools)</p><p>被导入的是蓝色区域，缺失数据是橙色，将会被默认替换为NaN</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210408232547731.png" alt="image-20210408232547731"></p><p>可以选择导出模式，表将导入一个变量，变量名参考文件名，标题会被识别成变量名</p><p>比如：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210408234720795.png" alt="image-20210408234720795"><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210408234728901.png" alt="image-20210408234728901"></p><p>您可以通过在实时脚本的输出窗格中点击表来与表进行交互。例如，您可以使用表的一个变量对表进行排序。<br>![img](<a href="https://matlabacademy-content.mathworks.com/4.26/R2020b/cn/content/Importing">https://matlabacademy-content.mathworks.com/4.26/R2020b/cn/content/Importing</a> Data/Importing Data as a Table/images/sorttablesmall.jpg)<br>在您对表感到满意时，您可以通过更新代码使更改永久化。<br>![img](<a href="https://matlabacademy-content.mathworks.com/4.26/R2020b/cn/content/Importing">https://matlabacademy-content.mathworks.com/4.26/R2020b/cn/content/Importing</a> Data/Importing Data as a Table/images/updatecodesmall.jpg)</p><p>这会在脚本里自动生成相应的代码</p><p>用变量和 : 提取表格，生成的变量仍是表格，<strong>即使单个，也是表格！</strong></p><h2 id="逻辑索引"><a href="#逻辑索引" class="headerlink" title="逻辑索引"></a>逻辑索引</h2><p>内置了布尔值系统，但这里类型是logical      <img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210408235343375.png" alt="image-20210408235343375"></p><p>您可以使用关系运算符将某个向量或矩阵与单个标量值进行比较。结果是与原始数组相同大小的逻辑数组。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">10</span> <span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">12</span>ans <span class="token operator">=</span>     <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>您可以使用逻辑数组作为数组索引，在这种情况下，MATLAB 会提取索引为 <code>true</code> 的数组元素。以下示例将会提取 <code>v1</code> 中大于 6 的所有元素。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">v <span class="token operator">=</span> <span class="token function">v1</span><span class="token punctuation">(</span>v1 <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span>v <span class="token operator">=</span>    <span class="token number">6.6678</span>    <span class="token number">9.0698</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>您可以使用逻辑索引在数组中重新赋值。例如，如果您要将数组 <code>x</code> 中等于 <code>999</code> 的所有值都替换为值 <code>1</code>，请使用以下语法。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">x</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">999</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的和和或是  <code>&amp;  |</code></p><h2 id="编程构造"><a href="#编程构造" class="headerlink" title="编程构造"></a>编程构造</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">if</span> xxxxxxxxxxxx<span class="token keyword">elseif</span> xxxxxxx<span class="token keyword">else</span>xxx<span class="token keyword">end</span>  <span class="token operator">/</span><span class="token operator">/</span>这些语言非得加个<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">for</span> 向量（有多个值）xxxxxxxxx<span class="token keyword">end</span><span class="token function">disp</span><span class="token punctuation">(</span>"done<span class="token punctuation">!</span>"<span class="token punctuation">)</span>  <span class="token operator">/</span><span class="token operator">/</span>display可还行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是如果只是简单的对向量进行处理，matlab提供了更简单的做法</p><p>比如点乘<code>.*</code>，比如<code>.^</code></p><p>length() 求长度 pause(second) 可以观察其生成过程，奇异值</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">基本语法示例说明x <span class="token operator">=</span> <span class="token keyword">pi</span>使用等号 <span class="token punctuation">(</span><span class="token operator">=</span><span class="token punctuation">)</span> 创建变量。左侧 <span class="token punctuation">(</span>x<span class="token punctuation">)</span> 是变量的名称，其值为右侧 <span class="token punctuation">(</span><span class="token keyword">pi</span><span class="token punctuation">)</span> 的值。y <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>您可以使用括号提供函数的输入。 桌面管理函数示例说明savesave data<span class="token punctuation">.</span>mat将当前工作区保存到 MAT 文件中。loadload data<span class="token punctuation">.</span>mat将 MAT 文件中的变量加载到工作区。clearclear清除工作区中的所有变量。clcclc清除命令行窗口中的所有文本。formatformat long更改数值输出的显示方式。 数组类型示例说明<span class="token number">4</span>标量<span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">5</span><span class="token punctuation">]</span>行向量<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">]</span>列向量<span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span><span class="token punctuation">]</span>矩阵 等间距向量示例说明<span class="token number">1</span><span class="token operator">:</span><span class="token number">4</span>使用冒号 <span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">)</span> 运算符，创建一个从 <span class="token number">1</span> 到 <span class="token number">4</span>，间距为 <span class="token number">1</span> 的向量。<span class="token number">1</span><span class="token operator">:</span><span class="token number">0.5</span><span class="token operator">:</span><span class="token number">4</span>创建一个从 <span class="token number">1</span> 到 <span class="token number">4</span>，间距为 <span class="token number">0.5</span> 的向量。<span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>创建一个包含 <span class="token number">5</span> 个元素的向量。这些值从 <span class="token number">1</span> 到 <span class="token number">10</span> 均匀间隔。 创建矩阵示例说明<span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>创建一个 <span class="token number">2</span> 行 <span class="token number">2</span> 列的方阵。<span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>创建一个 <span class="token number">2</span> 行 <span class="token number">3</span> 列的矩形矩阵。 索引示例说明<span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>访问最后一行的第二列中的元素。<span class="token function">A</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span>访问第二行所有元素。<span class="token function">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span>访问前三行的所有列。<span class="token function">A</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">11</span>将数组中第二个元素的值更改为 <span class="token number">11</span>。 数组运算示例说明<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">]</span>ans <span class="token operator">=</span>     <span class="token number">4</span>    <span class="token number">4</span>     <span class="token number">4</span>    <span class="token number">4</span>执行矩阵乘法。<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">.*</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">]</span>ans <span class="token operator">=</span>     <span class="token number">2</span>    <span class="token number">2</span>     <span class="token number">2</span>    <span class="token number">2</span>执行按元素乘法。 多个输出示例说明<span class="token punctuation">[</span>xrow<span class="token punctuation">,</span>xcol<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>将 x 中的行数和列数保存为两个不同变量。<span class="token punctuation">[</span>xMax<span class="token punctuation">,</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>计算 x 的最大值及其对应的索引值。 文档示例说明doc randi打开 randi 函数的文档页。 绘图示例说明<span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>"ro<span class="token operator">-</span>"<span class="token punctuation">,</span>"LineWidth"<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>绘制一条红色 <span class="token punctuation">(</span>r<span class="token punctuation">)</span> 虚线 <span class="token punctuation">(</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">)</span>并使用圆圈 <span class="token punctuation">(</span>o<span class="token punctuation">)</span> 标记，线宽很大。hold on在现有绘图中新增一行。hold off为下一个绘图线条创建一个新坐标区。<span class="token function">title</span><span class="token punctuation">(</span>"My Title"<span class="token punctuation">)</span>为绘图添加标签。 使用表示例说明data<span class="token punctuation">.</span>HeightYards从表 data 中提取变量 HeightYards。data<span class="token punctuation">.</span>HeightMeters <span class="token operator">=</span> data<span class="token punctuation">.</span>HeightYards<span class="token operator">*</span><span class="token number">0.9144</span>从现有数据中派生一个表变量。 逻辑运算示例说明<span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">10</span> <span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">12</span>将向量与值 <span class="token number">12</span> 进行比较。<span class="token function">v1</span><span class="token punctuation">(</span>v1 <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span>提取 v1 中大于 <span class="token number">6</span> 的所有元素。<span class="token function">x</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">999</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>用值 <span class="token number">1</span> 替换 x 中等于 <span class="token number">999</span> 的所有值。 编程示例说明<span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">0.5</span>    y <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">else</span>    y <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">end</span>如果 x 大于 <span class="token number">0.5</span>，则将 y 的值设置为 <span class="token number">3</span>。否则，将 y 的值设置为 <span class="token number">4</span>。<span class="token keyword">for</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span>    <span class="token function">disp</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">end</span>循环计数器 <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 遍历值 <span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span>（<span class="token number">1</span>、<span class="token number">2</span> 和 <span class="token number">3</span>）。循环体显示 c 的每个值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="大佬教程"><a href="#大佬教程" class="headerlink" title="大佬教程"></a>大佬教程</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210409091948941.png" alt="image-20210409091948941"></p><p>先看完前五节基础必看！后面是选学</p><h2 id="基本操作和矩阵输入"><a href="#基本操作和矩阵输入" class="headerlink" title="基本操作和矩阵输入"></a>基本操作和矩阵输入</h2><p>第一步，把matlab当作基本的计算机</p><p>第二部，利用matlab进行矩阵运算</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;官网教程&quot;&gt;&lt;a href=&quot;#官网教程&quot; class=&quot;headerlink&quot; title=&quot;官网教程&quot;&gt;&lt;/a&gt;官网教程&lt;/h1&gt;&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h</summary>
      
    
    
    
    <category term="data" scheme="https://darren-dong.com/categories/data/"/>
    
    
    <category term="matlab" scheme="https://darren-dong.com/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>算法1:KMP</title>
    <link href="https://darren-dong.com/2021/04/06/%E7%AE%97%E6%B3%951%EF%BC%9ATMP/"/>
    <id>https://darren-dong.com/2021/04/06/%E7%AE%97%E6%B3%951%EF%BC%9ATMP/</id>
    <published>2021-04-06T11:13:12.000Z</published>
    <updated>2021-04-08T15:46:29.309Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="算法1：KMP"><a href="#算法1：KMP" class="headerlink" title="算法1：KMP"></a>算法1：KMP</h1><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>​    没想到我的博客竟然有朝一日也能开始记录算法感想。。大一下。。打算从开发岗转算法岗了。。感觉会有趣一百倍，而不是。。。（并没有歧视，只是个人偏好QWQ）</p><p>​    本着开源的精神，我也开始向各位大佬学习！记录一下自己学过的算法们，当然，由于博主是学生党，并不会也懒得把整个算法的过程都写下来，我会注意把自己学习时遇到的问题和难点记录下来，并总结一下思想方法的噢！</p><p>​    话说KMP也是我第一个遇到的真正需要思考的算法！终于要开始了吗！掉头发的道路！这次想了快两个小时才理解KMP，好菜QWQ，以后加油！</p><h2 id="宏观理解"><a href="#宏观理解" class="headerlink" title="宏观理解"></a>宏观理解</h2><p>KMP能够优化查询，比起暴力主要优化在两点：一是略去了目标字符串的回溯，二是优化了模式字符串的回溯效率，这都是基于前后缀表来实现的。前后缀表的实现有3种以上方法，我学的是整体右移那种，但是其实这只会导致细微的差距。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>获取前缀表：</p><p>初始化时使后缀表与前缀表错开一位（-1 和 0）</p><p>由于数学规律，在求解某项的next值时，若所有项一一对应，则k一直++，这是最顺利的情况</p><p>但是当某项不匹配时，要通过回退来试图找到稍小的字符串来与开头字符串比较。</p><p>此时把开头字符串通过next表回退一次，这时相当于是找上一个对应好的k，这个k是上一组对应好的前缀组和后缀组，此时肯定大于当前的，这里用到了递归的思想。。因为一组一组都是配好的，发生不匹配的情况时，就往已经匹配好的地方回退。</p><p>需要注意的是，不知道为啥老是想到对称上去。。他这个是前后顺序相同（感觉这样说好蠢），但就是会犯错。。和对称得出的规律差距挺大的</p><p>不管啦就这样吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;算法1：KMP&quot;&gt;&lt;a href=&quot;#算法1：KMP&quot; class=&quot;headerlink&quot; title=&quot;算法1：KMP&quot;&gt;&lt;/a&gt;算法1：KMP&lt;/h1&gt;&lt;h2 id=&quot;感想&quot;&gt;&lt;a href=&quot;#感想&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="algorithm" scheme="https://darren-dong.com/categories/algorithm/"/>
    
    
    <category term="KMP" scheme="https://darren-dong.com/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>hot key</title>
    <link href="https://darren-dong.com/2021/04/05/%E9%82%A3%E4%BA%9B%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://darren-dong.com/2021/04/05/%E9%82%A3%E4%BA%9B%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2021-04-05T02:36:09.000Z</published>
    <updated>2021-04-10T06:28:35.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h1><p>Fn + 左右箭头快速抵达行头行尾</p><p>Fn + shift + 左右箭头快速选中整行</p><p>C + f 搜索</p><h1 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h1><p>C + g  快速到达某一行</p><p>C + A + 上下  为上下行的该位置添加光标，如果为空，则尽量左移</p><p>S + A + 拖动鼠标 选中规则同上</p><p>C + c  +  C + v 快速复制一行</p><p>或者 S + A + 上下</p><hr><p>C + /  单行注释</p><p>C + S + /   多行注释（改的，原来是S + A + a）</p><p>C + ~  打开终端</p><p>C + d 快速选中相同的</p><p>C + f 搜索</p><p>C + h 替换（可以全部替换）</p><p>C + +/-  放大/缩小布局</p><p>Tab 到达下一个光标</p><p>自定义快捷键</p><p>有些快捷键，我们使用不习惯，其实我们可以自定义快捷键的。</p><p>比如js 的多行注释是 shift + alt  + a  ，我们想修改为 ctrl + shfit +  /   </p><p>设置方法：   管理按钮  —   键盘快捷方式  —  输入  shift + alt  + a  找到这个快捷键  —– 点击编辑按钮  —- 直接按下  ctrl + shift  +  /     —- 最后按下回车 修改完毕。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/070e4f32b7326196062f020bbc3a91b30c7e470c.gif" alt="img"></p><h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><p>C + S + j   开发者模式（谷歌），在火狐有些不同</p><p>C + h   历史记录</p><p>C + n  打开新窗口</p><p>C + S + n  新无痕窗口</p><p>C + 左键:打开新标签方式</p><h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><p>C + b 加粗</p><p>C + i  斜体</p><p>C + k 设为超链接</p><h1 id="Jupyter-Notebook"><a href="#Jupyter-Notebook" class="headerlink" title="Jupyter Notebook"></a>Jupyter Notebook</h1><p>A 创建新单元格above当前单元格</p><p>B 创建新单元格below当前单元格</p><p>在markdown 和 code之间进行转换</p><p>markdown -&gt; code Y</p><p>code -&gt; markdown M </p><p>L 是显示行号d</p><p>双击D 可以删除单元格，Z撤销删除</p><p>S 保存！</p><p>最强的是C + S + P</p><p>打开万能的控制栏</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;通用&quot;&gt;&lt;a href=&quot;#通用&quot; class=&quot;headerlink&quot; title=&quot;通用&quot;&gt;&lt;/a&gt;通用&lt;/h1&gt;&lt;p&gt;Fn + 左右箭头快速抵达行头行尾&lt;/p&gt;
&lt;p&gt;Fn + shift + 左右箭头快速选中整行&lt;/p&gt;
&lt;p&gt;C + f 搜索&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="others" scheme="https://darren-dong.com/categories/others/"/>
    
    
    <category term="hot key" scheme="https://darren-dong.com/tags/hot-key/"/>
    
  </entry>
  
  <entry>
    <title>黑马移动端</title>
    <link href="https://darren-dong.com/2021/04/04/%E9%BB%91%E9%A9%AC%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    <id>https://darren-dong.com/2021/04/04/%E9%BB%91%E9%A9%AC%E7%A7%BB%E5%8A%A8%E7%AB%AF/</id>
    <published>2021-04-04T01:14:19.000Z</published>
    <updated>2021-04-10T09:21:55.531Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="移动端基础"><a href="#移动端基础" class="headerlink" title="移动端基础"></a>移动端基础</h1><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404092048961.png" alt="image-20210404092048961"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404092110874.png" alt="image-20210404092110874"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404092902977.png" alt="image-20210404092902977"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404093501592.png" alt="image-20210404093501592"></p><h2 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404094158699.png" alt="image-20210404094158699"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404094215546.png" alt="image-20210404094215546"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404094229638.png" alt="image-20210404094229638"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404094241052.png" alt="image-20210404094241052"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404094749176.png" alt="image-20210404094749176"></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404094809333.png" alt="image-20210404094809333" style="zoom:50%;" /><h2 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404095411161.png" alt="image-20210404095411161"></p><p>开发尺寸显示在开发者工具中，我们开发网页根据这个就好了</p><p><strong>开发尺寸 * 物理像素比 = 分辨率</strong>             所以一个px可能由多个（dpr）物理像素组成</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404095756776.png" alt="image-20210404095756776"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404100314630.png" alt="image-20210404100314630"></p><hr><p><strong>图片缩放使用的属性</strong>：</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404101151359.png" alt="image-20210404101151359"></p><p>cutterman插件可以直接切出多倍图</p><h2 id="开发选择"><a href="#开发选择" class="headerlink" title="开发选择"></a>开发选择</h2><p>单独设计和响应式</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404101658904.png" alt="image-20210404101658904"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404101754577.png" alt="image-20210404101754577"></p><p>肯定更喜欢单独。。。</p><h2 id="技术解决方案"><a href="#技术解决方案" class="headerlink" title="技术解决方案"></a>技术解决方案</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404101935867.png" alt="image-20210404101935867"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404102038130.png" alt="image-20210404102038130"></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404102428587.png" alt="image-20210404102428587" style="zoom:50%;" /><p>重温一下。。。。。。。</p><p>传统的叫做box-sizing : content-box;</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404102542684.png" alt="image-20210404102542684"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404102815857.png" alt="image-20210404102815857"></p><p><strong>还有一些以后可以积累！！！</strong></p><h1 id="常见布局"><a href="#常见布局" class="headerlink" title="常见布局"></a>常见布局</h1><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404103152496.png" alt="image-20210404103152496"></p><p>所以需要提前了解想去的公司采用怎样的方案。。。</p><p>pink老师会依次介绍哟！(＾Ｕ＾)ノ~ＹＯ</p><h2 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404111307804.png" alt="image-20210404111307804"></p><p>流式布局主要看的是宽度，高度不管。。。高度好像都是px</p><p>但是拉伸的时候也会影响到内部内容，所以必须加以限制！</p><p>可以用max/min - width/height 来辅助实现</p><hr><h3 id="京东案例"><a href="#京东案例" class="headerlink" title="京东案例"></a>京东案例</h3><p>懒得做了。。。记笔记吧</p><p><strong>准备</strong></p><p>方案：单独制作页面</p><p>技术选型：流式布局</p><p>文件布局： css  images  upload  js  index.html</p><p>准备：设置视口标签，引入css移动端初始化，引入自己的css文件。。。</p><hr><p><strong>body</strong></p><p>因为竖直下来每个盒子基本都是百分百宽度</p><p>**所以可以直接给body一个宽度100%**，而子盒子都能继承</p><p>但是一味地放大缩小会拉伸的很丑！所以指定宽度限制！然后居中对齐</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404112849868.png" alt="image-20210404112849868" style="zoom:50%;" /><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404112952388.png" alt="image-20210404112952388" style="zoom:50%;" /><p><strong>顶栏展示</strong></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404114145471.png" alt="image-20210404114145471" style="zoom:67%;" /><p><strong>京东做法</strong></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404114233468.png" alt="image-20210404114233468" style="zoom:67%;" /><p>但是<strong>高度设置的是固定的45px</strong>，这个应该是总结和调试出来的</p><p><em>用一个ul代表这一长条，里面有4个小li，好像特别喜欢用列表</em></p><p><em>不过这样确实满足“语义化” 这是个顶栏列表，里面包含了若干元素</em></p><p>他那个小叉和图片竟然是<strong>固定尺寸</strong>的！记得verticle-align : center;</p><p>然后这个不用a，到时候用js来做跳转特效就好了。。。果然结构和功能也要分离</p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404115119107.png" alt="image-20210404115119107"></p><p>宽度改变时，中间变短，俩边不变的效果</p><p>直接先做好两边的，用绝对定位和固定尺寸分别固定到这个长条盒子的两侧</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404115442039.png" alt="image-20210404115442039" style="zoom:50%;" /><p>然后中间放的是没有宽度（使其铺满）的标准流，然后指定左右margin，略大于两侧盒子的宽度即可</p><p>然后使其居中，通过加上边距，但这样会导致外边距合并，加overflow:hidden解决</p><hr><p><em>ps：在div里面有子元素div1时，若父元素div在没有设置overflow:hidden或者是border属性，则父元素div的margin-top的值为父元素div和子元素div1中的margin-top的最大值。</em></p><hr><p><strong>列表栏和登陆栏</strong>写法：</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404120242284.png" alt="image-20210404120242284" style="zoom:67%;" /><hr><p><strong>search栏</strong>：</p><p><strong>子元素均采用定位效果实现</strong></p><p>京东图标后面的小竖线：<img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404120515491.png" alt="image-20210404120515491"></p><p>记得after和before是作为子元素，所以这里加个position:absolute定位</p><p>再调定位到合适的位置呗</p><hr><p>应该用一个盒子包起来，然后设置fixed属性！不过记得同样设置宽度的限制范围哦</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404130538927.png" alt="image-20210404130538927" style="zoom: 80%;" /><hr><p><em><strong>小放大镜是二倍精灵图</strong></em></p><p>错误做法：亮出精灵图相应图标的位置，直接用那个位置，然后缩放</p><p>这样是错误的，因为缩放是对整个图片进行缩放的，所以坐标也会发生变化</p><p>应该把坐标换为原来的n分之一，然后把图片缩放,background-size:</p><hr><p>主体内容部分是导航栏以下的所有内容的一个大盒子</p><p>包含了焦点图和商品啊，分类啊巴拉巴拉的</p><p>这些展示图，更新频率高的，记得放在upload文件夹里而不是images里面哟</p><p>竟然是三张图片分别放在3个盒子。。。。我以为背景一张图片，三个透明盒子。。。</p><hr><p>ps：<em>可以改成bottom/top/middle来改掉图片和边框间的空白缝隙，或者改成块元素</em></p><p>在设置图片边框样式中，图片或者表单等行内元素，这样会造成一个问题，就是图片底侧以及图片与图片之间会有一个空白缝隙。<strong>原因是行内元素之间的回车符系统默认为一个空格，占据了一定宽度。</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/20181109094353277.png" alt="在这里插入图片描述"></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404131738535.png" alt="image-20210404131738535" style="zoom:80%;" /><hr><p><strong>导航栏</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404132002023.png" alt="image-20210404132002023"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404132022862.png" alt="image-20210404132022862" style="zoom:50%;" />超链接里面放了一个图片和一个文字描述罢了。。复制20次</p><p>还有一些字体要用rem处理等巴拉巴拉。。</p><h2 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404133310817.png" alt="image-20210404133310817"></p><hr><p><strong>布局原理</strong></p><p>pink说flex布局比浮动布局好</p><p>因为flex有与浮动类似的性质，而且更好，所以float  clear失效</p><p>因为flex自带垂直居中的方法，所以vertical-align熟悉失效</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404202621904.png" alt="image-20210404202621904" style="zoom: 80%;" /><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404202720250.png" alt="image-20210404202720250"></p><hr><h3 id="父级属性"><a href="#父级属性" class="headerlink" title="*父级属性"></a>*父级属性</h3><p>display:flex</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404203058261.png" alt="image-20210404203058261" style="zoom:80%;" /><hr><p><strong>flex-direction</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404203413186.png" alt="image-20210404203413186"></p><p>默认主轴是x轴（row）</p><hr><p><strong>justify-content</strong></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404203804127.png" alt="image-20210404203804127" style="zoom: 67%;" /><p>注意space-around是每个盒子的两边的外边距都一样</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404203910838.png" alt="image-20210404203910838" style="zoom:50%;" /><hr><p><strong>flex-wrap</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404204314797.png" alt="image-20210404204314797"></p><p>默认会自动缩小元素在排列方向的长度（水平则缩小宽度）</p><hr><p><strong>align-items</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404204924293.png" alt="image-20210404204924293"></p><p>stretch会拉到和父亲一个尺寸，当然隔着一个margin，如果设置了相应方向的尺寸，则失效</p><hr><p><strong>align-content</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404205130782.png" alt="image-20210404205130782"></p><p>为啥要搞出俩属性。。。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404205514687.png" alt="image-20210404205514687"></p><hr><p><strong>flex-flow</strong></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404205750060.png" alt="image-20210404205750060" style="zoom:50%;" /><p>还有一些其他的属性，以后得补补</p><hr><h3 id="子项属性"><a href="#子项属性" class="headerlink" title="子项属性"></a>子项属性</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404205938407.png" alt="image-20210404205938407"></p><hr><h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a><strong>flex</strong></h4><p>默认是0，分配剩余空间，所以不加宽度再设为1就可以占满剩下的所有</p><p>卧槽牛逼啊，横的竖的组合起来不是无敌了！顶多加个啥边距</p><p>无敌何须多言？？？！！！</p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404211047059.png" alt="image-20210404211047059"></p><p>align-self属性不适用于块类型的盒模型和表格单元。如果任何 flexbox 元素的侧轴方向 margin 值设置为 auto，则会忽略 <code>align-self</code>。</p><p>这货的属性蛮多的。。不知道有啥用</p><hr><p><strong>order</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404211641830.png" alt="image-20210404211641830"></p><p>挺不错的欸，这个order</p><h3 id="携程网案例"><a href="#携程网案例" class="headerlink" title="携程网案例"></a>携程网案例</h3><p>仍然懒得做。。记笔记吧<img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404211730880.png" alt="image-20210404211730880" style="zoom:50%;" /></p><p><strong>初始化</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404212240317.png" alt="image-20210404212240317"></p><p>overflow-x:hidden 不出现水平滚动条</p><p>还是技术选型。。。flex，好无聊，高度还是定死的，巧用flex一下就完了</p><p><strong>固定在上方的导航栏</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404213131595.png" alt="image-20210404213131595"></p><p>要兼容的话，在transform前加上一句-webkit-transform : translateX(-50%);</p><p>里面一个搜索框一个头像，给头像（右）加个宽度，搜索框不加宽度，用flex:1，tql吧！！</p><p>这边突然有个坑，CSS3模型，如果有边框，那么行高=高来垂直居中会偏下，必须行高=内容区域</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404232317142.png" alt="image-20210404232317142" style="zoom:80%;" /><hr><h3 id="图-文字结构"><a href="#图-文字结构" class="headerlink" title="图+文字结构"></a><strong>图+文字结构</strong></h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404232725505.png" alt="image-20210404232725505"></p><p>上面一个span背景设成2倍精灵图，下面一个span里面写字，然后整个放进a里面</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404232851846.png" alt="image-20210404232851846"></p><p><code>flex-direction: column</code></p><p><code>align-items : center</code></p><hr><h3 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405000418333.png" alt="image-20210405000418333"></p><p>好像支持不太好，注意格式哟</p><hr><p><strong>subnav</strong></p><p>卧槽，flex的指可以是百分比，按照父亲的给</p><p>虽然flex为主，但是也可以搭配其他的做</p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405001344268.png" alt="image-20210405001344268"></p><p>这边用了传统布局，h2标签是为了SEO优化。。。</p><p><strong>传统布局有时候一些盒子最好不用设置宽度，而是用内容+padding挤开</strong>，比如：</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405001902452.png" alt="image-20210405001902452"></p><h2 id="rem适配布局"><a href="#rem适配布局" class="headerlink" title="rem适配布局"></a>rem适配布局</h2><p>非常重要！<img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405002252282.png" alt="image-20210405002252282"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405003212779.png" alt="image-20210405003212779"></p><hr><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405003354284.png" alt="image-20210405003354284" style="zoom:67%;" /><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405003444816.png" alt="image-20210405003444816"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405003529315.png" alt="image-20210405003529315"></p><p>screen….</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405092324456.png" alt="image-20210405092324456" style="zoom:67%;" /><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405092639075.png" alt="image-20210405092639075"></p><hr><p>tips：</p><p><strong>如果判断最小值，应该从小到大写（pink推荐。。），如果判断最大值，应该从大到小写</strong></p><p><strong>min-width 和 max-width  是自带等于号的！</strong>and两边要留下空格。数字后必须跟单位</p><p>媒体查询并没有增加权重，所以如果特殊的是媒体查询的，要放在后面覆盖</p><p> <code>@media screen and (min-width:540px) and (max-width:969px)</code> 在540和970分界</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405093944821.png" alt="image-20210405093944821"></p><hr><p><strong>引入资源</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405094452887.png" alt="image-20210405094452887"></p><h3 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405113156180.png" alt="image-20210405113156180"></p><h4 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h4><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405113258345.png" alt="image-20210405113258345"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405113608309.png" alt="image-20210405113608309"></p><p><strong>但是注意页面元素的px值和页面一开始设置的px值是统一标准下的（美工图里的标准👇）</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405114113453.png" alt="image-20210405114113453"></p><hr><h4 id="苏宁案例"><a href="#苏宁案例" class="headerlink" title="苏宁案例"></a>苏宁案例</h4><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405114359486.png" alt="image-20210405114359486"></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405114524912.png" alt="image-20210405114524912" style="zoom:67%;" /><p>别忘了写最常见的（默认大小，兜底）：</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405114745174.png" alt="image-20210405114745174"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405115111146.png" alt="image-20210405115111146"></p><p>这是引入样式的另一种思路，但其实都差不多感觉</p><hr><p><strong>body</strong></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405115339700.png" alt="image-20210405115339700" style="zoom:50%;" /><p>因为没有手机是小于320px的，宽度直接设为<strong>你分的份数</strong>就好了</p><p>而在750px宽的设计图下，html大小可以直接给个变量50就好了</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405145326438.png" alt="image-20210405145326438"></p><hr><p>导航栏基本一样。。。再强调一下居中不是auto，fiex下要用left和transform</p><p><strong>虽然这里主体是用rem，但是哪个好用用哪个，不要局限死，这里明显flex好用嘛</strong></p><p>对于字体大小，美工一般会给可以直接看出大小的效果图。</p><p>不过这个搜索框的格式很怪</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405130326915.png" alt="image-20210405130326915"></p><p>图片最好是给装图片的框设置大小和方位巴拉巴拉</p><p>然后图片长宽 100%</p><hr><p>苏宁的导航栏不是用flex</p><p>是一堆a，（竟然没用ul和li）每个a里放一张图片和一个span</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405150455700.png" alt="image-20210405150455700" style="zoom: 50%;" /><p>全都用rem来写，5个a的宽度刚好是一行的宽度</p><hr><h4 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h4><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405150949559.png" alt="image-20210405150949559"></p><p><strong>我就说嘛。那么高的精度，不管分几份好像都没关系</strong></p><p>初始化css叫normalize.css</p><p>cssrem修改默认html尺寸，按照设计图的样式来。</p><p><strong>flexible默认全屏。若要限制最大宽度</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 750px<span class="token punctuation">)</span></span><span class="token punctuation">&#123;</span>    <span class="token selector">html</span><span class="token punctuation">&#123;</span>        <span class="token property">font-size</span> <span class="token punctuation">:</span> 75px <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>rem + flexible + less 用的挺好的，再配上cssrem插件</p><p>flexible.js划分是按全屏幕的10等份，在移动端需要更改一下</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210406083616174.png" alt="image-20210406083616174"></p><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><p>一个网站，所有设备！！！</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405204535363.png" alt="image-20210405204535363"></p><p><strong>常见划分尺寸👇</strong>，并不是绝对！原来屏幕竟然是定死的！</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405204933124.png" alt="image-20210405204933124"></p><p>尺寸稍小是因为两侧流出空白比装不下好看</p><p>调整cssrem，在插件的设置栏可以调整默认一html单位的大小</p><hr><h4 id="条件注释"><a href="#条件注释" class="headerlink" title="条件注释"></a>条件注释</h4><p>由于浏览器版本的不同，对CSS里某些元素的解释也不一样，针对浏览器版本不同而选择不同CSS的代码，<br>其实我们还可以利用条件注释的方法来达到类似的目的，什么是条件注释，在此简单介绍一下，无非就是一些if判断啦，呵呵，但这些判断不是在脚本里执行的，而是直接在html代码里执行的，下面来介绍一下使用方法吧。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;!--[if XXX]>这里是正常的html代码&lt;![endif]–>这里XXX是一些特定的东东，在此列表几个出来，详细介绍各自的含义：&lt;!–[if IE]> / 如果浏览器是IE /&lt;!–[if IE 5]> / 如果浏览器是IE 5 的版本 /&lt;!–[if IE 6]> / 如果浏览器是IE 6 的版本 /&lt;!–[if IE 7]> / 如果浏览器是IE 7 的版本 /上面是几个常用的判断IE浏览器版本的语法，下面再来介绍一下相对比较少用的逻辑判断的参数：有几个参数：lte，lt，gte，gt及!各自的详细解释如下：lte：就是Less than or equal to的简写，也就是小于或等于的意思。lt ：就是Less than的简写，也就是小于的意思。gte：就是Greater than or equal to的简写，也就是大于或等于的意思。gt ：就是Greater than的简写，也就是大于的意思。<span class="token property">例句</span><span class="token punctuation">:</span>&lt;!--[if gt IE 5.5]> / 如果IE版本大于5.5 /&lt;!–[if lte IE 6]> / 如果IE版本小于等于6 /&lt;!–[if !IE]> / 如果浏览器不是IE /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="BootStrap"><a href="#BootStrap" class="headerlink" title="BootStrap"></a>BootStrap</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405210248567.png" alt="image-20210405210248567"></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405210651094.png" alt="image-20210405210651094" style="zoom:50%;" /><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405210706832.png" alt="image-20210405210706832"></p><p><strong>3.xx偏向于移动端和响应式哟！！</strong></p><hr><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405211033985.png" alt="image-20210405211033985" style="zoom: 67%;" /><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405211207765.png" alt="image-20210405211207765"></p><p>在中文文档找到“<strong>基础模板</strong>”，然后复制，但是基本和vscode一样，多了一个条件注释复制过来</p><p>然后引入css样式文件（内置了normalize.css）。。主要通过类来控制，默认border-box</p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405212232101.png" alt="image-20210405212232101"></p><p>得了解深一些才能自由diy</p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405212740845.png" alt="image-20210405212740845"></p><p>不用自己再手动写了。。。这到底是好是坏</p><hr><h3 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h3><p>与rem布局很相似，不过rem是划分屏幕，栅格是划分<strong>页面内容</strong>（container）</p><p>想要更好的使用，得了解这些封装的实质，比如分成12份最终是由百分比实现的</p><p>可以多用开发者工具查看网站的最终源码，多去查查文档</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405213028685.png" alt="image-20210405213028685"></p><p>卧槽。<strong>container可以有很多个，可以单独适用于某些行，挺棒的</strong></p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405213715077.png" alt="image-20210405213715077"></p><p><strong>行数</strong></p><p>行应始终位于容器中。</p><p>该行为列提供了一个居住的地方，理想情况下，列的总数为12。它还可以作为包装器使用，因为所有列都向左浮动，当浮动变得怪异时，其他行不会重叠。</p><p>行的每边也有15px的负边距。组成该行的div通常会被限制在容器的填充内部，而不是粉红色区域的边缘，但不能超出。15px的负边距将行压到容器顶部15px的填充上方，从而使行基本无效。此外，行确保您其中的所有div都显示在自己的行上，与上一行和下一行分开。</p><hr><p><strong>列</strong></p><p>列现在具有15px的填充。这种填充意味着列实际上接触行的边缘，由于行具有负边距，而容器具有正的填充，列本身就接触容器的边缘。但是，列上的填充将列内的任何内容推入所需的位置，并且在列之间提供了30px的装订线。切勿在行外使用列，否则将无法使用。</p><hr><p>如果份数相加小于12：</p><p>占不满整个屏幕，默认左对齐</p><p>如果分数相加大于12：</p><p>装不开的那些，超出的整体另起一行</p><p>通过给同一个盒子添加不同情况下的自定义类名来决定。卧槽，我悟了！</p><hr><p><strong>列嵌套</strong></p><p>跟flex一样开始套起来了</p><p>不要加margin值，因为分列他最后是变成百分比的宽度</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405214657467.png" alt="image-20210405214657467"></p><p>这个的边距是一开始栅格划分4个大盒子，每个大盒子里面嵌套一个小盒子搞的（又有默认15px内边距）。</p><hr><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405215012191.png" alt="image-20210405215012191" style="zoom:67%;" /><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405215429060.png" alt="image-20210405215429060"></p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405215608395.png" alt="image-20210405215608395"></p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405220014929.png" alt="image-20210405220014929"></p><hr><h3 id="阿里百秀"><a href="#阿里百秀" class="headerlink" title="阿里百秀"></a>阿里百秀</h3><p>宏观布局</p><p>一个大container装下三大列</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405223837878.png" alt="image-20210405223837878"></p><p>然后放缩屏幕观察变化</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405224219100.png" alt="image-20210405224219100"></p><p>这个策略很重要！</p><hr><p>这个时候有个小问题，美工给的设计图是1280px，但默认最大宽度是1170px</p><p>所以就手动修改一下下</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405225000595.png" alt="image-20210405225000595"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405225308492.png" alt="image-20210405225308492"></p><p>有时候需要去掉padding，记得权重，而小心margin带来的影响</p><p><strong>字体图标组件，在boostrap选对应的类名加上去，实质是一个before元素</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405230516077.png" alt="image-20210405230516077"></p><p>高度不需要太在意，因为不同大小直接换布局，高度是定死的？？？</p><p>所以在响应式布局中，也有一些其实是不变的，或者说比起那种rem，它不变的地方很多</p><p>每个小的container都得分析四种或更多情况下的新布局哟</p><p>久违的清除浮动，可以直接加类 “ clearfix “来实现</p><p>卧槽，需要怎样的样式直接去中文文档里的排版里面查，它设定好了许多最通用的样式</p><p>然后如果需要改变一些文字样式，可以直接去辅助类 -&gt;上下文选择，，</p><p>然后他这些模块不是写死的，比如按钮的类可以加到span上，也有类似的外观</p><hr><p>完成了大屏幕的制作，现在针对小屏幕情况修饰一下</p><p>根据实际情况选择不同的处理方式，比如有个大图片，不要让它设置成宽度100%，而是设置居中</p><p>再小一点的时候就不合适，可以把图片隐藏，换成一个新元素（放了文字的盒子（平时隐藏，小显示））</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405233441558.png" alt="image-20210405233441558"></p><p>有两个贼方便的属性：visible-x和hidden-x</p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405233637111.png" alt="image-20210405233637111"></p><p>大屏幕竖直排列，小屏幕水平排列，很简单！别忘了媒体条件</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405233726919.png" alt="image-20210405233726919"></p><p>然后在其中再加上修饰，比如文字变小啊，</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405234026831.png" alt="image-20210405234026831" style="zoom:50%;" />小小的修饰一下背景颜色嘿嘿</p><p>我们看样式的时候要切换到手机的尺寸检查，不然在pc端随意拖动宽度效果可能有些不一样</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405234244136.png" alt="image-20210405234244136" style="zoom:50%;" /><p>小屏幕时把内边距记得也改小一点，不像👆</p><h2 id="总结！"><a href="#总结！" class="headerlink" title="总结！"></a>总结！</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405235002988.png" alt="image-20210405235002988"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405235128420.png" alt="image-20210405235128420"></p><p>感觉rem为主，配合flex确实很好，flex毕竟太规整了些，也可能是我现在接触不多</p><p>再见！55个小时，刚好2周学完，谢谢pink老师，带我入了前端的门！</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405235913519.png" alt="image-20210405235913519"></p><h1 id="Less基础"><a href="#Less基础" class="headerlink" title="Less基础"></a>Less基础</h1><p>怎么风评less 没有 sass好。。。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405095114785.png" alt="image-20210405095114785"></p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405095201588.png" alt="image-20210405095201588"></p><hr><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><blockquote><p>Less （Leaner Style Sheets 的缩写） 是一门向后兼容的 CSS 扩展语言。这里呈现的是 Less 的官方文档（中文版），包含了 Less 语言以及利用 JavaScript 开发的用于将 Less 样式转换成 CSS 样式的 Less.js 工具。</p></blockquote><p>因为 Less 和 CSS 非常像，因此很容易学习。而且 Less 仅对 CSS 语言增加了少许方便的扩展，这就是 Less 如此易学的原因之一。</p><ul><li><em>有关 Less 语言特性的详细文档，请参阅 <a href="https://less.bootcss.com/features/">Less 语言特性</a> 章节</em></li><li><em>有关 Less 内置函数的列表，请参阅 <a href="https://less.bootcss.com/functions/">Less 函数手册</a> 章节</em></li><li><em>有关详细的使用说明，请参阅 <a href="https://less.bootcss.com/usage/">Less.js 用法</a> 章节</em></li><li><em>有关第三方工具的详细信息，请参阅 <a href="https://less.bootcss.com/tools/">工具</a> 章节</em></li></ul><p>Less 到底为 CSS 添加了什么功能？以下就是这些新加功能的概览。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>无需多说，看代码一目了然：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@width<span class="token punctuation">:</span></span> 10px<span class="token punctuation">;</span><span class="token variable">@height<span class="token punctuation">:</span></span> <span class="token variable">@width</span> <span class="token operator">+</span> 10px<span class="token punctuation">;</span><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@width</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">@height</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><a href="https://less.bootcss.com/features/#variables-feature">了解关于变量的更多信息</a></strong></p><h2 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h2><p>混合（Mixin）是一种将一组属性从一个规则集包含（或混入）到另一个规则集的方法。假设我们定义了一个类（class）如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.bordered</span> <span class="token punctuation">&#123;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> dotted 1px black<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid 2px black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们希望在其它规则集中使用这些属性呢？没问题，我们只需像下面这样输入所需属性的类（class）名称即可，如下所示：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">#menu a</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #111<span class="token punctuation">;</span>  <span class="token mixin-usage function">.bordered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.post a</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token mixin-usage function">.bordered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>.bordered</code> 类所包含的属性就将同时出现在 <code>#menu a</code> 和 <code>.post a</code> 中了。（注意，你也可以使用 <code>#ids</code> 作为 mixin 使用。）</p><p><strong><a href="https://less.bootcss.com/features/#mixins-feature">了解关于混合（Mixin）的更多信息</a></strong></p><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>Less 提供了使用嵌套（nesting）代替层叠或与层叠结合使用的能力。假设我们有以下 CSS 代码：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#header .navigation</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#header .logo</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用 Less 语言我们可以这样书写代码：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token selector">.navigation</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.logo</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用 Less 书写的代码更加简洁，并且模仿了 HTML 的组织结构。</p><p>你还可以使用此方法将伪选择器（pseudo-selectors）与混合（mixins）一同使用。下面是一个<strong>经典的 clearfix 技巧</strong>，重写为一个混合（mixin） (<code>&amp;</code> 表示当前选择器的父级）(伪元素也要这样)：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.clearfix</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token selector">&amp;:after</span> <span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><a href="https://less.bootcss.com/features/#parent-selectors-feature">了解有关夫选择器的详细信息</a></strong></p><h3 id="规则嵌套和冒泡"><a href="#规则嵌套和冒泡" class="headerlink" title="@规则嵌套和冒泡"></a>@规则嵌套和冒泡</h3><p>@ 规则（例如 <code>@media</code> 或 <code>@supports</code>）可以与选择器以相同的方式进行嵌套。@ 规则会被放在前面，同一规则集中的<strong>其它元素的相对顺序</strong>保持不变。这叫做冒泡（bubbling）。</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.component</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token atrule">@media <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>    <span class="token atrule">@media  <span class="token punctuation">(</span>min-resolution<span class="token punctuation">:</span> 192dpi<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>      <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/img/retina2x.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token atrule">@media <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span> 1280px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.component</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.component</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-resolution</span><span class="token punctuation">:</span> 192dpi<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.component</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/img/retina2x.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1280px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.component</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>算术运算符 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 可以对任何数字、颜色或变量进行运算。如果可能的话，算术运算符在加、减或比较之前会进行<strong>单位换算</strong>。<strong>计算的结果以最左侧操作数的单位类型为准</strong>。如果<strong>单位换算无效或失去意义，则忽略单位</strong>，<strong>结果以第一个单位为准</strong>。若只有一个单位，以该单位为准<strong>无效</strong>的单位换算例如：px 到 cm 或 rad 到 % 的转换。</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token comment">// 所有操作数被转换成相同的单位</span><span class="token variable">@conversion-1<span class="token punctuation">:</span></span> 5cm <span class="token operator">+</span> 10mm<span class="token punctuation">;</span> <span class="token comment">// 结果是 6cm</span><span class="token variable">@conversion-2<span class="token punctuation">:</span></span> 2 <span class="token operator">-</span> 3cm <span class="token operator">-</span> 5mm<span class="token punctuation">;</span> <span class="token comment">// 结果是 -1.5cm</span><span class="token comment">// conversion is impossible</span><span class="token variable">@incompatible-units<span class="token punctuation">:</span></span> 2 <span class="token operator">+</span> 5px <span class="token operator">-</span> 3cm<span class="token punctuation">;</span> <span class="token comment">// 结果是 4px</span><span class="token comment">// example with variables</span><span class="token variable">@base<span class="token punctuation">:</span></span> 5%<span class="token punctuation">;</span><span class="token variable">@filler<span class="token punctuation">:</span></span> <span class="token variable">@base</span> <span class="token operator">*</span> 2<span class="token punctuation">;</span> <span class="token comment">// 结果是 10%</span><span class="token variable">@other<span class="token punctuation">:</span></span> <span class="token variable">@base</span> <span class="token operator">+</span> <span class="token variable">@filler</span><span class="token punctuation">;</span> <span class="token comment">// 结果是 15%</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>乘法和除法不作转换。因为这两种运算在大多数情况下都没有意义</strong>，一个长度乘以一个长度就得到一个区域，而 CSS 是不支持指定区域的。Less 将按数字的原样进行操作，并将为计算结果指定明确的单位类型。</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@base<span class="token punctuation">:</span></span> 2cm <span class="token operator">*</span> 3mm<span class="token punctuation">;</span> <span class="token comment">// 结果是 6cm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你还可以对<strong>颜色</strong>进行算术运算：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@color<span class="token punctuation">:</span></span> #224488 <span class="token operator">/</span> 2<span class="token punctuation">;</span> <span class="token comment">//结果是 #112244</span><span class="token property">background-color</span><span class="token punctuation">:</span> #112244 <span class="token operator">+</span> #111<span class="token punctuation">;</span> <span class="token comment">// 结果是 #223355</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>运算符两侧尽量有空格，<em>除法必须用括号括起来</em>！！！！</strong></p><p>不过，Less 提供的 <a href="https://less.bootcss.com/functions/#color-operations">色彩函数</a> 更有使用价值。</p><h3 id="calc-特例"><a href="#calc-特例" class="headerlink" title="calc() 特例"></a>calc() 特例</h3><p><em>Released <a href="https://github.com/less/less.js/blob/master/CHANGELOG.md">v3.0.0</a></em></p><p>为了与 CSS 保持兼容，**<code>calc()</code> 并不对数学表达式进行计算**，但是在嵌套函数中会计算变量和数学公式的值。</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@var<span class="token punctuation">:</span></span> 50vh<span class="token operator">/</span>2<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token variable">@var</span> <span class="token operator">-</span> 20px<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 结果是 calc(50% + (25vh - 20px))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>转义（Escaping）允许你使用<strong>任意字符串作为属性或变量值</strong>。任何 <code>~&quot;anything&quot;</code> 或 <code>~&#39;anything&#39;</code> 形式的内容都将按原样输出，除非 <a href="https://less.bootcss.com/features/#variables-feature-variable-interpolation">interpolation</a>。</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@min768<span class="token punctuation">:</span></span> ~<span class="token string">"(min-width: 768px)"</span><span class="token punctuation">;</span><span class="token selector">.element</span> <span class="token punctuation">&#123;</span>  <span class="token atrule">@media @min768</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.2rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token atrule">@media <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.element</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.2rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，从 Less 3.5 开始，可以简写为：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@min768<span class="token punctuation">:</span></span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token selector">.element</span> <span class="token punctuation">&#123;</span>  <span class="token atrule">@media @min768</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.2rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Less 3.5+ 版本中，许多以前需要“引号转义”的情况就不再需要了。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Less 内置了多种函数用于转换颜色、处理字符串、算术运算等。这些函数在<a href="https://less.bootcss.com/functions/">Less 函数手册</a>中有详细介绍。</p><p>函数的用法非常简单。下面这个例子将介绍如何利用 percentage 函数将 0.5 转换为 50%，将颜色饱和度增加 5%，以及颜色亮度降低 25% 并且色相值增加 8 等用法：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@base<span class="token punctuation">:</span></span> #f04615<span class="token punctuation">;</span><span class="token variable">@width<span class="token punctuation">:</span></span> 0.5<span class="token punctuation">;</span><span class="token selector">.class</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">percentage</span><span class="token punctuation">(</span><span class="token variable">@width</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns `50%`</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">saturate</span><span class="token punctuation">(</span><span class="token variable">@base</span><span class="token punctuation">,</span> 5%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">spin</span><span class="token punctuation">(</span><span class="token function">lighten</span><span class="token punctuation">(</span><span class="token variable">@base</span><span class="token punctuation">,</span> 25%<span class="token punctuation">)</span><span class="token punctuation">,</span> 8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><a href="https://less.bootcss.com/functions/">参见：函数手册</a></strong></p><h2 id="命名空间和访问符"><a href="#命名空间和访问符" class="headerlink" title="命名空间和访问符"></a>命名空间和访问符</h2><p>(不要和 <a href="http://www.w3.org/TR/css3-namespace/">CSS <code>@namespace</code></a> 或 <a href="http://www.w3.org/TR/css3-selectors/#typenmsp">namespace selectors</a> 混淆了)。</p><p>有时，出于组织结构或仅仅是为了提供一些封装的目的，你希望对混合（mixins）进行分组。你可以用 Less 更直观地实现这一需求。假设你希望将一些混合（mixins）和变量置于 <code>#bundle</code> 之下，为了以后方便重用或分发：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">#bundle()</span> <span class="token punctuation">&#123;</span>  <span class="token selector">.button</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid black<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>    <span class="token selector">&amp;:hover</span> <span class="token punctuation">&#123;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.tab</span> <span class="token punctuation">&#123;</span> ... <span class="token punctuation">&#125;</span>  <span class="token selector">.citation</span> <span class="token punctuation">&#123;</span> ... <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，如果我们希望把 <code>.button</code> 类混合到 <code>#header a</code> 中，我们可以这样做：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">#header a</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>  <span class="token mixin-usage function">#bundle.button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 还可以书写为 #bundle > .button 形式</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：如果不希望它们出现在输出的 CSS 中，例如 <code>#bundle .tab</code>，请将 <code>()</code> 附加到命名空间（例如 <code>#bundle()</code>）后面。</p><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>从 Less 3.5 版本开始，你还可以将<strong>混合（mixins）和规则集（rulesets）作为一组值的映射（map）</strong>使用。</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">#colors()</span> <span class="token punctuation">&#123;</span>  <span class="token property">primary</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token property">secondary</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.button</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #colors[primary]<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #colors[secondary]<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出符合预期：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.button</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><a href="https://less.bootcss.com/features/#maps-feature">参见： 映射（Maps）</a></strong></p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>Less 中的作用域（scope）与 CSS 中的作用域非常类似。首先在本地查找变量和混合（mixins），如果找不到，则从“父”级作用域继承。</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@var<span class="token punctuation">:</span></span> red<span class="token punctuation">;</span><span class="token selector">#page</span> <span class="token punctuation">&#123;</span>  <span class="token variable">@var<span class="token punctuation">:</span></span> white<span class="token punctuation">;</span>  <span class="token selector">#header</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@var</span><span class="token punctuation">;</span> <span class="token comment">// white</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与 CSS 自定义属性一样，混合（mixin）和变量的<strong>定义不必在引用之前事先定义</strong>。因此，下面的 Less 代码示例和上面的代码示例是相同的：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@var<span class="token punctuation">:</span></span> red<span class="token punctuation">;</span><span class="token selector">#page</span> <span class="token punctuation">&#123;</span>  <span class="token selector">#header</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@var</span><span class="token punctuation">;</span> <span class="token comment">// white</span>  <span class="token punctuation">&#125;</span>  <span class="token variable">@var<span class="token punctuation">:</span></span> white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><a href="https://less.bootcss.com/features/#variables-feature-lazy-loading">参见：懒加载</a></strong></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>块注释和行注释都可以使用：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token comment">/* 一个块注释 * style comment! */</span><span class="token variable">@var<span class="token punctuation">:</span></span> red<span class="token punctuation">;</span><span class="token comment">// 这一行被注释掉了！</span><span class="token variable">@var<span class="token punctuation">:</span></span> white<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>“导入”的工作方式和你预期的一样。你可以导入一个 <code>.less</code> 文件，此文件中的所有变量就可以全部使用了。如果导入的文件是 <code>.less</code> 扩展名，则可以将<strong>扩展名省略掉</strong>：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"library"</span><span class="token punctuation">;</span></span> // library.less<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"typo.css"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><a href="https://less.bootcss.com/features/#imports-feature">了解更多关于导入(Importing)的知识</a></strong></p><p>这里有个巨坑，如果用了导入，要连续保存才能显示</p><h2 id="进阶指南"><a href="#进阶指南" class="headerlink" title="进阶指南"></a><a href="https://less.bootcss.com/features/#mixins-feature">进阶指南</a></h2><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="蓝湖-慕客"><a href="#蓝湖-慕客" class="headerlink" title="蓝湖/慕客"></a>蓝湖/慕客</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405162122127.png" alt="image-20210405162122127"></p><p>蓝湖10人免费，慕客100人免费，直接注册账号，下载就自动装好了</p><p>卧槽，可以选择图层然后上传，选的图层会单独保留以供下载</p><p>可以直接查看一堆参数甚至代码，图片直接下好1，2，3倍，无敌啊</p><p>美工会分享项目给开发者</p><hr><h2 id="Swiper神器"><a href="#Swiper神器" class="headerlink" title="Swiper神器"></a>Swiper神器</h2><p>很有必要好好学一学</p><p>直接下载，最新那个，现在到6了（2021.4）解压解压</p><p>package -&gt; js/css  复制引入swiper.min.js 和 swiper.min.css</p><p>在swiper演示的那里选一个大概样式差不多的，后面可以自己调整</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405171415870.png" alt="image-20210405171415870" style="zoom:67%;" /><p>进去后右键查看网页源代码嘿嘿，然后引入需要的文件</p><p>把HTML代码插入到需要的位置，再把CSS代码放到合适的位置，接下来开始定制！</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405171916821.png" alt="image-20210405171916821"></p><p>为了避免多个轮播图冲突，放在立即执行函数中</p><p>然后去查看API，描述了各组件的功能，少了东西可以去别的实例里面弄过来，（比如箭头啥的）这封装的挺好啊</p><p>然后去他的css或者html代码里面调那些东西。</p><p>我们可以通过查看API来选择我们需要的组件添加，也可以更改一下提供的css样式，毕竟他提供的子项都是盒子，但js逻辑是封装好的，只留下了几个API供调整</p><p>记得调一下swiperprivew，调一下显示的个数。。查手册yyds</p><hr><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>多轮播图冲突</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405195233991.png" alt="image-20210405195233991"></p><p>给上面html的container换类名或者加新的类名</p><p>然后给对应的js改类名</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405195429469.png" alt="image-20210405195429469"></p><h2 id="提交网站到github"><a href="#提交网站到github" class="headerlink" title="提交网站到github"></a>提交网站到github</h2><p>首先建立与远程的链接</p><p>然后建立page。。。没了</p><p>或者直接用readme.md初始化，然后把文件拽进来。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;移动端基础&quot;&gt;&lt;a href=&quot;#移动端基础&quot; class=&quot;headerlink&quot; title=&quot;移动端基础&quot;&gt;&lt;/a&gt;移动端基础&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/darren-greenhand/</summary>
      
    
    
    
    <category term="web-front-end" scheme="https://darren-dong.com/categories/web-front-end/"/>
    
    
    <category term="html&amp;&amp;css入门" scheme="https://darren-dong.com/tags/html-css%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>黑马dom&amp;bom预习</title>
    <link href="https://darren-dong.com/2021/04/02/%E9%BB%91%E9%A9%ACdom&amp;bom/"/>
    <id>https://darren-dong.com/2021/04/02/%E9%BB%91%E9%A9%ACdom&amp;bom/</id>
    <published>2021-04-01T16:08:39.000Z</published>
    <updated>2021-04-08T12:04:35.399Z</updated>
    
    <content type="html"><![CDATA[<p>为了应付俩招新而学学黑马</p><p>结果学着学着忘记原先目的了。。。</p><p>既然都记了这么多了</p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330093612480.png" alt="image-20210330093612480" style="zoom:50%;" /><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330093644248.png" alt="image-20210330093644248" style="zoom:50%;" /><p><strong>构造函数首字母大写</strong></p><p>this！</p><p>!(<a href="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330213907799.png">https://gitee.com/darren-greenhand//picture/raw/master/image-20210330213907799.png</a>)</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330214012724.png" alt="image-20210330214012724"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330225348643.png" alt="image-20210330225348643"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330225823667.png" alt="image-20210330225823667"></p><p>其实函数也能遍历到，但是很少用</p><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><p>对象分：自定义，内置，浏览器对象</p><p>前俩是ES里的，浏览器对象是JS独有的</p><p>内置对象就是JS自带的，提供了最常用的和最基本的功能</p><p>可以查询MDN文档</p><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330231721351.png" alt="image-20210330231721351"></p><p>Math.random()返回一个随机小数 0&lt;= x &lt; 1</p><p>MDN提供了以此为基础的得到各种随机数的方法</p><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p>元素是标签</p><p>节点：所有内容，标签，属性，。。。</p><p>DOM把所有内容看作对象</p><p>因为文档页面从上往下加载，所以script</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330233811008.png" alt="image-20210330233811008"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330234121849.png" alt="image-20210330234121849"></p><p>如果没有</p><p>小心不要把伪数组当初对象哟</p><p>document.querySelector 返回指定选择器的第一个元素对象</p><p>document.querySelectorAll</p><p>获取<strong>body</strong>直接document.body，HTML 是documentElement</p><h2 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h2><p>事件是可以被JS侦测到的行为</p><p>是一种触发–响应机制</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330235606717.png" alt="image-20210330235606717"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330235841646.png" alt="image-20210330235841646"></p><h2 id="改变内容"><a href="#改变内容" class="headerlink" title="改变内容"></a>改变内容</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330235939513.png" alt="image-20210330235939513"></p><p>innerHTML是W3C推荐的</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210331000356033.png" alt="image-20210331000356033"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210331001227962.png" alt="image-20210331001227962"></p><p>所以标签的属性在DOM中被当作属性</p><p>记得表单里显示的内容是value属性</p><h2 id="修改样式"><a href="#修改样式" class="headerlink" title="修改样式"></a>修改样式</h2><p><strong>行内样式（优先级最高）</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210331084125584.png" alt="image-20210331084125584"></p><p>循环精灵图</p><p>onfocus</p><p>onblur</p><p>提前准备好另一个类，然后修改类名</p><p>element.className = “change”</p><p>这会覆盖原先的类名</p><p>不想覆盖则 .class<strong>Name</strong> += “ new”</p><h3 id="排他思想"><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h3><p>先清除其他所有，再给自己设置</p><p>onmouseovr          onmouseout</p><h2 id="获得属性"><a href="#获得属性" class="headerlink" title="获得属性"></a>获得属性</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210331234557420.png" alt="image-20210331234557420"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210331234830475.png" alt="image-20210331234830475"></p><p>.removeAttribute(‘index’)</p><p>display none/block</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210331235859797.png" alt="image-20210331235859797"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401000324162.png" alt="image-20210401000324162"></p><p><strong>自定义属性</strong>（在页面而不是服务器存储并使用数据）</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401000808430.png" alt="image-20210401000808430"></p><p>ie11以上才有dataset，一般使用getAttribute</p><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><h3 id="获得节点"><a href="#获得节点" class="headerlink" title="获得节点"></a>获得节点</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401001133305.png" alt="image-20210401001133305"></p><p>dir方法用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>f1<span class="token operator">:</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> f2<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// Object &#123;f1: "foo", f2: "bar"&#125;</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>f1<span class="token operator">:</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> f2<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// Object</span><span class="token comment">//   f1: "foo"</span><span class="token comment">//   f2: "bar"</span><span class="token comment">//   __proto__: Object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码显示dir方法的输出结果，比log方法更易读，信息也更丰富。</p><p>该方法对于输出DOM对象非常有用，因为会显示DOM对象的所有属性。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401001628811.png" alt="image-20210401001628811"></p><p><strong>父子关系</strong></p><p>node.parentNode(离元素最近的父级节点，找不到返回null)</p><p>.node.childNodes()集合(包含元素节点和文本节点等等)，用nodetype加以筛选</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401103705538.png" alt="image-20210401103705538"></p><p>非官方但是被广泛支持<strong>：.children</strong>(集合)</p><p>.firstChild    .lastChild   这个会返回（元素节点或文本节点，超坑的是换行也是一个文本节点！）</p><p>兼容性问题👇IE9</p><p>.firstElementChild</p><p>.lastElementChild</p><p>兄弟节点用的很少</p><p>实际开发写法还是用ol.children[0]和ol.children[ol.children.length-1]或者自己知道数量</p><p>.node.nextSibling </p><p>.node.previousSibling</p><p>这俩也会看到文本节点</p><p>兼容性问题👇IE9</p><p>.node.nextElementSibling</p><p>node.previousElementSibling</p><h3 id="创建添加节点"><a href="#创建添加节点" class="headerlink" title="创建添加节点"></a>创建添加节点</h3><p>document.createElement(‘li’)</p><p>node.appendChild(child) node 父级  child子级</p><p>这是后面追加元素</p><p>node.insertBefore()</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401152243420.png" alt="image-20210401152243420"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401155757774.png" alt="image-20210401155757774"></p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>node.removeChild() 删的必须是子元素，</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401153308442.png" alt="image-20210401153308442"></p><h3 id="复制添加节点"><a href="#复制添加节点" class="headerlink" title="复制添加节点"></a>复制添加节点</h3><p>new = node.cloneNode()</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401154336923.png" alt="image-20210401154336923"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401160340035.png" alt="image-20210401160340035"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401160426412.png" alt="image-20210401160426412"></p><h1 id="事件高级"><a href="#事件高级" class="headerlink" title="事件高级"></a>事件高级</h1><h2 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401162928938.png" alt="image-20210401162928938"></p><h2 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401164058073.png" alt="image-20210401164058073"></p><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401164303889.png" alt="image-20210401164303889"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401165042532.png" alt="image-20210401165042532"></p><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401165508731.png" alt="image-20210401165508731"></p><p>兼容性问题 e = <strong>e||window.event</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401165948856.png" alt="image-20210401165948856"></p><p>event有个类似this的属性 currentTarget,没啥鬼用</p><p><strong>兼容性问题处理👇</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401170039029.png" alt="image-20210401170039029"></p><p><strong>阻止默认行为</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401170434080.png" alt="image-20210401170434080"></p><p>或者直接return false; 谁都能用但是return后的代码不执行，而且只用于传统的注册方式</p><p>直接preventDefault吧，</p><p><strong>阻止冒泡</strong></p><p>event.stopPropagation(); 兼容性问题。。</p><p>event.cancelBubble;老版本</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401172331089.png" alt="image-20210401172331089"></p><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401172602216.png" alt="image-20210401172602216"></p><p>配合e.target就很牛逼</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401172819901.png" alt="image-20210401172819901"></p><h2 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h2><h3 id="禁止右键和选中文字"><a href="#禁止右键和选中文字" class="headerlink" title="禁止右键和选中文字"></a>禁止右键和选中文字</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401193332860.png" alt="image-20210401193332860"></p><p>然而做得好的网站也不知道用什么方法防住了偷取内容。。</p><h3 id="鼠标事件对象"><a href="#鼠标事件对象" class="headerlink" title="鼠标事件对象"></a>鼠标事件对象</h3><p>MouseEvent</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401194638742.png" alt="image-20210401194638742"></p><p>mousemove 鼠标移动1px就会触发</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401195727163.png" alt="image-20210401195727163"></p><p>记得css修改img为position: absolute</p><h3 id="键盘数据对象"><a href="#键盘数据对象" class="headerlink" title="键盘数据对象"></a>键盘数据对象</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401200249491.png" alt="image-20210401200249491"></p><p>如果一直按着，down和press会一直输出。。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401200749931.png" alt="image-20210401200749931"></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401202950239.png" alt="image-20210401202950239"  /><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401205111068.png" alt="image-20210401205111068"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401205237508.png" alt="image-20210401205237508"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401205457047.png" alt="image-20210401205457047"></p><p>所以不要声明名叫name的全局变量</p><h2 id="常见事件"><a href="#常见事件" class="headerlink" title="常见事件"></a>常见事件</h2><p><strong>窗口加载</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401205732846.png" alt="image-20210401205732846"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401205907695.png" alt="image-20210401205907695"></p><p><strong>调整窗口大小</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401210145839.png" alt="image-20210401210145839"></p><p>只要大小像素变化就会触发resize</p><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a><em><strong>定时器</strong></em></h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401210627622.png" alt="image-20210401210627622"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401210647133.png" alt="image-20210401210647133"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401210753231.png" alt="image-20210401210753231"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401211057397.png" alt="image-20210401211057397"></p><p>拯救男主角  clearTimeout(timerID)</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401211607592.png" alt="image-20210401211607592"></p><p><strong>倒计时！</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401212252996.png" alt="image-20210401212252996"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401212543518.png" alt="image-20210401212543518"></p><h2 id="JS执行队列"><a href="#JS执行队列" class="headerlink" title="JS执行队列"></a>JS执行队列</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401213938731.png" alt="image-20210401213938731"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401214513695.png" alt="image-20210401214513695"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401214628030.png" alt="image-20210401214628030"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401215019237.png" alt="image-20210401215019237"></p><p>如定时器3秒，就是3秒后吧事件放到任务队列中</p><h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401215151934.png" alt="image-20210401215151934"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401215422449.png" alt="image-20210401215422449"></p><p>传递参数</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401220658628.png" alt="image-20210401220658628"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401220733210.png" alt="image-20210401220733210"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401220946122.png" alt="image-20210401220946122"></p><h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p>navigator.userAgent对象存储了用户使用的浏览器的信息</p><h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401221612109.png" alt="image-20210401221612109"></p><h1 id="网页特效"><a href="#网页特效" class="headerlink" title="网页特效"></a>网页特效</h1><h2 id="offset系列"><a href="#offset系列" class="headerlink" title="offset系列"></a>offset系列</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401221901011.png" alt="image-20210401221901011"></p><p>在用后面俩的时候记得加上 + ‘px’</p><p>没有带定位的父亲则以一直网上找直到。。body</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401222324755.png" alt="image-20210401222324755"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401222559804.png" alt="image-20210401222559804"></p><h3 id="拖动模态框"><a href="#拖动模态框" class="headerlink" title="拖动模态框"></a>拖动模态框</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401230220830.png" alt="image-20210401230220830"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401230651020.png" alt="image-20210401230651020"></p><h3 id="电商放大图"><a href="#电商放大图" class="headerlink" title="电商放大图"></a>电商放大图</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401231203726.png" alt="image-20210401231203726"></p><p>大图片是一个图片，overflow:hidden</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401231551677.png" alt="image-20210401231551677"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401231934835.png" alt="image-20210401231934835"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401232233398.png" alt="image-20210401232233398"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401232246907.png" alt="image-20210401232246907"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401233200379.png" alt="image-20210401233200379"></p><h2 id="client系列"><a href="#client系列" class="headerlink" title="client系列"></a>client系列</h2><p>可视区</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401233316513.png" alt="image-20210401233316513"></p><h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><p>无需调用，立马自己执行的函数，第二个小括号可以看成是调用函数</p><p>最大的作用是独立创建了个作用域</p><ol><li><p>(function () {} )  ()</p><p>如 (function (a.b) {console.log(a+b); } )  (1,2)  //传参</p></li><li><p>(function () {} () )</p></li></ol><p>很多flexble核心源码是有关这个的</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401234824479.png" alt="image-20210401234824479"></p><h2 id="Scroll系列"><a href="#Scroll系列" class="headerlink" title="Scroll系列"></a>Scroll系列</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401235104065.png" alt="image-20210401235104065"></p><p>onscroll事件，滚动事件</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401235720069.png" alt="image-20210401235720069"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401235854824.png" alt="image-20210401235854824"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210402000122850.png" alt="image-20210402000122850"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20210402000256076.png" alt="image-20210402000256076"></p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20210402000309513.png" alt="image-20210402000309513"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;为了应付俩招新而学学黑马&lt;/p&gt;
&lt;p&gt;结果学着学着忘记原先目的了。。。&lt;/p&gt;
&lt;p&gt;既然都记了这么多了&lt;/p&gt;
&lt;h1 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h1&gt;&lt;img src=&quot;ht</summary>
      
    
    
    
    <category term="web-front-end" scheme="https://darren-dong.com/categories/web-front-end/"/>
    
    
    <category term="javascript" scheme="https://darren-dong.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>项目1品优购</title>
    <link href="https://darren-dong.com/2021/03/25/%E9%A1%B9%E7%9B%AE1%E5%93%81%E4%BC%98%E8%B4%AD/"/>
    <id>https://darren-dong.com/2021/03/25/%E9%A1%B9%E7%9B%AE1%E5%93%81%E4%BC%98%E8%B4%AD/</id>
    <published>2021-03-25T13:19:32.000Z</published>
    <updated>2021-04-06T08:42:58.355Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="网页制作流程"><a href="#网页制作流程" class="headerlink" title="网页制作流程"></a>网页制作流程</h1><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325212136736.png" alt="image-20210325212136736"></p><p>美工会出一个原型图</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325212220335.png" alt="image-20210325212220335"></p><p>沟通好后然后给一个效果图</p><p>然后由前后端人员实现</p><p>TODO</p><h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><p>完成首页，列表页和注册页</p><p>了解开发步骤，熟悉代码规范</p><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><p>为了与其他团队人员合作</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325212947397.png" alt="image-20210325212947397"></p><p>其中背景/装饰等不经常更换的放在images里，产品图片等更换快的放在upload里面</p><p>首先准备（copy）一下css初始化文件，省去一堆麻烦，然后引入文件，改一下head里的东西</p><h2 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h2><p>提高复用性，降低耦合性，一个一个模块来开发，把复用的结构和样式作为一个模块</p><p>最典型的应用就是common.css公共样式，写好一个样式，其余页面都用</p><p>这样可以重复使用，修改也方便</p><p>只要是公共部分，不仅是模块，也可以是版心宽度，清除浮动，页面文字颜色巴拉巴拉~</p><p>在html和css代码中用注释分隔每个部分</p><h2 id="网站TDK三大标签SEO优化"><a href="#网站TDK三大标签SEO优化" class="headerlink" title="网站TDK三大标签SEO优化"></a>网站TDK三大标签SEO优化</h2><p>虽然有专门的SEO人员，但是前端也要做好一些工作</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325220057276.png" alt="image-20210325220057276"></p><ol><li><p>title </p><p>不可替代的第一个超重要标签</p><p>建议：网站名（产品名）-网站介绍（尽量不要超过30个汉字）</p><p>如：京东(JD.COM)综合网购首选-正品低价-品质保证-配送及时-轻松购物</p></li><li><p>description</p><p><em><strong>简要说明网站主要是做什么的</strong></em> 一般由SEO准备这些内容，前端复制就好了</p></li><li><p>keywords</p><p>是搜索引擎重要的标准，最好限制为6-8的关键词，中间用<strong>英文逗号</strong>隔开，展示<strong>最重要的</strong>产品或功能</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325220548104.png" alt="image-20210325220548104"></p></li></ol><h1 id="公共样式"><a href="#公共样式" class="headerlink" title="公共样式"></a>公共样式</h1><p>网站首页一般都是index.html或index.php</p><p>注意到头部底部可用于多个网页，采用模块化开发</p><p>注意采用约定的命名模块，这些比较常用规范</p><p>我也不知道为什么他总是 &lt;nav class=”nav”&gt;这种写法，dt和dd也是类名，其实是div</p><p><em><strong>先写公共部分！！！！</strong></em></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325221956379.png" alt="image-20210325221956379"></p><h2 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h2><h3 id="快捷导航"><a href="#快捷导航" class="headerlink" title="快捷导航"></a>快捷导航</h3><p>子元素都需要浮动，则直接.shortcut ul li{float}</p><p>都需要居中，因为行高会继承，所以直接给父元素 .shortcut加这个line-height就好了</p><p><strong>多态思想：很多浮动，则直接指定fl类为左浮，fr右浮，很多红色，则 style_red类设置红色</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325232153076.png" alt="image-20210325232153076"></p><p><strong>这里常用做法：字体是小li，不设置其他，每个竖线是有高度，宽度1的盒子，给盒子+margin来隔开其他</strong></p><p>这也太聪明了吧！</p><p>然后用after伪元素插入字体图标，记得要更改路径噢</p><h3 id="header模块"><a href="#header模块" class="headerlink" title="header模块"></a>header模块</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325234135580.png" alt="image-20210325234135580"></p><p>这一块结构不是很规整，可以使用定位来放盒子</p><p>用一个语义化标签header，但为了和其他小header区分，加一个类名也叫header</p><p>分别是logo  search   hotwords  shopcar</p><h3 id="logo-SEO-优化"><a href="#logo-SEO-优化" class="headerlink" title="logo SEO 优化"></a>logo SEO 优化</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325235111811.png" alt="image-20210325235111811"></p><p><strong>所以这个a应该和logo块一样大，要改成block，h1可以不用设置</strong></p><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>把input边框和默认蓝边去掉</p><p>border:0</p><p>outline:none</p><p>小心li里放a的时候搞混字体颜色，其实是a的字体颜色</p><p>那些不固定大小的，仅需要包围效果的，可能1位，可能2位，就不用指定宽度，让内容撑开就好了</p><p>要是需要大一点就利用padding （border-box模型）</p><p>那个冒泡的时候绝对定位右对齐左对齐会导致位数变多的时候往哪边移动。。。好细啊（尽量左对齐）</p><h3 id="nav"><a href="#nav" class="headerlink" title="nav"></a>nav</h3><p><strong>dropdown</strong> 和 navitems</p><p>按照语义，详细的分类应该是”全部分类“的列表项！</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210326090419517.png" alt="image-20210326090419517" style="zoom:50%;" /><p>奇怪。。这个dropdown的dt部分占满空间，dd部分都显示在盒子外面。。全是overflow</p><p>注意鼠标放上去的时候，选项左边有个两像素的小空隙margin，右边不加。。也不知道为啥。。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210326093035542.png" alt="image-20210326093035542"></p><p><strong>间距通过a的padding值挤开而不是li的padding值，增大超链接选择范围，更利于点击</strong></p><h2 id="底部"><a href="#底部" class="headerlink" title="底部"></a>底部</h2><p>同样最大的盒子不要给宽度，仅指定高度，边距，背景啥的，里面放一个版心，然后再细分成几个盒子</p><p>那一个 li 就分成是一个图标（h5）+一个文字框（div里一个h4一个p）</p><p>还有这一堆小图片，可以用一张精灵图</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210326100552707.png" alt="image-20210326100552707"></p><p>完成。。。</p><h1 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h1><h2 id="主体模块"><a href="#主体模块" class="headerlink" title="主体模块"></a>主体模块</h2><p>main主体模块是index.html专有的，应该新建一个样式文件Index.css</p><p>注意<strong>算好距离</strong>，免得被那个越界的压住，然后可以直接指定高度，免得清除浮动</p><p>里面有俩，焦点图focus  还有  新闻快报newsflash</p><p>因为焦点图经常更换，应该放到uploads里面</p><h3 id="newsflash"><a href="#newsflash" class="headerlink" title="newsflash"></a>newsflash</h3><p>news新闻，放一些新闻呗，前面还有[xx]，老气的很<img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210326124432405.png" alt="image-20210326124432405" style="zoom:25%;" /></p><p>没啥好说的</p><p>lifeservice生活，很多图标，小功能区域</p><p>给每个小图标加<em><strong>右边框和下边框</strong></em>，浮动就有了这种效果</p><p>一行只能装下3个，装不下第四个（差一点），此时可以修改ul的宽度（透明），</p><p>再用.liferserver的overflow：hidden来切掉超界的</p><p>那个小方块可以用行内块元素来做，行内块元素也可以用text-align:center来居中</p><p>bargin 特价商品，放广告的</p><p>不过是一个臭盒子罢了。。放一张图片咯</p><h3 id="推荐模块"><a href="#推荐模块" class="headerlink" title="推荐模块"></a>推荐模块</h3><p>recon大模块</p><p>他好像很喜欢用hd做盒中盒子头，bd用来做盒中盒子体</p><p>记得要约束img的尺寸</p><p>.recom_bd ul li:nth-child(-n+3)::after 给前三个加一条width:1px,有backgroundcolor的后置就好了</p><p>绝对布局，右0，上10.</p><h3 id="楼层区域"><a href="#楼层区域" class="headerlink" title="楼层区域"></a>楼层区域</h3><p>常用的网页布局，左边有个“电梯导航栏”，可以快捷到达楼层凹凹造型</p><p>floor没有高度，因为不知道具体多高</p><p>里面再放各个楼层，比如一楼家用电器，二楼。。。。。</p><h3 id="Tab栏原理-布局需求"><a href="#Tab栏原理-布局需求" class="headerlink" title="Tab栏原理-布局需求"></a>Tab栏原理-布局需求</h3><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210326165136439.png" alt="image-20210326165136439" style="zoom: 33%;" /><p>虽然需要JS来实现，但是可以先熟悉它的布局</p><p>box_hd 盒子里放了标题和tab_list</p><p>box_bd盒子里再放tab_content</p><p>这样可以在tab栏外额外添加一些鬼东西嗷</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210326170501978.png" alt="image-20210326170501978" style="zoom:33%;" /><p>这是骚操作。。。。把类当id用呗</p><p>a如果要包含块级元素，最好把a转化成块级元素</p><p>不想写列表页了。。。我复制了我靠</p><p>小心浮动溢出影响别的，可以用overflow:hidden来解决</p><p>一定要弄清楚尺寸以及覆盖关系，小偏差也可以用overflow:hidden解决</p><p>hover边框效果，要先搞透明边框，hover变色，而不是加边框，不然引起其他元素移动</p><h3 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a>注册页面</h3><p><strong>注册页面比较隐私，为了保护用户信息，不需要SEO优化</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210326174519979.png" alt="image-20210326174519979"></p><p>右边那个提示输入正不正确的格式是span盒子，嵌套一个小盒子，背景放X，小盒子外一行字</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210326193738689.png" alt="image-20210326193738689"></p><p>要在ul外面加一个表单域form才可以将数据发送到后台，form里面原来可以放好多东西</p><h1 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h1><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210326200421317.png" alt="image-20210326200421317"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210326200935860.png" alt="image-20210326200935860"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;网页制作流程&quot;&gt;&lt;a href=&quot;#网页制作流程&quot; class=&quot;headerlink&quot; title=&quot;网页制作流程&quot;&gt;&lt;/a&gt;网页制作流程&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/darren-greenh</summary>
      
    
    
    
    <category term="project" scheme="https://darren-dong.com/categories/project/"/>
    
    
    <category term="品优购" scheme="https://darren-dong.com/tags/%E5%93%81%E4%BC%98%E8%B4%AD/"/>
    
  </entry>
  
  <entry>
    <title>黑马html&amp;css</title>
    <link href="https://darren-dong.com/2021/03/20/%E9%BB%91%E9%A9%AChtml&amp;css/"/>
    <id>https://darren-dong.com/2021/03/20/%E9%BB%91%E9%A9%AChtml&amp;css/</id>
    <published>2021-03-20T13:42:25.000Z</published>
    <updated>2021-04-10T09:22:08.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h1><p>本教程缺失一些不常用的知识，以后见到了再学</p><h2 id="html标签（上）"><a href="#html标签（上）" class="headerlink" title="html标签（上）"></a>html标签（上）</h2><p>浏览器内核</p><p>（又称渲染引擎）负责读取网页内容，整理信息，计算网页的显示方式并显示页面</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210320214750898.png" alt="image-20210320214750898"></p><p>Web标准</p><p>由W3C规定，规定了不同浏览器解析出的效果基本一样，</p><p>三大部分：结构（整理），表现（外观样式），行为（交互）</p><p>标准提出的最佳体验方案：结构，样式，行为分离！！！！！</p><p>可以简单理解为分别对应H C J</p><p>语义：strong  em   del  ins</p><p>图像标签：src  alt  title width height border</p><p>超链接：href（#空连接   指向文件可以下载 视频） target(_self _blank)   </p><p>锚点链接：href（#id）</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210320222646217.png" alt="image-20210320222646217"></p><p>记得加分号</p><h2 id="html标签（下）"><a href="#html标签（下）" class="headerlink" title="html标签（下）"></a>html标签（下）</h2><p>表格：展示数据，而不是布局页面！</p><p>table : tr : th/td</p><p>table属性：align  border  cellpadding(内容与边框)  cellspacing(单元格间的缝隙) w h</p><p>thead  tbody语义化  （thead是区域，th是表头单元格）</p><p>合并单元格：rowspan（行）colspan（列）这里作为属性colspan=”2”占据两个行/列</p><p>也可以使用colgroup和col巴拉巴拉</p><p>列表：用来布局！无序，有序，自定义</p><p>ul只准放 li，但li里可以放任意    ol同上</p><p>自定义列表常用于对术语或名词进行解释或描述</p><p>dl（不能放别的） dt（名词）dd（用来说明的小弟） 但是dt和dd是兄弟关系！</p><p>表单：收集用户信息，主要交互之一</p><p>分为表单域，表单控件（表单元素），提示信息</p><p>表单域：包含表单元素的区域，把范围内的表单信息提交给服务器</p><p>form  action：指定接受并处理表单数据的服务器程序的url</p><p>method get/post这是REST规范吗？</p><p>name 表单域名称</p><p>表单控件：</p><ol><li><p>input：输入表单元素</p><p>单标签，必选属性type=“”</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210320231453362.png" alt="image-20210320231453362"></p><p>提示直接写在input标签前面:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>      男 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span><span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 女 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>免费注册(显示的内容)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>重新设置(显示的内容)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--回到默认--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>name: input元素的名称  单/复选框通过该属性合并</p><p>value：input属性的值，输入前默认值（不是提示语），按钮的value是送到后台的数据</p><p>placeholder：设置提示词，一输入就消失</p><p>name和value主要给后台人员使用</p><p>checked：针对单/复选框，设置成默认勾选checked</p><p>maxlength：正整数</p></li><li><p>select：下拉表单元素,至少包含一对option</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>山东<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    ............<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-->可以在option中定义selected=“selected”来选为默认选中项&lt;--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>textarea：文本域元素（大量输入文字，多行文本输入）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>    今日反馈：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        哇哦（这就是默认文本）    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--</span><span class="token punctuation">></span></span>一般cols和rows没人用，都是用CSS来搞！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>label：搭配input使用，绑定一个表单元素，点击lable里的文本时，浏览器自动聚焦到相应表单元素</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lable</span> <span class="token attr-name">for</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 用户名 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lable</span><span class="token punctuation">></span></span>lable><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>学会查阅文档！</p><h2 id="CSS1"><a href="#CSS1" class="headerlink" title="CSS1"></a>CSS1</h2><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210328202816143.png" alt="image-20210328202816143" style="zoom: 33%;" /><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210328202925727.png" alt="image-20210328202925727" style="zoom:33%;" /><p>代码风格：展开（一行一属性）虽然不区分大小写（除了字符串）单尽量小写</p><p>冒号和值之间空格，选择器和 { 间加个空格</p><h3 id="字体："><a href="#字体：" class="headerlink" title="字体："></a>字体：</h3><p>font-family：“宋体”可以，但由于兼容性不好，最好用英文写</p><p>font-family:  “Microsoft Yahei”,…..依次向后检索，用逗号分隔，但是多个单词组成的最好引号包起来</p><p>尽量使用系统默认自带字体，一般给body指定好看的</p><p>font-size：px像素，谷歌默认16px，<em><strong>标题标签比较特殊，需要单独指定文件大小，即使是子标签</strong></em></p><p>font-weight：好多属性。。更提倡使用数字</p><p>font-style：normal italic </p><p>复合属性：font</p><p>style weight <strong>size</strong>/line-height <strong>family</strong> 但是必须有size和family？</p><p><strong>此处这个line-height可以不加单位，如1.5  则继承的子元素默认行高为当前字体大小的1.5倍</strong></p><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>color: 关键词 十六进制 rgba</p><p>text-align</p><p>text-decoration: underline none  overline line-through</p><p>text-indent 首行缩进</p><p>line-height （行高）= 上+下+字高</p><h3 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h3><p>前身为Zen coding，用来缩写提高html/css速度，vscode集成该语法</p><p>html骨架：</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210321093355251.png" alt="image-20210321093355251"></p><ol start="8"><li>[]可以填充自己需要的属性，值无空格就不用引号</li><li>$$$连用则是001，002.。。</li><li>$后面加@-3*5表示逆序，终点为3，一共五次</li><li>为空格是Emmet停止缩写解析的<em>停止符号</em>，不要用来增加可读性</li><li>  :+值！</li></ol><p>css标签：</p><p>每个单词第一个字母+值（可不加单位，用默认）直接tab</p><p>tac  -&gt; text-align: center;</p><p>lh26 -&gt; line-height: 26px;</p><p>这种链接伪类先后顺序被称为 <em>LVHA 顺序</em>：<code>:link</code> — <code>:visited</code> — <code>:hover</code> — <code>:active</code>。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Selectors/Pseudo-classes_and_pseudo-elements#%E4%BC%AA%E7%B1%BB">参考列表</a></p><p>常用<code>*:hover</code></p><p>:focus，选择获得光标的元素，可用于表单</p><h3 id="CSS元素显示"><a href="#CSS元素显示" class="headerlink" title="CSS元素显示"></a>CSS元素显示</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210321113400485.png" alt="image-20210321113400485"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210321113748159.png" alt="image-20210321113748159"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210321113952029.png" alt="image-20210321113952029"></p><p>display</p><p>垂直居中：行高等于盒子高度就可以，line-height = height</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>background-color(默认transparent) 单用一个rgba（0，0，0，0.3）;调整背景颜色透明度，而不影响别的</p><p>background-image(便于控制位置)</p><p>background-repeat:repeat,no-repeat,repeat-x/y</p><p>background-position: 方位词(tcblcr) length(具体/百分比)x和y(默认center)</p><p>background-attachment:fixed(固定在视口),scroll(默认，固定在页面),local(固定在元素)</p><p>简写：无顺序要求，有约定顺序：</p><p>颜色  图片地址  平铺   滚动  位置</p><p>opacity: 影响全部！</p><h3 id="CSS三特性"><a href="#CSS三特性" class="headerlink" title="CSS三特性"></a>CSS三特性</h3><p>层叠性：同级后覆盖前</p><p><em><strong>简写的后面覆盖前面，并不会选择不冲突的覆盖，而是全部覆盖！！！！！</strong></em></p><p>继承性：子元素可以继承父元素的部分样式（text-,font-,line-这些开头的可以继承，以及color）</p><p>优先级：</p><p>一个选择器的优先级可以说是由四个部分相加 (分量)，可以认为是个十百千 — 四位数的四个位数：</p><ol><li><p><strong>千位</strong>： 如果声明在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes#attr-style"><code>style</code></a> 的属性（内联样式）则该位得一分。这样的声明没有选择器，所以它得分总是1000。</p></li><li><p><strong>百位</strong>： 选择器中包含ID选择器则该位得一分。</p></li><li><p><strong>十位</strong>： 选择器中包含类选择器、属性选择器或者伪类则该位得一分。</p></li><li><p><strong>个位</strong>：选择器中包含元素、伪元素选择器则该位得一分。</p></li></ol><p><strong>注</strong>: 通用选择器 (<code>*</code>)，组合符 (<code>+</code>, <code>&gt;</code>, <code>~</code>, ‘ ‘)，和否定伪类 (<code>:not</code>) 不会影响优先级。</p><p><strong>警告:</strong> 在进行计算时不允许进行进位，例如，20 个类选择器仅仅意味着 20 个十位，而不能视为 两个百位，也就是说，无论多少个类选择器的权重叠加，都不会超过一个 ID 选择器。</p><p>有一个特殊的 CSS 可以用来覆盖所有上面所有优先级计算，不过需要很小心的使用 — <code>!important</code>。</p><p>这是个属性值！！用于修改特定属性的值， 能够覆盖普通规则的层叠。</p><p>继承也不会影响优先级，有些浏览器给予默认样式的如a{}相当于个位，所以比继承高</p><p>后代选择器权重叠加</p><h2 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h2><h3 id="盒子"><a href="#盒子" class="headerlink" title="盒子"></a>盒子</h3><p>边框:</p><p>border-width  粗细</p><p>border-style 样式</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210321190451586.png" alt="image-20210321190451586"></p><p>border-color 颜色</p><p>简写：border: width style color  决定顺序，非强制</p><p>也可以border-tlrb：。。。</p><p>border-collapse collapse 合并相邻的边框  separate独立（重合会都显示（如加粗））</p><p>padding-left….. </p><p>直接padding就是那种：</p><p><em><strong>1个：全部   2个：上下 左右  3个：上  左右  下  4个：上右下左</strong></em></p><p>加padding会撑大盒子，而content内容不会变</p><p><em><strong>如果width没指定，则padding会压缩content，但只要指定，即使width=100%也会撑大，高度也一样</strong></em></p><p>块级元素子元素原本就和父元素一样宽，上面那条规则适用</p><p>margin-top。。。</p><p>margin简写同上。。。。</p><p>两个嵌套关系（父子）块元素在top有外边距，保留大的作为父元素的外边距，（塌陷）</p><p><strong>补充外边距合并及其解决方案</strong>：<a href="https://blog.csdn.net/songyi160/article/details/87891222">https://blog.csdn.net/songyi160/article/details/87891222</a></p><p>浮动盒子不会有该问题!!!!</p><p>解决方法：</p><ol><li>父元素加上边框</li><li>父元素加上内边距</li><li>父元素加overflow：hidden</li></ol><p>块级盒子水平居中：</p><ol><li>必须设定一个width</li><li>设定左右外边距为auto就行，一般是 margin: 0 auto;</li></ol><p>行内/行内块水平居中：</p><ul><li>给父元素text-align:center</li></ul><p>浏览器有默认内外边距，而且有时候不一样，清除：</p><p>在最第一行用*{margin:0 ; padding: 0}</p><p>行内元素尽量只设置左右，上下没效果</p><p>ps</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210321204859160.png" alt="image-20210321204859160"></p><p>css3新盒子属性</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">CSS</a> 属性 <strong><code>border-radius</code></strong> 允许你设置元素的外边框圆角。当使用一个半径时确定一个圆形，当使用两个半径时确定一个椭圆。这个(椭)圆与边框的交集形成圆角效果。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/border-radius-sh.png" alt="Images of CSS3 rounded corners: no rounding, rounding w/ an arc of circle, rounding w/ an arc of ellipse"></p><p>1个值:全部  2个：左上右下  右上左下  3个：左上  右上左下   右下    4个：左上开始顺时针</p><p>百分比是相对于宽度和高度的，高度一半就变成操场哈哈</p><p>也可以俩值 a/b或是分别指定椭圆的长轴和短轴</p><p>也可以分开：border-top-left-radius:</p><p>盒子阴影(box-shadow)</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210321214655930.png" alt="image-20210321214655930"></p><p><em><strong>但只准写inset不能写outset！！影子不占空间</strong></em></p><p>其中blur代表模糊程度</p><p>spread代表对模糊范围的等密度放缩</p><p>文字阴影：（text-shadow）</p><p>h-shadow  v-shadow   blur   color</p><p>css三种传统布局方式</p><ul><li>普通流/标准流/文档流（标签按规定好的默认方式排列，块/行内这些规则）（最基本）</li><li>浮动</li><li>定位</li></ul><p>实际开发中，一个页面基本包含了这三种布局方式（移动端有新的）</p><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p>一个准则：块级元素纵向选标准流，横向用浮动</p><p>float属性用于创建浮动框，将其移动到一边，直到左/右边缘触及 <strong>包含块</strong> 或 <strong>另一个浮动框</strong> 的边缘</p><p>float : none（默认）  left   right</p><p>三个主要特性：</p><ol><li>浮动元素会脱离标准流（脱标），不再占用原来的位置</li><li>浮动元素会一行内显示，不会有缝隙（可用margin），并且元素顶部对齐</li><li>浮动元素会具有Inline-block元素的特性</li></ol><p><em><strong>浮动元素经常和标准流父级搭配使用！</strong></em>，先用标准流父级划分大模块，实现纵向布局</p><p>浮动只会影响浮动盒子后面的标准流，不会影响前面的标准流！！！！</p><p><em><strong>清除浮动：</strong></em></p><p>若父盒子没指定高度，子元素浮动时高度则没高度了，</p><p>clear： left  right  both（几乎只用both）策略是：闭合浮动</p><p>四方法：</p><ol><li><p>额外标签法（隔墙法），W3C推荐</p><p><strong>在后面添加一个新标签（必须是<em>块级元素</em>），并且添加clear属性</strong></p><p>其实是这个空的块级标签左右不能有浮动，所以它把父级撑开了罢了</p><p>多了无意义标签，结构化较差</p></li><li><p>父级添加overflow属性：hidden/auto/scroll</p><p> <strong>overflow</strong> 定义当一个元素的内容太大而无法适应 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">块级格式化上下文</a> 时候该做什么。它是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow-x"><code>overflow-x</code></a> 和<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow-y"><code>overflow-y</code></a>的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Shorthand_properties">简写属性 </a>。（这只是把溢出隐藏了，不推荐）</p></li><li><p>父级添加：：after伪元素（结构简单，比较常用，上流）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix::after</span><span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> <span class="token comment">/*必须*/</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">&#125;</span><span class="token selector">.clearfix</span><span class="token punctuation">&#123;</span>    *<span class="token property">zoom</span><span class="token punctuation">:</span>1 <span class="token comment">/*使兼容IE6.7*/</span><span class="token punctuation">&#125;</span>然后给盒子加上clearfix类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>父级添加双伪元素(代码更简介，腾讯用)</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix::before .clear:after</span><span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.clearfix::after</span><span class="token punctuation">&#123;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.clearfix</span><span class="token punctuation">&#123;</span>    *<span class="token property">zoom</span><span class="token punctuation">:</span>1 &lt;!--使兼容IE6.7--><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="BFC"><a href="#BFC" class="headerlink" title="*BFC"></a>*BFC</h3><p><a href="https://blog.csdn.net/sinat_36422236/article/details/88763187">https://blog.csdn.net/sinat_36422236/article/details/88763187</a></p><h3 id="PS切图"><a href="#PS切图" class="headerlink" title="PS切图"></a>PS切图</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210321235346203.png" alt="image-20210321235346203"></p><p>图层切图</p><p>找到PSD其中的图片，快速导出为PNG</p><p>按住shift选择多个，-&gt;图层菜单-&gt;合并图层（Ctrl+E），导出（合并完不能分开/。。）</p><p>切片切图</p><p>（长按裁剪工具选择切片）切片工具选择区域-&gt;文件-&gt;导出选中的切片（存储为web所用格式JPEG好）</p><p>透明格式是拉到最底，把背景去掉（显示为黑白网格），导出为png或gif格式的</p><p>PS插件切图</p><p>Cutterman是插件，自动将需要的图层输出</p><p>用辅助线帮忙，左边拉俩线，再用选框工具量！</p><h3 id="小项目"><a href="#小项目" class="headerlink" title="小项目"></a>小项目</h3><p>css属性建议书写顺序</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210322130017462.png" alt="image-20210322130017462"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210322205425707.png" alt="image-20210322205425707"></p><p>当好多一排里的元素都有margin-right然后装不下时，可以让父元素大一点，这样最边上的元素能装下，而margin看不见所yi没关系</p><h3 id="favicon-ico图标"><a href="#favicon-ico图标" class="headerlink" title="favicon.ico图标"></a>favicon.ico图标</h3><ol><li>制作，先制作png图片，可以用<a href="http://www.bitbug.net/">比特虫</a>啥的转为ico文件</li><li>放到根目录的某处</li><li>然后引入<code>&lt;link rel=&quot;shortcut icon&quot; href=&quot;url&quot;?&gt;</code></li></ol><h3 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h3><p><strong>TDK</strong>三大标签</p><p>虽然有专门的SEO人员，但是前端也要做好一些工作</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325220057276.png" alt="image-20210325220057276"></p><ol><li><p>title </p><p>不可替代的第一个超重要标签</p><p>建议：网站名（产品名）-网站介绍（尽量不要超过30个汉字）</p><p>如：京东(JD.COM)综合网购首选-正品低价-品质保证-配送及时-轻松购物</p></li><li><p>description</p><p><em><strong>简要说明网站主要是做什么的</strong></em> 一般由SEO准备这些内容，前端复制就好了</p></li><li><p>keywords</p><p>是搜索引擎重要的标准，最好限制为6-8的关键词，中间用<strong>英文逗号</strong>隔开，展示<strong>最重要的</strong>产品或功能</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325220548104.png" alt="image-20210325220548104"></p></li></ol><p><strong>logo优化</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325235111811.png" alt="image-20210325235111811"></p><p><strong>所以这个a应该和logo块一样大，要改成block，h1可以不用设置</strong></p><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p>浮动可以让多个块级盒子横向排列</p><p>定位则是可以让盒子自由的在某个盒子内移动位置或固定屏幕中的某个位置，而且可以压住其他盒子。</p><h4 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h4><p>*定位组成</p><p>定位：即把盒子定在某个位置</p><p>定位=定位模式+边偏移</p><p>定位模式(position)： </p><p>static(静态)  relative(相对)   absolute(绝对)   fixed(固定)</p><p>边偏移：定位的盒子移动到最终位置，有top bottom left right四个属性</p><p>静态定位(static):</p><p>默认定位方式，按照标准流特性摆放，他没有边偏移。</p><p>静态定位在布局时很少用到</p><p>相对定位(relative)：</p><p>元素移动位置时相对它原来的位置来说的。参考点是自己原来的位置！</p><p>它走了以后它的位置仍会保留，并未脱离标准流。</p><p><strong>它最典型的应用是作为绝对定位的父元素</strong></p><p>绝对定位(absolute):</p><p>元素移动位置时，以父元素为基准</p><ul><li><p>如果没有祖先元素，<strong>或祖先元素没有定位</strong>，则以浏览器为准定位（Document文档）</p></li><li><p>如果祖先有定位（相对，绝对，固定定位），则以最近一级的有定位祖先元素为参考点移动位置</p></li><li><p>绝对定位会脱标，不占有原来的位置，覆盖下面的任何盒子（甚至浮动）</p></li></ul><p>子绝父相是通常，当然不是绝对的，只是用的多</p><p>固定定位(fixed)：</p><ul><li>以<strong>浏览器的可视窗口</strong>作为基准！</li><li>跟父元素没有任何关系</li><li>不随滚动条滚动</li><li>固定定位不再占有原先的位置，可看为特殊的移动定位</li></ul><p>固定定位小技巧：固定在版心右侧位置</p><ol><li>让固定定位的盒子left：50%  走到浏览器可视区（版心的一半）</li><li>让固定定位的盒子margin-left：版心宽度的一般距离+一点点空隙</li></ol><p>粘性定位 (sticky):</p><p>粘性定位可以被认为是相对定位和固定定位的混和，特点：</p><ul><li>以浏览器的可视窗口为参照点移动元素（固定定位特点）</li><li>占有原先的位置（相对定位特点）</li><li><strong>必须添加tlrb中的一个才有效</strong></li></ul><p>跟页面滚动搭配，兼容性一般般，IE不支持，去尼玛的破IE</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210323090921464.png" alt="image-20210323090921464"></p><h4 id="叠放次序"><a href="#叠放次序" class="headerlink" title="叠放次序"></a>叠放次序</h4><p>用z-index来控制前后次序</p><p>z-index: ..</p><ul><li>数值可以是正负整数/0（无单位），默认auto（当前级别为0），数值越大，盒子越靠上</li><li>如果属性值相同，则按照书写顺序层叠</li><li>只有定位的盒子才有z-index属性</li></ul><h4 id="定位拓展"><a href="#定位拓展" class="headerlink" title="定位拓展"></a>定位拓展</h4><ol><li><p>绝对定位的盒子居中</p><p>不能再用margin：0 auto</p><p><code>left:50%        margin-left: - 1/2*self-width</code></p><p>垂直类似</p></li><li><p>特殊的特性</p><ul><li>行内元素添加绝对/固定定位，<strong>可以直接设置高度和宽度</strong></li><li>块级元素添加绝对/固定定位，如果不给宽度或高度，默认大小是内容大小</li><li>浮动元素/绝对/固定定位都不会触发外边距合并的问题</li></ul></li><li><p>浮动的元素不会压住下面标准流的文字（最初浮动产生的目的就是做文本环绕效果）</p><p>但是绝对定位/固定定位会压住所有内容</p><p><strong>如果一个盒子既有left属性又有right属性，两者不是重叠，会默认left，同理，默认top</strong></p></li></ol><p>用并集选择器减少代码重复</p><p>再单独增加特殊的，或用类思想</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210323095911579.png" alt="image-20210323095911579"></p><h4 id="元素显示-隐藏"><a href="#元素显示-隐藏" class="headerlink" title="元素显示/隐藏"></a>元素显示/隐藏</h4><ol><li><p>display 显示隐藏</p><p><strong>none隐藏对象</strong>    两者对立   block还有显示元素的意思</p><p>隐藏后，不再占有原来的位置！</p></li><li><p>visibility 显示隐藏<br>默认inherit  visible  hidden  collapse(不常用)</p><p>仍保留原来的位置！</p></li><li><p>overflow 溢出显示隐藏</p><p>hidden  scroll(一直滚动)   visible  auto(需要时滚动)</p></li></ol><h2 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h2><h4 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h4><p>Sprites</p><p>为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度。</p><p><strong>核心原理</strong>：将网页中的一些<strong>小背景图</strong>像整合到一张大图中，这样服务器只需要请求一次就好了</p><ol><li>精灵技术主要针对于背景图片使用，其他图片可能更换频率高，不适合使用</li><li>这个大图片也成为sprites精灵图/雪碧图</li><li>主要通过background-position来显示部分。。</li><li>就是要盒子和移动距离刚好合适。。真麻烦</li><li>用ps的框选，打开窗口里的信息，查看x和y坐标，则位置就是-x,-y巴拉巴拉</li></ol><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210323214406626.png" alt="image-20210323214406626"></p><h4 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h4><p>iconfont</p><p>为前端工程师提供一种方便高效的图标使用方式，展示的是图标，本质属于字体</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210323214740389.png" alt="image-20210323214740389"></p><p><em><strong>icomoon的使用方法</strong></em></p><ol><li><p>选好，（编辑）下载成一个压缩包并解压</p><p>将fonts文件夹放到html文件根目录，4个字体文件是为了兼容所有噢！</p></li><li><p>在CSS样式中全局声明字体，打开icomoon文件夹，复制“style.css”里的代码到css里，</p><p>复制到<code>font-display:block</code>为止，记得更改到fonts的路径</p></li><li><p>在icomoon的demo.html文件查看对应代码最右边的小方框，粘贴就好了,也可以（\+编码）</p><p>在对应的标签加入样式里的<code>font-family:&#39;icomoon&#39;;</code> 其他文字属性仍然可用</p></li><li><p>追加，若原账户则默认存储，未保存则import icons，把selection.json文件上传，再继续挑选，仍然生成，这样会生成新的文件，替换原来的文件就好了</p></li></ol><p><em><strong>阿里的symbol引用</strong></em></p><p>确实挺好用的吧，先打开demo.html文件，复制生产的js和css代码，然后将类改成它提供的就好了，只是注意要改一下文件路径！</p><h4 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h4><p>如果一个盒子没有大小，只有边框，且颜色不同，则可以发现边框竟然是4个三角形</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210324084613633.png" alt="image-20210324084613633"></p><p>所以如果三个边框透明，只留下一个边框就可以做出一个三角形，大小取决于边框尺寸</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> xxpx solid transparent<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token comment">/*这行是兼容性*/</span>    <span class="token property">border-left-color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>底边是border尺寸*2，要完全出去就是移动这么多</p><h3 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h3><h4 id="一些技巧"><a href="#一些技巧" class="headerlink" title="一些技巧"></a>一些技巧</h4><p><strong>鼠标样式</strong></p><p>cursor : default  pointer  move  text  not-allowed</p><p>**input{outline : none}**不会出现默认的蓝色框</p><p>同样可以用于文本域等其他出现了该现象的元素们</p><p><strong>文本域原本右下角可以拉大，取消</strong>：</p><p>textarea{resieze: none;}</p><p><strong>textarea如果俩标签分行写输入时会有一个padding？</strong></p><p><strong>vertical-align</strong>（块级元素没有）</p><p>文本域也是行内块，也可以用</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210324090646156.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210324090857405.png" alt="image-20210324090857405"></p><p>图片默认是与文字基线对齐</p><p><strong>可以改成bottom/top/middle来改掉图片和边框间的空白缝隙，或者改成块元素</strong></p><p><strong>单行文字溢出省略号表示</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*1.先强制一行内显示文本，默认(normal自动换行)*/</span><span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span><span class="token comment">/*2.超出部分隐藏*/</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token comment">/*3.修改文本溢出样式*/</span><span class="token property">text-overflow</span> <span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>多行文字溢出省略号表示</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css">有较大兼容性问题，适合于webKit浏览器或移动端<span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token comment">/*弹性伸缩盒子显示*/</span><span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span><span class="token comment">/*限制在一个块元素内显示的文本行数*/</span><span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span>2<span class="token punctuation">;</span><span class="token comment">/*设置或检索伸缩盒对象的子元素排列方式*/</span><span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span>vertical<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>建议后台人员来做这个效果</strong>，<strong>操作更简单</strong></p><h4 id="常见布局技巧"><a href="#常见布局技巧" class="headerlink" title="常见布局技巧"></a><strong>常见布局技巧</strong></h4><ol><li><p>margin负值运用</p><p>原本浮动的盒子会发生边框加粗，可以用margin的负值使其重合</p><p>但是hover时会发生边框覆盖属性，可以在hover里面改成相对定位，<strong>压住其他标准流和浮动</strong>，但如果其他li都设置了定位，就用z-index来提高层级</p></li><li><p>文字围绕浮动元素</p><p>大盒子里放一个小浮动盒子，文字会被挤到一边就好了</p></li><li><p>行内块的巧妙运用</p><p>就是一排盒子嘛。。。</p></li><li><p>css三角强化</p><p>自由决定各方向边框的尺寸，如果缺少某底边，那左右两边会被截成一半，就这样构造出各种三角形，有些可以直接去掉，尺寸变为0，有些必须存在以辅助构建三角形，把颜色改成透明,格式：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">border-color</span><span class="token punctuation">:</span>transparent red transparent transparent<span class="token comment">/*右边红*/</span><span class="token property">border-style</span><span class="token punctuation">:</span>solid  border-width 100px 50px 0 0<span class="token punctuation">;</span><span class="token comment">/*高100，宽50*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="CSS初始化"><a href="#CSS初始化" class="headerlink" title="CSS初始化"></a>CSS初始化</h4><p>不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对HTML文本呈现的差异，照顾浏览器的兼容，我们需要对CSS初始化 CSSreset</p><p><strong>每个网页都必须首先进行CSS reset</strong></p><p>把字体如“宋体”转化成Unicode编码就不会有兼容性问题</p><p>如黑体\93d1\4f53</p><p>宋体\5b8b\4f53</p><p>微软雅黑\5FAE\8F6F\96C5\9ED1</p></li></ol><h2 id="HTML5新增"><a href="#HTML5新增" class="headerlink" title="HTML5新增"></a>HTML5新增</h2><p>针对以前的不足，增加了新的标签，表单，表单属性。。</p><p>新特性大多存在兼容性问题，但是时代在发展</p><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325130724672.png" alt="image-20210325130724672"></p><ul><li>都是块级元素</li><li>针对搜索引擎，都可以在页面中多次使用</li><li>在IE9中要把这些转化为块级元素</li><li>移动端更喜欢使用这些标签</li></ul><h3 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h3><p>video</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325131250427.png" alt="image-20210325131250427"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>video/ogg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    您的浏览器不支持video标签    <span class="token comment">&lt;!--依次向下检索，最后显示文字，处理兼容性问题--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">属性</th><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/tags/att-video-autoplay.html">autoplay</a></td><td align="left">autoplay</td><td align="left">如果出现该属性，则视频在就绪后马上播放。(谷歌要加muted)</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-video-controls.html">controls</a></td><td align="left">controls</td><td align="left">如果出现该属性，则向用户显示控件，比如播放按钮。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-video-height.html">height</a></td><td align="left"><em>pixels</em></td><td align="left">设置视频播放器的高度。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-video-loop.html">loop</a></td><td align="left">loop</td><td align="left">如果出现该属性，则当媒介文件完成播放后再次开始播放。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-video-muted.html">muted</a></td><td align="left">muted</td><td align="left">如果出现该属性，视频的音频输出为静音。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-video-poster.html">poster</a></td><td align="left"><em>URL</em></td><td align="left">规定视频正在下载时显示的图像，直到用户点击播放按钮。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-video-preload.html">preload</a></td><td align="left">auto metadata none</td><td align="left">如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-video-src.html">src</a></td><td align="left"><em>URL</em></td><td align="left">要播放的视频的 URL。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-video-width.html">width</a></td><td align="left"><em>pixels</em></td><td align="left">设置视频播放器的宽度。</td></tr></tbody></table><p>真正开发不用controls，用js自己搞控件</p><p>兼容性写法同上</p><p>音频Audio</p><p>除了width，height，poster都有，而且谷歌也把音频自动播放禁了</p><h3 id="新input"><a href="#新input" class="headerlink" title="新input"></a>新input</h3><p><strong>都必须放在form域里噢</strong></p><p>type =email url date time month week number显示用户输入类型</p><p>当输入不正确时，会自动提示不正确，尤其在手机端优化的很好</p><p>tel 手机号码</p><p>search搜索框</p><p>color生成一个颜色选择表单</p><p>新表单属性</p><ol><li><p>requried   required   必须输入</p></li><li><p>placeholder   显示文字   </p><p><strong>可以调样式<code>input::placeholder</code>可以选中placeholder</strong></p><p>但是它的边距其实也是文本的边距，直接调input内边距就好了</p></li><li><p>autofocus   autofocus   自动聚焦</p></li><li><p>autocomplete  on（默认）/off  显示历史填写，必须加上name同时成功提交过，一般改成off</p></li><li><p>multiple   multiple  可以多选文件</p></li></ol><h2 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h2><p>都有兼容性问题，ie9+才才支持</p><p>移动端支持优于pc端</p><p>不断改进中</p><p>应用相对广泛</p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>新增了属性选择器，结构伪类，伪元素。。</p><p>我直接把另一个汇总复制过来吧</p><p>当你使用选择器列表时，如果任何一个选择器无效 (存在语法错误)，那么整条规则都会被忽略。</p><p>但是在被组合起来以后，整个规则都会失效，无论是<code>h1</code>还是这个class都不会被样式化。</p><p>这组选择器包含了伪类，用来样式化一个元素的特定状态。</p><p>它还可以包含了伪元素，选择一个元素的某个部分而不是元素自己。</p><table><thead><tr><th align="left">选择器</th><th align="left">示例</th><th align="left">学习CSS的教程</th></tr></thead><tbody><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Type_selectors">类型选择器</a></td><td align="left"><code>h1 &#123; &#125;</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/user:chrisdavidmills/CSS_Learn/CSS_Selectors/Type_Class_and_ID_Selectors#Type_selectors">类型选择器</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Universal_selectors">通配选择器</a></td><td align="left"><code>* &#123; &#125;</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/user:chrisdavidmills/CSS_Learn/CSS_Selectors/Type_Class_and_ID_Selectors#The_universal_selector">通配选择器</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Class_selectors">类选择器</a></td><td align="left"><code>.box &#123; &#125;</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/user:chrisdavidmills/CSS_Learn/CSS_Selectors/Type_Class_and_ID_Selectors#Class_selectors">类选择器</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/ID_selectors">ID选择器</a></td><td align="left"><code>#unique &#123; &#125;</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/user:chrisdavidmills/CSS_Learn/CSS_Selectors/Type_Class_and_ID_Selectors#ID_Selectors">ID选择器</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors">标签属性选择器</a></td><td align="left"><code>a[title] &#123; &#125;</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Attribute_selectors">标签属性选择器</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes">伪类选择器</a></td><td align="left"><code>p:first-child &#123; &#125;</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Pseuso-classes_and_Pseudo-elements#What_is_a_pseudo-class">伪类</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements">伪元素选择器</a></td><td align="left"><code>p::first-line &#123; &#125;</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Pseuso-classes_and_Pseudo-elements#What_is_a_pseudo-element">伪元素</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Descendant_combinator">后代选择器</a></td><td align="left"><code>article p</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Combinators#Descendant_Selector">后代运算符</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Child_combinator">子代选择器</a></td><td align="left"><code>article &gt; p</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Combinators#Child_combinator">子代选择器</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Adjacent_sibling_combinator">相邻兄弟选择器</a></td><td align="left"><code>h1 + p</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Combinators#Adjacent_sibling">相邻兄弟</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/General_sibling_combinator">通用兄弟选择器</a></td><td align="left"><code>h1 ~ p</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Combinators#General_sibling">通用兄弟</a></td></tr></tbody></table><p>a+b  -  b必须紧跟a后且同级，插入br都不行</p><p>a ~b - 选择！后面的！所有兄弟</p><p>将所有类连成一串代表匹配包含所有这些类的元素</p><p>.a.b.c{}匹配同时含有a,b,c类的标签</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>a b<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>此处li拥有a和b类<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 属性</p><table><thead><tr><th align="left">选择器</th><th align="left">示例</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>[*attr*]</code></td><td align="left"><code>a[title]</code></td><td align="left">匹配带有一个名为<em>attr</em>的属性的元素——方括号里的值。</td></tr><tr><td align="left"><code>[*attr*=*value*]</code></td><td align="left"><code>a[href=&quot;https://example.com&quot;]</code></td><td align="left">匹配带有一个名为<em>attr</em>的属性的元素，其值正为<em>value</em>——引号中的字符串。</td></tr><tr><td align="left"><code>[*attr*~=*value*]</code></td><td align="left"><code>p[class~=&quot;special&quot;]</code></td><td align="left">匹配带有一个名为<em>attr</em>的属性的元素 ，其值正为<em>value</em>，或者匹配带有一个<em>attr</em>属性的元素，其值有一个或者更多，至少有一个和<em>value</em>匹配。注意，在一列中的好几个值，是用空格隔开的。</td></tr><tr><td align="left">`[<em>attr</em></td><td align="left">=<em>value</em>]`</td><td align="left">`div[lang</td></tr></tbody></table><p>子字符串匹配选择器（类似正则）</p><table><thead><tr><th align="left">选择器</th><th align="left">示例</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>[*attr*^=*value*]</code></td><td align="left"><code>li[class^=&quot;box-&quot;]</code></td><td align="left">匹配带有一个名为<em>attr</em>的属性的元素，其值开头为<em>value</em>子字符串。</td></tr><tr><td align="left"><code>[*attr*$=*value*]</code></td><td align="left"><code>li[class$=&quot;-box&quot;]</code></td><td align="left">匹配带有一个名为<em>attr</em>的属性的元素，其值结尾为<em>value</em>子字符串</td></tr><tr><td align="left"><code>[*attr**=*value*]</code></td><td align="left"><code>li[class*=&quot;box&quot;]</code></td><td align="left">匹配带有一个名为<em>attr</em>的属性的元素，其值的字符串中的任何地方，至少出现了一次<em>value</em>子字符串。</td></tr></tbody></table><p>如果你想在大小写不敏感的情况下，匹配属性值的话，你可以在闭合括号之前，使用<code>i</code>值。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">li[class^="a" i]</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>结构伪类：</strong></p><p><strong>:first-child     last-child    nth-child（n）</strong></p><p><strong>:first-of-type   last-of-child   nth-of-child(n)</strong></p><p>n可为数字，关键字（odd/even）或公式（不是从0开始！）</p><p>如果真的写一个n则<strong>从0开始</strong>自增查找，依次添加css格式，依次可以衍生其他公式</p><p>5n，选择5的倍数    n+5,从第五个开始选    -n+5前五个</p><p>nth-child   和   nth-of-type区别</p><p>nth-child是先看序号，再看是否满足标签，会给所有的盒子部分种类先排个序</p><p>nth-of-type则是先看标签，再给这些标签排序号</p><p>还有<strong>用户行为伪类（结构伪类）</strong>，有时叫做<strong>动态伪类</strong></p><p><strong>伪元素原则器</strong></p><p>通过css创建新标签元素，不需要HTML标签，从而简化HTML结构</p><p>以类似方式表现，不过表现得是像你往标记文本中加入全新的HTML元素一样，而不是向现有的元素上应用类。伪元素开头为双冒号<code>::</code>。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325171240102.png" alt="image-20210325171240102"></p><p><em><strong>是在父元素的里面创建的</strong></em>，content=””，这样啥都不加就不会有子，但一定要有</p><p><strong>备注：</strong>一些早期的伪元素曾使用单冒号的语法，所以你可能会在代码或者示例中看到。现代的浏览器为了保持后向兼容，支持早期的带有单双冒号语法的伪元素。</p><p><em><strong>遮罩层的顺序竟然是.tudou:hover::before{}，。。。</strong></em></p><p>div:hover .class 是鼠标经过div时里面的class类子元素变化</p><h3 id="过渡"><a href="#过渡" class="headerlink" title="*过渡"></a>*过渡</h3><p>CSS3颠覆性的特征之一，可以在不使用Flash动画或JavaScript的情况下，当元素从一种样式变换为另一种样式时为元素添加效果</p><p>ie9以下版本不支持但不会影响页面布局</p><p>如果想要多个属性，使用逗号分隔</p><p>transition: 属性 时间 运动曲线 何时开始,具体如下：</p><p>transition-property -duration -timing-function -delay</p><ol><li><p>属性：宽度高度背景颜色内外边距，若全部就写all</p></li><li><p>时间：单位是 秒（必须写单位）</p></li><li><p>运动曲线：</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">linear</td><td align="left">规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。</td></tr><tr><td align="left">ease</td><td align="left">规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。(默认是ease)</td></tr><tr><td align="left">ease-in</td><td align="left">规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。</td></tr><tr><td align="left">ease-out</td><td align="left">规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。</td></tr><tr><td align="left">ease-in-out</td><td align="left">规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。</td></tr><tr><td align="left">cubic-bezier(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td><td align="left">在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。</td></tr></tbody></table></li><li><p>何时开始，必须有单位 秒，可以设置延迟触发时间，默认是0s（可以忽略）</p></li></ol><h3 id="其他新的"><a href="#其他新的" class="headerlink" title="其他新的"></a>其他新的</h3><h4 id="新盒子"><a href="#新盒子" class="headerlink" title="新盒子"></a>新盒子</h4><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325174427516.png" alt="image-20210325174427516"></p><h4 id="图片模糊（滤镜）"><a href="#图片模糊（滤镜）" class="headerlink" title="图片模糊（滤镜）"></a>图片模糊（滤镜）</h4><p>filter属性有很多提供给UI人员的值</p><p>filter:blur(15px)数值越大图像越模糊,0则不模糊，blur是个函数噢</p><p>calc函数让开发者在声明值时执行一些计算(+ - * / )</p><p>比如：calc(100%-30px)</p><p>还增加了一些动画 2D 3D等特性</p><p>ps：肝了一天案例，在另一篇博文里</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210326211235526.png" alt="image-20210326211235526"></p><p>我的网站地址：<a href="http://darrenisme.usa3v.vip/">http://darrenisme.usa3v.vip/</a></p><h1 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h1><h2 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h2><p><strong>transform 位移，旋转，缩放，不过是二维的哟</strong></p><p><strong>配合transition牛逼极了</strong></p><p><strong>translate(x,y</strong>) 在x，y轴上移动的位置</p><p>或translateX(n)           translateY(n)</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403113752031.png" alt="image-20210403113752031"></p><p>所以水平垂直居中就可以:</p><p>position: absolute  left:50%   top:50%</p><p>transform : translate(-50%, -50%)</p><p><strong>rotate</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403114931593.png" alt="image-20210403114931593"></p><p>可以用边框旋转来弄出三角哈哈哈哈</p><p><strong>旋转中心点</strong></p><p>transform-origin : x,y</p><p>可以是百分比，像素值，关键词tblrc</p><p>案例：</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403125024006.png" alt="image-20210403125024006" style="zoom:33%;" /><p>overflow:hidden  默认转90  hover时转上来</p><p><strong>scale</strong></p><p>transform:scale(x,y);</p><p>里面的参数是不跟参数的数字，表示倍数</p><h3 id="综合写法"><a href="#综合写法" class="headerlink" title="综合写法"></a>综合写法</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403130305541.png" alt="image-20210403130305541"></p><p>注意顺序，如果先旋转后位移，则位移是按照旋转瞬间的角度位移的</p><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>animation 颠覆性 </p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403130558562.png" alt="image-20210403130558562" style="zoom:50%;" /><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403130710410.png" alt="image-20210403130710410" style="zoom:50%;" /><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403130745131.png" alt="image-20210403130745131"></p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20210403130917882.png" alt="image-20210403130917882" style="zoom:50%;" /><p>duration 单位是秒 s  或毫秒ms</p><h3 id="属性一览"><a href="#属性一览" class="headerlink" title="属性一览"></a>属性一览</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403131802217.png" alt="image-20210403131802217"></p><p><strong>animation - play -state  应该是paused</strong></p><p><strong>经常与hover 配合使用 就可以鼠标放上去就停止，鼠标离开继续走</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403132727955.png" alt="image-20210403132727955"></p><p>注意时间如果有俩 必然先是持续时间 后是何时开始</p><p>steps可以做出诡异的效果👇</p><p>可以用那种做出那种连续动画的效果，准备好不同动作的图片就好了</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403150156949.png" alt="image-20210403150156949"></p><h3 id="热点图案例"><a href="#热点图案例" class="headerlink" title="热点图案例"></a>热点图案例</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403132930592.png" alt="image-20210403132930592"></p><p>大致结构（1个城市）</p><p>city相对定位到小圆点除</p><p>先放1个小圆点，再放几圈波纹</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403143518688.png" alt="image-20210403143518688" style="zoom:50%;" /><p>css波纹</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403143925973.png" alt="image-20210403143925973" style="zoom:50%;" /><p>动画效果</p><p>pink用的是 0%- 70%长宽变大，透明度不变，70 -100 长宽变大 ，透明度变为0，scale会导致阴影本身也变大</p><p>然后选择匀速，无限循环  小心权重问题</p><p>然后单独给后面几个加上delay  注意间隔相等。比如一共1.2秒 3个波纹 则第二个0.4 第三个0.8</p><p>元素可以添加多个动画，用逗号分隔</p><h2 id="3D！！！"><a href="#3D！！！" class="headerlink" title="3D！！！"></a>3D！！！</h2><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403173429153.png" alt="image-20210403173429153"  /><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403173546861.png" alt="image-20210403173546861" style="zoom:50%;" /><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403174500115.png" alt="image-20210403174500115"></p><h3 id="透视原理图"><a href="#透视原理图" class="headerlink" title="透视原理图"></a><strong>透视原理图</strong></h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403175448612.png" alt="image-20210403175448612"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403175954749.png" alt="image-20210403175954749"></p><p>这个沿着。。其实是以。。为轴</p><p>方向正负可以用左手。。大拇指指向某轴正方向，。。。</p><p>rotate3d(x,y,z,deg) 其中xyz表示旋转轴矢量</p><p>这个3d旋转也可以使用 transform-origin: 但是z轴属性必须用&lt;length&gt;,没有关键字</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403191246272.png" alt="image-20210403191246272"></p><p>盒子选择案例：</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403193245498.png" alt="image-20210403193245498" style="zoom:50%;" /><p>他这种做法比较好，比起更改甚么旋转轴来说</p><p>还有一个属性perspective-origin  可以更改视角，而不是简单的就是沿着z轴看过去</p><h3 id="旋转木马"><a href="#旋转木马" class="headerlink" title="旋转木马"></a>旋转木马</h3><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403200440564.png" alt="image-20210403200440564" style="zoom:50%;" /><p>代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">body</span> <span class="token punctuation">&#123;</span>            <span class="token property">perspective</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">section</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 185px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 500px auto<span class="token punctuation">;</span>            <span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-3d<span class="token punctuation">;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> rotate 4s infinite linear<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>1.jpg<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">section:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>            <span class="token property">animation-play-state</span><span class="token punctuation">:</span> paused<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@keyframes</span> rotate</span> <span class="token punctuation">&#123;</span>            <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">section div</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>example.jpg<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid blue<span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">section div:nth-child(1)</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">//这里是先转了个角度，然后轴也跟着变化了，Z轴表示各个图正对的，直接走就好了        section div:nth-child(2)</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>60deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">section div:nth-child(3)</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>120deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">section div:nth-child(4)</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">section div:nth-child(5)</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>240deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">section div:nth-child(6)</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>300deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403204706921.png" alt="image-20210403204706921"></p><p>浏览器私有前缀</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403204317033.png" alt="image-20210403204317033"></p><p>因为制定HTML和CSS标准的组织W3C动作是很慢的。<br>通常，有w3c组织成员提出一个新属性，比如说圆角border-radius，大家都觉得好，但w3c制定标准，要走很复杂的程序，审查等。而浏览器商市场推广时间紧，如果一个属性已经够成熟了，就会在浏览器中加入支持。<br>为避免日后w3c公布标准时有所变更，加入一个私有前缀，比如-webkit-border-radius，通过这种方式来提前支持新属性。<br>等到日后w3c公布了标准，border-radius的标准写法确立之后，再让新版的浏览器支持border-radius这种写法。</p><p>移动端见另一篇博文~~~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一阶段&quot;&gt;&lt;a href=&quot;#第一阶段&quot; class=&quot;headerlink&quot; title=&quot;第一阶段&quot;&gt;&lt;/a&gt;第一阶段&lt;/h1&gt;&lt;p&gt;本教程缺失一些不常用的知识，以后见到了再学&lt;/p&gt;
&lt;h2 id=&quot;html标签（上）&quot;&gt;&lt;a href=&quot;#html标签（</summary>
      
    
    
    
    <category term="web-front-end" scheme="https://darren-dong.com/categories/web-front-end/"/>
    
    
    <category term="html&amp;&amp;css入门" scheme="https://darren-dong.com/tags/html-css%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>plan</title>
    <link href="https://darren-dong.com/2021/03/19/plan/"/>
    <id>https://darren-dong.com/2021/03/19/plan/</id>
    <published>2021-03-19T04:06:23.000Z</published>
    <updated>2021-05-04T11:07:29.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Darren’s-Carrer"><a href="#Darren’s-Carrer" class="headerlink" title="Darren’s Carrer"></a>Darren’s Carrer</h1><p>[toc]</p><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>​    在经历了近半年的对计算机领域努力探索后，如今我已大致明白我们专业的处境和一些出路，现实就是如此，毕竟高考考砸了，够不着很多资源。。。只希望能如诸位前辈们般，凭借才能和热情，靠自学成为大佬，这篇博文用于记载我对未来发展方向的规划，反映了我在不同阶段的想法吧，请不要把以前的想法删掉。</p><h2 id="第一次"><a href="#第一次" class="headerlink" title="第一次"></a>第一次</h2><p>2021 . 3. 19日，大一下学期第三周</p><p>统计一下现在自己的技术栈。。C语言了解基本语法，数据结构起步，linux基本操作，可以熟练安装虚拟机，git基本操作和github基本操作，python学完基本语法和部分高级语法，会使用anaconda，前端有了大致轮廓，会html，css，js基本和一些jq，通过思科课程大致了解互联网，c++学到友元，拥有一大堆计算机领域的资源和导航还有工具，ctf各方向有所了解。。。好少。。。上学期没怎么课外学习，结果现在技术栈也太拉跨了。</p><p>结合了我们学校开的课程和目前了解的信息，做出第一次计划：</p><p>大一下：</p><p>认真学习数据结构，多在leetcode上刷题（剑指offer），学完思科第一期课程：ITN，Linux，Python，学几个python库，啥数据分析，机器学习的简单一点的。</p><p>先学前端，html，css，JS（重中之重），前端工具和框架，因为比较简单</p><p>大二上：</p><p>肝JAVA，看看是继续前端还是肝一肝后端技术栈，还有web安全有没有机会。</p><h2 id="第二次"><a href="#第二次" class="headerlink" title="第二次"></a>第二次</h2><p>哈哈，竟然才2021.4.4</p><p>最近一直在学前端呢，html啊，css啊，js啊，基本操作会用了，也知道咋做漂亮的静态页面了ヽ(✿ﾟ▽ﾟ)ノ</p><p>前端这个方向果然激励机制是非常棒呢。</p><p>去腾讯后我也好好思考了是否要继续前后端路线的问题。</p><p>怎么说呢。。前端可能确实挺有意思，但是可替代性太大了，就是。。。你懂的，谁都可以学</p><p>不知道。。。但是可能我需要一些学比较底层也有趣的知识吧。</p><p>放几张腾讯招人的图过来：</p><p><img src="../../../../Desktop/QQ%E4%B8%AA%E4%BA%BA%E6%96%87%E4%BB%B6%E5%A4%B9/1275972958/FileRecv/MobileFile/Screenshot_2021-03-31-15-58-03-87.jpg" alt="Screenshot_2021-03-31-15-58-03-87" style="zoom: 25%;" /><img src="../../../../Desktop/QQ%E4%B8%AA%E4%BA%BA%E6%96%87%E4%BB%B6%E5%A4%B9/1275972958/FileRecv/MobileFile/Screenshot_2021-03-31-16-02-46-12.jpg" alt="Screenshot_2021-03-31-16-02-46-12" style="zoom:25%;" /><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404145315607.png" alt="image-20210404145315607" style="zoom:25%;" /><img src="../../../../Desktop/QQ%E4%B8%AA%E4%BA%BA%E6%96%87%E4%BB%B6%E5%A4%B9/1275972958/FileRecv/MobileFile/Screenshot_2021-03-31-16-02-46-12.jpg" alt="Screenshot_2021-03-31-16-02-46-12" style="zoom:25%;" /><img src="../../../../Desktop/QQ%E4%B8%AA%E4%BA%BA%E6%96%87%E4%BB%B6%E5%A4%B9/1275972958/FileRecv/MobileFile/Screenshot_2021-03-31-16-04-48-25.jpg" alt="Screenshot_2021-03-31-16-04-48-25" style="zoom:25%;" /></p><p>我也确实挺喜欢机器学习的。。毕竟人工智能谁不喜欢呢。。</p><p>可能需要同时学习一些偏底层的东西，为未来转方向做准备了。。。</p><p>要不先学学后端？？？</p><h2 id="第三次"><a href="#第三次" class="headerlink" title="第三次"></a>第三次</h2><p>2021.4.10</p><p>转行竟然来得如此之快！</p><p>劳资终于不用挣扎在读研和就业的泥沼里了！</p><p>我才不要一下就就业，我也不想整天处在鄙视链的底层，跟一堆没上过专科的一起工作</p><p>劳资比起应用，还是也喜欢理论。</p><p>就是数据挖掘算法工程师了。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/%E7%AE%97%E6%B3%95%E5%B2%97%E8%B7%AF%E7%BA%BF.png" alt="算法岗路线"></p><h1 id="第四次"><a href="#第四次" class="headerlink" title="第四次"></a>第四次</h1><p>2021.5.4</p><p>今天是青年节啊，距离转行已经过去了将近20天，学了很多数据分析，大概懂了一些机器学习，但离入门还差得远，好在热情不减，这或许是我真正喜欢的东西吧，数据，智能，知识，宏观。</p><p>未来估计就走上这条路了，和数据为伴的路，幸运的是我并不讨厌这个新朋友，近来有些被刺激，比如我电人工智能专业的课表着实伤到我心了，这个资源倾斜挺离谱的，但是这就是命运吧。。。好在我还有能改变的机会，互联网时代，我也能凭自己弄到甚至更好的资源！资源，数据，简直成为我的爱好了。</p><p>值得一提的是我今日顿悟了，我的世界里突然出现了一大块”全新的“领域，所谓金融，理财，经济，众多曾被我嫌弃的词汇，忽地变得有趣了起来，我的辅助专业，可能就是金融或者经济了，谢谢半佛老师的视频，让我懂得了许多知识，尽管前途未卜，但是我将贯彻自己的兴趣，这条让我心动的路。</p><p>先数据，再到金融，不一定是什么算法工程师，我也不知道会成为甚么样的人，但值得庆幸的是，我终于从完美主义的怪圈，从专业带来的束缚里挣脱出来了，即使身在软件专业，我能做的也远远不止敲代码，弄算法，这个世界充满无数可能，我们学院提供了非常充足的自学空间，而我，将利用这些自由向学弟学妹们证明，除了开发，运维，算法，还有一些全新的路。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Darren’s-Carrer&quot;&gt;&lt;a href=&quot;#Darren’s-Carrer&quot; class=&quot;headerlink&quot; title=&quot;Darren’s Carrer&quot;&gt;&lt;/a&gt;Darren’s Carrer&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="log" scheme="https://darren-dong.com/categories/log/"/>
    
    
    <category term="plan" scheme="https://darren-dong.com/tags/plan/"/>
    
  </entry>
  
  <entry>
    <title>Javascript理论</title>
    <link href="https://darren-dong.com/2021/03/18/Javascript/"/>
    <id>https://darren-dong.com/2021/03/18/Javascript/</id>
    <published>2021-03-18T12:57:35.000Z</published>
    <updated>2021-04-29T05:26:15.312Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210327151203222.png" alt="image-20210327151203222" style="zoom:50%;" /><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210327151652147.png" alt="image-20210327151652147" style="zoom:50%;" /><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210327153158993.png" alt="image-20210327153158993"></p><p>第一门课主要学习JS语法，但是最好还是之后看一下JS红宝书</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210327153407994.png" alt="image-20210327153407994"></p><h2 id="1-简史"><a href="#1-简史" class="headerlink" title="1.简史"></a>1.简史</h2><p>这是我去先看了看红宝书第一章</p><p>JS被用于处理表单内容，但让网景公司成为了老大，微软眼红并仿写出了JScript，这是一个基于JS的实现，但由于两者不统一，最后1997年Ecma（欧洲计算机制造商协会）的TC39委员会制定出标准，花费数月时间出台了传说中的ECMA-262,也就是ECMAScript伪语言，<strong>此后，各浏览器以此作为实现的依据，但是他们的实现仍有偏好性</strong></p><p>虽然JS和ECMAScript基本是同义词，但是完整的JS实现应包含：</p><ol><li>核心  ECMAScript</li><li>文档对象模型  DOM</li><li>浏览器对象模型  BOM</li></ol><p>ECMAScript连输入输出都没有，他只是一个基准</p><p><strong>Web浏览器是其实现的一种宿主环境（node.js也是一种），提供ECMAScript的基准实现和与环境自身交互必须的拓展！</strong></p><p>拓展，比如DOM，使用ECMAScript核心类型和语法，提供特定于环境的额外功能，</p><p>ESMAScript描述了这门语言的：<strong>语法，类型，语句，关键字，保留字，操作符，全局对象</strong></p><p>现在都到ES12了。。。。</p><p>ECMAScript的符合性具备极大的自由度，给了实现开发者很大的权限！</p><p><strong>好多东西没写，一定要到时候好好看看红宝书，太棒了！</strong></p><h2 id="2-Html中的JS"><a href="#2-Html中的JS" class="headerlink" title="2.Html中的JS"></a>2.Html中的JS</h2><p>看不懂。。等以后</p><h2 id="3-语言基础"><a href="#3-语言基础" class="headerlink" title="3.语言基础"></a>3.语言基础</h2><p>我还是结合着看吧，红宝书全，但是视频有实战经验。</p><h3 id="嵌入HTML"><a href="#嵌入HTML" class="headerlink" title="嵌入HTML"></a>嵌入HTML</h3><p>主要方法是&lt;script&gt;方法，后来被正式加入到HTML规范，他有8个属性，没几个看得懂</p><p>但是defer这个属性使得script不用放在body前（兼容性不好，而且有时候可能出现顺序错乱，最好是只有一个这样的脚本，<strong>更好还是放在body的最后。。。</strong>），src允许使用外部js文件，integrity防止你在引用其他网站js文件时接受到恶意内容，async有很多限制，不推荐使用。。。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210327163947742.png" alt="image-20210327163947742"></p><p>从上到下解释，浏览器解析行内脚本的方式决定了即使字符串出现&lt;/script&gt;也会结束！</p><p>浏览器按照script出现的顺序解释他们，除了defer和async属性。</p><p>引用外部时，script标签之间绝对不能写代码</p><p>还有一些比如“文档模式”啥的鬼东西，看不懂。。。</p><p>&lt;noscript&gt;元素用于优雅降级，先用于那些金庸JS的浏览器，在浏览器不支持脚本或者支持被关闭时，将会渲染在noscript标签中的内容，否则则会被忽视掉，</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>单行注释//   对应快捷键 ctrl + /</p><p>多行注释和c语言一样，是/* <em>/ ,对应快捷键*<em>ctrl+shift+/</em></em>  改了以后</p><p>左下角设置可以直接更改快捷方式</p><p><strong>Js标识符可使用 字母  数字   下划线   美元符号   但是开头不能是数字，惯例是驼峰大小写！</strong></p><p>严格模式</p><p>所有浏览器都支持严格模式，会在遇到不规范写法时抛出错误</p><p>在整个脚本或者某个具体函数开头加上 <code>“use strict”;</code> 来开启</p><p>分号不是必须，但是有助于防止很多问题，也有利于压缩代码，提升性能等</p><p>和C一样，也用{}标识一个代码块</p><p>if类语句和C一样在多条时，必须要代码块，但好习惯是一句也要加代码块</p><p>很多关键字都在各个语言见过，没见过的有</p><p>catch   delete   extends   finally   instanceof   super   throw </p><p>还有一些未来的保留字</p><p>enum  implements  interface  let  package  protected  await</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>ECMAScript变量松散，可以存储任何类型数据，ES6之后才可以用let  const ，var啥时都能用</p><p>基本使用无二，不知道为啥说不推荐改变变量存储的类型，但是完全有效</p><p>在函数内部var会创建局部变量，但是省略var可以创建一个全局变量！</p><p>但是这种做法不被推荐，甚至在严格模式下会抛出ReferenceError</p><p>*<strong>var声明提升！</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    语句<span class="token number">1</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>实际上被ECMAScript理解为<span class="token keyword">var</span> age<span class="token punctuation">;</span>语句<span class="token number">1</span><span class="token punctuation">;</span>age <span class="token operator">=</span> <span class="token number">26</span>这使得变量可以后声明，也使得变量可以重复声明<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>var的作用域是函数作用域，if块中声明的var可在外面调用</p><p>let声明的范围是块作用域，而且<strong>不允许冗余声明</strong>（<strong>SyntaxError</strong>）</p><p>但是由于JS引擎会记录变量声明的标识符和所在的块作用域，可以嵌套使用相同的标签</p><p><strong>冗余报错会发生在同时使用var和let时，两个关键字声明的变量是相同的，只是指出变量在相关作用域如何存在。</strong></p><h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><p>只要块级作用域内存在<code>let</code>命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  tmp <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span>  <span class="token keyword">let</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，存在全局变量<code>tmp</code>，但是块级作用域内<code>let</code>又声明了一个局部变量<code>tmp</code>，导致后者绑定这个块级作用域，所以在<code>let</code>声明变量前，对<code>tmp</code>赋值会报错。</p><p>ES6 明确规定，如果区块中存在<code>let</code>和<code>const</code>命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p><p>总之，在代码块内，使用<code>let</code>命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。</p><p>这甚至会导致typeof出错，</p><p><strong>与var关键字不同，let在全局作用域中声明的变量不会成为window对象的属性？不懂。。</strong></p><p>const声明时必须同时初始化，而且不能修改，限制只适用于它指向的变量的引用，跟python一样</p><p>对for-of  for-in循环中的不会修改的变量特别有意义</p><h4 id="风格和最佳实践！"><a href="#风格和最佳实践！" class="headerlink" title="风格和最佳实践！"></a>风格和最佳实践！</h4><ol><li>不使用var</li><li>const优先，let次之</li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>对象的转换：<em><strong>如果操作数是对象，则这个对象将先使用valueOf()转换成原始值，如果结果还不是原始值，则再使用toString()方法转换；</strong></em></p><p>6种原始(简单)数据类型：Undefined Null Boolean Number String Symbol(ES6)</p><p>1种复杂数据类型：Object，这是一种无序名值对的集合</p><p>ES中不能定义自己的数据类型，但这些类型很灵活，一种能当多种数据类型用</p><p>typeof <strong>操作符，它不是函数</strong>，返回数据类型，也可以判断函数（返回’function’）</p><p>虽然函数也被ES认为是对象，但它们有特殊的属性，因此被typeof独立区分</p><h4 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h4><p>只有一个值undefined, var/let声明对象但未初始化就会赋予undefined</p><p>他理论上永远不用与显式赋值，只是为了<em><strong>区别空对象指针null和未初始化指针</strong></em></p><p><strong>但由于未声明的变量typeof也会返回undefined，所以最好还是在声明时就初始化</strong></p><p>这是一个假值，但是也有很多其他的假值，所以不要依靠真假判断是否是undefined</p><h4 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h4><p>只有一个值null，<strong>逻辑上讲，null值表示一个空对象指针，</strong>所以typeof null返回object</p><p>null 有属于自己的类型 Null，而不属于Object类型，typeof 之所以会判定为 Object 类型，是因为JavaScript 数据类型在底层都是以二进制的形式表示的，二进制的前三位为 0 会被 typeof 判断为对象类型，而 null 的二进制位恰好都是 0 ，因此，null 被误判断为 Object 类型。</p><p>声明时如果暂时不用赋值，最好赋一个null</p><p>undefined是由null值派生的，所以表面相等(null == undifined)</p><p>这是一个假值，但是也有很多其他的假值，所以不要依靠真假判断是否是null</p><h4 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h4><p>俩值，true  false，但是此处的布尔值不同于数值，所以不再是等于 1 和 0（哈哈，特意提醒）</p><p>所有类型的值都有相应布尔值的等价形式，通过Boolean（）转型函数转换</p><table><thead><tr><th>数据类型</th><th>true值</th><th>false值</th></tr></thead><tbody><tr><td>Boolean</td><td>true</td><td>false</td></tr><tr><td>String</td><td>非空字符串</td><td>“”</td></tr><tr><td>Number</td><td>非零值（<strong>包括无穷</strong>）</td><td>0  NaN</td></tr><tr><td>Object</td><td>任意对象</td><td>null</td></tr><tr><td>Undefined</td><td></td><td>undefined</td></tr></tbody></table><p>非常重要，因为if等流控制语句会自动执行该转换</p><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><p>整数</p><p>八进制和十六进制规则和C一样，但是八进制如果写错了直接忽略0当成十进制，数学操作中都当成十进制</p><p><strong>严格模式不能使用八进制前缀0，要用0o</strong></p><p>由于JS保存数值的方式，会存在正零，负零，是等价的</p><p>浮点数</p><p>存储空间是整数两倍，所以JS会尽可能把它们变成整数，如果小数点后为0，<strong>直接给你改成整数</strong>(如21.0)</p><p>ES会将小数点后至少6个0的浮点数转换为科学计数法</p><p>浮点数精确度高达17位小数，但是也存在如C般很小的偏差问题，因此不要用 == 对待浮点数</p><p>这是IEEE 754数值标准导致的。。</p><p>最小值Number.MIN_VALUE  5e-324  再小 -Infinity（Number.NEGATIVE_INFINITY）</p><p>最大值Number.Max_VALUE 1.79………………e+308, 再大 Infinity（Number.POSITIVE_INFINITY）</p><p>0作分子返回NaN（not a number） 作分母返回正负Infinity</p><p>NaN有一些诡异的属性：</p><ol><li>任何涉及NaN的操作始终返回NaN(如NaN/10)</li><li>NaN不等于包括自己在内的任何值！</li></ol><p>数值转换：</p><p>Number()   parseInt()   parseFloat()</p><p>Number的转换规则和一元加操作符一样，值得注意的是：</p><p>null返回0，undefined返回null。空字符串返回0</p><p>字符串包含有效的16进制，会转化成对应的<strong>十进制值。</strong></p><p>如果字符串包含正常情况外的词，返回NaN。</p><p>对于对象：先调用valueof（）方法，再按照正常规则转换，如果结果是NaN，则先调用toString，再按字符串规则转换。</p><p>所以必须用于十分标准的字符串才能得到合适输出，所以一般优先采用下面俩方法</p><p>parseInt规则：</p><p>跳过空白，开始检索，第一个不是数值，加减号，返回NaN,否则开始检索至结束或非法。</p><p>未加第二个参数则检索0x开头，0开头，最好加上，可以省略前缀</p><p>parseInt(“10100101”, 2),表示按<strong>二进制解析！</strong></p><p>parseFloat类似，但忽略开头的0，只用于十进制，若结果为整数，会返回整数</p><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>可用单，双，没有语法意义。。。pink推荐使用单引号</p><p>转义字符（字符字面量）（算一个字符）基本无二，\xnn ASCII   \unnnn  nnnn表示Unicode字符</p><p>字符串是不可变的！任何更改都导致原字符串销毁</p><p>toString方法可用于数值，布尔值，对象，字符串值（返回副本），</p><p><strong>null/undefined没有,调用则返回本身的字符串null-&gt;”null”</strong></p><p>在对待数值时可以指定显示的进制 </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token string">"1010"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>模板字面量</strong></p><p>通过<strong>反引号定义（但是这里书写用单引号。。不然变成代码块我靠）</strong>，保留内部的空白结构</p><p>技术上讲，模板字面量不是字符串而是一种特殊的JS句法表达式，只不过求之后得到的是字符串</p><p><strong>字符串插值</strong></p><p>模板字面量求值时立刻转换成字符串实例，任何插入的变量也会从它们最接近的作用域中提取</p><p>‘${}’来进行调用，可以变量，会将表达式用toString转化成字符串，可以调用函数和方法，可以插入自己以前的值</p><p>value = ‘${value}abc’  附加abc</p><p><strong>标签函数</strong></p><p>用来自定义插值行为，直接把定义的函数放在模板字面量前即可</p><p>function xxx(){}</p><p>let a = xxx’….’</p><p>注意传进去的第一个参量是[“”,”+”,]这种，其中所有的$被换成空字符串，符号保留，经常采用“剩余操作符”收集不确定的参数</p><p>原始字符串则调用了默认的String.raw标签函数,也可通过string(某字符串变量).raw来取得原始内容</p><h4 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h4><p>ES6新增，符号是原始值，符号实例唯一，不可变</p><p>用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险</p><p>符号需要使用Symbol（）函数初始化，</p><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><p>JS对象实质是一组数据和功能的集合，通过new+对象类型的名称来创建</p><p>可以通过创建Object实例来创建对象，再添加属性和方法</p><p>每个对象内置了一大堆方法，<strong>p56</strong></p><p>valueof方法将对象转换为原始值。你很少需要自己调用<code>valueOf</code>方法；当遇到要预期的原始值的对象时，JavaScript会自动调用它。如果对象没有原始值，则<code>valueOf</code>将返回对象本身。JavaScript的许多内置对象都重写了该函数，以实现更适合自身的功能需要。因此，不同类型对象的valueOf()方法的返回值和返回值类型均可能不同。此外你也可以自己写valueof来覆盖</p><table><thead><tr><th align="left"><strong>对象</strong></th><th align="left"><strong>返回值</strong></th></tr></thead><tbody><tr><td align="left">Array</td><td align="left">返回数组对象本身。</td></tr><tr><td align="left">Boolean</td><td align="left">布尔值。</td></tr><tr><td align="left">Date</td><td align="left">存储的时间是从 1970 年 1 月 1 日午夜开始计的毫秒数 UTC。</td></tr><tr><td align="left">Function</td><td align="left">函数本身。</td></tr><tr><td align="left">Number</td><td align="left">数字值。</td></tr><tr><td align="left">Object</td><td align="left">对象本身。这是默认情况。</td></tr><tr><td align="left">String</td><td align="left">字符串值。</td></tr><tr><td align="left"></td><td align="left">Math 和 Error 对象没有 valueOf 方法。</td></tr></tbody></table><p>你可以在自己的代码中使用<code>valueOf</code>将内置对象转换为原始值。 创建自定义对象时，可以覆盖<code>Object.prototype.valueOf()</code>来调用自定义方法，而不是默认<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object"><code>Object</code></a>方法。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">MyNumberType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">valueOf</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> customPrimitiveValue<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p>ES中的操作符可用于各种类型的值，在处理对象时会调用valueOf和toString来处理（C++重构吗）</p><p>因为数据类型有限，不会出现重构等问题，因此符号的所有规则都可以列出来！</p><h4 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h4><p>++  – 和C差不多，可用于任意值，应用后均变为数值类型</p><p>字符串非法则NaN,false和true变成0和1，对象先调用valueof（）方法，再按照正常规则转换，如果结果是NaN，则先调用toString，再按字符串规则转换。</p><p>+ and  - 会对非数值进行Number（）转换，</p><h4 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h4><p>虽然实际64位，但位操作时仅应用32位，第32位<strong>0正1负</strong>，无符号数就大一倍。</p><p>正值前31位正常，负值则是补码。（这里称二补数）</p><p><strong>但特殊值NaN和Infinity在位操作中被当成0</strong></p><p>C有的这里都有！右移使用符号位来填补空位，无符号右移<code>&gt;&gt;&gt;</code>则用0来填补！</p><h4 id="布尔操作符"><a href="#布尔操作符" class="headerlink" title="布尔操作符"></a>布尔操作符</h4><p>非操作符 ！ 无论对什么数据类型，先转换成布尔值，然后取反</p><p>！！ 相当于调用Boolean（）</p><p>&amp;&amp;逻辑与可以用于任何类型的操作数，不限于布尔，同样具有短路特性，如果操作数不全为布尔，则逻辑与并不一定返回布尔值：</p><ul><li>如果第一个操作数是对象，返回第二个操作数</li><li>如果两个操作数都是对象，返回第二个操作数</li><li>如果第二个操作数为对象，只有第一个操作数为true时才会返回该对象</li><li>只要出现null/NaN,undefined,就返回相应的</li></ul><p>||逻辑或，也会短路，如果操作数不全为布尔，则同样：</p><ul><li>如果第一个操作数是对象，返回第一个操作数</li><li>如果第一个操作数求值为false，则返回第二个操作数</li><li>如果第两个操作数是对象，返回第一个操作数</li><li>如果俩都为null/NaN,undefined,就返回相应的</li></ul><h4 id="乘性运算符"><a href="#乘性运算符" class="headerlink" title="乘性运算符"></a>乘性运算符</h4><p>*  也会在处理非数值自动调用Number（）</p><p>特性：</p><ul><li>任意操作数NaN返回NaN</li><li>Infinity * 0  -&gt;NaN</li><li>Infinity相乘，或乘有限数，返回+-Infinity</li></ul><p>/   特性:</p><ul><li>有NaN,返回NaN</li><li>无限除无限返回NaN</li><li>无限除有限（包括0）返回对应无穷</li><li>0 / 0 返回NaN</li><li>有限值 / 0 返回正负无穷</li></ul><p>% ：</p><ul><li>无限除任何 NaN</li><li>有限除 0 NaN</li><li>有限除无限  有限</li><li>0除 非0  0</li></ul><h4 id="指数操作符"><a href="#指数操作符" class="headerlink" title="指数操作符"></a>指数操作符</h4><p>**  和  **==</p><h4 id="加性操作符"><a href="#加性操作符" class="headerlink" title="加性操作符"></a>加性操作符</h4><p>+   注意：</p><ul><li>有NaN 返回NaN</li><li>无穷+负无穷  返回NaN</li><li>0相加，都是-0返回-0，否则返回+0</li><li>俩字符串则拼接</li><li>不然就转换成字符串，如果有undefined和null，变为”undefined”然后再拼接</li></ul><p>-  注意：</p><ul><li>同类无穷相减（其实就是难以判断正负的时候）为NaN</li><li>无穷相减，可判断正负则返回对应无穷</li><li>0相减，同号得正0，异号得-0</li><li>会转化成数值而不是字符串，对象也是和以前一样的处理</li></ul><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>还是四个，只返回布尔值</p><ul><li>出现数值，全转为数值比较</li><li>都是字符串则逐个比较（大写字母比小写字母顺序小）</li><li>对象先调用valueof（）方法，再按照正常规则转换，如果没有valueof操作符，则调用toString，再按字符串规则转换。</li><li>布尔被转化为0和1</li><li><strong>只要出现NaN，结果就为false</strong></li><li>null和undefined好像也是</li></ul><p>1、大于运算符</p><p>　　　　大于运算符的操作数可能是任意类型，然而，只有数字和字符串才能真正执行比较操作，因此那些不是数字和字符串的操作数都将进行类型转换。规则如下：</p><p>　　　　如果操作数是对象，则这个对象将先使用valueOf()转换成原始值，如果结果还不是原始值，则再使用toString()方法转换；</p><p>　　　　 在对象转换为原始值之后，如果两个操作数都是字符串，则按照字母表的顺序对两个字符串进行比较，这里提到的字母表顺序是指组成这个字符串的16位unicode字符的索引顺序；</p><p>　　　　 在对象转换为原始值之后，如果至少有一个操作数不是字符串，则两个操作数都转换成数字进行比较。</p><p>　　　　需要注意的是Javascript字符串是一个由16位整数值组成的序列，字符串的比较也只是两个字符串中的字符的数值比较，由unicode定义的字符编码和任何特定语言或者本地语言字符集中的传统字符编码顺序不尽相同。字符串比较是区分大小写的，所以一般首先会将字符串通过String.toLowerCase()或者是String.toUpperCase()做大小写的转换。</p><p>　　　　2、大于等于运算符</p><p>　　　　大于等于运算符并不依赖于大于或等于运算符的比较规则，而是遵循小于运算符的比较规则，结果取反</p><p>　　　　3、小于等于运算符</p><p>　　　　小于等于运算符(&lt;=)并不依赖于小于或等于运算符的比较规则，而是遵循大于运算符的比较规则，结果取反。</p><p>　　　　4、小于运算符</p><p>　　　　小于运算符(&lt;)用于比较两个操作数，如果第一个操作数小于第二个操作数，则小于运算符的计算结果为true，否则为false。</p><hr><p>所以要考虑到底是不满足条件，还是出现了NaN</p><p>大写字母的排序在小写字母前面，所以偏小</p><p>按照规则，null和undifined</p><h4 id="相等操作符"><a href="#相等操作符" class="headerlink" title="相等操作符"></a>相等操作符</h4><p>两组，等于和不等于 == ，  全等和不全等 ===</p><p>第一组进行强转再判断：</p><ul><li>布尔-&gt;数值</li><li>字符串比数值，字符串-&gt;数值</li><li>对象，用valueof对象再比较</li><li>null ==  undefined</li><li>null   undefined不能转化为其他类型的值再比较，因此不等于false，因为false-&gt;0</li><li>有NaN就返回false，不相等返回true</li></ul><p>全等不转换！null !== undefined  因为数据类型不同</p><p>条件运算符 () ?  :</p><p>赋值运算符 &gt;&gt;&gt;=</p><p>逗号运算符</p><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>也称流控制语句</p><p>if中自动调用Boolean，也有do-while，while，swtich(break规则一样的)</p><p><strong>for - in</strong>是一种严格的迭代语句，用于枚举对象中的<strong>非符号键属性</strong>（如window对象的属性）</p><p>for(const property in expression) {statement;}</p><p>这里的const不是必须的，但是为了确保局部变量不被修改，推荐使用const</p><p>ES中的对象属性是无序的，for-in不能保证返回的顺序，甚至因浏览器而异</p><p>如果迭代的变量是null / undefiend 则不执行循环体</p><p><strong>for-of</strong> 是一种严格的迭代语句，用于遍历<strong>可迭代对象的元素</strong>(如数组项)</p><p>for(const property of expression) {statement;}若尝试迭代的变量不支持迭代则抛出错误</p><p><strong>标签语句</strong></p><p>在语句前可以通过标签语句加标签，常用于嵌套循环中</p><p>break和continue + 标签可以生效后跳到label位置</p><p><strong>with语句</strong>将代码作用域设置为特定的变量</p><p>严格模式下不允许使用with</p><p>with(location){………}</p><p>在with语句内部，每个变量首先被认为是局部变量，如果不是，就搜索location对象，看他是否有一个同名属性，使得话，该变量就被求值为location对象的同名属性</p><p>swtich特性：</p><p>可以用于所有数据类型，case后面不加括号，可以加表达式！</p><p>甚至可以swtich(true)然后case里面放一堆判别式，<em><strong>不过case判断是全等！</strong></em></p><p>与多if相比，switch效率高，适合情况较多且比较确定，多if适合范围判断，情况较少</p><p>函数</p><h2 id="4-变量，作用域-内存"><a href="#4-变量，作用域-内存" class="headerlink" title="4.变量，作用域/内存"></a>4.变量，作用域/内存</h2><p>变量可存储两种类型的数据：原始值，引用值（由多个值构成的对象）</p><p>分别采用按值访问和按引用访问,<strong>很多语言中字符串是使用对象访问的,因此被认为是引用类型,但是ES不是</strong></p><p>引用值可以随意添加,修改和删除属性和方法</p><p>原始值不能有属性,但是添加时不会报错,但试图引用会返回undefined.</p><p>复制的时候,原始值是复制,引用值是引用原来内存里的变量,而不是创建副本</p><p><strong>但是所有函数的参数都是按值传递的</strong>,只不过引用值传进去的时候传的是一个指向（类似指针），所以在里面修改外面也能体现，但仍然是按值传递。</p><p>typeof能区分是否是对象,但是它却不能区分对象的具体类型，对引用值意义不大</p><p>instanceof对给定引用类型的对象十分有用,比如 person instanceof Object  变量person是Object吗?</p><p>所以该操作符检测任何引用值和Object构造函数都会返回true,但是检测原始值则始终返回false</p><h4 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h4><p>变量或者函数的上下文决定了可以访问的数据和行为.全局，函数，块级</p><p><strong>每个上下文都有一个关联的变量对象</strong>，虽然代码无法访问，但是后台处理数据可能用到</p><p>全局上下文是最外层的，根据实现的宿主，可能对象不一样，在<strong>浏览器中全局上下文是window对象</strong></p><p><strong>所有通过var方法定义的全局变量和函数都会成为对象的属性和方法</strong></p><p>上下文在其所有代码执行完成后会销毁，包括所有定义在它上面的变量和函数，全局上下文则在应用程序退出前才会销毁，比如关闭网页或者退出浏览器，函数参数被视为当前上下文的变量</p><p>上下文的代码在执行的时候，会创建变量对象的一个作用域链，从当前上下文往外直到全局上下文</p><p>自己理解下吧。。。</p><p><a href="https://knightyun.github.io/2019/09/02/js-hoisting#:~:text=%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%20%E6%98%AF%20JavaScript,%E7%9A%84%E4%B8%80%E7%A7%8D%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6%EF%BC%8C%E5%A4%A7%E8%87%B4%E5%B0%B1%E6%98%AF%E5%AD%97%E9%9D%A2%E6%84%8F%E6%80%9D%EF%BC%8C%E5%B0%86%E5%A3%B0%E6%98%8E%E7%9A%84%E5%8F%98%E9%87%8F%E6%8F%90%E5%89%8D%EF%BC%8C%E4%BD%86%E5%B9%B6%E4%B8%8D%E6%98%AF%E6%8C%87%E5%9C%A8%E7%BC%96%E8%AF%91%E6%97%B6%E6%94%B9%E5%8F%98%E8%AF%AD%E5%8F%A5%E7%9A%84%E9%A1%BA%E5%BA%8F%EF%BC%8C%E8%80%8C%E6%98%AF%E5%B0%86%E5%8F%98%E9%87%8F%20%E6%8F%90%E5%89%8D%20%E6%94%BE%E5%85%A5%E5%86%85%E5%AD%98%E4%B8%AD%EF%BC%8C%E4%BE%9B%E5%90%8E%E7%BB%AD%E6%93%8D%E4%BD%9C%EF%BC%8C%E4%B8%8B%E9%9D%A2%E9%80%9A%E8%BF%87%E5%AE%9E%E4%BE%8B%E8%BF%9B%E8%A1%8C%E5%88%86%E6%9E%90%EF%BC%9B">变量提升</a></p><p>个人理解，声明被提升到最前面，而赋值仍留在原地</p><p><strong>作用域增强？</strong></p><p>通常有两种情况：</p><ul><li>with(location)的location对象会被添加到作用域链的前端。</li><li>try/catch 回创建一个新的变量对象，该对象包含即将抛出的错误的声明。</li></ul><p><strong>执行上下文的生命周期</strong></p><p>执行上下文的生命周期包括三个阶段：<strong>创建阶段 → 执行阶段 → 回收阶段</strong>，本文重点介绍创建阶段。</p><ol><li>创建阶段</li></ol><p>当函数被调用，但未执行任何其内部代码之前，会做以下三件事：</p><ul><li>创建变量对象：首先初始化函数的参数 arguments，提升函数声明和变量声明。下文会详细说明。</li><li>创建作用域链（Scope Chain）：在执行期上下文的创建阶段，作用域链是在变量对象之后创建的。作用域链本身包含变量对象。作用域链用于解析变量。当被要求解析变量时，JavaScript 始终从代码嵌套的最内层开始，如果最内层没有找到变量，就会跳转到上一层父作用域中查找，直到找到该变量。</li><li>确定 this 指向：包括多种情况，下文会详细说明</li></ul><p>在一段 JS 脚本执行之前，要先解析代码（所以说 JS 是解释执行的脚本语言），解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来。变量先暂时赋值为 undefined，函数则先声明好可使用。这一步做完了，然后再开始正式执行程序。</p><p>另外，一个函数在执行之前，也会创建一个函数执行上下文环境，跟全局上下文差不多，不过 函数执行上下文中会多出 this arguments 和函数的参数。</p><ol start="2"><li>执行阶段</li></ol><p>执行变量赋值、代码执行</p><ol start="3"><li>回收阶段</li></ol><p>执行上下文出栈等待虚拟机回收执行上下文</p><h4 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h4><p>和之前一样，赋值为const的对象变量不能被重新赋值为引用值，但对象的键却不受限制</p><p>要想对象不能修改，可以 const variable = Object.freeze({})</p><p>这样会“静默失败”，即不提示出错，但是调用则返回undefined</p><p>应该尽可能使用const，除非确实需要一个将来会重新赋值的变量，以从根本上保证提前发现重新赋值导致的bug，由const声明的实例可被JS运行编译器替换成实际的值，而不会通过查询表进行变量查找，谷歌V8就是这种优化</p><p><strong>标识符查找</strong></p><p>使用块级作用域不会改变搜索流程，但会添加额外的层次</p><h4 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h4><p>垃圾回收有可能明显拖慢渲染的速度和帧速度</p><p>JS使用垃圾回收，即执行环境负责在代码执行时管理内存</p><p>周期性执行垃圾回收程序以处理不再使用的变量并释放其内存（<strong>近似且不完美</strong>）</p><p>历史上两种主要的标记策略：</p><ol><li><p>标记清理（常用）</p><p>运行时首先标记内存中存储的所有变量，然后将所有上下文中的变量以及被上下文的变量引用的变量的标记清理掉，在此之后再被加上标记或存在标记就会被清理，标记的实现并不重要，关键是打标记的策略</p></li><li><p>引用标记</p><p>记录每个值被引用的次数，当次数为0时清除，但可能导致循环引用，神之间接导致DOM,BOM由JS实现</p></li></ol><p>这对性能影响很大，如今IE7以后更新了回收的策略，极大提升了浏览器中JS性能</p><p>某些浏览器可以（不推荐）主动触发垃圾回收</p><h4 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h4><p>由于系统给浏览器分配内存远少于桌面应用（移动浏览器更少）所以有必要限制内存</p><p>这会影响变量分配，也影响调用栈以及能够同时在一个线程中执行的语句数量</p><p>最佳策略是只保存必要的数据再运行期间，如果数据不在必要，把它设置为null，解除引用，在垃圾回收时清理</p><p>局部变量在离开上下文时会自动解除引用，<strong>全局变量和对象要手动解除，设为null</strong></p><ol><li><p>尽量使用let和const</p></li><li><p>利用隐藏类</p><p>V8在将代码编译为实际的机器码时会利用“隐藏类”，共享隐藏类效果会更好</p><p><strong>最好的方法是在构造函数中一次性声明所有属性，把不再需要的属性设置为null</strong></p><p><strong>避免先创建再单独给实例创建或删除属性</strong></p></li><li><p>内存泄漏</p><p>可能有函数内部全局变量，定时器调用，闭包。。</p></li><li><p>静态分配和对象池（优化的极端形式，不太常见）</p><p>压榨浏览器，一个关键问题是如何减少浏览器回收垃圾的次数，可以间接触发回收条件。浏览器决定何时运行垃圾回收程序的一个标准就是对象更替的速度，如果有很多对象一下被初始化，马上又超出作用域，那么就会被浏览器用更激进的方式回收。</p><p><strong>如果函数会初始化变量，而马上又失去引用，则会被“盯上”，一个方案是函数调用已存在的对象，给他赋值</strong></p><p>那在哪里新建第一个已存在的对象才不会被盯上呢？一个策略是对象池：</p><p>在初始化的某一刻创建一个对象池，用来管理一组可回收的对象，其他代码可以向这里请求对象，更改或使用，然后返还它。这样垃圾回收检测就不会发现有对象更替，也就不会那么频繁地运行。</p></li></ol><h2 id="5-基本引用类型"><a href="#5-基本引用类型" class="headerlink" title="5.基本引用类型"></a>5.基本引用类型</h2><p>JS没有类，虽然是面向对象，但缺少某些基本结构比如类和接口，<strong>引用类型是把数据和功能组织到一起的结构</strong>，也被称<strong>对象定义</strong>，它们描述了自己的对象应有的属性和方法。</p><p>引用值（或对象）是某个特定引用类型的实例，新对象通过new操作符后+一个构造函数来创建。</p><p><em>构造函数是用来创建新对象的函数，负责创建一个只有默认属性和方法的简单对象</em></p><p>函数也是一种引用，但是内容好多，放在第十章</p><h1 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="2-3文档模式"><a href="#2-3文档模式" class="headerlink" title="2.3文档模式"></a>2.3文档模式</h3><h3 id="3-32-条件-amp-for声明"><a href="#3-32-条件-amp-for声明" class="headerlink" title="3.32 条件&amp;for声明"></a>3.32 条件&amp;for声明</h3><h3 id="Symbol类型"><a href="#Symbol类型" class="headerlink" title="Symbol类型"></a>Symbol类型</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;img src=&quot;https://gitee.com/darren-greenhand//picture/raw/master/image-20210327151203222.png&quot; alt=&quot;image-20210327151203222&quot; sty</summary>
      
    
    
    
    <category term="web-front-end" scheme="https://darren-dong.com/categories/web-front-end/"/>
    
    
    <category term="javascript" scheme="https://darren-dong.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>白帽子讲web安全</title>
    <link href="https://darren-dong.com/2021/03/16/%E7%99%BD%E5%B8%BD%E5%AD%90/"/>
    <id>https://darren-dong.com/2021/03/16/%E7%99%BD%E5%B8%BD%E5%AD%90/</id>
    <published>2021-03-16T03:22:57.000Z</published>
    <updated>2021-04-08T12:04:27.138Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="思想和前提"><a href="#思想和前提" class="headerlink" title="思想和前提"></a>思想和前提</h1><h2 id="简史"><a href="#简史" class="headerlink" title="简史"></a>简史</h2><p>​    在黑客的世界里，有的黑客，精通计算机技术，能自己挖掘漏洞，并编写exploit；而有的黑客，则只对攻击本身感兴趣，对计算机原理和各种编程技术的了解比较粗浅，因此只懂得编译别人的代码，自己并没有动手能力，这种黑客被称为“Script Kids”，即“脚本小子”。在现实世界里，真正造成破坏的，往往并非那些挖掘并研究漏洞的“黑客”们，而是这些脚本小子。而在今天已经形成产业的计算机犯罪、网络犯罪中，造成主要破坏的，也是这些“脚本小子”。</p><p>​    中国黑客的发展分为几个阶段，到今天已经形成了一条黑色产业链。</p><p>笔者把中国黑客的发展分为了：<strong>启蒙时代、黄金时代、黑暗时代。</strong></p><p>​    首先是启蒙时代，这个时期大概处在20世纪90年代，此时中国的互联网也刚刚处于起步阶段，一些热爱新兴技术的青年受到国外黑客技术的影响，开始研究安全漏洞。启蒙时代的黑客们大多是由于个人爱好而走上这条道路，好奇心与求知欲是驱使他们前进的动力，没有任何利益的瓜葛。这个时期的中国黑客们通过互联网，看到了世界，因此与西方发达国家同期诞生的黑客精神是一脉相传的，他们崇尚分享、自由、免费的互联网精神，并热衷于分享自己的最新研究成果。</p><p>​    接下来是黄金时代，这个时期以中美黑客大战为标志。在这个历史背景下，黑客这个特殊的群体一下子几乎吸引了社会的所有眼球，而此时黑客圈子所宣扬的黑客文化以及黑客技术的独特魅力也吸引了无数的青少年走上这条道路。自此事件后，各种黑客组织如雨后春笋般冒出。此阶段的中国黑客，其普遍的特点是年轻，有活力，充满激情，但在技术上也许还不够成熟。此时期黑客圈子里贩卖漏洞、恶意软件的现象开始升温，同时因为黑客群体的良莠不齐，也开始出现以赢利为目的的攻击行为，黑色产业链逐渐成型。</p><p>​    最后是黑暗时代，这个阶段从几年前开始一直延续到今天，也许还将继续下去。在这个时期黑客组织也遵循着社会发展规律，优胜劣汰，大多数的黑客组织没有坚持下来。在上一个时期非常流行的黑客技术论坛越来越缺乏人气，最终走向没落。所有门户型的漏洞披露站点，也不再公布任何漏洞相关的技术细节。</p><h2 id="web安全发展"><a href="#web安全发展" class="headerlink" title="web安全发展"></a>web安全发展</h2><p>Web攻击技术的发展也可以分为几个阶段。在Web 1.0时代，人们更多的是关注服务器端动态脚本的安全问题，比如将一个可执行脚本（俗称webshell）上传到服务器上，从而获得权限。动态脚本语言的普及，以及Web技术发展初期对安全问题认知的不足导致很多“血案”的发生，同时也遗留下很多历史问题，比如PHP语言至今仍然只能靠<br>较好的代码规范来保证没有文件包含漏洞，而无法从语言本身杜绝此类安全问题的发生。</p><p>SQL注入的出现是Web安全史上的一个里程碑，它最早出现大概是在1999年，并很快就成为Web安全的头号大敌。就如同缓冲区溢出出现时一样，程序员们不得不日以继夜地去修改程序中存在的漏洞。黑客们发现通过SQL注入攻击，可以获取很多重要的、敏感的数据，甚至能够通过数据库获取系统访问权限，这种效果并不比直接攻击系<br>统软件差，Web攻击一下子就流行起来。SQL注入漏洞至今仍然是Web安全领域中的一个重要组成部分。</p><p>XSS（跨站脚本攻击）的出现则是Web安全史上的另一个里程碑。实际上，XSS的出现时间和SQL注入差不多，但是真正引起人们重视则是在大概2003年以后。在经历了MySpace的XSS蠕虫事件后，安全界对XSS的重视程度提高了很多，OWASP 2007TOP 10威胁甚至把XSS排在榜首。伴随着Web 2.0的兴起，XSS、CSRF等攻击已经变得更为强大。Web攻击的思路也从服务器端转向了客户端，转向了浏览器和用户。黑客们天马行空的思路，覆盖了Web的每一个环节，变得更加的多样化，这些安全问题，在本书后续的章节中会深入地探讨。</p><h2 id="军备竞赛"><a href="#军备竞赛" class="headerlink" title="军备竞赛"></a>军备竞赛</h2><p>对于黑帽子来说，只要能够找到系统的一个弱点，就可以达到入侵系统的目的；而对于白帽子来说，必须找到系统的所有弱点，不能有遗漏，才能保证系统不会出现问题。这种差异是由于工作环境与工作目标的不同所导致的。白帽子一般为企业或安全公司服务，工作的出发点就是要解决所有的安全问题，因此所看所想必然要求更加的全面、宏观；黑帽子的主要目的是要入侵系统，找到对他们有价值的数据，因此黑帽子只需要以点突破，找到对他们最有用的一点，以此渗透，因此思考问题的出发点必然是有选择性的、微观的。</p><p>从对待问题的角度来看，黑帽子为了完成一次入侵，需要利用各种不同漏洞的组合来达到目的，是在不断地组合问题；而白帽子在设计解决方案时，如果只看到各种问题组合后产生的效果，就会把事情变复杂，难以细致入微地解决根本问题，所以白帽子必然是在不断地分解问题，再对分解后的问题逐个予以解决。</p><p>防御技术在不断完善的同时，攻击技术也在不断地发展。这就像一场军备竞赛，看谁跑在前面。白帽子们刚把某一种漏洞全部堵上，黑帽子们转眼又会玩出新花样。谁能在技术上领先，谁就能占据主动。互联网技术日新月异，在新技术领域的发展中，也存在着同样的博弈过程。可现状是，如果新技术不在一开始就考虑安全设计的话，防御技术就必然会落后于攻击技术，导致历史不断地重复。</p><h2 id="安全是什么"><a href="#安全是什么" class="headerlink" title="安全是什么"></a>安全是什么</h2><p>笔者认为，安全问题的本质是<strong>信任的问题</strong>。<br>一切的安全方案设计的基础，都是建立在信任关系上的。我们必须相信一些东西，必须有一些最基本的假设，安全方案才能得以建立；如果我们否定一切，安全方案就会如无源之水，无根之木，无法设计，也无法完成。</p><p>在现实生活中，我们很少设想最极端的前提条件，因为极端的条件往往意味者小概率以及高成本，因此在成本有限的情况下，我们往往会根据成本来设计安全方案，并将一些可能性较大的条件作为决策的主要依据。</p><p>从另一个角度来说，一旦我们作为决策依据的条件被打破、被绕过，那么就会导致安全假设的前提条件不再可靠，变成一个伪命题。因此，把握住信任条件的度，使其恰到好处，正是设计安全方案的难点所在，也是安全这门学问的艺术魅力所在</p><h2 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h2><p>安全三要素是安全的基本组成元素，分别是<br>机密性（Confidentiality）、完整性（Integrity）、可用性（Availability）。</p><p>机密性要求保护数据内容不能泄露，加密是实现机密性要求的常见手段。</p><p>完整性则要求保护数据内容是完整、没有被篡 改的。常见的保证一致性的技术手段是数字签名。</p><p>可用性要求保护资源是“随需而得”</p><p>在安全领域中，最基本的要素就是这三个，后来还有人想扩充这些要素，增加了诸如可审计性、不可抵赖性等，但最最重要的还是以上三个要素。在设计安全方案时，也要以这三个要素为基本的出发点，去全面地思考所面对的问题</p><h2 id="安全评估"><a href="#安全评估" class="headerlink" title="安全评估"></a>安全评估</h2><p>一个安全评估的过程，可以简单地分为4个阶段：资产等级划分、威胁分析、风险分析、确认解决方案。</p><p>如果面对的是一个尚未评估的系统，那么应该从第一个阶段开始实施；如果是由专职的安全团队长期维护的系统，那么有些阶段可以只实施一次。在这几个阶段中，上一个阶段将决定下一个阶段的目标，需要实施到什么程度</p><p>我们前面提到安全三要素时，机密性和完整性都是与数据相关的，在可用性的定义里，笔者则用到了“资源”一词。“资源”这个概念描述的范围比数据要更加广阔，但很多时候，资源的可用性也可以理解为数据的可用性。</p><p>互联网安全的核心问题，是数据安全的问题。</p><h2 id="威胁-amp-风险分析"><a href="#威胁-amp-风险分析" class="headerlink" title="威胁&amp;风险分析"></a>威胁&amp;风险分析</h2><p>在安全领域里，我们把可能造成危害的来源称为威胁（Threat），而把可能会出现的损失称为风险（Risk）。风险<br>一定是和损失联系在一起的，很多专业的安全工程师也经常把这两个概念弄混，在写文档时张冠李戴。现在把这两个概念区分好，有助于我们接下来要提到的“威胁建模”和“风险分析”两个阶段，这两个阶段的联系是很紧密的</p><p>STRIDE是6个单词的首字母缩写，我们在分析威胁时，可以从以下6个方面去考虑。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210316115131257.png" alt="image-20210316115131257"></p><p>在进行威胁分析时，要尽可能地不遗漏威胁，头脑风暴的过程可以确定攻击面（Attack Sur-face）</p><p>风险由以下因素组成：<br>Risk = Probability * Damage Potential<br>影响风险高低的因素，除了造成损失的大小外，还需要考虑到发生的可能性</p><p>微软DREAD模型</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210316115222398.png" alt="image-20210316115222398"></p><p>模型是死的，人是活的，再好的模型也是需要人来使用的，在确定攻击面，以及判断风险高低时，都需要有一定的经验，这也是安全工程师的价值所在。模型只能起到一个辅助的作用，最终做出决策的还是人</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>安全评估的产出物，就是安全解决方案。解决方案一定要有针对性，这种针对性是由资产等级划分、威胁分析、风险分析等阶段的结果给出的</p><p>在设计安全方案时应该尽可能地不要改变商业需求的初衷</p><p>最终，一个优秀的安全方案应该具备以下特点：</p><ul><li>能够有效解决问题；</li><li>用户体验好；</li><li>高性能；</li><li>低耦合；</li><li>易于扩展与升级。</li></ul><h2 id="白帽子兵法"><a href="#白帽子兵法" class="headerlink" title="白帽子兵法"></a>白帽子兵法</h2><p>Secure By Default，是时刻要牢记的总则；</p><p>纵深防御，是要更全面、更正确地看待问题；</p><p>数据与代码分离，是从漏洞成因上看问题，</p><p>“不可预测性”原则，则是从克服攻击方法的角度看问题</p><h3 id="Secure-By-Default原则"><a href="#Secure-By-Default原则" class="headerlink" title="Secure By Default原则"></a>Secure By Default原则</h3><p>Secure by Default”原则，也可以归纳为白名单、黑名单的思想。如果更多地使用白名单，那么系统就会变得更安全，黑名单可能会有遗漏</p><p>选择白名单的思想，基于白名单来设计安全方案，其实就是信任白名单是好的，是安全的。但是一旦这个信任基础不存在了，那么安全就荡然无存</p><h3 id="最小权限原则"><a href="#最小权限原则" class="headerlink" title="最小权限原则"></a>最小权限原则</h3><p>最小权限原则也是安全设计的基本原则之一。最小权限原则要求系统只授予主体必要的权限，而不要过度授权，这<br>样能有效地减少系统、网络、应用、数据库出错的机会。</p><h3 id="纵深防御原则"><a href="#纵深防御原则" class="headerlink" title="纵深防御原则"></a>纵深防御原则</h3><ol><li><p>首先，要在各个不同层面、不同方面实施安全方案，避免出现疏漏，不同安全方案之间需要相互配合，构成一个整体纵深防御并不是同一个安全方案要做两遍或多遍，而是要从不同的层面、不同的角度对系统做出整体的解决方案，在这些不同层面设计的安全方案，将共同组成整个防御体系，这也就是纵深防御的思想</p></li><li><p>其次，要在正确的地方做正确的事情，即：在解决根本问题的地方实施针对性的安全方案，必须把防御方案<br>放到最合适的地方去解决</p></li></ol><h3 id="数据与代码分离原则"><a href="#数据与代码分离原则" class="headerlink" title="数据与代码分离原则"></a>数据与代码分离原则</h3><p>这一原则广泛适用于各种由于“注入”而引发安全问题的场景</p><p>实际上，缓冲区溢出，也可以认为是程序违背了这一原则的后果——程序在栈或者堆中，将用户数据当做代码执行，混淆了代码与数据的边界，从而导致安全问题的发生。</p><h3 id="不可预测性原则"><a href="#不可预测性原则" class="headerlink" title="不可预测性原则"></a>不可预测性原则</h3><p>即使无法修复code，但是如果能够使得攻击的方法无效，那么也可以算是成功的防御。</p><p>微软使用的ASLR技术，在较新版本的Linux内核中也支持。在ASLR的控制下，一<br>个程序每次启动时，其进程的栈基址都不相同，具有一定的随机性，对于攻击者来说，<br>这就是“不可预测性”。不可预测性的实现往往需要用到加密算法、随机数算法、哈希算法，好好使用这条<br>原则，在设计安全方案时往往会事半功倍</p><p><em><strong>安全是一门朴素的学问，也是一种平衡的艺术。无论是传统安全，还是互联网安全，其内在的原理都是一样的！！</strong></em></p><h1 id="客户端安全"><a href="#客户端安全" class="headerlink" title="客户端安全"></a>客户端安全</h1><h2 id="浏览器安全"><a href="#浏览器安全" class="headerlink" title="浏览器安全"></a>浏览器安全</h2><p>近年来随着互联网的发展，人们发现浏览器才是互联网最大的入口，绝大多数用户<br>使用互联网的工具是浏览器。因此浏览器市场的竞争也日趋白热化。浏览器安全在这种<br>激烈竞争的环境中被越来越多的人所重视。一方面，浏览器天生就是一个客户端，如果<br>具备了安全功能，就可以像安全软件一样对用户上网起到很好的保护作用；另一方面，<br>浏览器安全也成为浏览器厂商之间竞争的一张底牌，浏览器厂商希望能够针对安全建立<br>起技术门槛，以获得竞争优势。因此近年来随着浏览器版本的不断更新，浏览器安全功<br>能变得越来越强大。在本章中，我们将介绍一些主要的浏览器安全功能</p><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>同源策略（Same Origin Policy）是一种约定，它是浏览器最核心也最基本的安全<br>功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。<strong>可以说Web是构</strong><br><strong>建在同源策略的基础之上的</strong>，浏览器只是针对同源策略的一种实现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;思想和前提&quot;&gt;&lt;a href=&quot;#思想和前提&quot; class=&quot;headerlink&quot; title=&quot;思想和前提&quot;&gt;&lt;/a&gt;思想和前提&lt;/h1&gt;&lt;h2 id=&quot;简史&quot;&gt;&lt;a href=&quot;#简史&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="security" scheme="https://darren-dong.com/categories/security/"/>
    
    
    <category term="web-security" scheme="https://darren-dong.com/tags/web-security/"/>
    
  </entry>
  
  <entry>
    <title>misc</title>
    <link href="https://darren-dong.com/2021/03/15/ctf-misc/"/>
    <id>https://darren-dong.com/2021/03/15/ctf-misc/</id>
    <published>2021-03-14T16:34:29.000Z</published>
    <updated>2021-04-08T12:02:21.684Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="信息搜集技术"><a href="#信息搜集技术" class="headerlink" title="信息搜集技术"></a>信息搜集技术</h1><p>不科学上网的人不配做软工人（doge</p><p>善用谷歌搜索引擎，再不济用一个bing</p><p>还有很多好用的导航网站</p><h1 id="编码分析"><a href="#编码分析" class="headerlink" title="编码分析"></a>编码分析</h1><h2 id="通信领域"><a href="#通信领域" class="headerlink" title="通信领域"></a>通信领域</h2><h3 id="电话拨号编码"><a href="#电话拨号编码" class="headerlink" title="电话拨号编码"></a>电话拨号编码</h3><p>1-9 分别使用 1-9 个脉冲，0 则表示使用 10 个脉冲。</p><p>或者是信号DTMF decoding</p><h3 id="摩尔斯编码"><a href="#摩尔斯编码" class="headerlink" title="摩尔斯编码"></a>摩尔斯编码</h3><p><strong>特征特点</strong>：用点（.）和划（-）来编码范围<strong>0-9、A-Z</strong>的字符，字母不区分大小写，两个字母之间的空格用斜杠（/）或者三个点（.）或者一个划（-）表示，两个单词之间的间隔是七个点（.）。  根据摩斯编码的原理，CTF中也有出现过变种的摩斯编码，比如点（.）和划（-）用数字0和1来表示等此类变种的思路。  </p><p><strong>在线解密&amp;工具</strong>：  <a href="http://www.jb51.net/tools/morse.htm">http://www.jb51.net/tools/morse.htm</a> （编码的时候不转换空格） <a href="http://ctf.ssleye.com/morse.html">http://ctf.ssleye.com/morse.html</a> （编码的时候不转换空格）  <a href="http://rumkin.com/tools/cipher/morse.php">http://rumkin.com/tools/cipher/morse.php</a> （空格用斜杠表示）</p><h3 id="敲击码"><a href="#敲击码" class="headerlink" title="敲击码"></a>敲击码</h3><table><thead><tr><th align="left">Tap Code</th><th align="left">1</th><th align="left">2</th><th align="left">3</th><th align="left">4</th><th align="left">5</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">A</td><td align="left">B</td><td align="left">C/K</td><td align="left">D</td><td align="left">E</td></tr><tr><td align="left">2</td><td align="left">F</td><td align="left">G</td><td align="left">H</td><td align="left">I</td><td align="left">J</td></tr><tr><td align="left">3</td><td align="left">L</td><td align="left">M</td><td align="left">N</td><td align="left">O</td><td align="left">P</td></tr><tr><td align="left">4</td><td align="left">Q</td><td align="left">R</td><td align="left">S</td><td align="left">T</td><td align="left">U</td></tr><tr><td align="left">5</td><td align="left">V</td><td align="left">W</td><td align="left">X</td><td align="left">Y</td><td align="left">Z</td></tr></tbody></table><p>先竖后横，工具👇</p><p><a href="http://ctf.ssleye.com/tapcode.html">http://ctf.ssleye.com/tapcode.html</a></p><h3 id="曼彻斯特编码"><a href="#曼彻斯特编码" class="headerlink" title="曼彻斯特编码"></a>曼彻斯特编码</h3><p>它用<a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E5%A3%93">电压</a>的变化来分辨0和1，从高电平到低电平的跳变代表1，</p><p>而从低电平到高电平的跳变代表0（G.E.Tomas编码方式)。</p><p>从高电平到低电平的跳变代表0，</p><p>而从低电平到高电平的跳变代表1(IEEE 802.3编码方式)，</p><h3 id="差分曼切斯特"><a href="#差分曼切斯特" class="headerlink" title="*差分曼切斯特"></a>*差分曼切斯特</h3><p><a href="https://www.cnblogs.com/BinB-W/p/5045918.html">曼切斯特编码和差分曼切斯特编码 </a></p><h3 id="格雷码"><a href="#格雷码" class="headerlink" title="格雷码"></a>格雷码</h3><p>循环二进制单位距离码</p><p>是任意两个相邻数的代码只有一位<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6">二进制</a>数不同的<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A0%81">编码</a>，它与<a href="https://zh.wikipedia.org/wiki/%E5%A5%87%E5%81%B6%E6%A0%A1%E9%AA%8C%E4%BD%8D">奇偶校验码</a>同属<a href="https://zh.wikipedia.org/w/index.php?title=%E5%8F%AF%E9%9D%A0%E6%80%A7%E7%BC%96%E7%A0%81&action=edit&redlink=1">可靠性编码</a></p><p>编码的方式定义为每个邻近数字都只相差一个位元，因此也称为最小差异码</p><table><thead><tr><th>十进制数</th><th>4位自然二进制码</th><th>4位典型格雷码</th><th>十进制余三格雷码</th><th>十进制空六格雷码</th><th>十进制跳六格雷码</th><th>步进码</th></tr></thead><tbody><tr><td>0</td><td>0000</td><td>0000</td><td>0010</td><td>0000</td><td>0000</td><td>00000</td></tr><tr><td>1</td><td>0001</td><td>0001</td><td>0110</td><td>0001</td><td>0001</td><td>00001</td></tr><tr><td>2</td><td>0010</td><td>0011</td><td>0111</td><td>0011</td><td>0011</td><td>00011</td></tr><tr><td>3</td><td>0011</td><td>0010</td><td>0101</td><td>0010</td><td>0010</td><td>00111</td></tr><tr><td>4</td><td>0100</td><td>0110</td><td>0100</td><td>0110</td><td>0110</td><td>01111</td></tr><tr><td>5</td><td>0101</td><td>0111</td><td>1100</td><td>1110</td><td>0111</td><td>11111</td></tr><tr><td>6</td><td>0110</td><td>0101</td><td>1101</td><td>1010</td><td>0101</td><td>11110</td></tr><tr><td>7</td><td>0111</td><td>0100</td><td>1111</td><td>1011</td><td>0100</td><td>11100</td></tr><tr><td>8</td><td>1000</td><td>1100</td><td>1110</td><td>1001</td><td>1100</td><td>11000</td></tr><tr><td>9</td><td>1001</td><td>1101</td><td>1010</td><td>1000</td><td>1000</td><td>10000</td></tr><tr><td>10</td><td>1010</td><td>1111</td><td>—-</td><td>—-</td><td>—-</td><td>—-</td></tr><tr><td>11</td><td>1011</td><td>1110</td><td>—-</td><td>—-</td><td>—-</td><td>—-</td></tr><tr><td>12</td><td>1100</td><td>1010</td><td>—-</td><td>—-</td><td>—-</td><td>—-</td></tr><tr><td>13</td><td>1101</td><td>1011</td><td>—-</td><td>—-</td><td>—-</td><td>—-</td></tr><tr><td>14</td><td>1110</td><td>1001</td><td>—-</td><td>—-</td><td>—-</td><td>—-</td></tr><tr><td>15</td><td>1111</td><td>1000</td><td>—-</td><td>—-</td><td>—-</td><td>—-</td></tr></tbody></table><p>表中典型格雷码具有代表性。若不作特别说明，格雷码就是指<strong>典型格雷码</strong>，它可从自然二进制码转换而来。</p><p> <a href="http://www.ab126.com/system/2780.html">http://www.ab126.com/system/2780.html</a></p><h2 id="计算机相关"><a href="#计算机相关" class="headerlink" title="计算机相关"></a>计算机相关</h2><h3 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h3><p>变种是转成至多七位的二进制</p><p>还有就是十六进制</p><p><a href="http://www.ab126.com/goju/1711.html">http://www.ab126.com/goju/1711.html</a></p><h3 id="经典base"><a href="#经典base" class="headerlink" title="经典base"></a>经典base</h3><p><strong>1.base64</strong></p><p><strong>特征特点</strong>：密文由64个字符(A-Z,a-z,0-9,+,/)组成，末尾可能会出现1或2个’=’ 最多有2个</p><p><strong>在线解密&amp;工具</strong>： <a href="http://ctf.ssleye.com/base64.html">http://ctf.ssleye.com/base64.html</a></p><p><strong>2. base32</strong></p><p><strong>特征特点</strong>：密文由32个字符（A-Z,2-7)组成，末尾可能会有‘=’，但最多有6个  <strong>在线解密&amp;工具</strong>： <a href="http://ctf.ssleye.com/base64.html">http://ctf.ssleye.com/base64.html</a></p><p><strong>3. base16</strong></p><p><strong>特征特点</strong>：密文由16个字符（0-9,A-F）组成  <strong>在线解密&amp;工具</strong>： <a href="http://ctf.ssleye.com/base64.html">http://ctf.ssleye.com/base64.html</a></p><p><strong>4. base36</strong></p><p><strong>特征特点</strong>：密文由36个字符（0-9,a-z）组成，加密仅支持整数数字，解密仅支持字符串，不支持中文  密文由36个字符（0-9,A-Z）  <strong>在线解密&amp;工具</strong>： <a href="http://ctf.ssleye.com/base36w.html">http://ctf.ssleye.com/base36w.html</a></p><p><strong>5. base58编码</strong></p><p><strong>特征特点</strong>：  Base58是用于Bitcoin中使用的一种独特的编码方式，主要用于产生Bitcoin的钱包地址，Base58不使用数字”0”，字母大写”O”，字母大写”I”，和字母小写”l”，以及”+”和”/”符号  <strong>在线解密&amp;工具</strong>：  <a href="http://ctf.ssleye.com/base58w.html">http://ctf.ssleye.com/base58w.html</a></p><p><strong>6. base62编码</strong></p><p><strong>特征特点</strong>：密文由62字符（0-9，a-z，A-Z）组成  <strong>在线解密&amp;工具</strong>：  <a href="https://base62.io/%EF%BC%88%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%EF%BC%89">https://base62.io/（支持中文）</a>  <a href="http://decode-base62.nichabi.com/">http://decode-base62.nichabi.com</a>  <a href="http://ctf.ssleye.com/base62.html%EF%BC%88%E4%BB%85%E6%94%AF%E6%8C%81%E6%95%B0%E5%AD%97%EF%BC%89">http://ctf.ssleye.com/base62.html（仅支持数字）</a></p><p><strong>7. base91编码</strong></p><p><strong>特征特点</strong>：密文由91个字符（0-9，a-z，A-Z,!#$%&amp;()*+,./:;&lt;=&gt;?@[]^_`{|}~”）组成  <strong>在线解密&amp;工具</strong>：  <a href="http://ctf.ssleye.com/base91.html">http://ctf.ssleye.com/base91.html</a></p><p><a href="https://bugwz.com/2019/11/18/baseX/#%E4%B8%83-base91">大佬解析原理</a></p><h3 id="霍夫曼"><a href="#霍夫曼" class="headerlink" title="霍夫曼"></a>霍夫曼</h3><p><strong>霍夫曼编码</strong>（英语：Huffman Coding），又译为<strong>哈夫曼编码</strong>、<strong>赫夫曼编码</strong>是一种用于<a href="https://zh.wikipedia.org/wiki/%E6%97%A0%E6%8D%9F%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9">无损数据压缩</a>的<a href="https://zh.wikipedia.org/wiki/%E7%86%B5%E7%BC%96%E7%A0%81">熵编码</a>（权编码）<a href="https://zh.wikipedia.org/wiki/%E6%BC%94%E7%AE%97%E6%B3%95">算法</a>。</p><p>根据出现概率和期望来编码字符并进行压缩</p><p>卧槽，这是数据结构啊。。。</p><h3 id="XXencoding"><a href="#XXencoding" class="headerlink" title="XXencoding"></a>XXencoding</h3><p>XXencode 将输入文本以每三个字节为单位进行编码。如果最后剩下的资料少于三个字节，不够的部份用零补齐。这三个字节共有 24 个 Bit，以 6bit 为单位分为 4 个组，每个组以十进制来表示所出现的数值只会落在 0 到 63 之间。以所对应值的位置字符代替。</p><p>原理：<a href="http://blog.chacuo.net/778.html">http://blog.chacuo.net/778.html</a></p><p>工具： <a href="http://web.chacuo.net/charsetxxencode">http://web.chacuo.net/charsetxxencode</a></p><pre class="line-numbers language-none"><code class="language-none">跟base64打印字符相比，就是XXencode多一个“-” 字符，少一个”&#x2F;” 字符。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="URL-编码"><a href="#URL-编码" class="headerlink" title="URL 编码"></a>URL 编码</h3><p>又称百分号编码</p><p>参见<a href="https://zh.wikipedia.org/wiki/%E7%99%BE%E5%88%86%E5%8F%B7%E7%BC%96%E7%A0%81"> URL 编码 - 维基百科</a>。</p><h3 id="Unicode-编码"><a href="#Unicode-编码" class="headerlink" title="Unicode 编码"></a>Unicode 编码</h3><p>万国编码</p><p>参见<a href="https://zh.wikipedia.org/wiki/Unicode"> Unicode - 维基百科</a>。</p><p>注意，它有四种表现形式。</p><p>源文本： <code>The</code></p><p>&amp;#x [Hex]: <code>The</code></p><p>&amp;# [Decimal]: <code>The</code></p><p>\U [Hex]: <code>\U0054\U0068\U0065</code></p><p>\U+ [Hex]: <code>\U+0054\U+0068\U+0065</code></p><h2 id="现实世界"><a href="#现实世界" class="headerlink" title="现实世界"></a>现实世界</h2><h3 id="条形码"><a href="#条形码" class="headerlink" title="条形码"></a>条形码</h3><ul><li>宽度不等的多个黑条和空白，按照一定的编码规则排列，用以表达一组信息的图形标识符</li><li>国际标准</li><li>EAN-13 商品标准，13 位数字</li><li>Code-39：39 字符</li><li>Code-128：128 字符</li><li><a href="https://online-barcode-reader.inliteresearch.com/">条形码/二维码在线识别</a></li></ul><h3 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/qr2.jpg" alt="img"></p><h2 id="取证隐写前置"><a href="#取证隐写前置" class="headerlink" title="取证隐写前置"></a>取证隐写前置</h2><p>检查一个静态数据文件从而获取隐藏信息</p><ol><li>了解常见编码</li><li>利用脚本语言如python操作二进制数据</li><li>熟知常见文件的文件格式，尤其是各类 <a href="https://en.wikipedia.org/wiki/List_of_file_signatures">文件头</a>、协议、结构等</li><li>运用工具</li></ol><p>卧槽，我是废物。。<a href="https://ctf-wiki.org/misc/prefix/">https://ctf-wiki.org/misc/prefix/</a></p><h3 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h3><p>​    识别文件格式的第二种方法是<em>使用</em>有关存储在文件本身内部的格式的信息，或者为此目的而准备的信息，或者是<a href="https://en.wikipedia.org/wiki/String_(computer_science)#Non-text_strings">二进制字符串</a>，这些<a href="https://en.wikipedia.org/wiki/String_(computer_science)#Non-text_strings">字符串</a>总是位于某些格式的文件中的特定位置。由于最容易找到它们的位置是在开头，因此当该区域大于几个<a href="https://en.wikipedia.org/wiki/Byte">字节时</a>，通常将其称为<em>文件头</em>；如果长度只有几个<a href="https://en.wikipedia.org/wiki/Byte">字节</a>，则将其称为<em>幻数</em>。</p><p>​    <a href="https://en.wikipedia.org/wiki/Header_(computing)">文件头</a>中包含的元数据通常存储在文件的开头，但也可能存在于其他区域中，通常包括结尾，具体取决于文件格式或所包含数据的类型。基于字符的（文本）文件通常具有基于字符的标头，而二进制格式通常具有二进制标头</p><p>​    文件头还可以包含有关文件及其内容的元数据。例如，大多数<a href="https://en.wikipedia.org/wiki/Image_file_formats">图像文件都</a>存储有关图像格式，大小，分辨率和<a href="https://en.wikipedia.org/wiki/Color_space">色彩空间的信息</a></p><p>**    <a href="https://en.wikipedia.org/wiki/List_of_file_signatures">维基百科常见文件签名</a>**</p><p><a href="https://www.tooleyes.com/app/hex_editor.html">工具</a></p><h3 id="Python-struct模块。。"><a href="#Python-struct模块。。" class="headerlink" title="Python struct模块。。"></a>Python struct模块。。</h3><p>。。。有工具是不是可以先不学</p><p>file命令</p><p>strings命令打印可打印字符</p><p>打印文件中可打印的字符，经常用来发现文件中的一些提示信息或是一些特殊的编码信息，常常用来发现题目的突破口。</p><ul><li><p>可以配合 <code>grep</code> 命令探测指定信息</p><pre class="line-numbers language-none"><code class="language-none">strings test|grep -i XXCTF<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>也可以配合 <code>-o</code> 参数获取所有 ASCII 字符偏移</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">root in ~&#x2F;Desktop&#x2F;tmp λ strings -o flag|head    14 IHDR    45 gAMA    64  cHRM    141 bKGD    157 tIME    202 IDATx    223 NFdVK3    361 |;*-    410 Ge%&lt;W    431 5duX@%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>`binwalk` 命令</p><p>binwalk 本是一个固件的分析工具，比赛中常用来发现多个文件粘合再在一起的情况。根据文件头去识别一个文件中夹杂的其他文件，有时也会存在误报率（尤其是对 Pcap 流量包等文件时）。</p><pre class="line-numbers language-none"><code class="language-none">root in ~&#x2F;Desktop&#x2F;tmp λ binwalk flagDECIMAL       HEXADECIMAL     DESCRIPTION--------------------------------------------------------------------------------0             0x0             PNG image, 450 x 450, 8-bit grayscale, non-interlaced134           0x86            Zlib compressed data, best compression25683         0x6453          Zip archive data, at least v2.0 to extract, compressed size: 675, uncompressed size: 1159, name: readme.txt26398         0x671E          Zip archive data, at least v2.0 to extract, compressed size: 430849, uncompressed size: 1027984, name: trid457387        0x6FAAB         End of Zip archive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配合 <code>-e</code> 参数可以进行自动化提取。</p><p>也可以结合 <code>dd</code> 命令进行手动切割。</p><pre class="line-numbers language-none"><code class="language-none">root in ~&#x2F;Desktop&#x2F;tmp λ dd if&#x3D;flag of&#x3D;1.zip bs&#x3D;1 skip&#x3D;25683431726+0 records in431726+0 records out431726 bytes (432 kB, 422 KiB) copied, 0.900973 s, 479 kB&#x2F;s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="010-Editor使用"><a href="#010-Editor使用" class="headerlink" title="010 Editor使用"></a>010 Editor使用</h3><p>SweetScape 010 Editor 是一个全新的十六进位文件编辑器，它有别于传统的十六进位编辑器在于它可用「范本」来解析二进位文件，从而让你读懂和编辑它。它还可用来比较一切可视的二进位文件。</p><p>利用它的模板功能可以非常轻松的观察文件内部的具体结构并且依此快速更改内容。</p><p>[教程](<a href="https://blog.csdn.net/weixin_42417767/article/details/81227166">7.23 010Editor.exe的使用_duan哥哥的博客-CSDN博客</a>)</p><h2 id="图片分析"><a href="#图片分析" class="headerlink" title="图片分析"></a>图片分析</h2><p>元数据（Metadata），又称中介数据、中继数据，为描述数据的数据（Data about data），主要是描述数据属性（property）的信息，用来支持如指示存储位置、历史数据、资源查找、文件记录等功能。</p><p>全都不会，心态炸了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;信息搜集技术&quot;&gt;&lt;a href=&quot;#信息搜集技术&quot; class=&quot;headerlink&quot; title=&quot;信息搜集技术&quot;&gt;&lt;/a&gt;信息搜集技术&lt;/h1&gt;&lt;p&gt;不科学上网的人不配做软工人（doge&lt;/p&gt;
&lt;p&gt;善用谷歌搜索引擎，再不济用一个</summary>
      
    
    
    
    <category term="security" scheme="https://darren-dong.com/categories/security/"/>
    
    
    <category term="misc" scheme="https://darren-dong.com/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>introduction-to-Network</title>
    <link href="https://darren-dong.com/2021/03/14/introduction-to-Networks/"/>
    <id>https://darren-dong.com/2021/03/14/introduction-to-Networks/</id>
    <published>2021-03-14T08:10:41.000Z</published>
    <updated>2021-04-08T12:02:40.801Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>警告：Cisco课程，不可用于商用</p><p>因为我发现学这个课老是断断续续的，每次捡起来超级麻烦，所以趁这次来个大复习，把一些该有的知识点直接记下来好了</p><h1 id="当今网络"><a href="#当今网络" class="headerlink" title="当今网络"></a>当今网络</h1><h2 id="网络组件"><a href="#网络组件" class="headerlink" title="网络组件"></a>网络组件</h2><p>网络有很多组件:</p><p>终端设备，中间设备，网络介质巴拉巴拉</p><p>常见表示方法：</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314161643916.png" alt="image-20210314161643916"></p><p>除了这些表示之外，还使用专门的术语来描述这些设备和介质是如何相互连接的:</p><p><img src="" alt="85163160_p0"></p><ul><li><strong>网络接口卡 (NIC)</strong> - 将设备物理连接到网络。</li><li><strong>物理端口</strong> - 网络设备上的接口或插口，介质通过它连接到终端设备或其他网络设备。</li><li><strong>接口</strong> - 网络设备上连接到独立网络的专用端口。由于路由器连接了不同的网络，路由器上的端口称为网络接口。</li></ul><p>还有物理拓扑图和逻辑拓扑图</p><p>几个类型：</p><p>内部网，外联网，Intranets and Extranets</p><p>LAN WAN</p><h2 id="常用连接技术"><a href="#常用连接技术" class="headerlink" title="常用连接技术"></a>常用连接技术</h2><p>家庭和小型办公室</p><ul><li><strong>有线电视</strong> （<strong>Cable</strong>）- 通常由有线电视服务提供商提供，互联网数据信号在输送有线电视信号的同一电缆上进行传输。它提供了高带宽、高可用性和始终在线的互联网连接。</li><li><strong>DSL</strong> - 数字用户线也可提供高带宽、高可用性和始终在线的互联网连接。DSL 通过电话线路运行。通常小型办公室和家庭办公室用户会选择使用非对称 DSL (ADSL)，这种方式的特点是下载速度高于上传速度。</li><li><strong>蜂窝网</strong>（<strong>Cellular</strong>） - 蜂窝网互联网接入使用手机网络进行连接。只要您能收到蜂窝网信号，就能获得蜂窝网互联网接入。性能会受手机功能和手机基站的限制。</li><li><strong>卫星</strong>（<strong>Satellite</strong>） - 对于根本没有互联网连接的地方来说，获得卫星互联网访问非常有用。卫星天线要求有到卫星的清晰视线。</li><li><strong>拨号电话</strong>（<strong>Dial-up Telephone</strong>） - 使用电话线和调制解调器，费用相对较低。拨号调制解调器连接提供的低带宽不足以用于大型数据传输，但对旅行过程中的移动访问非常有用。</li></ul><p><img src="" alt="background2"></p><p>企业</p><ul><li><strong>专用租用线路</strong>（<strong>Dedicated Leased Line</strong> ） - 租用线路是服务提供商网络内连接地理位置分散的办公室的保留电路，提供个人语音和/或数据网络。电路按月或按年租用。</li><li><strong>城域以太网</strong>（<strong>Metro Ethernet</strong>） -有时被称为以太网 WAN. 在本模块中，我们把它称为城域以太网。城域以太网将 LAN 访问技术扩展到 WAN 中。以太网是一种 LAN 技术，您将在后面的模块中学习。</li><li><strong>DSL</strong>（<strong>Business DSL</strong>） - 企业 DSL 提供各种格式。一种常见的选择是对称数字用户线路 (SDSL)，它类似于 DSL 的普通用户版本，但是提供相同的上传和下载速度。</li><li><strong>卫星</strong> – 当有线解决方案不可用时，卫星服务可以提供连接。</li></ul><p>今天，独立的数据、电话和视频网络融合在了一起。与专用网络不同，融合网络能够通过相同的网络基础设施，在许多不同类型的设备之间传输数据、语音和视频。此网络基础设施采用一组相同的规则、协议和实施标准。融合数据网络在一个网络中传送多种服务。</p><h2 id="可靠网络"><a href="#可靠网络" class="headerlink" title="可靠网络"></a>可靠网络</h2><p>容错能力-提供冗余的多条路径</p><p>可拓展性-设计人员可以遵循广为接受的标准和协议</p><p>服务质量 (QoS)-通过各种协议和优先级</p><p>网络安全-设备安全，网络安全：</p><ul><li><p><strong>机密性</strong> - 数据机密性意味着只有预定和授权收件人可以访问并读取数据。</p></li><li><p><strong>完整性</strong> - 数据完整性表示保证信息在从源到目的地的传输过程中不会被更改。</p></li><li><p><strong>可用性</strong> - 数据可用性表示保证授权用户及时可靠地访问数据服务。</p></li><li><p><strong>病毒、蠕虫和特洛伊木马</strong> <strong>Viruses, worms, and Trojan horses</strong>- 这些包括在用户设备上运行的恶意软件或代码。</p></li><li><p><strong>间谍软件和广告软件</strong> <strong>Spyware and adware</strong>-这些是安装在用户设备上的软件类型。这些软件会秘密收集有关用户的信息。</p></li><li><p><strong>零日攻击（也称零小时攻击）****Zero-day attacks</strong> - 在出现漏洞的第一天发起的攻击。</p></li><li><p><strong>威胁发起者攻击</strong> <strong>Threat actor attacks</strong>-恶意人员攻击用户设备或网络资源。</p></li><li><p><strong>拒绝服务攻击</strong> <strong>Denial of service attacks</strong>- 使网络设备上的应用和进程减缓或崩溃的攻击。</p></li><li><p><strong>数据拦截和盗窃****Data interception and theft</strong> - 通过公司网络捕获私人信息的攻击。</p></li><li><p><strong>身份盗窃****Identity theft</strong> - 窃取用户的登录凭证来访问私人数据的攻击。</p></li></ul><h2 id="一些趋势"><a href="#一些趋势" class="headerlink" title="一些趋势"></a>一些趋势</h2><p>BYOD 意味着设备由任何使用者在任意地点使用。</p><p>云计算</p><p>智能家庭技术（物联网）</p><p>电力网：</p><p>使用标准电源适配器，只要有电源插座，设备就可以连接到 LAN。无需安装数据线，也几乎不需要额外的电力。通过使用供电的同一线路，电力线网络通过按一定频率发送数据来发送信息。</p><p>当无线接入点无法到达家里的所有设备时，电力线网络特别有用。电力线网络不会取代数据网络中的专用布线。但是，当有线数据网络或无线通信不可行时，电力线网络可以备用。</p><p>无线互联网服务提供商 (WISP) 是使用类似家庭无线局域网 (WLAN) 的无线技术</p><h1 id="配置交换机-终端"><a href="#配置交换机-终端" class="headerlink" title="配置交换机/终端"></a>配置交换机/终端</h1><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314163007230.png" alt="image-20210314163007230"></p><h2 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h2><p>默认情况下，交换机将转发流量，无需配置即可工作。例如，连接到同一新交换机的两个已配置了的主机能够进行通信。</p><p>无论新交换机的默认特性如何，都应配置并保护所有交换机。</p><table><thead><tr><th align="left"><strong>方法</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><strong>控制台 (Console)</strong></td><td align="left">这是一种物理管理端口，可通过该端口对思科设备进行带外访问。带外访问是指通过仅用于设备维护的专用管理通道进行访问。使用控制台端口的优势在于，即使没有配置任何网络服务，也可以访问设备，例如执行初始配置时。控制台连接需要运行终端仿真软件的计算机和用于连接设备的特殊控制台电缆。</td></tr><tr><td align="left"><strong>安全外壳(SSH)</strong></td><td align="left">SSH 是一种带内且被推荐的方法，它使用虚拟接口通过网络远程建立安全的 CLI连接。不同于控制台连接，SSH 连接需要设备上具有有效的网络服务，包括配置了地址的有效接口。大部分思科 IOS 版本配备了 SSH 服务器和 SSH 客户端，可用于与其他设备建立 SSH 会话。</td></tr><tr><td align="left"><strong>Telnet</strong></td><td align="left">Telnet 使用虚拟接口通过网络远程建立 CLI 会话，这种带内方法并不安全。与 SSH 不同，Telnet 不提供安全的加密连接，只能在实验室环境中使用。用户身份验证、密码和命令通过网络以明文形式发送。最好的做法是使用 SSH 而不是 Telnet。思科 IOS 包括 Telnet 服务器和 Telnet 客户端。</td></tr></tbody></table><p><strong>注意:</strong> 某些设备，比如路由器，还可以支持传统辅助端口，这种辅助端口可使用调制解调器通过电话连接远程建立 CLI 会话。类似于控制台连接，AUX 端口也是带外连接，且不需要配置或提供网络服务。</p><h2 id="配置模式"><a href="#配置模式" class="headerlink" title="配置模式"></a>配置模式</h2><p>作为一项安全功能，思科 IOS 软件将管理访问分为以下两种命令模式：</p><ul><li><strong>用户 EXEC 模式</strong>（user） - 该模式功能有限，但可用于有效执行基本操作。它只允许有限数量的基本监控命令，不允许执行任何可能改变设备配置的命令。用户 EXEC 模式由采用 &gt; 符号结尾的 CLI 提示符标识。</li><li><strong>特权 EXEC 模式</strong>（privileged） - 要执行配置命令，网络管理员必须访问特权 EXEC 模式。较高级别的配置模式，比如全局配置模式，只能通过特权 EXEC 模式访问。特权 EXEC 模式由采用# 符号结尾的提示符标识。</li></ul><p>要配置设备，用户必须进入全局配置模式。</p><p>在全局配置模式下， CLI 配置所做的更改将影响整个设备的运行。全局配置模式由在设备名称之后加(config)#结尾的提示符标识，比如Switch(config)#。</p><p>访问全局配置模式之后才能访问其他具体的配置模式。在全局配置模式下，用户可以进入不同的子配置模式。其中的每种模式可以用于配置 IOS 设备的特定部分或特定功能。两个常见的子配置模式包括：</p><ul><li><strong>线路配置模式</strong> - 用于配置控制台、SSH、Telnet 或 AUX 访问。</li><li><strong>接口配置模式</strong> - 用于配置交换机端口或路由器网络接口。</li></ul><p>当使用 CLI 时，每种模式由该模式独有的命令提示符来标识。默认情况下，每个提示符都以设备名称开头。命令提示符中设备名称后的部分用于表明模式。</p><p>例如，线路配置模式的默认提示符是 <strong>Switch(config-line)#</strong> </p><p>默认的接口配置模式提示符是 **Switch(config-if)#**。</p><ul><li><strong>startup-config(启动配置文件)</strong> -存储在 NVRAM 中的配置文件。它包含在启动时或重启时用到的所有命令。当设备断电后，其中的内容不会消失。</li><li><strong>running-config(运行配置文件)</strong> -存储在随机存取存储器（RAM）中。它反映了当前的配置。修改运行配置会立即影响思科设备的运行。RAM 是易失性存储器。如果设备断电或重新启动，则它会丢失所有内容。</li></ul><h2 id="学习命令"><a href="#学习命令" class="headerlink" title="学习命令"></a>学习命令</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314163957083.png" alt="image-20210314163957083"></p><table><thead><tr><th align="left"><strong>约定</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><strong>粗体</strong></td><td align="left">粗体文本表示您需要原样输入的命令和关键字， 如显示的那样。</td></tr><tr><td align="left"><em>斜体</em></td><td align="left">斜体文本指示由您提供值的参数。</td></tr><tr><td align="left"><strong>[<strong>x</strong>]</strong></td><td align="left">方括号表示可选元素（关键字或参数）。</td></tr><tr><td align="left"><strong>{<strong>x</strong>}</strong></td><td align="left">大括号表示必需元素（关键字或参数）。</td></tr><tr><td align="left">**[**x **{**y <strong>|</strong> z <strong>}]</strong></td><td align="left">方括号中的大括号和垂直线表示 可选元素中的必填选项。空格用于清楚地描述 命令的各个部分。</td></tr></tbody></table><p>enable / disable</p><p>configure terminal / exit  (子配置—&gt;上一级)</p><p>end / Ctrl+Z (任何子配置-&gt;特权)</p><p>子配置模式间可以随意转换：</p><p><strong>line console 0</strong></p><p><strong>interface FastEthernet 0/1</strong></p><p><strong>line vty 0 15</strong></p><p>主机名字仅使用字母、数字和破折号</p><p>password ….  特定线路设置密码，如控制台</p><p>Login 启用登录，不启用就根本进不去</p><p>enable secret ….  限制特权（可能是某项命令？）</p><p><strong>service password-encryption</strong>（全局配置指令+加密所有）</p><p>show running-config /startup-config</p><p>**banner motd #<strong>当日消息</strong>#**（其实#可以换别的，向访问设备的人展示）</p><p>hostname 。。。设定主机名，</p><p>no hostname 取消</p><p>reload 清除为保存的running-config</p><p>erase start 删除启动设置，之后需重新加载设备来恢复出厂</p><p>copy 。。。 可以copy到闪存flash里面</p><p>ip address a b 设置ipv4地址和子网掩码</p><p>ipv6 address … 设置ipv6配置</p><p>ping也可在路由器特权模式下用！</p><p>no shutdown 启用虚拟接口（shutdown关闭）</p><p>show ip(ipv6) interface brief 检验接口的正确数量和标识</p><p>no ip domain-lookup 禁用DNS解析(特权模式)</p><p>show arp 交换机等设备显示MAC地址信息（特权）</p><p>show mac address-table 查看mac地址表（特权）</p><p>clear mac address-table dynamic 清除mac地址表(特权)</p><p><strong>mdix auto</strong>接口配置命令（懂得都懂）</p><p>ip route ….（远程网络地址）（网址+子网掩码）   …（下一跳路由器的IP地址）配置静态路由表</p><p>show ip route 特权模式查看路由表</p><p><strong>show ip arp</strong>查看arp表</p><p>transport input {ssh | telnet}或者俩都加上  保护远程Telnet | SSH访问</p><p>description description-text 设置接口说明</p><p><strong>ip default-gateway</strong> ip-address为交换机配置默认网关</p><p>ipv6 unicast-routing 启用 IPv6 路由</p><p>show ip（ipv6） interface brief</p><p>所有接口的输出显示,它们的IP地址和 当前的状态已配置和连接的接口的 状态和协议均会显示“up”; 显示任何其他内容都可能表示配置或 布线出现了问题。</p><p>show ip route/show ipv6 route</p><p>显示存储在 RAM 中的 IP 路由表的内容。</p><p>show interfaces （可加特定接口参数）</p><p>显示设备上所有接口的统计信息。然而,这个命令将只显示 IPv4 编址信息。</p><p>show ip interface显示路由器上所有接口的 IPv4 统计信息。</p><p>show ipv6 interface显示路由器上所有接口的 IPv6 统计信息。</p><h3 id="主机端"><a href="#主机端" class="headerlink" title="主机端"></a>主机端</h3><p>ipconfig （/all）</p><p>arp -a </p><p>arp -d 清除 ARP 表</p><p>ping … 测试链接，一般要两遍，第一遍是自动配置arp</p><p><strong>route print</strong>或命<strong>netstat -r</strong>令可以显示主机路由表（windows主机）</p><h2 id="好多缩写"><a href="#好多缩写" class="headerlink" title="好多缩写"></a>好多缩写</h2><p>interface  = int</p><p>FastEthernet = f</p><p>running-config = run</p><p>startup-config = start</p><p>address == add</p><h2 id="热键"><a href="#热键" class="headerlink" title="热键"></a>热键</h2><p>？：</p><p>直接输入则显示当前模式可用</p><p>指令输入一般会显示补全可能</p><p>缺参数可以显示参数</p><p>主要Ctrl+A/E</p><p>c+s+6</p><p>c+r返回被打扰的命令行</p><table><thead><tr><th align="left"><strong>键盘输入</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><strong>Tab</strong></td><td align="left">补全部分输入的命令项。</td></tr><tr><td align="left"><strong>Backspace</strong></td><td align="left">删除光标左边的字符。</td></tr><tr><td align="left"><strong>Ctrl-D</strong></td><td align="left">删除光标所在的字符。</td></tr><tr><td align="left"><strong>Ctrl-K</strong></td><td align="left">删除从光标到命令行尾的所有字符。</td></tr><tr><td align="left"><strong>Esc D</strong></td><td align="left">删除从光标到词尾的所有字符。</td></tr><tr><td align="left"><strong>Ctrl+U</strong> 或 <strong>Ctrl+X</strong></td><td align="left">删除从光标到命令行首的 所有字符。</td></tr><tr><td align="left"><strong>Ctrl-W</strong></td><td align="left">删除光标左边的单词。</td></tr><tr><td align="left"><strong>Ctrl-A</strong></td><td align="left">将光标移至行首。</td></tr><tr><td align="left"><strong>向左箭头</strong> 或 <strong>Ctrl+B</strong></td><td align="left">将光标左移一个字符。</td></tr><tr><td align="left"><strong>Esc B</strong></td><td align="left">将光标向后左移一个单词。</td></tr><tr><td align="left"><strong>Esc F</strong></td><td align="left">将光标向前右移一个单词。</td></tr><tr><td align="left"><strong>向右箭头</strong> 或 <strong>Ctrl+F</strong></td><td align="left">将光标右移一个字符。</td></tr><tr><td align="left"><strong>Ctrl-E</strong></td><td align="left">将光标移至命令行尾。</td></tr><tr><td align="left"><strong>向上箭头</strong> 或 <strong>Ctrl+P</strong></td><td align="left">调出历史记录缓冲区中的命令， 从最近输入的命令开始。</td></tr><tr><td align="left"><strong>Ctrl+R</strong> 或 <strong>Ctrl+I</strong> 或 <strong>Ctrl+L</strong></td><td align="left">收到控制台消息后重新显示系统提示符和 命令行。</td></tr></tbody></table><p><strong>注意</strong>: 虽然 <strong>Delete</strong> 键通常用于删除提示符右侧的字符，但 IOS 命令结构无法识别 Delete 键。</p><p>当命令输出产生的文本超过终端窗口中可以显示的文本时，IOS 将显示一个 <strong>“–More–”</strong> 提示。下表描述了显示此提示时可以使用的键盘输入。</p><table><thead><tr><th align="left"><strong>键盘输入</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><strong>回车</strong> 键</td><td align="left">显示下一行。</td></tr><tr><td align="left"><strong>空格</strong>键</td><td align="left">显示下一屏。</td></tr><tr><td align="left">任何其他按键</td><td align="left">结束显示字符串，返回特权模式。</td></tr></tbody></table><p>此表列出了用于退出操作的命令。</p><table><thead><tr><th align="left"><strong>键盘输入</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><strong>Ctrl-C</strong></td><td align="left">处于任何配置模式下时，用于结束该配置模式并返回 特权模式。处于设置模式下时，用于中止并返回命令 提示符。</td></tr><tr><td align="left"><strong>Ctrl-Z</strong></td><td align="left">处于任何配置模式下时，用于结束该配置模式并返回 特权模式。</td></tr><tr><td align="left"><strong>Ctrl-Shift-6</strong></td><td align="left">通用中断序列用于中止 DNS lookup、traceroutes、 pings等</td></tr></tbody></table><h1 id="协议和模型"><a href="#协议和模型" class="headerlink" title="协议和模型"></a>协议和模型</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>常用的计算机协议包含以下要求：</p><ul><li>消息编码-将信息转换成可传输和解码的</li><li>消息格式和封装（encapsulation）-取决于消息类型和传递信道</li><li>消息大小</li><li>消息时序（timing）<ul><li><strong>流量控制（flow control）-</strong> 这是管理数据传输速率的过程。流量控制定义了可以发送多少信息以及传递信息的速率。例如，如果一个人讲话太快，对方就难以听清和理解。在网络通信中，源设备和目的设备使用网络协议来协商和管理信息流。</li><li><strong>响应超时</strong>(responce timeout) -如果一个人提问之后在合理的时间内没有得到回答，就会认为没有获得回答并作出相应的反应。此人可能会重复这个问题，也可能继续谈话。网络上的主机会使用网络协议来指定等待响应的时长，以及在响应超时的情况下执行什么操作。</li><li><strong>访问方法</strong> -这决定人们可以发送消息的时间。如果两个人同时讲话，就会发生信息冲突，两个人必须作出让步，重新开始的动画演示。同样，当设备想要在无线局域网上传输时，有必要使用 WLAN 网络接口卡 (NIC) 来确定无线介质是否可用。</li></ul></li><li>消息传输选项</li></ul><p>单播广播组播</p><p>网络协议定义了用于设备之间交换消息的通用格式和规则集。协议由软件、硬件或两者中的终端设备和中间设备实现。每个网络协议都有自己的功能、格式和通信规则。</p><p>该表列出了在一个或多个网络上通信所需的各种协议类型。</p><table><thead><tr><th align="left"><strong>协议类型</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><strong>网络通信协议</strong></td><td align="left">这类协议使两个或多个设备能够在一个或多个 网络上通信。以太网技术家族涉及多种协议， 例如IP，传输控制协议（TCP）， 超文本传输协议（HTTP）等。</td></tr><tr><td align="left"><strong>网络安全协议</strong></td><td align="left">这类协议保护数据以提供身份验证、数据完整性和 数据加密。安全协议的示例包括安全外壳协议 (SSH)、安全套接字层协议 (SSL) 和传输层安全协议 (TLS)。</td></tr><tr><td align="left"><strong>路由（routing）协议</strong></td><td align="left">这类协议使路由器能够交换路由信息，比较路径 信息，然后选择到达目标网络的 最佳路径。路由协议的示例包括开放最短路径优先协议 (OSPF)和边界网关协议 (BGP)。</td></tr><tr><td align="left"><strong>服务发现协议。</strong></td><td align="left">这类协议用于设备或服务的自动检测。 服务发现协议的示例包括发现用于IP地址分配 服务的动态主机配置协议（DHCP）， 和用于执行域名到IP地址转换的 域名系统（DNS）。</td></tr></tbody></table><p>执行某种通信功能所需的一组内在相关协议称为协议簇。</p><p>要形象地表现协议簇中的协议如何互动，最佳方法之一就是将这种互动看成一个堆栈。协议栈展示了协议簇中的单个协议是如何实施的。<strong>协议显示为分层结构，每种上层服务都依赖于其余下层协议所定义的功能。协议栈的下层负责通过网络传输数据和向上层提供服务，而上层则负责处理发送的消息内容。</strong></p><p>当年多种协议簇，只剩下TCP/IP（互联网协议簇）和一点点OSI（开放系统互连协议）</p><h2 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="*TCP/IP"></a>*TCP/IP</h2><p>免费 且 标准</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314171619114.png" alt="image-20210314171619114"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314173907739.png" alt="image-20210314173907739"></p><table><thead><tr><th><strong>4 - 应用层</strong></th><th>向用户提供数据，以及编码和对话控制。</th></tr></thead><tbody><tr><td><strong>3 - 传输层</strong></td><td>支持各种设备之间通过不同网络通信。</td></tr><tr><td><strong>2 - 互联网层</strong></td><td>确定通过网络的最佳路径。</td></tr><tr><td><strong>1 - 网络接入层</strong></td><td>控制组成网络的硬件设备和介质。</td></tr></tbody></table><p>OSI 5/6/7层供应用程序开发者参考</p><p>而底层通常使用OSI的1/2层</p><p>#应用层#(Applicaton Layer)</p><pre class="line-numbers language-none"><code class="language-none">域名系统DNS - 域名系统(Domain Name System)。将域名（例如 cisco.com）转换为 IP 地址。主机配置DHCPv4 - IPv4动态主机配置协议(Dynamic Host Configuration Protocol for IPv4)。DHCPv4 服务器在启动时动态地将 IPv4 编址信息分配给 DHCPv4 客户端，并允许在不再需要时重新使用这些地址。DHCPv6 - IPv6动态主机配置协议。DHCPv6类似于DHCPv4。SLAAC -无状态地址自动配置(Stateless Address Autoconfiguration)。一种允许设备在不使用DHCPv6服务器的情况下获得其IPv6编址信息的方法。邮件SMTP -简单邮件传输协议(Simple Mail Transfer Protocol)。使客户端能够将邮件发送到邮件服务器，并使服务器能够将邮件发送到其他服务器。POP3 -邮局协议第 3 版(Post Office Protocol version 3)。使客户端能够从邮件服务器检索电子邮件并将电子邮件下载到客户端本地邮件应用程序。IMAP -互联网消息访问协议(Internet Message Access Protocol)。使客户端能够访问存储在邮件服务器上的电子邮件，并在服务器上维护电子邮件。文件传输FTP - 文件传输协议(File Transfer Protocol)。它设置规则，使得一台主机上的用户能够通过网络访问另一台主机或向其传输文件。FTP是一种可靠、面向连接且进行确认的文件传输协议。SFTP - SSH文件传输协议(SSH...)。作为安全外壳 (SSH)协议的扩展，SFTP可用于建立安全的文件传输会话，在该会话中对文件传输进行加密。SSH 是一种安全远程登录的方法，通常用于访问设备的命令行。TFTP -简单文件传输协议(Trivial...)。这是一个简单的，无连接的文件传输协议，使用尽最大努力、无需确认的文件传输方式。它使用的开销比FTP少。Web和Web服务HTTP(Hybertext Transfer Protocol) -超文本传输协议。这是有关在万维网上交换文本、图形图像、音频、视频以及其他多媒体文件的一组规则集。HTTPS -安全 HTTP(HTTP Secure)。这是一种安全的HTTP形式，它对在万维网上交换的数据进行加密。REST -具象状态传输协议(Representational State Transfer)。它使用应用程序编程接口 (API) 和 HTTP 请求创建 Web 应用程序的 Web 服务。前后端交接！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#传输层#(Transport layer)</p><pre class="line-numbers language-none"><code class="language-none">面向连接TCP -传输控制协议(Transmission Control Protocol)。它使运行在不同主机上的进程之间能够进行可靠的通信，并提供可靠的、需要确认的传输，以确保传输成功。无连接UDP -用户数据报协议(User Datagram Protocol)。它允许一台主机上运行的进程向另一台主机上运行的进程发送数据包。但是，UDP不会确认数据报传输是否成功。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#互联网层#(Internet Layer)</p><pre class="line-numbers language-none"><code class="language-none">Internet 协议IPv4 -互联网协议第 4 版(Internet Protocol version 4)。它接收来自传输层的消息段，将消息打包成数据包，并为通过网络进行端到端传递的数据包进行地址分配。IPv4 使用 32 位地址。IPv6 - 互联网协议第 6 版。与 IPv4 类似，但使用 128 位地址。NAT -网络地址转换(Network Address Translation)。将私有网络 IPv4 地址转换为全球唯一的公有 IPv4 地址。消息传送ICMPv4 - IPv4 互联网控制消息协议(Internet Control Message Protocol for IPv4)。目的主机针对数据包传输中出现的错误，向源主机提供反馈。ICMPv6 -用于 IPv6 的ICMP。与 ICMPv4 类似的功能，但用于 IPv6 数据包。ICMPv6 ND -IPv6 邻居发现(IPv6 Neighbor Discovery)。包括用于地址解析和重复地址检测的四个协议消息。路由协议OSPF -开放最短路径优先协议(Open Shortest Path First)。它使用基于区域的分层设计的链路状态路由协议。OSPF是一种开放式标准内部路由协议。EIGRP — 增强型内部网关路由协议(Enhanced Interior Gateway Routing Protocol)这是一种思科开发的开放标准路由协议，使用基于带宽、延迟、负载和可靠性的复合度量。BGP -边界网关协议(Border Gateway Protocol)。这是一种开放标准的外部网关路由协议，用于互联网服务提供商(ISP)之间。BGP 还通常用于 ISP 与其大型私有客户端之间来交换路由信息。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#网络接入层#(Network Access Layer)</p><pre class="line-numbers language-none"><code class="language-none">地址解析ARP -地址解析协议(Address Resolution Protocol)。提供 IPv4 地址与硬件地址之间的动态地址映射。注意：您可能会看到其他文档声明 ARP 在互联网层（OSI 第 3 层）运行。但是，在本课程中，我们声明 ARP 在网络接入层（OSI 第 2 层）运行，因为它的主要目的是发现目标的 MAC 地址。MAC 地址是第 2 层地址。数据链路协议Ethernet -为网络接入层的布线和信令标准定义规则。WLAN -无线局域网(Wirelee Local Area Network)。定义 2.4 GHz 和 5 GHz 无线电频率的无线信号规则。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据单元"><a href="#数据单元" class="headerlink" title="数据单元"></a>数据单元</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314174259989.png" alt="image-20210314174259989"></p><p>PDU协议数据单元</p><p>Data 数据 </p><p>Segment 段  Datagram 报</p><p>Packet 包</p><p>Frame 帧</p><p>Bits 位</p><h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><p>网络接口卡 (NIC) 将设备连接到网络。以太网网卡用于有线连接（如图所示），而无线局域网（WLAN）网卡用于无线连接。最终用户设备可能包括一种或两种类型的网卡。</p><p>在连接网络时，所有物理连接的性能水平并不是相等的。</p><p>OSI 物理层通过网络介质传输构成数据链路层帧的比特（位）。该层从数据链路层接收完整的帧，并将这些帧编码为一系列信号，传输到本地介质上。帧由经过编码的比特（位）构成，这些位可以被终端设备或中间设备接收。</p><h2 id="物理层标准"><a href="#物理层标准" class="headerlink" title="物理层标准"></a>物理层标准</h2><p>由以下组织定义和管理：</p><ul><li>国际标准化组织 (ISO)</li><li>电信工业协会/电子工业协会 (TIA/EIA)</li><li>国际电信联盟 (ITU)</li><li>美国国家标准学会 (ANSI)</li><li>电气电子工程师协会 (IEEE)</li><li>国家级电信管理局包括美国联邦通信委员会 (FCC) 和欧洲电信标准协会 (ETSI)。</li></ul><p>除了这些组织之外，通常还有地方性布线标准组织，例如 CSA（加拿大标准协会）、CENELEC（欧洲电工标准化委员会）和 JSA/JIS（日本标准协会），开发本地规范。（放在这里谨表敬意，绝对不记！！）</p><p>物理层标准管理三个功能区：</p><ul><li>物理组件 - 电子硬件设备、介质和其他连接器</li><li>编码 - 将数据位流转换为预先定义“代码”的方法，这些代码就是位的编组，用于提供一种可预测模式，以便发送者和接收者均能识别。换句话说，编码是用于表示数字信息的方法或模式。（比如曼切斯特）</li><li>信令 - 表示位的方法称为信令方法，在介质上生成代表“1”和“0”的电信号、光信号或无线信号，而哪种类型的信号代表“0”。这可以简单到只是改变电信号或光脉冲的级别。长脉冲可能代表 1，而短脉冲可能代表 0。</li></ul><h2 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h2><p>用来衡量带宽质量的术语包括:</p><p><strong>延迟</strong></p><p>延迟是指数据从一个给定点传送到另一给定点所用的时间，包括时延。</p><p>在拥有多个网段的网际网络或网络中，吞吐量不能超过从源到目的地之间路径的最低链路。纵使这些网段全部或多数具备高速带宽，它也只使用那段低速率路径的吞吐量，这就会造成整个网络的吞吐量瓶颈。</p><p><strong>吞吐量</strong></p><p>吞吐量是给定时段内通过介质传输的位的量度。</p><p>由于各种因素的影响，吞吐量经常与物理层实施中指定的带宽不符。吞吐量通常低于带宽。影响吞吐量的因素</p><ul><li>流量大小</li><li>流量类型</li><li>从源通往目的地的过程中遇到的网络设备数量所造成的延时。</li></ul><p><strong>实际吞吐量</strong></p><p>用于评估可用数据传输的第三个测量标准称为实际吞吐量。实际吞吐量是在给定时间段内传输的有用数据的衡量标准。实际吞吐量就是吞吐量减去建立会话、确认、封装和重传所产生的流量开销。实际吞吐量总是低于吞吐量，而吞吐量通常低于带宽。</p><h2 id="铜缆"><a href="#铜缆" class="headerlink" title="铜缆"></a>铜缆</h2><p>有三种不同类型的铜缆布线，每一种都用于特定的情况。</p><p>价格低廉、易于安装、对电流的电阻低。但是，铜介质受到距离和信号干扰的限制。</p><p>信号传输的距离越远，信号下降就越多。这称为信号衰减。</p><ul><li>**电磁干扰 (EMI) 或射频干扰 (RFI) - EMI 和 RFI 干扰信号会扭曲和损坏通过铜介质承载的数据信号。EMI 和 RFI 的潜在来源包括无线电波和电磁设备（如荧光灯或电动机）。</li><li>**串扰 - 串扰是一根电线中信号的电场或磁场对邻近电线中的信号造成的干扰。在电话线上，串扰会由相邻电路中另一语音会话的接听部分引起。具体而言，当电流流经电线时，会在电线周围产生一个较小的环形磁场，而相邻电线可能接收到该磁场。</li></ul><p>为了应对 EMI 和 RFI 的负面影响，某些类型的铜缆会用金属屏蔽套包裹，并要求适当的接地连接。</p><p>为了应对串扰的负面影响，某些类型的铜缆将相反电路线对绞合在一起以有效消除串扰。</p><p>使用以下建议也可以限制电子噪音对铜缆的影响：</p><ul><li>选择的电缆类型或类别要适合特定的网络环境。</li><li>设计电缆基础设施时应规避建筑结构中已知和潜在的干扰源。</li><li>使用包括正确处理和端接电缆的布线技术。</li></ul><p>UTP非屏蔽双绞线 Unshielded twisted-pair </p><p>最常用的网络介质。通过 RJ-45 连接器端接的 UTP 布线用于<strong>网络主机与中间网络设备的互连</strong>，例如交换机和路由器。四对用颜色标记的电线组成</p><p>STP屏蔽双绞线 Shielded twisted-pair</p><p>比 UTP 布线提供更好的噪声防护。但是，与 UTP 电缆相比，STP 电缆更加昂贵而且不易安装。和 UTP 相同，STP 也使用 RJ-45 连接器。为了充分利用屏蔽的优势，STP 电缆使用特殊屏蔽 STP 数据连接器进行端接。如果电缆接地不正确，屏蔽就相当于一个天线，会接听多余信号。</p><p>多了金属编制和金属箔</p><p>Coaxial cable</p><p>同轴电缆，或简称同轴，由于它的两根导线共享同一个中轴而得名</p><p>同轴电缆使用许多不同类型的连接器</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314182735686.png" alt="image-20210314182735686"></p><p>虽然 UTP 电缆在现代以太网安装中最终取代了同轴电缆，但在以下情形中仍采用同轴电缆设计：</p><ul><li><strong>无线安装</strong> - 用同轴电缆将<strong>天线连接到无线设备</strong>。同轴电缆可传送天线和无线电设备之间的射频 (RF) 能量。</li><li><strong>有线电视互联网安装</strong> - 有线电视服务提供商为其客户提供互联网连接，他们会使用光缆替换同轴电缆和支撑放大元件部分。但是，<strong>客户所在地的布线</strong>仍采用同轴电缆。</li></ul><h2 id="UTP布线"><a href="#UTP布线" class="headerlink" title="UTP布线"></a>UTP布线</h2><p>标准规定了一些要素</p><ul><li>电缆类型</li><li>电缆长度</li><li>连接器</li><li>电缆端接</li><li>测试电缆的方法</li></ul><p>IEEE 按照它的性能对 UTP 布线划分等级。电缆分类的依据是它们承载更高速率带宽的能力。例如，5类电缆通常用于 100BASE-TX 快速以太网安装。其他类别包括增强型 5类电缆、6类电缆 和 6a 类电缆。</p><p>为了支持更高的数据传输速率，人们设计和构造了更高类别的电缆。随着新的千兆位以太网技术的开发和运用，如今已经很少采用 5e 类电缆，新建筑安装推荐使用 6 类电缆。</p><p>-3 类电缆最初用于语音线路的语音通信，但后来用于数据传输。 -5 类和5e 类电缆用于数据传输。5类电缆支持 100Mbps，5e 类电缆支持 1000 Mbps -6类电缆在每对线之间增加了一个分隔器以支持更高的速度。 6类电缆支持高达 10 Gbps。 -7类电缆也支持 10 Gbps。 -8类电缆支持 40 Gbps。</p><p>UTP 电缆的端头通常为 RJ-45 连接器。TIA/EIA-568 标准描述为以太网电缆进行引脚分配（引出线）的电线颜色标记。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314200028243.png" alt="image-20210314200028243"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314200013783.png" alt="image-20210314200013783"></p><p>直通和交通</p><ul><li><strong>以太网直通电缆</strong> -最常见的网络电缆类型。它通常用于主机到交换机和交换机到路由器的互连。</li><li><strong>以太网交叉电缆</strong> -用于互连相似设备的电缆。例如，交换机到交换机、主机到主机或路由器到路由器的连接。但是，由于网卡使用介质相关接口交叉（auto-MDIX）来自动检测电缆类型并进行内部连接，因此现在已将交叉电缆视为传统电缆。</li><li>但是主机链接路由器竟然也是用交叉线！</li></ul><p><strong>注意</strong>: 另一种类型的电缆是思科专有的全反电缆。它用于连接路由器或交换机的控制台端口。</p><p>在设备间错误使用交叉电缆或直通电缆不会损坏设备，但也无法连通设备并进行通信</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314200350348.png" alt="image-20210314200350348"></p><table><thead><tr><th align="left">电缆类型</th><th align="left">标准</th><th align="left">应用</th></tr></thead><tbody><tr><td align="left">以太网直通线</td><td align="left">两端均为 T568A 或两端均为 T568B</td><td align="left">将网络主机连接到交换机或集线器之类的网络设备</td></tr><tr><td align="left">以太网交叉线</td><td align="left">一端为 T568A，另一端为 T568B</td><td align="left">连接两个网络主机或连接两台网络中间设备 （交换机到交换机或路由器到路由器）</td></tr><tr><td align="left">全反电缆</td><td align="left">思科专有</td><td align="left">使用适配器连接工作站串行端口与路由器 控制台端口。</td></tr></tbody></table><h2 id="光纤"><a href="#光纤" class="headerlink" title="光纤"></a>光纤</h2><ul><li>单模光纤 (SMF) Single-mode fiber</li><li>多模光纤 (MMF) Mulitimode fiber</li></ul><p>单模光纤包含一个极小的芯，使用昂贵的激光技术来发送单束光，如图所示。单模光纤在跨越数百公里的长距离传输情况下很受欢迎，例如应用于长途电话和有线电视中的光纤。</p><p>多模光纤包含一个稍大的芯，使用 LED 发射器发送光脉冲。具体而言，LED 发出的光从不同角度进入多模光纤，t有多条光路，普遍用于 LAN 中，因为它们可以由低成本的 LED 提供支持。它可以通过长达 550 米的链路提供高达 10 Gb/s 的带宽。</p><p>多模和单模光纤之间的主要区别之一就是色散的数量。色散是指光脉冲在时间上的分布。色散增加意味着信号强度损失增加。多模光纤具有比单模光纤更大的色散。这就是为什么多模光纤在信号丢失之前只能传播 500 米。</p><ul><li><strong>企业网络</strong> - 用于主干布线和基础设施设备互连。</li><li><strong>光纤到户 (FTTH)</strong> - 用于为家庭和小型企业提供不间断宽带服务。</li><li><strong>长距离传输网络</strong> - 由服务提供商用于连接国家/地区与城市。</li><li><strong>水下有线网络</strong> - 用于提供可靠高速、高容量的网络解决方案，使其在深度与横跨海洋的距离相当的严酷海下环境中仍能生存。在互联网上搜索“海底电缆电信地理地图”，以在线查看各种地图。</li></ul><p>连接器：</p><p>直通式ST Straight-tip</p><p>用户连接器SC Subscriber Connector</p><p>朗讯连接器LC单工 Lucent Connector Simplex Connectors</p><p>双工多模LC连接器 Duplex Multimode</p><p>直到最近，光还只能在光纤上沿一个方向传播。因此，需要两根光纤来支持全双工操作。因此，光纤跳线是将两根光纤线缆捆绑在一起，并通过一对标准的单光纤接头端接。有些光纤连接器可以在单个连接器上同时传送和接收光纤，称为双工连接器，其实就是连接了俩线</p><p>需要使用光纤接插线（即光纤跳线）互连基础设施设备。人们使用不同颜色来区分单模和多模接插线。黄色表皮的是单模光缆，橙色（或浅绿色）的是多模光缆。</p><p>有SC-SC多模  LC-LC 单模 ST-LC多模 SC-ST单模 。。。</p><h2 id="无线"><a href="#无线" class="headerlink" title="无线"></a>无线</h2><p>无线介质使用无线电或微波频率来承载代表数据通信二进制数字的电磁信号。</p><p>以下是无线网络的一些局限性:</p><ul><li><strong>覆盖面积</strong> - 无线数据通信技术非常适合开放环境。但是，在楼宇和建筑物中使用的某些建筑材料以及当地地形将会限制它的有效覆盖。</li><li><strong>干扰</strong> - 无线电易受干扰，可能会受到家庭无绳电话、某些类型的荧光灯、微波炉和其他无线通信装置等常见设备的干扰。</li><li><strong>安全性</strong> - 无线通信覆盖无需进行介质的物理接线。因此，未获得网络访问授权的设备和用户可以访问传输。所以网络安全是无线网络管理的重要组成部分。</li><li><strong>共享介质</strong> - WLAN 以半双工模式运行，意味着一台设备一次只能发送或接收。无线介质由所有无线用户共享。许多用户同时访问WLAN会导致每个用户的带宽减少。</li></ul><p>标准规定了：</p><ul><li>数据到无线电信号编码</li></ul><ul><li>传输频率和功率</li><li>信号接收和解码要求</li><li>天线的设计和施工</li></ul><p>这些是无线标准：</p><ul><li><strong>Wi-Fi (IEEE 802.11)</strong> - 无线 LAN (WLAN) 技术，通常称为 Wi-Fi。WLAN 使用一种称为“载波侦听多路访问/冲突避免 (CSMA/CA)”的争用协议。无线 NIC 在传输数据之前必须先侦听，以确定无线信道是否空闲。如果其他无线设备正在传输，则 NIC 必须等待信道空闲。Wi-Fi 是 Wi-Fi 联盟的标记。Wi-Fi 与基于 IEEE 802.11 标准的认证 WLAN 设备结合使用。</li><li><strong>蓝牙 (IEEE 802.15)</strong> - 这是一个无线个人局域网 (WPAN) 标准，通常称为 “蓝牙”。它采用设备配对过程进行通信，距离为 1 到 100 米。</li><li><strong>WiMAX (IEEE 802:16)</strong> - 通常称为微波接入全球互通 (WiMAX)，这个无线标准采用点到多点拓扑结构，提供无线带宽接入。</li><li><strong>Zigbee (IEEE 802.15.4)</strong> - Zigbee是一种用于低数据速率、低功耗通信的规范。它适用于需要短距离、低数据速率和长电池寿命的应用。Zigbee 通常用于工业和物联网 (IoT) 环境，如无线照明开关和医疗设备数据采集。</li></ul><p>WLAN 要求具备下列网络设备：</p><ul><li><strong>无线接入点 (AP) Wireless Access Point</strong> - 集中用户的无线信号，并连接到现有基于铜介质的网络基础设施，如以太网。如图所示，家庭和小型企业无线路由器将路由器、交换机和接入点的功能整合到了一起。</li><li><strong>无线网卡适配器Wireless NIC adapters</strong> - 能够为每台网络主机提供无线通信</li></ul><p>以太网网卡用于有线连接，而 WLAN（无线局域网）网卡用于无线连接。</p><h1 id="数制系统"><a href="#数制系统" class="headerlink" title="数制系统"></a>数制系统</h1><p>IPV4每一个地址包含一串 32 位字符串，并分为四个部分，称为二进制八位组。每一个二进制八位组包含 8 位（或 1 个字节），用句点分隔。IPv4 地址通常表达为点分十进制记法</p><p>十六进制数制系统在网络中用于表示以太网 MAC 地址和 IP V6 地址。</p><p>IPv6地址长度为128位，每 4 位以一个十六进制数字表示，共 8组32 个十六进制值。IPv6 地址不区分大小写，可用大写或小写书写。首选格式为<code> x:x:x:x:x:x:x:x</code>，</p><p>每个“x”称为一个十六进制数，包括四个十六进制值</p><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p>与 TCP/IP 的上层协议不同，数据链路层协议通常不是由征求意见 (RFC) 文档定义的。互联网工程任务组 (IETF) 虽然维护着 TCP/IP 协议簇上层的工作协议和服务，但它没有定义TCP/IP模型的网络接入层的功能和操作。</p><p>定义适用于网络接入层（即，OSI的物理和数据链路层）的开放标准和协议的工程组织包括：</p><ul><li>电气电子工程师协会 (IEEE)</li><li>国际电信联盟 (ITU)</li><li>国际标准化组织 (ISO)</li><li>美国国家标准学会 (ANSI)</li></ul><p>OSI模型的数据链路层(第2层)为物理网络准备网络数据。数据链路层负责网络接口卡 (NIC) 到网络接口卡的通信。数据链路层执行以下操作：</p><ul><li>允许上层访问介质。上层协议完全不知道用于转发数据的介质类型。</li><li>接受数据，通常是第 3 层数据包（即 IPv4 或 IPv6），并将它们封装到第 2 层帧中。</li><li>控制数据在介质上的放置和接收方式，</li><li>通过网络介质在终端之间交换帧。</li><li>接收封装的数据，通常是第 3 层数据包，并将它们定向到适当的上层协议。</li><li>执行错误检测并拒绝任何损坏的帧。</li></ul><p>如果没有数据链路层，则网络层协议（如 IP）必须提供连接到传输路径中可能存在的各种类型介质所需的连接。此外，每当开发出一种新的网络技术或介质时，IP 必须做出相应调整。而这些交给数据链路层来考虑，IP只需考虑更加抽象的架构</p><h2 id="IEEE-802-LAN-MAN"><a href="#IEEE-802-LAN-MAN" class="headerlink" title="IEEE 802 LAN/MAN"></a>IEEE 802 LAN/MAN</h2><p>IEEE 802 LAN/MAN 标准专用于以太网局域网、无线局域网 (WLAN)、无线个人区域网 (WPAN) 和其他类型的局域网和城域网。IEEE 802 LAN/MAN 数据链路层由以下两个子层组成：</p><ul><li><strong>逻辑链路控制 (LLC)</strong> - 这个 IEEE 802.2 子层在上层的网络软件与下层的设备硬件之间进行通信。<strong>它放入帧中的信息用于确定帧所使用的网络层协议</strong>。此信息<strong>允许多个第 3 层协议（如 IPv4 和 IPv6）使用相同的网络接口和介质。</strong>不必让每个协议自己研究这些</li><li><strong>介质访问控制 (MAC)</strong> - 在硬件上实现这个子层（IEEE 802.3、802.11 或 802.15）。它负责数据<strong>封装和介质访问控制。它提供数据链路层寻址，并与各种物理层技术集成。</strong></li></ul><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314205917487.png" alt="image-20210314205917487"></p><p>LLC 子层获取网络协议数据（通常是 IPv4 或 IPv6数据包）并加入第2层控制信息，帮助将数据包传送到目的节点。 </p><p>MAC子层控制网卡和负责在有线或无线LAN/MAN介质上发送和接收数据的其他硬件。</p><p>MAC 子层提供数据封装：</p><ul><li><strong>帧定界</strong> - 在成帧过程中提供重要的定界符，用来标识帧中的字段。这些定界符位可以在发送节点与接收节点之间提供同步。</li><li><strong>编址</strong> - 提供源和目的编址，用于在同一共享介质上的设备之间传输第 2 层帧。</li><li><strong>错误检测</strong> - 包含一个帧尾，用于检测传输错误。</li></ul><p>MAC 子层还提供介质访问控制，允许多个设备通过共享（半双工）介质进行通信。全双工通信不需要访问控制。</p><h2 id="介质访问"><a href="#介质访问" class="headerlink" title="介质访问"></a>介质访问</h2><p>在数据包从本地主机传送到远程主机的过程中，其遇到的各种网络环境可能具有不同的特性。例如，以太网 LAN 通常由许多争用网络介质访问的主机组成。MAC 子层解决了这个问题。对于串行链路，访问方法可能只包括两个设备之间的直接连接，通常是两个路由器。因此，它们不需要 IEEE 802 MAC 子层所使用的技术。</p><p>路由器接口将数据包封装到适当的帧中。使用合适的介质访问控制方法来访问每个链路。在任意指定的网络层数据包交换过程中，可能存在多次数据链路层和介质的转换。</p><p>在路径上的每一跳，路由器都执行以下第 2 层功能：</p><ol><li>从介质接受帧</li><li>解封帧</li><li>将数据包重新封装到新帧中</li><li>从适合该物理网络网段的介质转发新帧</li></ol><h2 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h2><ul><li><strong>物理拓扑</strong> - 标识物理连接，以及终端设备和中间设备（即，路由器、交换机和无线接入点）如何互连。这个拓扑还可能包括特定的设备位置，如房间号和设备机架上的位置。物理拓扑通常是点对点拓扑或星型拓扑。</li><li><strong>逻辑拓扑</strong> - 是指网络将帧从一个节点传输到另一节点的方法。此拓扑使用<strong>设备接口和<em>第 3 层</em> IP 寻址方案识别虚拟连接。</strong></li></ul><p>在控制对介质的数据访问时，数据链路层“看见”的是网络的逻辑拓扑。正是逻辑拓扑在影响网络成帧和介质访问控制的类型。</p><p><strong>WAN拓扑</strong></p><p>点对点：在这种布局中，两个节点无需与其他主机共享介质。此外，当使用串行通信协议，如点对点协议(PPP)时，节点无需判定收到的帧是指向它还是指向另一节点。因此，逻辑数据链路协议将非常简单，因为介质中的所有帧都只去往或来自这两个节点。节点将帧放置到一端的介质上，然后点对点线路另一端的节点从介质取走帧。<br><strong>在网络中使用物理设备并不会影响逻辑拓扑</strong></p><p>中心辐射：这是星型拓扑的 WAN 版本，在该拓扑中一个中心站点使用点对点链路互连分支机构站点。如果不经过中心站点，分支站点就不能与其他分支站点交换数据。</p><p>网状：该拓扑可用性高，但要求每个终端系统都与其他各个系统互连。因此管理成本和物理成本都会非常高。每条链路实质上是另一节点的点对点链路。</p><p>混合拓扑（任意拓扑的变体和组合）</p><p><strong>LAN拓扑</strong></p><p>在多路访问局域网中，终端设备（即节点）使用星型或扩展星型拓扑相互连接，如图所示。在这种类型的拓扑中，终端设备连接到一个中央中间设备，在本例中是一个以太网交换机。扩展星型（<strong>扩展星型</strong>）通过连接多个以太网交换机来扩展此拓扑。星型和扩展星型拓扑安装简单、扩展性好（易于添加和删除终端设备），而且故障排除容易。早期的星型拓扑使用以太网集线器互连终端设备。</p><p><strong>传统LAN拓扑</strong></p><p>早期的以太网和传统令牌环局域网技术包括另外两种拓扑结构:</p><ul><li><strong>总线</strong> - 所有终端系统都相互连接，并在两端以某种形式端接。终端设备互连时不需要基础设施设备（例如交换机）。传统的以太网络中会使用采用同轴电缆的总线拓扑，因为它价格低廉而且安装简易。</li><li><strong>环</strong> - 终端系统与其各自的邻居相连，形成一个环状。与总线拓扑不同，环拓扑不需要端接。传统的光纤分布式数据接口 (FDDI) 和令牌环网络使用环拓扑。</li></ul><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314211820357.png" alt="image-20210314211820357"></p><p><strong>半双工</strong></p><p>两台设备都可以通过该介质发送和接收，但无法同时执行这两个操作。WLAN和带有以太网集线器的传统总线拓扑使用半双工模式。</p><p><strong>全双工</strong></p><p>两台设备都可以在共享介质上同时发送和接收，现代Ethernet</p><p>双工不匹配会导致效率严重下降！重要错误</p><h2 id="访问控制方法"><a href="#访问控制方法" class="headerlink" title="访问控制方法"></a>访问控制方法</h2><p>多路访问网络是指可能有两个或多个终端设备同时试图访问网络的网络。</p><p>以太网 LAN 和 WLAN 都是多路访问网络的示例</p><p>对于共享介质，有两种基本的访问控制方法：</p><ul><li>基于竞争的访问</li><li>受控访问</li></ul><p><strong>受控访问</strong></p><p>在基于控制的多路访问网络中，每个节点都有自己的时间来使用介质。这种确定性的传统网络类型效率很低，因为设备必须等到轮到自己才能访问介质。使用受控访问的多路访问网络的示例包括：</p><ul><li>传统令牌环</li><li>传统ARCNET</li></ul><p><strong>基于竞争的访问</strong></p><p>在基于竞争的多路访问网络中，所有节点都工作在半双工方式，争夺介质的使用。然而，一次只有一台设备能够发送。因此，当多台设备同时传输时，会使用一个处理过程。基于竞争的访问方法示例如下：</p><ul><li>在<strong>传统总线拓扑/使用集线器的以太网局域网</strong>上使用载波侦听多路访问/冲突检测(CSMA/CD)</li><li>在<strong>无线局域网</strong>上使用载波侦听多路访问/冲突避免(CSMA/CA)</li></ul><p><em>基于竞争的系统在介质使用率高的情况下都无法很好地扩展。</em></p><p><strong>CSMA/CD</strong></p><p>如果两台设备同时传输，则会发生冲突。对于传统以太网局域网，两台设备将会检测到网络上的冲突。这就是 CSMA/CD 的冲突检测 (CD) 部分。网卡通过比较传输的数据与接收的数据，或通过识别介质中的信号振幅是否高于正常状况来实现。两台设备发送的数据会损坏且需重新发送。</p><p>集线器例子：</p><p>在没有载波信号时，假定网络可用，A发送给B，帧首先到集线器，然后从所有端口发送，由于帧拥有 PC3 的目的数据链路地址，只有该设备会接受并被全帧复制。所有其他设备的网卡都将忽略该帧</p><p>它还提供了一种回退重传算法。</p><p><strong>CSMA/CA</strong></p><p>在无线环境中，设备可能无法检测到冲突。CMSA/CA 不检测冲突，但会通过在传输之前等待来尝试避免冲突。每台设备发送时都会包含传输所需的持续时间。所有其他无线设备都会收到此信息，知道介质将有久不可用。</p><p><em><strong>注意: 使用交换机的以太网 LAN 不使用基于竞争的系统，因为交换机和主机网卡在全双工模式下运行</strong></em></p><h2 id="帧"><a href="#帧" class="headerlink" title="帧"></a>帧</h2><p>附加到帧的信息由正在使用的协议决定。</p><p>数据链路协议负责同一网络中的网卡间通信。虽然有许多描述数据链路层帧的不同数据链路层协议，但每种帧均有三个基本组成部分：</p><ul><li>帧头</li><li>数据</li><li>帧尾</li></ul><p>没有一种帧结构能满足通过所有类型介质的全部数据传输需求。根据环境的不同，帧中所需的控制信息量也相应变化，以匹配介质和逻辑拓扑的访问控制需求。例如，WLAN帧必须包含避免冲突的过程，因此与以太网帧相比需要额外的控制信息。在脆弱的环境下，需要更多控制才能确保送达。由于所需控制信息较多，因此帧头和帧尾字段都较大。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314213324158.png" alt="image-20210314213324158"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314213352540.png" alt="image-20210314213352540"></p><p><em>发送节点会创建帧内容的逻辑摘要，称为循环冗余校验 cyclic redundancy check (CRC) 值。此值将放入帧校验序列 (FCS) 字段 frame check sequence中以代表帧内容。在以太网尾部，FCS 为接收节点提供一种方法，用于确定帧是否出现传输错误。</em></p><p>在 TCP/IP 网络中，所有 OSI 第 2 层协议都与 OSI 第 3 层的 IP 一起使用。但是，所用的第 2 层协议取决于逻辑拓扑和物理介质。</p><p>每个协议执行指定第 2 层逻辑拓扑的介质访问控制。这意味着在执行这些协议时，有很多种不同的网络设备都可以充当运行在数据链路层上的节点。这些设备包括计算机上的网卡以及路由器和第 2 层交换机上的接口。</p><p>用于特定网络拓扑的第 2 层协议取决于实施该拓扑的技术。所使用的技术取决于网络规模（根据主机数量和地理范围判断）以及通过网络提供的服务。</p><p>带宽差异常会导致 LAN 和 WAN 使用不同的协议。</p><p>数据链路层协议包括：</p><ul><li>以太网</li><li>802.11 无线</li><li>点对点协议 (PPP)</li><li>高级数据链路控制 (HDLC) High-Level Data Link Control</li><li>帧中继 Frame Relay</li></ul><h1 id="以太网交换"><a href="#以太网交换" class="headerlink" title="以太网交换"></a>以太网交换</h1><p>以太网是如今广泛使用的两种局域网技术之一，另一种是无线局域网（WLAN）。它使用有线通信，包括双绞线、光纤链路和同轴电缆。</p><p>以太网在数据链路层和物理层运行，是 IEEE 802.2 和 802.3 标准中定义的一系列网络技术。（无线是802.11）</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314214332628.png" alt="image-20210314214332628"></p><p>以太网也使用802 LAN/MAN协议的俩子层</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314214654631.png" alt="image-20210314214654631"></p><h2 id="MAC子层"><a href="#MAC子层" class="headerlink" title="MAC子层"></a>MAC子层</h2><p>MAC 子层负责数据封装和访问介质。</p><p><strong>数据封装</strong></p><p>IEEE 802.3 数据封装包括以下内容：</p><ul><li><strong>以太网帧</strong> - 这是以太网帧的内部结构。</li><li><strong>以太网寻址</strong> - 以太网帧中包含源和目的MAC 地址，用于将该以太网帧从以太网网卡传送到<strong>同一LAN</strong>上的以太网网卡。</li><li><strong>以太网错误检测</strong> - 以太网帧中包含用于错误检测的帧校验序列 (FCS) 帧尾。</li></ul><p>它也负责使用CSMA/CD and CSMA/CA技术</p><h2 id="以太网帧字段"><a href="#以太网帧字段" class="headerlink" title="以太网帧字段"></a>以太网帧字段</h2><p>以太网帧大小的最小值为 64 个字节，最大值为 1518 个字节。这包括从“目的 MAC 地址”字段到“帧校验序列 (FCS)”字段的所有字节。在描述帧的大小时，不包含“前导码”字段。</p><p>任何长度小于 64 个字节的帧都被接收站点视为“冲突碎片”或“残帧”而自动丢弃。超过 1500 个字节的数据帧被视为“巨帧”或“小型巨型帧”。</p><p>如果发送的帧小于最小值或者大于最大值，接收设备将会丢弃该帧。帧之所以被丢弃，可能是因为冲突或其他多余信号。它们被视为无效。大多数快速以太网和千兆以太网交换机和网卡通常都支持巨帧。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314214944369.png" alt="image-20210314214944369"></p><table><thead><tr><th align="left">字段</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">前导码和帧首定界符字段</td><td align="left">前导码（Preamble）（7 字节）和帧首定界符(Start Frame Delimiter)（SFD），也称为 帧首（1 字节），该字段用于发送设备 与接收设备之间的同步。帧开头的八个字节 用于引起接收节点的注意。基本上，前几个字节的 作用是告诉接收方准备接收新帧。</td></tr><tr><td align="left">目的 MAC 地址字段</td><td align="left">该 6 字节字段是预期接收方的标识符。读者应该还记得， 此地址被第2层用来协助设备 确定帧是否发送到目的地。帧中的地址将会与设备中的 MAC 地址进行比对。如果匹配， 设备就接受该帧。可以是单播、组播或广播 地址。</td></tr><tr><td align="left">源 MAC 地址字段</td><td align="left">该 6 字节字段标识发出帧的网卡 或接口。</td></tr><tr><td align="left">类型/长度</td><td align="left">该字段包含两个字节，<strong>标识封装于以太网帧中的 上层协议</strong>。常见值为十六进制，0x800 用于 IPv4， 0x86DD 用于 IPv6，0x806 用于 ARP。 <strong>注意</strong>：您也可能会看到此字段称为 EtherType、类型或长度。</td></tr><tr><td align="left">数据字段</td><td align="left">该字段（46-1500 字节）包含来自 较高层的封装数据，一般是第3层PDU。最常见是IPv4 数据包。所有帧至少必须有 64 个字节。<strong>如果封装的是小数据包， 则使用填充位将帧增大到最小值</strong>。</td></tr><tr><td align="left">帧校验序列字段</td><td align="left">“帧校验序列 (Frame Check Sequence)(FCS)”字段（4 个字节）用于检测帧中 的错误。它使用循环冗余校验 (CRC)。发送设备 在帧的 FCS 字段中包含 CRC 的结果。接收设备 接收帧并生成 CRC 以查找 错误。如果计算匹配，就不会发生错误。计算 不匹配则表明数据已经改变。因此， 帧会被丢弃。数据的变化可能是 由于代表比特位的电信号受到干扰所致。</td></tr></tbody></table><h2 id="MAC-地址"><a href="#MAC-地址" class="headerlink" title="MAC 地址"></a>MAC 地址</h2><p>在以太网中，每台网络设备都连接到同一个共享介质。MAC 地址用于标识本地网段上的物理源和目的设备。MAC 编址为 OSI 模型的数据链路层提供了设备识别方法。</p><p>以太网 MAC 地址是使用 <strong>12个十六进制数字</strong>表示的 48 位地址，因为一个字节等于 8 位，我们也可以说 一个MAC 地址长度为 6 个字节。</p><p>所有 MAC 地址对于以太网设备或以太网接口必须是唯一的。<br>为了确保这一点，所有销售以太网设备的供应商必须向 IEEE 注册才能获得唯一的 6个十六进制（即 24 位或 3 字节）代码，称为组织唯一标识符 (OUI)。（Organization unique identifier）</p><p>当供应商为设备或以太网接口分配 MAC 地址时，供应商必须执行以下操作：</p><ul><li>使用其分配的 OUI 作为前 6 个十六进制数字。</li><li>为后 6 个十六进制数字分配唯一值。</li></ul><p>OUI查询网址：<a href="http://standards-oui.ieee.org/oui/oui.txt">http://standards-oui.ieee.org/oui/oui.txt</a></p><p>供应商有责任确保其设备不被分配相同的 MAC 地址。但是，由于制造过程中出现的错误、某些虚拟机部署方式中的错误或使用多种软件工具之一进行的修改，可能存在重复的 MAC 地址。若出现以上任一情况，必须在新网卡或软件中修改 MAC 地址。</p><p>MAC 地址通常称为烧录地址(Built-in Address) (BIA)，因为传统上该地址被烧录到网卡的只读存储器（ROM）中。这意味着该地址会永久编码到 ROM 芯片中。</p><p><strong>注意</strong>: 在现代 PC 操作系统和网卡中，可以在软件中更改MAC 地址。当试图访问基于 BIA 进行过滤的网络时，这一点非常有用。因此，根据 MAC 地址来过滤或控制流量就不再安全了。</p><p>当计算机启动时，网卡将 MAC 地址从 ROM 复制到 RAM 中</p><p>收到以太网帧时，网卡会查看帧中的目的 MAC 地址是否与设备 RAM 中存储的物理 MAC 地址匹配。如果不匹配，设备就会丢弃帧。如果与帧中的目的 MAC 匹配，则网卡会将帧向上传送到 OSI 层进行解封处理。</p><p><em><strong>单播，广播，组播MAC地址</strong></em></p><p>在以太网中，第 2 层单播、组播和广播通信会使用不同的 MAC 地址。</p><p>以太网单播 MAC 地址是帧从一台发送设备去往一台目的设备时使用的唯一地址</p><p>源主机用来确定目的IPv4地址所对应的目的 MAC 地址的流程称为**地址解析协议 (ARP)<strong>。源主机用来确定目的IPv6地址所对应的目的 MAC 地址的流程称为</strong>邻居发现 (ND)**。（参看TCP/IP）</p><p>以太网广播帧由以太网LAN上的每个设备接收和处理。以太网广播的功能如下：</p><ul><li>它有一个十六进制（在二进制中是 48 个 1）FF-FF-FF-FF-FF-FF的<strong>目的 MAC</strong> 地址。</li><li>它向除输入端口以外的所有以太网交换机端口泛洪。</li><li><strong>路由器不会转发该帧</strong>。</li></ul><p>IPv4 的 DHCP 是使用以太网和 IPv4 广播地址的一个协议示例。</p><p>以太网组播帧由属于同一组多播组的以太网LAN上的一组设备接收和处理。以太网组播的功能如下：</p><ul><li>当封装数据为IPv4组播包时，目的MAC地址为01-00-5E;<br>当封装数据为IPv6组播包时，目的MAC地址为33-33。</li><li>当封装的数据不是IP时，还有其他预留的组播目的MAC地址，<br>如生成树协议Spanning Tree Protocol(STP)和链路层发现协议Link Layer Discovery Protocol(LLDP)。</li><li>除非交换机被配置为用于组播窥探multicast snooping，否则它将向除传入端口之外的所有以太网交换机端口泛洪flooded out。</li><li>它不会由路由器转发，除非路由器配置为路由组播数据包。</li></ul><p>如果封装的数据是一个IP组播包，则属于组播组的设备都分配有该组播组IP地址。IPv4 组播地址的范围为 224.0.0.0 到 239.255.255.255。IPv6 组播地址的范围以 ff00::/8 开头。由于组播地址代表一组地址（有时称为主机组），因此只能用作数据包的目的地址。源地址始终应为单播地址。</p><h2 id="MAC地址表"><a href="#MAC地址表" class="headerlink" title="MAC地址表"></a>MAC地址表</h2><p>现在就该讨论交换机如何使用这些地址将帧转发(或丢弃)到网络上的其他设备。如果交换机只是转发出它接收到的每一帧到所有端口，您的网络将会非常拥挤，以至于它可能会完全停止工作。</p><p>第 2 层以太网交换机使用 MAC 地址做出转发决策。它完全忽视帧的数据部分的协议，交换机仅根据第 2 层以太网 MAC 地址做出转发决策。这才实现了真正的分工和可复用</p><p>一个以太网交换机检查它的<strong>MAC地址表</strong>，为每个帧做出一个<strong>转发决策</strong>，不像传统的以太网集线器，向除了传入端口以外的所有端口重复发出比特位。</p><p><strong>注意</strong>: MAC 地址表有时也称为内容可寻址内存Content-addressable-memory (CAM) 表。虽然 CAM 表这一术语相当常见，但在本课程中，我们将称其为 MAC 地址表。</p><p><strong>学习Learn</strong></p><p>进入交换机的每个帧被检查，以确定其中是否有可被学习的新信息。它是通过检查帧的源 MAC 地址和帧进入交换机的端口号来完成这一步的。如果源 MAC 地址在该网络不存在（就是来自另一局域网），会将其和传入端口号一并添加到表中。如果源 MAC 地址已存在表中，则交换机会更新该条目的刷新计时器。默认情况下，大多数以太网交换机将条目在表中保留 5 分钟。</p><p><strong>注意</strong>: 如果源 MAC 地址已经保存在表中，但是对应的是不同的端口，那么交换机会将其视为一个新的条目。使用相同的 MAC 地址和最新的端口号来<strong>替换</strong>该条目。</p><p><strong>转发Forward</strong></p><p>如果目的 MAC 地址为单播地址，该交换机会看帧中的目的 MAC 地址与 MAC 地址表中的条目是否匹配。如果表中存在该目的MAC地址，交换机会从指定端口转发帧。如果表中不存在该目的MAC地址，交换机会从除传入端口外的所有端口转发帧。这称为未知单播。</p><p><strong>注意</strong>: 如果目的 MAC 地址为广播或组播，该帧也将被泛洪到除传入端口外的所有端口。</p><p>交换机是从不同的设备接收帧，因此它可以通过检查每个帧的源 MAC 地址来填充它的 MAC 地址表。如果MAC 地址表包含目的MAC 地址，则交换机将“滤过”该帧并将其从单个端口转发出去。</p><h2 id="交换机速率-转发方法"><a href="#交换机速率-转发方法" class="headerlink" title="交换机速率/转发方法"></a>交换机速率/转发方法</h2><p>对于思科交换机，实际上有两种帧转发的方法，根据具体情况，有充分的理由使用其中一种来代替另一种。</p><p>在过去，交换机使用下面的两种转发方法之一来进行网络端口间的数据交换：</p><ul><li><strong>存储转发交换</strong> - 这个帧转发的方法接收整个帧并计算CRC。CRC 根据帧中的比特位为 1 的位数量，使用数学公式来确定收到的帧是否有错。如果 CRC 有效，则交换机查找目的地址，目的地址决定了转发接口。帧然后从正确的端口转发出去。</li></ul><p>ps：<em>发送节点会创建帧内容的逻辑摘要，称为循环冗余校验 cyclic redundancy check (CRC) 值。此值将放入帧校验序列 (FCS) 字段 frame check sequence中以代表帧内容。在以太网尾部，FCS 为接收节点提供一种方法，用于确定帧是否出现传输错误。</em></p><ul><li><strong>直通交换</strong> - 这种帧转发的方法在收到整个帧之前即转发帧。在可以转发帧之前，至少必须读取帧的目的地址。</li></ul><p><strong>存储转发交换</strong>的一大优点是，它可以在传播帧之前确定帧是否有错误。当在帧中检测到错误时，交换机丢弃该帧。丢弃有错的帧可减少损坏的数据所耗用的带宽量。存储转发交换对于融合网络中的服务质量 (QoS) 分析是必需的，在融合网络中，必须对帧进行分类以划分流量优先级。如 IP 语音数据流的优先级需要高于 Web 浏览流量。</p><p><strong>直通交换</strong>中，交换机在收到数据时立即处理数据，即使传输尚未完成。交换机只缓冲帧的一部分，缓冲的量仅足以读取目的 MAC 地址，以便确定转发数据时应使用的端口。目的 MAC 地址位于帧中前导码后面的前 6 个字节。交换机在其交换表中查找目的 MAC 地址，确定转发端口，然后通过指定的交换机端口将帧转发到其目的地。交换机对该帧不执行任何错误检查。</p><ul><li><strong>快速转发交换 -</strong> 快速转发交换提供最低程度的延时。快速转发交换在读取目的地址之后立即转发数据包。由于快速转发交换在收到整个数据包之前就开始转发，因此有时候中继数据包时会出错。这种情况并不经常发生，而且目的网络适配器在收到含错数据包时会将其丢弃。在快速转发模式下，延时是指从收到第一个位到传出第一个位之间的时间差。快速转发交换是典型的直通交换方法。<strong>Fast-forward switching</strong></li><li><strong>免分片交换 -</strong> 在免分片交换中，交换机在转发之前存储帧的前 64 个字节，原因是，大部分网络错误和冲突都发生在前 64 个字节。免分片交换在转发帧之前对帧的前 64 个字节执行小错误检查以确保没有发生过冲突，并且尝试通过这种方法来增强快速转发交换功能。免分片交换是存储转发交换的高延时和高完整性与快速转发交换的<strong>低延时和弱完整性之间的折衷</strong>。<strong>Fragment-free switching</strong></li></ul><p>某些交换机可配置为按端口执行直通交换，当达到用户定义的错误阈值时，这些端口自动切换为存储转发。当错误率低于该阈值时，端口自动恢复到直通切换。（牛啊！）</p><p>以太网交换机在转发帧之前，可以使用<strong>缓冲技术</strong>存储帧。当目的端口由于拥塞而繁忙时，也可以使用缓冲。交换机将帧存储起来，直到可以传输。</p><p>有两种内存缓冲方法：</p><table><thead><tr><th align="left">方法(………)</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>基于端口的内存</strong></td><td align="left">帧存储在链接到特定传入端口和传出 端口的队列中。只有当队列前面的所有帧都成功传输后， 才会将帧传输到传出端口。由于目地端口繁忙， 单个帧可能会造成内存中所有帧的传输延迟。即使其他帧可以传送到开放的目的端口， 这种延迟仍然会发生。</td></tr><tr><td align="left"><strong>共享内存</strong></td><td align="left">将所有帧存储到由所有交换端口共享的公共内存缓冲区中， 并且动态分配一个端口所需的 缓冲区内存量。缓冲区中的帧动态地链接到目的端口， 允许在一个端口上接收数据包，然后 在另一个端口上发送，而无需移动到另一个队列。</td></tr></tbody></table><p>而且<strong>共享内存缓冲也意味着存储较大帧的能力，丢弃的帧可能较少</strong>。这对于非对称交换非常重要，因为它允许在不同端口上使用<strong>不同的数据速率</strong>，比如将服务器连接到 10 Gbps 的交换机端口，而pc连接到 1 Gbps 的端口。</p><p>交换机上最基本的两个设置是带宽(有时称为“速率”)和每个交换机端口的双工设置。交换机端口和连接的设备（例如计算机或另一台交换机）的双工设置和带宽设置必须匹配。</p><p>自动协商是大多数以太网交换机和网卡的一项可选功能。它使两个设备自动协商最佳速率和双工性能。如果两台设备具有最高常见带宽的功能，则会选择全双工。</p><p><strong>注意</strong>: 大多数思科交换机和以太网网卡默认采用自动协商功能，以提高速率和实现双工。千兆以太网端口仅以全双工模式运行。</p><p>当链路上的一个或两个端口被重置时，会发生双工不匹配，自动协调过程并不会使链路上的两个端口的配置相同。当用户重新配置链路的一端而忘记重新配置另一端时，也会出现这样的情况。链路的两端均应都使用或都不使用自动协商。最佳实践是将两个以太网交换端口都配置为全双工。</p><h2 id="Auto-MDIX"><a href="#Auto-MDIX" class="headerlink" title="Auto-MDIX"></a>Auto-MDIX</h2><p>现在，大多数交换机设备都支持自动介质相关接口交叉 (auto-MDIX) 功能。当该功能启用时，交换机可检测连接到端口的线缆类型，并相应地配置接口。因此，如果要连接到交换机上的铜缆 10/100/1000 端口，您既可以使用交叉线，也可以使用直通线，而无需考虑连接另一端的设备类型。</p><p>在运行思科 IOS Release 12.2(18)SE 或更高版本的交换机上，默认启用 auto-MDIX 功能。当然，该功能可以被禁用。因此，您应始终使用正确的线缆类型，而不是依赖auto-MDIX 功能。Auto-MDIX 可以使用接口配置命令 <strong>mdix auto</strong> 重新启用。</p><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p>要向不在本地网络上的任何人发送电子邮件（视频或文件等），您必须能够访问路由器。要访问路由器，您必须使用网络层协议。</p><h2 id="网络层特征"><a href="#网络层特征" class="headerlink" title="网络层特征"></a>网络层特征</h2><p>网络层即 OSI 第 3 层，提供能够<em><strong>让终端设备跨整个网络交换数据的服务</strong></em></p><p>IP 版本 4 (IPv4) 和 IP 版本 6 (IPv6) 是主要的网络层通信协议。其他网络层协议包括路由协议，如开放式最短路径优先协议(OSPF)，和消息传递协议，如Internet控制消息协议(ICMP)。</p><p>为了实现跨网络边界的端到端通信，网络层协议执行四个基本操作:</p><ul><li>**终端设备编址 - 必须为终端设备配置唯一的 IP 地址，以便在网络上进行识别。</li><li>**封装 - 网络层将来自传输层的协议数据单元 (PDU) 封装到数据包中。封装过程中会添加 IP 报头信息，例如来源（发送）和目的（接收）主机的 IP 地址。封装过程由 IP 数据包的源主机执行。</li><li>**路由 - 网络层提供服务，将数据包转发至另一网络上的目的主机。要传送到其他网络，数据包必须经过路由器的处理。路由器的作用是<strong>为数据包选择最佳路径，并将其转发至目的主机，该过程称为路由</strong>。数据包可能需要经过很多路由器才能到达目的主机。数据包在到达目的主机的过程中经过的每个路由器均称作一跳。</li><li>**解封 - 当数据包到达目的主机的网络层时，主机会检查数据包的 IP 报头。如果在报头中的目的 IP 地址与其自身的 IP 地址匹配，IP 报头将被会从数据包中删除。网络层解封数据包后，后继的第 4 层 PDU 会向上传递到传输层的相应服务。解封过程由 IP 数据包的目的主机执行。</li></ul><p>传输层（OSI 第 4 层）负责管理每台主机上的运行进程之间的数据传输，而网络层通信协议（即，IPv4和IPv6）则指定从一台主机向另一台主机传送数据时使用的数据包结构和处理过程。网络层工作时<strong>无需考虑每个数据包中所携带的数据</strong>，这使其能够为多台主机之间的多种类型的通信传送数据包</p><p><strong>逐层封装数据的流程使我们可以开发和扩展位于不同层的服务而不影响其他层</strong>。这意味着传输层数据段可以随时通过 IPv4 或 IPv6 进行封装，或使用未来可能开发出的任何新协议进行封装。</p><p>从数据包离开源主机到达目的主机之前，IP编址信息保持不变，除非是由为IPv4执行网络地址转换(NAT)的设备进行转换。</p><p><em><strong>IP的基本特征</strong></em></p><p>IP 被设计为一种<strong>低开销</strong>协议。它只提供通过互连的网络系统从源主机向目的主机传送数据包所必需的功能。并不负责跟踪和管理数据包的流动。这些功能（如果需要）将由其他层的其他协议（主要是第 4 层的 TCP）执行。</p><p>IP的基本特征：</p><ul><li><strong>无连接</strong> - 发送数据包前不与目的地建立连接。IP 在转发数据包前，并不需要初步交换控制信息来创建端到端连接。</li><li><strong>尽力而为</strong> - IP本质上是<strong>不可靠</strong>的，因为不保证数据包交付。IP 也不需要报头中包含其他字段来维持建立的连接。此过程显著降低了 IP 的开销。但是，由于没有预先建立端到端连接，发送数据包时，发送方不知道目的地是否存在和正常运行，同时发送数据包时，也不会知道目的地是否接收数据包，或者，目的设备是否可以访问并读取数据包。确认由其他协议负责</li><li><strong>介质无关性</strong> - 其工作与传输数据的介质（即铜缆、光纤或无线）无关。如果数据包顺序错乱或丢失，则使用数据或上层服务的应用程序必须解决这些问题。这让 IP 可以非常有效地发挥作用。在 TCP/IP 协议簇中，可靠性是TCP协议在传输层的功能。IP 数据包既可以作为电信号通过铜缆传送，也可以作为光信号通过光纤传送或作为无线电信号无线传送。</li></ul><p>但是，网络层会考虑介质的一个重要特征：每种介质可以传输的最大 PDU 大小。此特征称为最大传输单位 (MTU)。数据链路层和网络层之间的部分控制通信就是确定数据包的最大尺寸<strong>。数据链路层将 MTU 值向上传送到网络层</strong>。网络层会由此确定可以传送的数据包的大小。</p><p>有时，中间设备（通常是路由器），在将IPv4数据包从一个介质转发到具有更小 MTU 的介质时，必须分割数据包。此过程称为数据包分片或分片。<strong>分片会导致延迟。IPv6 数据包不能被路由器分片。</strong></p><p>OSI传输层发送被封装在IPv4或IPv6包中的数据段</p><p>OSI数据链路层负责接收数据包并准备数据包以在通信介质上传输</p><h2 id="IPv4数据包"><a href="#IPv4数据包" class="headerlink" title="IPv4数据包"></a>IPv4数据包</h2><p>IPv4 是主要网络层通信协议之一。IPv4 数据包报头用于确保此数据包在到达目的地终端设备的路上被传递到其下一站。</p><p>IPv4 数据包报头是由包含重要数据包信息的字段组成。这些字段中包含的二进制数字由第 3 层进程进行检查。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314233828847.png" alt="image-20210314233828847"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314233849824.png" alt="image-20210314233849824"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314234312571.png" alt="image-20210314234312571"></p><p>其他字段用于重新排列分段的数据包。具体而言，IPv4 数据包使用标识符、标志和片偏移量字段跟踪分段。路由器从一种介质向具有较小 MTU 的另一种介质转发IPv4数据包时必须将它分片。</p><p>注意：选项和填充字段很少使用，因此不在本模块的介绍范围之内。</p><p><em><strong>8.2.3的视频描述wireshark中检测IPv4报头非常好！</strong></em></p><h2 id="IPv6数据包"><a href="#IPv6数据包" class="headerlink" title="*IPv6数据包"></a>*IPv6数据包</h2><p>IPv6它最终将取代 IPv4</p><p>多年来，为应对新的挑战，已经制定了附加议定书和规程。但是，尽管经历了多次变更，IPv4 仍然有三个重要问题：</p><ul><li><strong>IPv4地址耗尽 -</strong> IPv4 的可用唯一公有地址数量有限。尽管有大约 40 亿的 IPv4 地址，但是支持 IP 的新设备数量的不断增加，以及始终在线的连接的增加，和欠发达地区的潜在连接的增加，不断催生更多的地址需求。</li><li><strong>缺乏端到端连接 -</strong> 网络地址转换 (NAT) 是 IPv4 网络中经常实施的一项技术。NAT 为多种设备共享单一的公有 IPv4 地址提供方法。但是，因为共享了公有 IPv4 地址，内部网络主机的 IPv4 地址会隐藏起来。这会给需要端到端连接的技术造成难题。</li><li><strong>增加的网络复杂性</strong> - 虽然NAT延长了IPv4的寿命，但它只是作为一种过渡到IPv6的机制。NAT在其各种实施中增加了网络的复杂性，从而造成延迟并使故障排除更加困难。</li></ul><p>IPv6 的功能提升包括以下：</p><ul><li><strong>更大的地址空间</strong> - IPv6 地址基于 128 位分层编址，而 IPv4 采用的是 32 位。</li><li><strong>改进数据包处理过程</strong> - IPv6 报头简化为更少的字段。</li><li><strong>消除了对 NAT 的需求</strong> - 有了数额如此巨大的公有 IPv6 地址，私有 IPv4 地址和公有 IPv4 地址之间不再需要 NAT。这可避免需要端到端连接的应用程序遇到某些由 NAT 引起的故障。</li></ul><p>32 位的 IPv4 地址空间提供大约 4,294,967,296 个地址。IPv6 地址空间提供 340,282,366,920,938,463,463,374,607,431,768,211,456 个或 340 涧（10 的 36 次方）个地址。这大致相当于地球上的每一粒沙子。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314235834424.png" alt="image-20210314235834424"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210315000426978.png" alt="image-20210315000426978"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210315000511899.png" alt="image-20210315000511899"><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210315000554634.png" alt="image-20210315000554634"></p><p>共40个八位组，8个报头字段</p><h2 id="主机路由方式"><a href="#主机路由方式" class="headerlink" title="主机路由方式"></a>主机路由方式</h2><p>对于IPv4和IPv6，数据包总是在源主机上创建。源主机必须能够将数据包定向到目的主机。为此，主机终端设备将创建自己的路由表。本主题讨论终端设备如何使用路由表。</p><p>网络层的另一个作用是在主机之间转发数据包。主机可以将数据包发送至如下：</p><ul><li><strong>主机自己</strong> - 主机可以通过向特定的地址发送数据包来向自己发起ping测试，这个特定的地址是：IPv4地址127.0.0.1，或者IPv6地址 ::1，它被称为<strong>环回接口</strong>。对环回接口执行 ping 操作可以测试主机上的 TCP/IP 协议堆栈。</li><li><strong>本地主机</strong> - 目的主机与发送主机位于同一本地网络。源和目的主机共享同一个网络地址。</li><li><strong>远程主机</strong> - 这是位于远程网络上的目的主机。源和目的主机不共享同一个网络地址。</li></ul><p>数据包是要发送到本地主机还是远程主机是由源端设备决定的。源端设备确定目的 IP 地址是否与源设备本身所在的网络相同。确定方法因 IP 版本不同而异：</p><ul><li><strong>在 IPv4 中</strong> -源设备使用自己的子网掩码以及自己的 IPv4 地址和目的 IPv4 地址来进行此判断。</li><li><strong>在 IPv6 中</strong> -本地路由器将本地网络地址（前缀）通告给网络上的所有设备</li></ul><p>在家庭或企业网络中，您可能有若干通过中间设备（LAN 交换机和/或无线接入点 (WAP) 等）互联的有线和无线设备。这种中间设备在本地网络上的本地主机之间提供互联服务。本地主机可以互相访问和共享信息，无需任何附加设备。如果主机要将数据包发送到与本主机在同一 IP 网络中的设备，<strong>则数据包仅是被转发出主机接口，然后经过中间设备即可直接到达目的设备（不必经手路由器）。</strong></p><p>当然，在大多数情况下我们希望我们的设备不仅仅能够连接本地网段，还能连接其他家庭、企业和互联网。位于本地网段外的设备称为远程主机。如果源设备发送数据包到远程目的设备，则需要借助路由器和路由。路由是确定到达目的地之最佳路径的过程。<strong>连接到本地网段的路由器称为默认网关Defalut Gateway。</strong></p><p><strong>默认网关</strong>Default Gateway是可以将流量路由到其他网络的网络设备(即，路由器或第3层交换机)。如果把一个网络比作一个房间，那么默认网关就好比是门口。如果要去另一个房间或网络，您就需要找到门口。</p><p>在网络上，默认网关通常是具有以下功能的路由器：</p><ul><li>它拥有与本地网络其他主机位于相同地址范围的本地 IP 地址。</li><li>它可以接受数据到本地网络，并将数据转发出本地网络。</li><li>它向其他网络路由流量。</li></ul><p>需要使用默认网关来发送本地网络之外的流量。如果没有默认网关、未配置默认网关地址或默认网关关闭，则无法将流量转发到本地网络之外。</p><p>主机的路由表通常包括默认网关。在IPv4中，主机通过动态主机配置协议 (DHCP) 动态接收默认网关 IPv4 地址，或者通过手动配置。在 IPv6 中，路由器通告默认网关地址，或者可以在主机上手动配置。</p><p><strong>配置默认网关会在 PC 的路由表中创建一个默认路由</strong>。默认路由是计算机尝试联系远程网络时所用的路由或路径。</p><h2 id="路由简介"><a href="#路由简介" class="headerlink" title="路由简介"></a>路由简介</h2><p>当数据包到达路由器接口时会发生什么?</p><p>路由器会检查数据包的目的 IP 地址并搜索其路由表以确定将数据包转发到何处。路由表包含所有<strong>已知网络地址（前缀）以及数据包转发位置</strong>的列表。这些条目称为路由条目或路由。路由器将使用最佳（最长）匹配的路由条目转发数据包。</p><p>路由表存储三种类型的路由条目：</p><ul><li><strong>直连网络-</strong> 这些网络路由条目是活动的路由器接口。当接口配置了 IP 地址并激活时，路由器会添加直连路由。每个路由器接口均连接到一个不同的网段。在图中，R1 IPv4路由表中的直连网络为192.168.10.0/24和209.165.200.224/30。</li><li><strong>远程网络</strong> - 这些网络路由条目连接到其他路由器。路由器通过由管理员明确配置或使用动态路由协议交换路由信息来学习远程网络。在图中，R1 IPv4路由表中的远程网络为10.1.1 /24。</li><li><strong>默认路由</strong> -像主机一样，大多数路由器还包含默认路由条目，即默认网关。当IP路由表中没有更好(更长)的匹配时，将使用默认路由。在图中，R1 IPv4路由表很可能包含一个将所有数据包转发到路由器R2的默认路由。</li></ul><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210315124026095.png" alt="image-20210315124026095"></p><p>路由器可通过两种方式获知远程网络：</p><ul><li><strong>手动</strong> - 使用静态路由将远程网络手动输入到路由表中。</li><li><strong>动态</strong> - 使用动态路由协议自动学习远程路由。</li></ul><p><em><strong>静态路由</strong></em></p><p>手动配置的路由条目</p><p>静态路由包括远程网络地址和下一跳路由器的IP地址。</p><p>ip route 远程网络地址 下一跳路由器的IP地址</p><p>如果网络拓扑改变，静态路由不会自动更新，必须手动重新配置静态路由</p><p>静态路由具有以下特征：</p><ul><li>必须手动配置静态路由。</li><li>如果拓扑发生变化，且静态路由不再可用，则管理员需要重新配置静态路由。</li><li>静态路由适用于小型网络且当冗余链路很少或没有冗余链路的情况。</li><li>静态路由通常与动态路由协议一起用于配置默认路由。</li></ul><p><em><strong>动态路由</strong></em></p><p>动态路由协议可让路由器从其他路由器那里自动学习远程网络，包括默认路由。如果使用动态路由协议，则路由器无需网络管理员的参与，即可自动与其它路由器共享路由信息并对拓扑结构的变化作出反应。如果网络拓扑发生变化，路由器将使用动态路由协议共享此信息，并自动更新路由表。</p><p>动态路由协议包括OSPF（开放最短路径优先协议）和增强型内部网关路由协议 (EIGRP)</p><p>基本配置只需要网络管理员在动态路由协议中启用直连网络。动态路由协议将自动执行如下操作：</p><ul><li>发现远程网络</li><li>维护最新路由信息</li><li>选择通往目的网络的最佳路径</li><li>当前路径无法再使用时尝试找出新的最佳路径</li></ul><p>当使用静态路由手动配置路由器或使用动态路由协议动态学习远程网络时，远程网络地址和下一跳地址将被输入到IP路由表中。如图所示，如果网络拓扑发生变化，路由器将自动调整并尝试找到新的最佳路径。（R1,2,3正在使用动态路由协议OSPF）</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210315124816720.png" alt="image-20210315124816720"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210315125544736.png" alt="image-20210315125544736"></p><p><em><strong>8.5.5大致介绍挺好的</strong></em></p><p>每个路由表条目的开头都有一个代码，用于标识路由的类型或路由的学习方式。常见路由源（代码）包括以下内容：</p><ul><li><strong>L</strong> - 该网络所直连的它的本地接口的 IP 地址</li><li><strong>C</strong> - 直连网络</li><li><strong>S</strong> - 静态路由由管理员手动配置</li><li><strong>O</strong> - OSPF</li><li><strong>D</strong> - EIGRP</li></ul><p>默认路由具有全都是零的网络地址。例如，IPv4 网络地址为 0.0.0.0。路由表中的静态路由条目以 S\ * 的代码开头</p><h1 id="地址解析！"><a href="#地址解析！" class="headerlink" title="地址解析！"></a>地址解析！</h1><p>主机和路由器都创建路由表，以确保它们可以跨网络发送和接收数据。那么这些信息是如何在路由表中被创建的呢? 作为网络管理员，您可以手动输入这些 MAC 和 IP 地址。但这将花费大量时间，而且犯一些错误的可能性很大。您是否认为一定有某种方式，由主机和路由器可以自动完成? 当然，您是对的！即使它是自动的，您仍然必须要了解它是如何工作的，因为您可能会需要排除一些故障，或更糟的是，您的网络可能会受到威胁发起者的攻击。</p><h2 id="MAC-and-IP"><a href="#MAC-and-IP" class="headerlink" title="MAC and IP"></a>MAC and IP</h2><p>（复习）以太网 LAN 上的设备都配有两个主要地址：</p><ul><li><strong>物理地址（MAC 地址）</strong> – 用于同一网络上的以太网网卡之间的通信。</li><li><strong>逻辑地址（IP地址）</strong> – 用于将数据包从源设备发送到目的设备。目的IP地址可能与源地址在同一个IP网络上，也可能在远程网络上。</li></ul><p>第二层物理地址(即以太网MAC地址)用于将数据链路层帧从同一网络中一个网卡发送到另一个网卡， IP 数据包就封装在帧中。<br>如果目的IP地址在同一网络上，则目的MAC地址将是目的设备的MAC地址。<br>当目的 IP 地址(IPv4或IPv6)处于远程网络中时，则目的 MAC 地址为主机的默认网关的地址(即路由器接口)</p><p>数据流中 IP 数据包的 IP 地址如何与通往目的地路径中每条链路上的 MAC 地址相关联？对于IPv4数据包，这可以通过地址解析协议 (ARP) 过程来完成。对于IPv6数据包，这个过程是ICMPv6邻居发现(ND)。</p><h2 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h2><p>IPv4当将帧发送到另一个远程网络时，只知道IP地址，要获得MAC地址得使用ARP帮助</p><p>ARP 提供两个基本功能：</p><ul><li>将 IPv4 地址<strong>解析</strong>为 MAC 地址</li><li><strong>维护IPv4到MAC地址映射表</strong></li></ul><p>当数据包发送到要封装入以太网帧的数据链路层时，设备将参照其<strong>内存中的表来</strong>查找映射至 IPv4 地址的 MAC 地址。此表临时存储在<strong>RAM</strong>内存中，称为 ARP 表或 ARP 缓存。</p><p>发送设备会在自己的 ARP 表中搜索目的 IPv4 地址和相应的 MAC 地址。</p><ul><li>如果数据包的目的 IPv4 地址与源 IPv4 地址处于同一个网络，则设备会在 ARP 表中搜索目的 IPv4 地址。</li><li>如果目的 IPv4 地址与源 IPv4 地址不在同一个网络中，则设备会在 ARP 表中搜索默认网关的 IPv4 地址。</li></ul><p>这两种情况都是搜索设备的 IPv4 地址和与其相对应的 MAC 地址。</p><p>ARP 表中的每一条（或每行）将一个 IPv4 地址与一个 MAC 地址绑定。我们把两个值之间的关系称为<strong>映射</strong>。这意味着您可以在表中查找 IPv4 地址并发现相应的 MAC 地址。ARP 表暂时保存（缓存）LAN 上设备的映射。</p><p><em><strong>ARP 请求。</strong></em></p><p>当设备需要确定与 IPv4 地址关联的 MAC 地址，而它的 ARP 表中没有该 IPv4 地址条目时，会发送一个 ARP 请求。</p><p><strong>ARP 消息直接封装到以太网帧中。没有 IPv4 报头</strong>。ARP 请求使用以下帧头信息封装在以太网帧中：</p><ul><li><strong>目的 MAC 地址</strong> – 这是一种要求 LAN 上的所有以太网网卡接受并处理 ARP 请求的<strong>广播地址FF-FF-FF-FF-FF-FF</strong>。</li><li><strong>源 MAC 地址</strong> – 这是ARP请求发送方的MAC地址。</li><li><strong>类型</strong> - ARP 消息的类型字段为 0x806。该类型字段会通知接收网卡需要将帧的数据部分传递给 ARP 进程处理。</li></ul><p>因为 ARP 请求属于广播，交换机会将其泛洪到除接收端口外的其他所有端口。局域网上的所有以太网网卡都会处理广播，并且必须将ARP请求发送到其操作系统进行处理。每台设备必须处理 ARP 请求，以检查目的 IPv4 地址是否与其自己的地址相匹配。<strong>路由器不会将广播转发到其他接口。</strong>不会干扰别人家的局域网</p><p><em><strong>ARP应答</strong></em></p><p>LAN 上只有一台设备的 IPv4 地址与 ARP 请求中的目的 IPv4 地址相匹配。所有其他设备将不应答。</p><p>只有具有与ARP请求相应的目的IPv4地址的设备才会以ARP应答做出响应。ARP 应答使用以下帧头信息封装在以太网帧中：</p><ul><li><p><strong>目的 MAC 地址</strong> – 这是ARP请求发送方的MAC地址。</p></li><li><p><strong>源 MAC 地址</strong> – 这是ARP应答发送方的MAC地址。</p></li><li><p><strong>类型</strong> – ARP 消息的类型字段为 0x806。该类型字段会通知接收网卡需要将帧的数据部分传递给 ARP 进程处理。</p><p> 只有原始发送 ARP 请求的设备会收到单播 ARP 应答。收到该 ARP 应答后，设备会将 IPv4 地址及相应的 MAC 地址添加到自身的 ARP 表中。该 IPv4 地址的数据包现在便可使用其相应的 MAC 地址封装在帧中。</p><p> 如果没有设备响应 ARP 请求，就无法创建帧，那么这个数据包会被丢弃。</p></li></ul><p>ARP 表中的条目具有时间戳。如果在时间戳到期前没有从特定设备收到帧，此设备的条目将会从 ARP 表中删除。</p><p><em>此外，也可以在 ARP 表中输入静态映射条目，但这种情况很少见。静态 ARP 表条目没有到期时间，必须手动删除。</em></p><p>默认网关的 IPv4 地址存储在主机的 IPv4 配置中。当主机创建通往某台目的主机的数据包时，会将目的 IPv4 地址与其自己的 IPv4 地址进行比较，以确定两个 IPv4 地址是否位于相同的第 3 层网络上。如果目的主机不在同一网络上，<strong>源主机将从 ARP 表中查找默认网关的 IPv4 地址条目。如果没有该条目，源主机将使用 ARP 流程来确定默认网关的 MAC 地址。</strong>不会连默认网关都没存吧。。</p><p>对于每台设备，ARP 缓存定时器将会删除在指定时间内未使用的 ARP 条目。时间根据设备的操作系统不同而不同。例如，较新的 Windows 操作系统将 ARP 表条目<strong>存储 15 秒到 45 秒</strong>之间</p><p>也可以使用命令来手动删除 ARP 表中的部分或全部条目。当条目被删除之后，要想在 ARP 表中输入映射，必须重复一次发送 ARP 请求和接收 ARP 回复的过程。</p><p>作为<strong>广播帧（IPv6是组播）</strong>，本地网络上的每台设备都会收到并处理 ARP 请求。在一般的商业网络中，这些广播对网络性能的影响可能微不足道。但是，如图所示，如果大量设备都已启动，并且同时开始使用网络服务，网络性能可能会有短时间的下降。在设备发出初始 ARP 广播并获取必要的 MAC 地址之后，网络受到的影响将会降至最小。</p><p>有时，使用 ARP 可能会造成潜在的安全风险。威胁发起者可以使用 ARP 欺骗来执行 ARP 毒化攻击。如图所示，威胁发起者使用这种技术来应答属于另一台设备（例如默认网关）的 IPv4 地址的 ARP 请求。威胁发起者会发送一个带有自己 MAC 地址的 ARP 应答。ARP 应答的接收方会将错误的 MAC 地址添加到其 ARP 表中，并将这些数据包发送给威胁发起者。 企业级的交换机包含称为动态 ARP 检查 (DAI) 的缓解技术。DAI 不在本课程的讨论范围之内。</p><h2 id="邻居发现"><a href="#邻居发现" class="headerlink" title="邻居发现"></a>邻居发现</h2><p>IPv6 邻居发现协议有时被称为 ND 或 NDP。在本课程中，我们称它为 ND。ND使用ICMPv6为IPv6提供地址解析、路由器发现和重定向服务。ICMPv6 ND 使用五种 ICMPv6 消息来执行这些服务：</p><ul><li>邻居请求消息</li><li>邻居通告消息</li><li>路由器请求消息</li><li>路由器通告消息</li><li>重定向消息</li></ul><p>邻居请求和邻居通告消息用于<strong>设备到设备</strong>的消息传递，例如地址解析（类似于 IPv4 的 ARP）。设备包括主机计算机和路由器。，一个不同点是，IPv4仅使用MAC来匹配，不涉及IP协议，邻居发现会使用ICMPv6把消息封装在IPv6报头中，再封入以太网头尾，目标IPv6会映射到特殊的IPv6目标组播地址，再映射成目标MAC组播地址，该过程会包含目的IPv6地址的很大一部分，反正最后就是不会有太多主机收到信息，比较节省，接受的设备将优先在以太网层匹配该组播地址，再向上检测IPv6层和ICMPv6</p><p>路由器请求和路由器通告消息用于设备和路由器之间的消息传递。通常，路由器发现用于<em><strong>动态地址分配和无状态地址自动配置 (SLAAC)。</strong></em></p><p><strong>注意</strong>: 第五个 ICMPv6 ND 消息是一个重定向消息，用于更好的下一跳选择。这不在本课程的讨论范围之内。</p><p>IPv6 ND 是在 IETF RFC 4861 中定义的。</p><p>ICMPv6 邻居请求和邻居通告消息用于MAC地址解析。这类似于ARP用于IPv4的ARP请求和ARP应答</p><p><strong>ICMPv6邻居请求消息使用特定的以太网和IPv6 组播 而不是广播地址发送。这允许接收设备的以太网卡确定邻居请求消息是否属于它自己，而不必将它发送到操作系统进行处理。</strong></p><h1 id="路由器基本配置"><a href="#路由器基本配置" class="headerlink" title="路由器基本配置"></a>路由器基本配置</h1><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>在路由器上配置初始设置时，应完成以下任务。</p><ol><li>配置设备名称。</li></ol><pre class="line-numbers language-none"><code class="language-none">Router(config)# hostname hostname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>\2. 保护特权模式。</p><pre class="line-numbers language-none"><code class="language-none">Router(config)# enable secret password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>\3. 保护用户模式</p><pre class="line-numbers language-none"><code class="language-none">Router(config)# line console 0Router(config-line)# password passwordRouter(config-line)# login<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>\4. 保护远程 Telnet / SSH 访问</p><pre class="line-numbers language-none"><code class="language-none">Router(config-line)# line vty 0 4Router(config-line)# password passwordRouter(config-line)# loginRouter(config-line)# transport input &#123;ssh | telnet&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>\5. 保护配置文件中的所有密码。</p><pre class="line-numbers language-none"><code class="language-none">Router(config-line)# exitRouter(config)# service password-encryption<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>\6. 提供法律通知。</p><p>法律通知警告用户只能由允许用户访问该设备。法律通知配置如下。</p><pre class="line-numbers language-none"><code class="language-none">R1(config)# banner motd #Enter TEXT message. End with a new line and the #*********************************************** WARNING: Unauthorized access is prohibited!***********************************************#R1(config)#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>\7. 保存配置。</p><pre class="line-numbers language-none"><code class="language-none">Router(config)# endRouter# copy running-config startup-config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="接口配置"><a href="#接口配置" class="headerlink" title="接口配置"></a>接口配置</h2><p>配置路由器接口的任务与交换机上管理 SVI 非常相似。具体来说，它包括发出以下命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Router(config)# interface type-and-numberRouter(config-if)# description description-textRouter(config-if)# ip address ipv4-address subnet-maskRouter(config-if)# ipv6 address ipv6-address&#x2F;prefix-lengthRouter(config-if)# no shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此表总结了用于验证接口配置的更常用 <strong>show</strong> 命令。</p><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>**show ip interface brief****show ipv6 interface brief**</code></td><td align="left">所有接口的输出显示,它们的IP地址和 当前的状态已配置和连接的接口的 状态和协议均会显示“up”; 显示任何其他内容都可能表示配置或 布线出现了问题。</td></tr><tr><td align="left"><code>**show ip route****show ipv6 route**</code></td><td align="left">显示存储在 RAM 中的 IP 路由表的内容。</td></tr><tr><td align="left"><code>**show interfaces**</code></td><td align="left">显示设备上所有接口的统计信息。然而,这个命令将只显示 IPv4 编址信息。</td></tr><tr><td align="left"><code>**show ip interface**</code></td><td align="left">显示路由器上所有接口的 IPv4 统计信息。</td></tr><tr><td align="left"><code>**show ipv6 interface**</code></td><td align="left">显示路由器上所有接口的 IPv6 统计信息。</td></tr></tbody></table><h2 id="配置默认网关"><a href="#配置默认网关" class="headerlink" title="配置默认网关"></a>配置默认网关</h2><p>如果您的本地网络只有一个路由器，它就将是网关路由器，并且必须使用此信息配置网络上的所有主机和交换机。如果您的本地网络有多个路由器，则必须选择其中一个作为默认网关路由器</p><p>连接客户端计算机的交换机通常是第 2 层设备。因此，第 2 层交换机不需要使用 IP 地址就能正常工作。但是，可以在交换机上配置 IP 配置，以便管理员能够远程访问交换机。</p><p>要通过本地 IP 网络连接和管理交换机，必须配置交换机虚拟接口 (SVI)。SVI 配置了本地局域网上的 IPv4 地址和子网掩码。要从远端网络管理交换机，必须给交换机配置一个默认网关。</p><p><strong>在会通过本地网络之外的方式通信的所有设备上，一般都会配置默认网关地址。</strong></p><p>要为交换机配置默认网关，请使用<strong>ip default-gateway</strong> ip-address 全局配置命令。配置的 IP 地址是连接到交换机的本地路由器接口的 IP 地址。</p><p>也可以使用 SVI 上的 IPv6 地址配置工作组交换机。但是，<strong>交换机不需要手动配置默认网关的 IPv6 地址。</strong>交换机将自动接收来自路由器的 ICMPv6 路由器公告消息的默认网关。</p><h2 id="测试链接"><a href="#测试链接" class="headerlink" title="测试链接"></a>测试链接</h2><p>您将使用的故障排除方法包含以下步骤：</p><p>a. 验证网络文档，并使用测试来查明问题。 </p><p>b. 为查明的问题确定一个适当的解决方案。 </p><p>c. 实施解决方案。 </p><p>d. 进行测试以验证问题是否已解决。</p><p> e. 记录解决方案。</p><p>在整个 CCNA 学习过程中，您会遇到不同的 故障排除方法，以及测试 并记录问题和解决方案的不同方法。这是有意设计的。故障排除没有固定的 标准或模板。每个组织都制定了独特的 流程和文档标准（有时候，一个组织的流程就是“我们没有 固定流程”）。但是，所有有效的故障排除方法通常都包括 上述步骤。</p><p>注意：通常不止一个解决方案。但是，排除故障的最佳做法是每次实施和验证一个解决方案。在更复杂的 情形中，实施多个解决方案会导致其他问题。</p><h1 id="遗漏知识"><a href="#遗漏知识" class="headerlink" title="*遗漏知识"></a>*遗漏知识</h1><h2 id="2-1-5终端仿真程序"><a href="#2-1-5终端仿真程序" class="headerlink" title="2.1.5终端仿真程序"></a>2.1.5终端仿真程序</h2><h2 id="2-3-8用Tera-Term连接控制台"><a href="#2-3-8用Tera-Term连接控制台" class="headerlink" title="2.3.8用Tera Term连接控制台"></a>2.3.8用Tera Term连接控制台</h2><h2 id="2-5-4捕获配置到文本中"><a href="#2-5-4捕获配置到文本中" class="headerlink" title="2.5.4捕获配置到文本中"></a>2.5.4捕获配置到文本中</h2><h1 id="真-命令集"><a href="#真-命令集" class="headerlink" title="真*命令集"></a>真*命令集</h1><p><strong>转载自：<a href="https://blog.csdn.net/qq_42833924/article/details/89790004">https://blog.csdn.net/qq_42833924/article/details/89790004</a><br>为自己学习方便故转载，如果大家觉得有帮助，请为原文点赞。</strong></p><p>1.基本配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token operator">></span> enable   从用户模式进入特权模式<span class="token class-name">R</span># disable  从特权模式退到用户模式<span class="token class-name">R</span># logout <span class="token punctuation">(</span>或exit<span class="token punctuation">)</span>   退出<span class="token class-name">Cisco</span>设备<span class="token class-name">R</span># show history 查看先前输入的命令（默认<span class="token number">10</span>个）<span class="token class-name">R</span># terminal history size #_of_commands  改变历史缓存的大小（最大<span class="token number">256</span>）<span class="token class-name">R</span># terminal no editing  禁用编辑特性（移去no参数为启用）<span class="token class-name">R</span># configure terminal   进入配置模式（退出为end或CTRL<span class="token operator">-</span><span class="token class-name">Z</span>）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># hostname name    改变路由器的名称<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># banner motd delimiting_character banner_character delimiting_character   设置登录横幅<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>line<span class="token punctuation">)</span># exec<span class="token operator">-</span>timeout minutes_# seconds_#    更改休止超时（默认<span class="token number">10</span>分钟）<span class="token class-name">R</span># show hosts   查看路由器解析表中的静态和动态DNS条目<span class="token class-name">R</span><span class="token operator">></span> show version 查看路由器综合信息<span class="token class-name">R</span># show line    验证线路的配置<span class="token class-name">R</span># show processes   查看设备的各个进程的CPU使用率<span class="token class-name">R</span># show users   查看登录到这台设备上的所有用户<span class="token class-name">R</span># show sessions    查看当前挂起的已经打开的telnet会话<span class="token class-name">R</span># term ip netmask<span class="token operator">-</span>format bit<span class="token operator">-</span>count<span class="token operator">|</span>decimal<span class="token operator">|</span>hexadecimal 改变子网掩码显示方式（在当前登录会话期间有效，在子线路模式下即可保存）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip host name_of_host <span class="token punctuation">[</span><span class="token class-name">TCP_port_</span>#<span class="token punctuation">]</span> <span class="token class-name">IP_address</span> <span class="token punctuation">[</span>…<span class="token punctuation">]</span> 创建主机静态解析表（可指定多达<span class="token number">8</span>个IP地址）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip name<span class="token operator">-</span>server <span class="token class-name">IP_address_of_DNS_server</span> <span class="token punctuation">[</span>…<span class="token punctuation">]</span>  配置通过访问DNS服务器动态解析主机（可指定多达<span class="token number">6</span>个DNS服务器）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># no ip domain<span class="token operator">-</span>lookup  禁用DNS查询<span class="token class-name">R</span><span class="token operator">></span> ping destination_IP_address_or_host_name 查看与目的主机的连通性<span class="token class-name">R</span><span class="token operator">></span> traceroute destination_IP_address_or_host_name   查看与目的主机间的路由器<span class="token class-name">R</span># <span class="token punctuation">[</span>telnet<span class="token operator">|</span>connect<span class="token punctuation">]</span> name_of_the_destination<span class="token operator">|</span>destination_IP_address  打开telnet会话<span class="token class-name">R</span># resume connection_#  恢复一个特定的会话<span class="token class-name">R</span># disconnect connection_#  结束一已挂起的telnet会话无须恢复它并随后从中退出<span class="token class-name">R</span># clear line line_#    结束某人的会话<span class="token class-name">R</span># no debug all <span class="token punctuation">(</span>或undebug all<span class="token punctuation">)</span>  禁用debug<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># service timestamps debug datetime msec   在debug输出中显示时间戳<span class="token class-name">R</span># terminal monitor 从VTY或辅助线路端口登录执行，路由器将在屏幕上显示报告消息<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>line<span class="token punctuation">)</span># logging synchronous在该线路上报告信息后路由器在新提示符后重新显示未打完的命令<span class="token number">123456789101112131415161718192021222324252627282930</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.文件操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span># show running<span class="token operator">-</span>config  查看正在运行（当前）的配置文件<span class="token class-name">R</span># show startup<span class="token operator">-</span>config  查看NVRAM中的配置文件<span class="token class-name">R</span># copy running<span class="token operator">-</span>config<span class="token operator">|</span>startup<span class="token operator">-</span>config tftp  将配置备份到TFTP服务器<span class="token class-name">R</span># copy tftp startup<span class="token operator">-</span>config<span class="token operator">|</span>running<span class="token operator">-</span>config  从TFTP服务器将配置恢复到路由器<span class="token class-name">R</span># copy startup<span class="token operator">-</span>config running<span class="token operator">-</span>config   从NVRAM中将配置恢复到RAM中<span class="token class-name">R</span># copy running<span class="token operator">-</span>config startup<span class="token operator">-</span>config   将RAM中的配置文件保存到NVRAM<span class="token class-name">R</span># erase startup<span class="token operator">-</span>config 删除NVRAM中的配置文件<span class="token class-name">R</span># copy flash tftp  备份IOS镜像到TFTP服务器<span class="token class-name">R</span># show flash   查看闪存中的文件<span class="token number">123456789</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.启动配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span># setup    运行系统配置会话<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># boot system flash name_of_IOS_file_in_flash  启动时加载闪存中的指定IOS文件<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># boot system tftp <span class="token class-name">IOS_image_name</span> <span class="token class-name">IP_address_of_server</span> 启动时加载TFTP服务器里的IOS文件<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># boot system rom  启动时加载ROM中的迷你IOS文件（启动与这三个命令的顺序有关）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># config<span class="token operator">-</span>register <span class="token number">0</span>x hexadecimal_value 改变寄存器的值rommon <span class="token number">5</span><span class="token operator">></span> confreg <span class="token number">0x2142</span>    <span class="token number">2600</span>、<span class="token number">3600</span>系列启动后按CTRL<span class="token operator">-</span>BREAK进入ROMMON模式，改变寄存器的值<span class="token class-name">R</span><span class="token operator">></span> o<span class="token operator">/</span>r <span class="token number">0x2142</span>   其他系列路由器改变寄存器的值的方法<span class="token number">1234567</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.密码设置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># line console <span class="token number">0</span>   进入控制台接口配置模式<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>line<span class="token punctuation">)</span># password console_password   配置控制台口令<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># line vty <span class="token number">0</span> <span class="token number">4</span> 进入虚拟终端线路配置模式（根据路由器及IOS最少<span class="token number">5</span>个直到很多）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>line<span class="token punctuation">)</span># login   接上条命令，允许进行<span class="token class-name">Telnet</span>访问<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>line<span class="token punctuation">)</span># password telnet_password    接上条命令，配置<span class="token class-name">Telnet</span>口令<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># line aux <span class="token number">0</span>   进入辅助端口配置模式<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>line<span class="token punctuation">)</span># password console_password   接上条命令，配置辅助端口口令<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># enable password privileged_password  配置特权EXEC口令（不加密）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># enable secret privileged_password    配置特权EXEC口令（加密）<span class="token number">123456789</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.接口配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># <span class="token keyword">interface</span> type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#  进入接口子配置模式<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># description interface_description 添加接口描述<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># no shutdown   启用该接口<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># <span class="token keyword">interface</span> loopback port_#    创建环回接口<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># media<span class="token operator">-</span>type aui<span class="token operator">|</span><span class="token number">10</span>baset<span class="token operator">|</span><span class="token number">100</span>baset<span class="token operator">|</span>mii   指定该接口连接的介质类型<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># speed <span class="token number">10</span><span class="token operator">|</span><span class="token number">100</span><span class="token operator">|</span>auto 指定该接口速率<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># <span class="token punctuation">[</span>no<span class="token punctuation">]</span> half<span class="token operator">-</span>duplex  指定该接口双工模式<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># clock rate rate_in_bits_per_second    指定该DCE串行接口速率<span class="token class-name">R</span><span class="token operator">></span> show controller serial <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#  验证该接口是DCE还是DTE，注意空格<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># bandwidth rate_in_Kbps    改变该接口的带宽值<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip address <span class="token class-name">IP_address</span> subnet_mask 配置该接口IP地址<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip subnet<span class="token operator">-</span>zero   IOS12<span class="token punctuation">.</span><span class="token number">0</span>前默认禁用<span class="token number">0</span>子网，此命令为启用<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip directed<span class="token operator">-</span>broadcast IOS12<span class="token punctuation">.</span><span class="token number">0</span>后默认禁用定向广播，此命令为启用<span class="token class-name">R</span># show interfaces <span class="token punctuation">[</span>type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#<span class="token punctuation">]</span>  验证接口配置<span class="token class-name">R</span># show ip interfaces <span class="token punctuation">[</span>type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#<span class="token punctuation">]</span> <span class="token punctuation">[</span>brief<span class="token punctuation">]</span>   验证接口IP配置<span class="token number">123456789101112131415</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.CDP</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># <span class="token punctuation">[</span>no<span class="token punctuation">]</span> cdp run 启用<span class="token operator">/</span>禁用CDP<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># <span class="token punctuation">[</span>no<span class="token punctuation">]</span> cdp enable   基于接口启用<span class="token operator">/</span>禁用CDP<span class="token class-name">R</span># show cdp 查看CDP状态<span class="token class-name">R</span># show cdp <span class="token keyword">interface</span>   查看基于接口的CDP配置<span class="token class-name">R</span># show cdp neighbors <span class="token punctuation">[</span>detail<span class="token punctuation">]</span>  查看与用户<span class="token class-name">Cisco</span>设备相连的CDP邻居的摘要<span class="token operator">/</span>详细清单<span class="token class-name">R</span># show cdp entry neighbor's_name   查看一个指定邻居的详细信息<span class="token class-name">R</span># show cdp traffic 查看CDP通信量的统计信息<span class="token number">1234567</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.路由</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip route destination_network_# <span class="token punctuation">[</span>subnet_mask<span class="token punctuation">]</span> <span class="token class-name">IP_address_of_next_hop_neighbor</span><span class="token operator">|</span>interface_to_exit <span class="token punctuation">[</span>administrative_distance<span class="token punctuation">]</span> <span class="token punctuation">[</span>permanent<span class="token punctuation">]</span> 配置IP静态路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip route <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token class-name">IP_address_of_next_hop_neighbor</span><span class="token operator">|</span>interface_to_exit <span class="token punctuation">[</span>administrative_distance<span class="token punctuation">]</span> <span class="token punctuation">[</span>permanent<span class="token punctuation">]</span> 配置默认路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip classless 使有类协议接受非一致性子网掩码或不连续子网<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># <span class="token keyword">interface</span> type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#<span class="token punctuation">.</span> subinterface_# <span class="token punctuation">[</span>point<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>point<span class="token operator">|</span>multipoint<span class="token punctuation">]</span>  创建子接口<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>subif<span class="token punctuation">)</span># encapsulation isl<span class="token operator">|</span>dotlq VLAN_# 指定子接口中继类型和相关的VLAN<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># router name_of_the_IP_routing_protocol   进入路由选择协议的配置模式<span class="token class-name">R</span># show ip route    查看IP路由表<span class="token number">1234567</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8.RIP</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># router rip   配置IP RIP<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># network <span class="token class-name">IP_network_</span>#  指定哪些接口参与路由选择进程<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># version <span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span>   只接受和发送RIP版本<span class="token number">1</span>或<span class="token number">2</span>（默认只产生<span class="token class-name">RIPv1</span>更新，而两个版本的更新都接收）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># ip rip send<span class="token operator">|</span>receive version <span class="token number">1</span> <span class="token operator">|</span> version <span class="token number">2</span> <span class="token operator">|</span> version <span class="token number">1</span> <span class="token number">2</span>   在特定接口上控制在发送或接收RIP更新时使用哪个版本的RIP<span class="token class-name">R</span># show ip protocols    查看在路由器上已配置并运行的所有IP路由选择协议<span class="token class-name">R</span># show ip route <span class="token punctuation">[</span>name_of_the_IP_routing_protocol<span class="token punctuation">]</span>  查看路由选择表<span class="token class-name">R</span># debug ip rip 帮助进行故障排除<span class="token number">1234567</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9.IGRP</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># router igrp AS_# 配置IP IGRP<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># network <span class="token class-name">IP_network_</span>#  通告网络号<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_of_neighbor</span>   配置单播更新<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># passive<span class="token operator">-</span><span class="token keyword">interface</span> type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#   允许该接口在IGRP中通告但它不监听或发送IGRP更新<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># traffic<span class="token operator">-</span>share min across<span class="token operator">-</span>interfaces   使路由器只使用最佳路径但又在路由选择表中放入替代路径<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># timers basic update_# invalid_# holddown_# flush_# <span class="token punctuation">[</span>sleeptime_#<span class="token punctuation">]</span>  调整定时器（默认时，update<span class="token operator">=</span><span class="token number">90</span>，invalid<span class="token operator">=</span><span class="token number">270</span>，holddown<span class="token operator">=</span><span class="token number">280</span>，flush<span class="token operator">=</span><span class="token number">630</span>）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># no metric holddown    关闭压制定时器（默认）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># distance administrative_distance_#    调整管理距离（取值范围是<span class="token number">1</span><span class="token operator">-</span><span class="token number">255</span>，默认为<span class="token number">100</span>）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># <span class="token keyword">default</span><span class="token operator">-</span>metric bandwidth_# delay_# reliability_# load_# MTU_# 调整度量值<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># metric weights tos_# K1_# K2_# K3_# K4_# K5_# 调整度量权重值（默认时，<span class="token function">K1</span><span class="token punctuation">(</span>带宽<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">K3</span><span class="token punctuation">(</span>可靠性<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span>，<span class="token function">K2</span><span class="token punctuation">(</span>延迟<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">K4</span><span class="token punctuation">(</span>负载<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">K5</span><span class="token punctuation">(</span>MTU<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span>）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># variance multiplier_# 启用IGRP非同等成本路径（变化因子值<span class="token number">1</span><span class="token operator">-</span><span class="token number">128</span>默认为<span class="token number">1</span>）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># traffic<span class="token operator">-</span>share balanced    配置负载均衡<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># maximum<span class="token operator">-</span>paths paths_# 配置负载均衡的路径条数（取值范围是<span class="token number">1</span><span class="token operator">-</span><span class="token number">6</span>）<span class="token class-name">R</span># debug ip igrp events 提供路由器和邻居间发生的每一步操作信息<span class="token class-name">R</span># debug ip igrp transactions   提供有关包含在路由更新中路由的详细信息<span class="token number">123456789101112131415</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.EIGRP</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># router eigrp AS_#    配置EIGRP<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># network <span class="token class-name">IP_network_</span>#  通告网络号<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip bandwidth<span class="token operator">-</span>percent eigrp AS_# percent_# 设置pacing（调速）占给定接口带宽的百分数（默认为<span class="token number">50</span><span class="token operator">%</span>）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># distance administrative_distance_#    调整管理距离（取值范围是<span class="token number">1</span><span class="token operator">-</span><span class="token number">255</span>，默认对于内部路由是<span class="token number">90</span>而外部是<span class="token number">170</span>）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># <span class="token keyword">default</span><span class="token operator">-</span>metric bandwidth_# delay_# reliability_# load_# MTU_# 调整度量值<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># metric weights tos_# K1_# K2_# K3_# K4_# K5_# 调整度量权重值（默认时，<span class="token function">K1</span><span class="token punctuation">(</span>带宽<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">K3</span><span class="token punctuation">(</span>可靠性<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span>，<span class="token function">K2</span><span class="token punctuation">(</span>延迟<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">K4</span><span class="token punctuation">(</span>负载<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">K5</span><span class="token punctuation">(</span>MTU<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span>）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip hello<span class="token operator">-</span>interval eigrp AS_# seconds_#    在给定接口上设置<span class="token class-name">Hello</span>间隔（默认对于低速的NBMA网络是<span class="token number">60</span>秒，其他是<span class="token number">5</span>秒）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip hold<span class="token operator">-</span>time eigrp AS_# seconds_# 在给定接口上设置<span class="token class-name">Hello</span>保持定时器（默认是<span class="token number">3</span>倍的<span class="token class-name">Hello</span>间隔）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># passive<span class="token operator">-</span><span class="token keyword">interface</span> type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#   允许该接口在EIGRP中通告但它不监听或发送EIGRP更新<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># no auto<span class="token operator">-</span>summary   取消对路由的自动汇总<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip summary<span class="token operator">-</span>address eigrp AS_# network_address network_mask    创建不在有类边界上的汇总地址<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># eigrp log<span class="token operator">-</span>neighbor<span class="token operator">-</span>changes   记录在某个邻居上发生的变化<span class="token class-name">R</span># show ip route eigrp  查看被EIGRP学习到的路由<span class="token class-name">R</span># show ip route network_address    查看指定目的地的路由信息<span class="token class-name">R</span># show ip eigrp topology   查看EIGRP的拓扑表<span class="token class-name">R</span># show ip eigrp interfaces     查看加入到EIGRP路由器所有接口的概述<span class="token class-name">R</span># show ip eigrp neighbor <span class="token punctuation">[</span>detail<span class="token punctuation">]</span>  显示和本路由器已形成邻居关系的所有路由器<span class="token class-name">R</span># show ip eigrp traffic    显示每个包类型的发出和接收的数量<span class="token class-name">R</span># show ip eigrp events 查看每个EIGRP事件的日志<span class="token class-name">R</span># debug ip eigrp   提供路由器和它的邻居之间发生的每一步操作<span class="token class-name">R</span># debug eigrp packets  查看在该路由器和它的邻居之间发送的数据包类型<span class="token class-name">R</span># debug eigrp neighbors    查看邻居的信息<span class="token number">12345678910111213141516171819202122</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11.OSPF</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># router ospf process_ID   配置OSPF<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># network <span class="token class-name">IP_address</span> wildcard_mask area area_#  指定接口进入OSPF区域<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip ospf cost cost_value   给接口指定成本（取值范围是<span class="token number">1</span><span class="token operator">-</span><span class="token number">65535</span>）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_of_neighbor</span>   手动配置邻居<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_of_neighbor</span> priority value    指定邻居的优先级（取值范围是<span class="token number">0</span><span class="token operator">-</span><span class="token number">255</span>，<span class="token number">255</span>为DR，<span class="token number">0</span>为不可能成为DR）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip ospf network non<span class="token operator">-</span>broadcast 手工配置非广播网络类型<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># area area_id stub 允许创建存根区域<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># area area_id stub no<span class="token operator">-</span>summary  允许创建完全存根区域<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># area area_id nssa 允许创建次存根区域<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># area area_id virtual<span class="token operator">-</span>link router_id   连接不连续区域为骨干区域<span class="token number">0</span><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># area area_id range network_address network_mask   在区域边界路由器上汇总在给定区域中的路由器使用的IP地址空间到其他的区域<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># summary<span class="token operator">-</span>address network_address network_mask  在自治系统边界路由器上汇总外部路由<span class="token class-name">R</span># show ip ospf 概述所有OSPF相关的信息<span class="token class-name">R</span># show ip ospf process<span class="token operator">-</span>id  与上相同，而不仅仅是指定的进程<span class="token class-name">R</span># show ip ospf border<span class="token operator">-</span>routers  显示在此自治系统中所有ABR和ASBR的路由器ID<span class="token class-name">R</span># show ip ospf database    显示链路状态数据库<span class="token class-name">R</span># show ip ospf <span class="token keyword">interface</span>   显示接口的OSPF参数和其他的指定到此接口上的OSPF信息<span class="token class-name">R</span># show ip ospf neighbor <span class="token punctuation">[</span>detail<span class="token punctuation">]</span>   显示每个OSPF邻居和邻接状态<span class="token class-name">R</span># debug ip ospf adj    报告路由器建立到其他路由器的邻接关系进程<span class="token class-name">R</span># debug ip ospf events 报告路由器上的OSPF事件<span class="token class-name">R</span># debug ip ospf packet 报告OSPF LSA分组的内容<span class="token number">123456789101112131415161718192021</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>12.ACL</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># access<span class="token operator">-</span>list <span class="token number">1</span><span class="token operator">-</span><span class="token number">99</span><span class="token operator">|</span><span class="token number">1300</span><span class="token operator">-</span><span class="token number">1999</span> permit<span class="token operator">|</span>deny source_IP_address <span class="token punctuation">[</span>wildcard_mask<span class="token punctuation">]</span> <span class="token punctuation">[</span>log<span class="token punctuation">]</span>    创建标准编号IP ACL<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip access<span class="token operator">-</span>group ACL_# in<span class="token operator">|</span>out  在指定接口上启动ACL<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>line<span class="token punctuation">)</span># access<span class="token operator">-</span><span class="token keyword">class</span> standard_ACL_# in<span class="token operator">|</span>out  在指定若干线路上启动ACL以限制对路由器的<span class="token class-name">Telnet</span>访问<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># access<span class="token operator">-</span>list <span class="token number">100</span><span class="token operator">-</span><span class="token number">199</span><span class="token operator">|</span><span class="token number">2000</span><span class="token operator">-</span><span class="token number">2699</span> permit<span class="token operator">|</span>deny <span class="token class-name">IP_protocol</span> source_address source_wildcard_mask <span class="token punctuation">[</span>protocol_information<span class="token punctuation">]</span> destination_address destination_wildcard_mask <span class="token punctuation">[</span>protocol_information<span class="token punctuation">]</span> <span class="token punctuation">[</span>log<span class="token punctuation">]</span>  创建扩展编号IP ACL<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip access<span class="token operator">-</span>list standard <span class="token class-name">ACL_name</span> 创建标准命名ACL（从IOS11<span class="token punctuation">.</span><span class="token number">2</span>开始支持）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>std<span class="token operator">-</span>acl<span class="token punctuation">)</span># permit<span class="token operator">|</span>deny source_IP_address <span class="token punctuation">[</span>wildcard_mask<span class="token punctuation">]</span>    输入标准ACL命令<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip access<span class="token operator">-</span>list extended <span class="token class-name">ACL_name</span> 创建扩展命名ACL（从IOS11<span class="token punctuation">.</span><span class="token number">2</span>开始支持）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>ext<span class="token operator">-</span>acl<span class="token punctuation">)</span># permit<span class="token operator">|</span>deny <span class="token class-name">IP_protocol</span> source_IP_address wildcard_mask <span class="token punctuation">[</span>protocol_information<span class="token punctuation">]</span> destination_IP_address wildcard_mask <span class="token punctuation">[</span>protocol_information<span class="token punctuation">]</span> <span class="token punctuation">[</span>log<span class="token punctuation">]</span> 输入扩展ACL命令<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip access_group <span class="token class-name">ACL_name</span> in<span class="token operator">|</span>out   启动命名ACL<span class="token class-name">R</span># show ip interfaces   验证访问列表<span class="token class-name">R</span># show access<span class="token operator">-</span>lists <span class="token punctuation">[</span>ACL_#_or_name<span class="token punctuation">]</span>    显示ACL中的语句<span class="token class-name">R</span># show ip access<span class="token operator">-</span>list <span class="token punctuation">[</span>ACL_#_or_name<span class="token punctuation">]</span>  显示IP ACL中的语句<span class="token class-name">R</span># clear access<span class="token operator">-</span>list counters <span class="token punctuation">[</span>ACL_#_or_name<span class="token punctuation">]</span>   对指定ACL中的匹配计数器清零<span class="token number">12345678910111213</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>13.NAT PAT 配置负载分发</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip nat inside source <span class="token keyword">static</span> inside_local_source_IP_address inside_global_source_IP_address   定义NAT静态转换<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip nat outside source <span class="token keyword">static</span> outside_global_destination_IP_address outside_local_destination_IP_address  定义NAT静态转换<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip nat inside<span class="token operator">|</span>outside 指定路由器上哪些接口在内部，哪些在外部<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip nat outside source list standard_IP_ACL_# pool <span class="token class-name">NAT_pool_name</span>  为重叠地址转换配置NAT<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip nat inside source list standard_IP_ACL_# pool <span class="token class-name">NAT_pool_name</span>   定义动态NAT，指定转换哪些内部设备的源地址<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip nat pool <span class="token class-name">NAT_pool_name</span> beginning_inside_global_IP_address ending_inside_global_IP_address netmask subnet_mask_of_addresses<span class="token operator">|</span>prefix<span class="token operator">-</span>length length   创建源内部全局IP地址池<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip nat inside source list standard_IP_ACL_# pool <span class="token class-name">NAT_pool_name</span> overload  定义PAT，指定哪台内部设备会转换其源地址<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip nat pool pool_name beginning_inside_local_IP_address ending_inside_local_IP_address prefix<span class="token operator">-</span>length subnet_mask_bits type rotary    指定提供服务的设备上配置的内部IP地址<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip nat inside destination list standard_ACL_# pool pool_name 指定外部设备用来访问内部资源的全局IP地址<span class="token class-name">R</span># show ip nat translations <span class="token punctuation">[</span>verbose<span class="token punctuation">]</span>   查看路由器上的（详细）地址转换信息<span class="token class-name">R</span># show ip nat statistics   查看路由器上的地址转换的统计信息<span class="token class-name">R</span># clear ip nat translation <span class="token operator">*</span>   清除所有NAT表项<span class="token class-name">R</span># clear ip nat translation inside<span class="token operator">|</span>outside global_IP_address<span class="token operator">|</span>local_IP_address   清除转换表中的指定动态条目<span class="token class-name">R</span># clear ip nat translation protocol inside global_IP_address global_port local_IP_address local_port   清除转换表中的指定动态条目<span class="token class-name">R</span># debug ip nat 提供IOS对每个已转换分组所做的转换<span class="token number">123456789101112131415</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>14.DHCP</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># <span class="token punctuation">[</span>no<span class="token punctuation">]</span> service dhcp    启用<span class="token operator">/</span>禁用DHCP（默认启用）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip dhcp pool pool_name   创建地址池<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>dhcp<span class="token punctuation">)</span># network network_number <span class="token punctuation">[</span>subnet_mask<span class="token operator">|</span><span class="token operator">/</span>prefix_length<span class="token punctuation">]</span> 指定分配给客户的IP地址范围<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>dhcp<span class="token punctuation">)</span># domain<span class="token operator">-</span>name domain_name 向客户分配域名<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>dhcp<span class="token punctuation">)</span># dns<span class="token operator">-</span>server <span class="token class-name">IP_address</span> <span class="token punctuation">[</span>…<span class="token punctuation">]</span>   指定最多<span class="token number">8</span>台DNS服务器分配给客户<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>dhcp<span class="token punctuation">)</span># netbios<span class="token operator">-</span>name<span class="token operator">-</span>server <span class="token class-name">IP_address</span> <span class="token punctuation">[</span>…<span class="token punctuation">]</span>  指定最多<span class="token number">8</span>台WINS服务器分配给客户<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>dhcp<span class="token punctuation">)</span># netbios<span class="token operator">-</span>node<span class="token operator">-</span>type node_type 向微软客户分配节点类型<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>dhcp<span class="token punctuation">)</span># <span class="token keyword">default</span><span class="token operator">-</span>router <span class="token class-name">IP_address</span> <span class="token punctuation">[</span>…<span class="token punctuation">]</span>   指定最多<span class="token number">8</span>条默认路由给客户用于该地址范围<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>dhcp<span class="token punctuation">)</span># lease days <span class="token punctuation">[</span>hours<span class="token punctuation">]</span> <span class="token punctuation">[</span>minutes<span class="token punctuation">]</span> <span class="token operator">|</span>infinite  指定租约的期限（默认一天）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip dhcp ping timeout milliseconds    指定测试服务器地址池中的可用地址是否正在使用时服务器应等待时间<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip dhcp excluded<span class="token operator">-</span>address beginning_IP_address <span class="token punctuation">[</span>ending_IP_address<span class="token punctuation">]</span>    排除一些地址<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip address dhcp   在路由器上建立DHCP客户<span class="token class-name">R</span># show ip dhcp binding <span class="token punctuation">[</span>client_address<span class="token punctuation">]</span>    查看分配给客户的地址<span class="token class-name">R</span># clear ip dhcp binding client_address<span class="token operator">|</span><span class="token operator">*</span>   清除分配给客户的指定<span class="token operator">/</span>所有地址<span class="token class-name">R</span># debug ip dhcp server events<span class="token operator">|</span>packet<span class="token operator">|</span>linkage   查看DHCP服务器相关信息<span class="token number">123456789101112131415</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>15.HDLC</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># encapsulation hdlc    封装同步串行接口为HDLC（默认）<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>16.PPP</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># encapsulation ppp 在WAN接口上使用PPP<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ppp pap sent<span class="token operator">-</span>username your_hostname password password 指定PAP用于认证并且提供在服务端用于执行认证的用户名和口令（此为客户端配置）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># hostname your_router's_hostname  为路由器指定惟一主机名（以下三个为服务端配置）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># username remote_hostname password matching_password  指定认证路由器时所使用的远端主机名称和口令<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ppp authentication pap    指定PAP认证<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ppp authentication chap<span class="token operator">|</span>pap<span class="token operator">|</span>chap pap<span class="token operator">|</span>pap chap 批定PPP认证类型<span class="token class-name">R</span># debug ppp negotiation    查看LCP协商时的信息<span class="token class-name">R</span># debug ppp authentication 查看PPP认证情况<span class="token number">12345678</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>17.FR</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># encapsulation frame<span class="token operator">-</span>relay <span class="token punctuation">[</span>cisco<span class="token operator">|</span>ietf<span class="token punctuation">]</span>    指定封装类型为帧中继<span class="token punctuation">(</span>默认cisco）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># frame<span class="token operator">-</span>relay lmi<span class="token operator">-</span>type ansi<span class="token operator">|</span>cisco<span class="token operator">|</span>q933a 给该串行接口指定LMI类型<span class="token class-name">R</span># show frame<span class="token operator">-</span>relay lmi 查看详细的LMI统计信息<span class="token class-name">R</span># debug frame<span class="token operator">-</span>relay lmi    报告路由器正在发送与接收的实际LMI信息<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># frame<span class="token operator">-</span>relay map protocol_name destination_address local_dlci_# <span class="token punctuation">[</span>broadcast<span class="token punctuation">]</span> <span class="token punctuation">[</span>ietf<span class="token operator">|</span>cisco<span class="token punctuation">]</span>   将远端第<span class="token number">3</span>层地址手动映射到本地DLCI号<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># <span class="token punctuation">[</span>no<span class="token punctuation">]</span> frame<span class="token operator">-</span>relay inverse<span class="token operator">-</span>arp <span class="token punctuation">[</span>protocol_name<span class="token punctuation">]</span> <span class="token punctuation">[</span>DLCI_#<span class="token punctuation">]</span> 启用<span class="token operator">/</span>禁用逆向<span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>18.ARP（默认启用）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span> clear frame<span class="token operator">-</span>relay<span class="token operator">-</span>inarp    清除逆向ARP解析表<span class="token class-name">R</span># show frame<span class="token operator">-</span>relay traffic 查看逆向ARP统计<span class="token class-name">R</span># show frame<span class="token operator">-</span>relay pvc <span class="token punctuation">[</span>DLCI_#<span class="token punctuation">]</span>    查看终止于路由器的所有（指定）帧中继PVC及其统计信息<span class="token class-name">R</span># show frame<span class="token operator">-</span>relay map 查看将第<span class="token number">3</span>层地址映射成本地DLCI号的虚电路解析表<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># <span class="token keyword">interface</span> type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#<span class="token punctuation">.</span> subinterface_# <span class="token punctuation">[</span>point<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>point<span class="token operator">|</span>multipoint<span class="token punctuation">]</span>  创建子接口<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>subif<span class="token punctuation">)</span># frame<span class="token operator">-</span>relay <span class="token keyword">interface</span><span class="token operator">-</span>dlci local_DLCI_#    配置子接口的帧中继<span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>19.ISDN</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">]</span><span class="token punctuation">)</span># isdn <span class="token keyword">switch</span><span class="token operator">-</span>type <span class="token class-name">ISDN_switch_type</span>   在全局或接口配置模式下配置交换机类型<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># isdn spid1 spid_#__for_1st_BRI local_dial_#   为第一个<span class="token class-name">B</span>信道配置SPID<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># isdn spid2 spid_#__for_2st_BRI local_dial_#   为第二个<span class="token class-name">B</span>信道配置SPID<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># controller t1<span class="token operator">|</span>e1 <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#    以下<span class="token number">6</span>个命令为控制卡配置<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>controller<span class="token punctuation">)</span># framing esf<span class="token operator">|</span>sf<span class="token operator">|</span>crc4<span class="token operator">|</span>nocrc4    在T1或E1上使用物理成帧<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>controller<span class="token punctuation">)</span># linecode ami<span class="token operator">|</span>b8zs<span class="token operator">|</span>hdb3    线路编码，定义<span class="token number">1</span>与<span class="token number">0</span>如何在线路上物理表示<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>controller<span class="token punctuation">)</span># clock source line primary<span class="token operator">|</span>secondary<span class="token operator">|</span>internal  定义路由器如何获得其时钟以用于同步数字连接<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>controller<span class="token punctuation">)</span># pri<span class="token operator">-</span>group timeslots <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">24</span><span class="token operator">|</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span>   指定路由器哪个或哪些时隙用于ISDN连接<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>controller<span class="token punctuation">)</span># <span class="token punctuation">[</span>no<span class="token punctuation">]</span> shutdown 启用<span class="token operator">/</span>禁用控制器<span class="token class-name">R</span># show controllers t1<span class="token operator">|</span>e1 <span class="token punctuation">[</span>slot_#<span class="token operator">/</span>port_#<span class="token punctuation">]</span>   验证控制器卡配置<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># <span class="token keyword">interface</span> serial <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#<span class="token operator">:</span><span class="token number">23</span> 设置逻辑串口（T1使用）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># <span class="token keyword">interface</span> serial <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#<span class="token operator">:</span><span class="token number">15</span> 设置逻辑串口（E1使用）<span class="token class-name">R</span># show <span class="token keyword">interface</span> bri <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#<span class="token punctuation">[</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span>    验证ISDN连接的状态（查看<span class="token class-name">B</span>信道）<span class="token class-name">R</span># show isdn status 查看ISDN详细的物理层和数据链路层信息<span class="token class-name">R</span># debug isdn q921  报告ISDN数据链路层详细信息<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip route <span class="token class-name">IP_network_</span># subnet_mask remote_router's_IP_address<span class="token operator">|</span>router_interface <span class="token punctuation">[</span>administrative_distance<span class="token punctuation">]</span>  配置静态路由。以下<span class="token number">7</span>个命令配置传统DDR<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># dialer<span class="token operator">-</span>list list_# protocol protocol_name permit<span class="token operator">|</span>deny <span class="token punctuation">[</span>access<span class="token operator">-</span>list ACL_#<span class="token punctuation">]</span>    定义敏感流量<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer<span class="token operator">-</span>group dialer_list_#    激活拨号列表<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer map protocol_name address_of_destination_router <span class="token punctuation">[</span>name remote_router_name<span class="token punctuation">]</span> <span class="token punctuation">[</span>speed <span class="token number">56</span><span class="token operator">|</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>broadcast<span class="token punctuation">]</span> destination_phone_number   表明利用传统DDR进行电话呼叫<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer idle<span class="token operator">-</span>timeout #_of_seconds  定义空闲超时周期<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer fast<span class="token operator">-</span>idle #_of_seconds 定义快速空闲计时器<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer load<span class="token operator">-</span>threshold load either<span class="token operator">|</span>inbound<span class="token operator">|</span>outbound    通过BRI的两条<span class="token class-name">B</span>信道执行负载均衡（分配带宽）<span class="token class-name">R</span># show dialer  查看哪个DDR接口进行了电话呼叫及其状态<span class="token class-name">R</span># show isdn active 查看激活的ISDN呼叫<span class="token class-name">R</span># show isdn history    查看路由器发出的呼叫或以前接收的呼叫<span class="token class-name">R</span># debug dialer 显示建立或拆除一个连接的DDR过程<span class="token class-name">R</span># debug isdn q931  显示ISDN电话连接建立及挂断的详细信息<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># <span class="token keyword">interface</span> dialer port_#  创建逻辑拨号接口。以下全为配置拨号配置文件。以下<span class="token number">8</span>个为拨号接口配置<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># encapsulation ppp 指定封装类型<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ppp authentication pap<span class="token operator">|</span>chap<span class="token operator">|</span>chap pap<span class="token operator">|</span>pap chap 指定认证类型<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip address <span class="token class-name">IP_address</span> subnet_mask 指定接口IP地址<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer remote<span class="token operator">-</span>name name   指定远端路由器的名称<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer string phone_# <span class="token punctuation">[</span><span class="token keyword">class</span> map_name<span class="token punctuation">]</span>    指定映射类名称<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer pool pool_#    指定拨号接口能使用哪组物理接口<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer<span class="token operator">-</span>group dialer_list_#    激活拨号列表<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer pool<span class="token operator">-</span>member pool_# <span class="token punctuation">[</span>priority priority_#<span class="token punctuation">]</span> <span class="token punctuation">[</span>min<span class="token operator">-</span>link #_of_B_channels<span class="token punctuation">]</span> <span class="token punctuation">[</span>max<span class="token operator">-</span>link #_of_B_channels<span class="token punctuation">]</span> 指定哪些拨号接能使用物理接口<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># map<span class="token operator">-</span><span class="token keyword">class</span> dialer map_name    进入映射子配置模式。以下<span class="token number">4</span>个为创建映射类<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>map<span class="token punctuation">)</span># dialer isdn speed <span class="token number">56</span> 指定ISDN中的<span class="token class-name">B</span>信道的速度（默认<span class="token number">64</span>kbps）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>map<span class="token punctuation">)</span># dialer idle<span class="token operator">-</span>timeout #_of_seconds 定义空闲超时周期<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>map<span class="token punctuation">)</span># dialer fast<span class="token operator">-</span>idle #_of_seconds    定义快速空闲计时器<span class="token class-name">R</span># show dialer <span class="token keyword">interface</span> bri<span class="token operator">|</span><span class="token punctuation">&#123;</span>serial<span class="token operator">:</span><span class="token number">23</span><span class="token operator">|</span><span class="token number">15</span><span class="token punctuation">&#125;</span> <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span>port_# 显示与拨号接口关联的物理接口的进入和离开呼叫的DDR统计信息<span class="token number">1234567891011121314151617181920212223242526272829303132333435363738394041</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>20.IS-IS</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># router isis  启动IS<span class="token operator">-</span>IS<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># net areaID<span class="token punctuation">.</span>systemID<span class="token punctuation">.</span>SEL   配置NET<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># is<span class="token operator">-</span>type level_of_router   配置路由器的层次<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip router isis    在接口上启动IS<span class="token operator">-</span>IS<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># isis priority value level<span class="token operator">-</span><span class="token number">1</span><span class="token operator">|</span>level<span class="token operator">-</span><span class="token number">2</span>   手动配置第一层或第二层路由器的优先级<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># clns router isis  为无连接网络服务启动IS<span class="token operator">-</span>IS<span class="token class-name">R</span># show ip route isis   查看通过IS<span class="token operator">-</span>IS学习到的路由<span class="token class-name">R</span># show isis database <span class="token punctuation">[</span>detail level_of_router<span class="token punctuation">]</span>  查看IS<span class="token operator">-</span>IS链路状态数据库中的所有（某层）LSP信息<span class="token class-name">R</span># show clns protocol   显示IS<span class="token operator">-</span>IS详细配置信息<span class="token class-name">R</span># show clns <span class="token keyword">interface</span>  显示配置为IS<span class="token operator">-</span>IS接口的相关信息<span class="token class-name">R</span># show clns is<span class="token operator">-</span>neighbors   查看路由器的邻居<span class="token class-name">R</span># show isis spf<span class="token operator">-</span>log    查看SPF计算情况<span class="token class-name">R</span># debug isis adj<span class="token operator">-</span>packets   查看路由器发送和接收<span class="token class-name">Hello</span> PDU的情况<span class="token class-name">R</span># debug isis update<span class="token operator">-</span>packets    提供路由器发送和接收的所有LSP详细内容及SNP信息<span class="token class-name">R</span># debug isis spf<span class="token operator">-</span>events    查看写入路由表的IS<span class="token operator">-</span>IS路由<span class="token class-name">R</span># debug isis spf<span class="token operator">-</span>triggers  查看触发SPF计算的原因<span class="token class-name">R</span># debug isis spf<span class="token operator">-</span>statistics    查看执行SPF计算所用的时间<span class="token number">1234567891011121314151617</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>21.BGP</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># router bgp AS_#  启动BGP<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_remote_device</span> remote<span class="token operator">-</span>as AS_#_remote_device    指定远端路由器作为对等体<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># no synchronization    关闭BGP与IGP同步（默认启用）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_remote_device</span> update<span class="token operator">-</span>source loopback #    使用环回接口作为对等体<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_remote_device</span> ebgp<span class="token operator">-</span>multihop <span class="token punctuation">[</span>ttl<span class="token punctuation">]</span> 配置eBGP多跳（允许BGP邻居可以不在直连网络上）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_remote_device</span> route<span class="token operator">-</span>reflector<span class="token operator">-</span>client  配置邻居为路由反射器客户<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># network network_address mask subnet_mask  向对等体通告路由（手动向BGP注入路由）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># redistribute protocol process_ID  将路由重新分配到BGP<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># redistribute connected    将直连接口地址重新分配到BGP<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># bgp cluster<span class="token operator">-</span>id cluster_ID 分配簇ID<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># bgp confederation identifier confederation_ID 配置联邦ID<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># bgp confederation peers AS_#  配置联邦的对等自治系统成员<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_remote_device</span> distribute<span class="token operator">-</span>list access_list_# <span class="token punctuation">[</span>in<span class="token operator">|</span>out<span class="token punctuation">]</span>  过滤到或来自邻居的更新信息<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip prefix<span class="token operator">-</span>list list_name <span class="token punctuation">[</span>seq seq_value<span class="token punctuation">]</span> permit<span class="token operator">|</span>deny network_address<span class="token operator">/</span>length <span class="token punctuation">[</span>ge ge_value<span class="token punctuation">]</span> <span class="token punctuation">[</span>le le_value<span class="token punctuation">]</span>  配置前缀列表<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_remote_device</span> prefix<span class="token operator">-</span>list list_name <span class="token punctuation">[</span>in<span class="token operator">|</span>out<span class="token punctuation">]</span>  应用从邻居输入的前缀列表<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># route<span class="token operator">-</span>map route_map_name permit<span class="token operator">|</span>deny <span class="token punctuation">[</span>sequence_number<span class="token punctuation">]</span>   创建路由映射序列<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># match as<span class="token operator">-</span>path <span class="token class-name">AS_path_accesslist_</span># 匹配BGP自治系统路径访问列表<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># match community<span class="token operator">-</span>list community_list_#  匹配BGP团体<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># match <span class="token keyword">interface</span> type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#  发布任何下一跳是指定接口的路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># match ip address access_list_#<span class="token operator">|</span>prefix_list_name    匹配任何目的网络地址被指定的标准访问列表、扩展访问列表或前缀列表允许的路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># match ip next<span class="token operator">-</span>hop access_list_#<span class="token operator">|</span>prefix_list_name   匹配任何下一跳地址被指定的标准访问列表、扩展访问列表或前缀列表允许的路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># match ip route<span class="token operator">-</span>source access_list_#<span class="token operator">|</span>prefix_list_name   匹配任何由被指定的标准访问列表、扩展访问列表或前缀列表允许的地址通告的路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># match metric value 匹配任何具有指定的度量值的路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># match route<span class="token operator">-</span>type type_of_route 匹配任何具有指定类型的路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># match tag value    匹配任何具有指定标识的路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set as<span class="token operator">-</span>path prepend AS_#   向AS_PATH属性添加自治系统号<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set as<span class="token operator">-</span>path tag    设置作为AS_PATH属性的标记<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set automatic<span class="token operator">-</span>tag  自动计算标记值<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set community number<span class="token operator">|</span>aa<span class="token operator">:</span>nn<span class="token operator">|</span>additive<span class="token operator">|</span>local<span class="token operator">-</span>as<span class="token operator">|</span>no<span class="token operator">-</span>advertise<span class="token operator">|</span>no<span class="token operator">-</span>export<span class="token operator">|</span>none   设置BGP COMMUNITIES属性<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set dampening half_life start_reusing start_suppressing duration_to_suppress   设置BGP路由冷落参数<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set <span class="token keyword">default</span> <span class="token keyword">interface</span> type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#    设置默认的输出接口<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set <span class="token keyword">interface</span> type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#    设置输出接口<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set ip <span class="token keyword">default</span> next<span class="token operator">-</span>hop <span class="token class-name">IP_address</span> 设置路径的默认下一跳地址<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set ip next<span class="token operator">-</span>hop <span class="token class-name">IP_address</span> 设置下一跳地址<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set ip precedence <span class="token punctuation">[</span>precedence<span class="token punctuation">]</span> 设置“IP <span class="token class-name">Precedence</span>”字段<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set ip tos type_of_service 设置“IP服务类型”字段<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set level level    设置导入路由的位置<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set local<span class="token operator">-</span>preference value 设置BGP LOCAL_PREF路径属性<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set metric value   设置目标路由协议的度量值<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set metric<span class="token operator">-</span>type type_of_route  设置目标路由协议的度量类型<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set origin origin_code 设置BGP源代码<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set tag value  设置目标路由协议的标记值<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set weight value   设置路由表的BGP权重<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_remote_device</span> route<span class="token operator">-</span>map route_map_name <span class="token punctuation">[</span>in<span class="token operator">|</span>out<span class="token punctuation">]</span>   应用从邻居输入的路由映射<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_remote_device</span> send<span class="token operator">-</span>community  向该邻居发送COMMUNITY属性<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip community<span class="token operator">-</span>list community_list_# <span class="token punctuation">[</span>permit<span class="token operator">|</span>deny<span class="token punctuation">]</span> community_list_#    创建团体列表<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor peer_group_name peer<span class="token operator">-</span>group   创建对等组<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor peer_group_name option_to_use_in_update_policy   给对等组分配选项<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_remote_device</span> peer<span class="token operator">-</span>group peer_group_name  给对等组分配对等体<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># no auto<span class="token operator">-</span>summary   取消BGP的自动路由汇总功能<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># aggregate<span class="token operator">-</span>address <span class="token class-name">IP_address</span> mask <span class="token punctuation">[</span>summary<span class="token operator">-</span>only<span class="token punctuation">]</span>  创建汇聚地址（禁止通告其他特定路由）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># aggregate<span class="token operator">-</span>address <span class="token class-name">IP_address</span> mask as<span class="token operator">-</span>set  创建汇聚地址，在AS_PATH中添加AS_SET类型<span class="token class-name">R</span># clear ip bgp peer_address    重设特定BGP对等会话<span class="token class-name">R</span># clear ip bgp AS_#    重设指定自治系统的所有对等体的BGP会话<span class="token class-name">R</span># clear ip bgp <span class="token operator">*</span>   重设路由器上所有BGP会话<span class="token class-name">R</span># show ip bgp  查看路由器从BGP学习到的所有路由<span class="token class-name">R</span># show ip bgp summary  提供和路由器具有对等关系的所有路由器汇总<span class="token class-name">R</span># show ip bgp neighbors    查看对等体连接详细信息<span class="token class-name">R</span># debug ip bgp 查看在本地路由器与试图和其建立对等关系的路由器之间所发送和接收的OPEN信息<span class="token class-name">R</span># debug ip bgp updates 提供路由器发送和接收所有UPDATE消息的信息<span class="token class-name">R</span># debug ip bgp peer_address upadtes    提供关于BGP对等体之间发送的UPDATE消息<span class="token class-name">R</span># debug ip bgp dampening   显示关于被冷落路由的信息<span class="token class-name">R</span># debug ip bgp events  提供关于尝试成为BGP对等体的路由器的状态转换信息<span class="token class-name">R</span># debug ip bgp keepalives  提供关于路由器发送和接收KEEPALIVE消息的信息<span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>22.路由优化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># distribute<span class="token operator">-</span>list ACL_#<span class="token operator">|</span>prefix prefix_list_name in<span class="token operator">|</span>out <span class="token punctuation">[</span>type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#<span class="token punctuation">]</span>   配置分配列表<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip policy route<span class="token operator">-</span>map map_tag   识别一个接口上基于策略的路由选择使用的路由映射<span class="token class-name">R</span># show ip policy   列出所有配置为基于策略的路由选择的接口及它们相关的路由映射<span class="token class-name">R</span># show route<span class="token operator">-</span>map   查看所有路由映射<span class="token class-name">R</span># debug ip policy  提供在该路由器上执行的路由策略的信息<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># <span class="token keyword">default</span><span class="token operator">-</span>information originate 重新分配默认路由到OSPF和IS<span class="token operator">-</span>IS<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># <span class="token keyword">default</span><span class="token operator">-</span>information originate always  引起一个默认路由到OSPF不管路由表中是否有一个默认路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># redistribute protocol <span class="token punctuation">[</span>process<span class="token operator">-</span>ID<span class="token punctuation">]</span> level<span class="token operator">-</span><span class="token number">1</span><span class="token operator">|</span>level<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">|</span>level<span class="token operator">-</span><span class="token number">2</span> <span class="token punctuation">[</span>metric metric_value<span class="token punctuation">]</span> <span class="token punctuation">[</span>metric<span class="token operator">-</span>type type_value<span class="token punctuation">]</span> <span class="token punctuation">[</span>match internal<span class="token operator">|</span>external <span class="token number">1</span><span class="token operator">|</span>external <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>tag tag_value<span class="token punctuation">]</span> <span class="token punctuation">[</span>route<span class="token operator">-</span>map map_tag<span class="token punctuation">]</span> <span class="token punctuation">[</span>weight weight_value<span class="token punctuation">]</span> <span class="token punctuation">[</span>subnets<span class="token punctuation">]</span>    重新分配路由选择信息从一个路由选择域到另一个路由选择域<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># summary<span class="token operator">-</span>address network_address network_mask <span class="token punctuation">[</span>level<span class="token operator">-</span><span class="token number">1</span><span class="token operator">|</span>level<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">|</span>level<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>  为起源于和重新分配到IS<span class="token operator">-</span>IS的路由创建一个汇总地址<span class="token number">123456789</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>23.异步连接</p><pre class="line-numbers language-none"><code class="language-none">R# line number  进入线路配置模式R(config-line)# login   允许一个连接R(config-line)# password password   提供线路上使用的口令R(config-line)# flowcontrol hardware|software   选择硬件流控制或软件流控制R(config-line)# speed number    指定调制解调器和访问服务器或路由器之间使用的最大速度（单位：bps）R(config-line)# transport input lat|mop|nasi|pad|rlogin|telnet|v120|all 定义反向Telnet连接使用的协议R(config-line)# stopbits 1|1.5|2    定义每个字节的结束R(config-line)# modem autoconfigure type modem_type 指示路由器使用modemcap数据库中的命令按照指定的类型对连接到一个端口上的调制解调器进行自动配置R# show modemcap    显示modemcap数据库R(config-line)# modem edit modem_profile_name   向modemcap数据库增加条目R(config-line)# modemcap edit new_profile_name template existing_profile_name   创建名为new_profile_name的条目并从existing_profile_name中拷贝所有的配置R(config-line)# modem autoconfigure discovery   发现和自动配置连接到一个端口上的调制解调器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/25.jpg" alt="25"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;警告：Cisco课程，不可用于商用&lt;/p&gt;
&lt;p&gt;因为我发现学这个课老是断断续续的，每次捡起来超级麻烦，所以趁这次来个大复习，把一些该有的知识点直接记下来好了&lt;/p&gt;
&lt;h1 id=&quot;当今网络&quot;&gt;&lt;a href=&quot;#当今网络&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="others" scheme="https://darren-dong.com/categories/others/"/>
    
    
    <category term="cisco" scheme="https://darren-dong.com/tags/cisco/"/>
    
  </entry>
  
</feed>

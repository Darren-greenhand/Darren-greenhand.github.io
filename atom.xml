<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Darren观测站</title>
  
  <subtitle>如今这世框架已成，只得于边际再开新光</subtitle>
  <link href="https://darren-dong.com/atom.xml" rel="self"/>
  
  <link href="https://darren-dong.com/"/>
  <updated>2021-09-07T15:51:47.624Z</updated>
  <id>https://darren-dong.com/</id>
  
  <author>
    <name>Darren</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>互联网态势智能分析</title>
    <link href="https://darren-dong.com/2021/09/25/%E4%BA%92%E8%81%94%E7%BD%91%E6%80%81%E5%8A%BF%E6%99%BA%E8%83%BD%E5%88%86%E6%9E%90/"/>
    <id>https://darren-dong.com/2021/09/25/%E4%BA%92%E8%81%94%E7%BD%91%E6%80%81%E5%8A%BF%E6%99%BA%E8%83%BD%E5%88%86%E6%9E%90/</id>
    <published>2021-09-25T08:13:49.000Z</published>
    <updated>2021-09-07T15:51:47.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="互联网态势智能分析"><a href="#互联网态势智能分析" class="headerlink" title="互联网态势智能分析"></a>互联网态势智能分析</h1><p>1、 <strong>目标</strong></p><p>​        围绕<strong>心理战、舆论战</strong>中互联网态势智能分析需求，开展基于大数据分析的<strong>互联网群体决策分析与干预机制</strong>研究。基于舆情数据小样本学习算法，构建网络特定领域舆情群体倾向的预测与分析模型。</p><p>2、 <strong>课题主要内容</strong></p><p>​    通过对网络特定领域中视频、图像、文本等多源异构舆情<strong>数据进行采集</strong>，通过<strong>多特征维度分析</strong>，挖掘影响网络群体舆情倾向的关键影响因子，包括网络用户个体属性、社交用户群体属性等。构建舆情相关的网络群体<strong>精准画像</strong>，支持从基本属性层、网络行为层、网络认证层、社交关系层对网络用户群体进行<strong>画像</strong>。</p><table><thead><tr><th><strong>学                期</strong></th><th><strong>完成目标</strong></th><th><strong>考核和评定</strong></th><th><strong>教学实施</strong></th></tr></thead><tbody><tr><td>3</td><td>（1）国内外研究现状、发展趋势和知识产权状况分析  （2）了解大数据采集方法，包括日志数据和网络数据的采集。  （3）掌握互联网数据采集的原理和网络爬虫技术</td><td>综合设计I总结报告；  答辩</td><td>每周定期辅导；  小组交流讨论</td></tr><tr><td>4</td><td>（1）了解大数据预处理技术，以及常用数据预处理的方法。  （2）掌握常用的数据分析算法和数据的可视化技术  （3）实现基于某一主题的互联网数据的分析算法。</td><td>综合设计II总结报告；  答辩</td><td>每周定期辅导；   小组交流讨论</td></tr><tr><td>5</td><td>(1) 采集公共事件的多维度网络舆情数据特征，分析挖掘影响网络群体舆情倾向的关键影响因子，构建与重大突发事件舆情相关的网络群体精准画像。  (2) 采用生成对抗网络构造互联网舆情信息传播模型，研究多源异质信息对网络舆情传播的影响程度。  (3) 利用量子纠缠和量子游走理论，研究舆情信息传播路径形成的原因，进而设计舆情引导干预机制，并对干预效果进行评估。</td><td>综合设计III总结报告；  答辩</td><td>每周定期辅导；  小组交流讨论</td></tr></tbody></table><h2 id="大二上"><a href="#大二上" class="headerlink" title="大二上"></a>大二上</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;互联网态势智能分析&quot;&gt;&lt;a href=&quot;#互联网态势智能分析&quot; class=&quot;headerlink&quot; title=&quot;互联网态势智能分析&quot;&gt;&lt;/a&gt;互联网态势智能分析&lt;/h1&gt;&lt;p&gt;1、 &lt;strong&gt;目标&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​        围绕&lt;</summary>
      
    
    
    
    <category term="DL" scheme="https://darren-dong.com/categories/DL/"/>
    
    
  </entry>
  
  <entry>
    <title>DS-Source</title>
    <link href="https://darren-dong.com/2021/09/08/DS-Source/"/>
    <id>https://darren-dong.com/2021/09/08/DS-Source/</id>
    <published>2021-09-08T03:08:21.000Z</published>
    <updated>2021-09-08T03:14:42.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据科学资源"><a href="#数据科学资源" class="headerlink" title="数据科学资源"></a>数据科学资源</h1><p>存放一些DS学习的资源</p><p>[toc]</p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><h3 id="统计数据"><a href="#统计数据" class="headerlink" title="统计数据"></a>统计数据</h3><ul><li><p>各类统计年鉴</p><p><a href="http://www.stats.gov.cn/tjsj./ndsj/">中国统计年鉴 </a>基本有中国历年各方面的所有数据</p></li><li><p>统计数据库</p><p><a href="https://www.un.org/zh/databases/#stats">联合国数据库</a></p></li><li><p>统计学领域论文或书籍中的数据集</p></li><li><p>政府网站</p><p><a href="https://data.stats.gov.cn/">中国数据集</a></p><p><a href="https://www.data.gov/">美国数据集</a></p><p><a href="https://data.gov.in/">印度数据集</a></p><p><a href="https://data.gov.uk/">英国数据集</a></p></li><li><p>其他</p><p>R包中的数据集，比如women、mtcars</p><p>开放数据搜索引擎，如<a href="https://marketplace.namara.io/">namara</a></p></li></ul><h3 id="企业提供"><a href="#企业提供" class="headerlink" title="企业提供"></a>企业提供</h3><p><a href="https://archive.ics.uci.edu/ml/index.php">加州大学欧文分校机器学习库</a></p><p><a href="https://www.cs.toronto.edu/~delve/data/datasets.html">Delve数据库</a></p><p><a href="https://registry.opendata.aws/">Amazon Web Services(AWS) datasets</a></p><p><a href="https://cloud.google.com/bigquery/public-data">Google Datasets</a> 里面也有商用的数据库</p><p><a href="http://research.google.com/youtube8m/">Youtube labeled</a></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210609194754.png" alt="image-20210609194747163"></p><hr><p><a href="https://data.nasa.gov/">NASA</a></p><p><a href="https://data.worldbank.org.cn/">世界银行</a> 免费并公开获取世界各国的发展数据.</p><h3 id="门户网站"><a href="#门户网站" class="headerlink" title="门户网站"></a>门户网站</h3><p><a href="https://dataportals.org/">列出了全世界许多开放数据库</a></p><p><a href="https://opendatamonitor.eu/frontend/web/index.php?r=dashboard/index">各国开放数据集集成</a></p><p><a href="https://en.wikipedia.org/wiki/List_of_datasets_for_machine-learning_research">机器学习数据库大集成！！</a></p><p><a href="https://www.reddit.com/r/datasets/">论坛提供的数据库</a></p><h3 id="竞赛平台"><a href="#竞赛平台" class="headerlink" title="竞赛平台"></a>竞赛平台</h3><p><a href="https://www.kaggle.com/datasets">Kaggle</a> 提供一个数据搜索引擎</p><p><a href="https://kdd.org/">KDD Cups</a></p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><a href="https://data.world/">Data world</a> 有很多公开数据集，很方便管理协作，提供许多数据管理工具的API</p><p><a href="https://marketplace.namara.io/">namara数据搜索引擎</a></p><h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><p><a href="https://www.tableau.com/products/desktop">Tableau</a></p><h3 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h3><ul><li><p>数据科学语言</p><p>python、R、Scala、Clojure、Haskell</p></li><li><p>NoSQL工具</p><p>NoSQL、MongoDB、Couchbase、Cassandra</p></li><li><p>传统数据库/数据仓库</p><p>SQL、RDMS、DW、OLAP</p></li><li><p>大数据计算工具</p><p>HadoopHDFS&amp;MapReduce、Spark、Storm</p></li><li><p>大数据管理、存储、查询</p><p>HBase、Pig、Hive、Impala、Cascalog</p></li><li><p>数据采集、聚合、传递</p><p>Webscraper、Flume Avro、Sqoop、Hume</p></li><li><p>数据挖掘</p><p>Weka、KNIME、RapidMiner、SciPy、Pandas</p></li><li><p>数据统计分析</p><p>SAS、SPSS、Matlab</p></li></ul><h2 id="论坛、平台"><a href="#论坛、平台" class="headerlink" title="论坛、平台"></a>论坛、平台</h2><p><a href="https://www.kaggle.com/">Kaggle</a></p><p><a href="https://kdd.org/">KDD 数据挖掘、数据科学和分析社区</a></p><p><a href="https://www.drivendata.org/">Driven Data</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据科学资源&quot;&gt;&lt;a href=&quot;#数据科学资源&quot; class=&quot;headerlink&quot; title=&quot;数据科学资源&quot;&gt;&lt;/a&gt;数据科学资源&lt;/h1&gt;&lt;p&gt;存放一些DS学习的资源&lt;/p&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;数据&quot;&gt;&lt;a href=&quot;#数据&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>机器学习实战</title>
    <link href="https://darren-dong.com/2021/09/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98/"/>
    <id>https://darren-dong.com/2021/09/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98/</id>
    <published>2021-09-08T02:21:25.000Z</published>
    <updated>2021-09-09T15:07:16.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器学习实战"><a href="#机器学习实战" class="headerlink" title="机器学习实战"></a>机器学习实战</h1><p><a href="https://github.com/Darren-greenhand/handson-ml2">仓库地址</a></p><p>本书内容广博，不仅介绍了传统ML，还用sklearn演示了端到端训练实例。</p><p>尤其对DL进行了深入探讨，涵盖强化学习、利用TF/Keras构建和训练神经网络</p><h2 id="ML"><a href="#ML" class="headerlink" title="ML"></a>ML</h2><h3 id="1-前置补充"><a href="#1-前置补充" class="headerlink" title="1. 前置补充"></a>1. 前置补充</h3><ul><li>在机器学习里，属性是一种数据类型，而特征取决于上下文，通常意味着<strong>属性+值</strong>(很多人混淆)</li><li>一些回归算法和可用于分类任务，反之亦然。比如逻辑回归可以输出“属于某个给定类别的概率”，可用于分类</li><li>无监督应用：<ul><li>聚类</li><li>异常检测、新颖性检测</li><li>可视化、降维（可先用降维减少数据维度，再提供给别的算法）</li><li>关联规则学习</li></ul></li><li>比起在线学习，批量学习也可以适应变化，但是需要<strong>重新训练全新的系统</strong>，成本高</li><li>在线学习也可以用于超大数据集，因为超出了一台计算机的主存储器的数据</li><li>基于实例（相似度），和基于模型(我看到的好像都是这个)的学习</li><li>特征工程 vs 端到端学习</li><li>正则化实质是约束模型，限制变化范围，降低复杂度。</li><li>测试验证：保持验证、交叉验证</li><li>没有免费的午餐：<strong>如果你对数据绝对没有假设，那么就没有理由更偏好某个模型</strong>，必须得有假设，然后只评估部分合理的模型。</li></ul><h3 id="2-端到端的机器学习项目"><a href="#2-端到端的机器学习项目" class="headerlink" title="2.端到端的机器学习项目"></a>2.端到端的机器学习项目</h3><p>假设你是一个房地产公司最近雇佣的数据科学家，你会经历：</p><ol><li>观察大局</li><li>获得数据</li><li>从数据探索和可视化中获得洞见</li><li>机器学习算法的数据准备</li><li>选择并训练模型</li><li>微调模型</li><li>展示解决方案</li><li>启动、监控和维护模型</li></ol><p>（使用真实数据，详情见我的另一篇博文：<a href="https://darren-dong.com/2021/09/08/DS-Source/">DS资源</a>）</p><h4 id="观察大局"><a href="#观察大局" class="headerlink" title="观察大局"></a>观察大局</h4><p><strong>附录B，记录了一个数据科学项目的大致流程以供参考</strong></p><p>流水线：一个序列的数据处理组件称为一个数据流水线。在机器学习系统中非常普遍。</p><p>组件通常异步进行，组件间很独立，连接只有数据仓库。Robustness++，但需要适当的监控。</p><ol><li><p>问老板业务目标，公司期望如何使用该模型，如何从中获益才是重要问题：</p><p>这决定怎么设定问题，选择什么算法，通过什么方式评估模型性能，花多少精力来进行调整</p></li><li><p>问老板当前的解决方案（可能存在），当作建议、参考，获得洞察</p></li><li><p>开始设计系统，回答框架问题：有无监督/强化、分类/回归、批量/在线</p></li><li><p>选择性能指标：</p><ul><li><p>RMSE 均方根误差          欧几里得范数  L2</p></li><li><p>MAE   平均绝对误差      曼哈顿范数      L1   </p></li><li><p><a href="https://zhuanlan.zhihu.com/p/67120415">范数的定义</a></p><p><strong>指标越高越关注大值而不是小值</strong>，这就是为何RMSE比MAE对异常值更敏感</p></li></ul></li><li><p>检查假设，与数据流水线上下游团队沟通。</p></li></ol><p>获取数据（数据库），可以编写shell脚本来辅助</p><p>通过查看数据描述、部分数据，简单可视化来了解数据</p><h4 id="创建测试集"><a href="#创建测试集" class="headerlink" title="创建测试集"></a>创建测试集</h4><p><strong>在简单了解数据后，创建测试集</strong>（有点奇怪），因为大脑容易过拟合<strong>（数据窥探偏误）</strong>：</p><p>浏览数据，跌入某个看似有趣的测试数据模式，选择某个特殊的模型，估计结果过于乐观，但其实泛化能力一般。</p><p>所以要在没有进一步了解的时候创建测试集，有一些方法，比如用标签确定哪些是选出来的测试集，有时候要用纯随机，有时候要分层抽样。</p><p>这一步没有想象中的简单，而很多人忽视了它创建的时机。</p><h4 id="从数据探索和可视化中获得洞见"><a href="#从数据探索和可视化中获得洞见" class="headerlink" title="从数据探索和可视化中获得洞见"></a>从数据探索和可视化中获得洞见</h4><p>现在把测试集放在一边不要碰，只关注训练集。如果训练集太大，可以抽样一个<strong>探索集</strong></p><p>xs，通过设置透明度更好的看清密度</p><p>我们的大脑擅长从图片中发现模式，但这需要你玩转可视化的参数。</p><p>先试试寻找不同特征之间的相关性，既包括线性，也有非线性并可视化出来康康，有许多函数可以实现这一步</p><p>中间省略众多有趣的方法</p><p>最后我们应该尝试各种属性的组合，创建新属性（我感觉吴恩达教的更好），再检测一下相关性等指标。</p><h4 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><p>这个过程应该编写函数而不是手动操作：</p><ul><li>以便在任何数据集上轻松重现</li><li>可以逐渐建立起转换函数库，在以后的项目中重用</li><li>可以在实时系统中用函数转换新的数据，在输入给算法</li><li>可以轻松尝试多种转换方式，比较效果。</li></ul><p>回到干净的训练集，进行数据清理，处理文本和分类属性的时候用到了独热码</p><hr><p>ps：sklearn的API设计规则非常好，原则如下：</p><ul><li>一致性：所有对象共享一个简单的界面</li><li>估算器：能够根据数据集对某些参数进行估算</li><li>转换器：可以转换数据集</li><li>预测器：能够基于一个给定的数据集进行预测</li><li>检查：所有估算器的超参数都可以通过公共实例变量直接方位（例如imputer.strategy）</li><li>防止类扩散：数据集被表示为Numpy数组或Scipy稀疏矩阵，超参数只是普通的Python字符串或数值</li><li>构成：现有的构建尽最大可能重用</li><li>合理的默认值</li></ul><hr><p>而尽管sklearn提供了许多有用的转换器，你仍然需要为一些注入自定义清理操作或组合特定属性等任务编写自己的转换器。</p><p><strong>而sklearn依赖鸭子类型编译，而不是继承</strong>。</p><p>这些数据准备步骤的执行越自动化，你自动尝试的组合也就越多，从而有更大的可能找到一个重要的组合并节省大量时间。</p><p><strong>最重要也最需要应用到数据上的转换就是特征缩放</strong>，（仅用于拟合训练集）</p><p>两种常用方法：最小-最大缩放（归一化）、   标准化</p><p>前者是减去最小值然后除以（最大-最小），收缩到0—1，当然也可以更改</p><p>后者是减去平均值然后除以方差，<strong>标准化没有特定范围，但是受异常值的影响更小。</strong></p><p><strong>转换流水线</strong>（后来补充）</p><p>通过Pipeline类来支持，方法与最终的估算器方法相同。</p><p>如果要用于多列，可以用Column-Transformer，他与pandas DataFrame 一起使用时效果很好。</p><hr><h4 id="选择和训练模型"><a href="#选择和训练模型" class="headerlink" title="选择和训练模型"></a>选择和训练模型</h4><p>完成了前面的步骤后，事情现在变得比想象中容易很多。</p><p>别忘了使用<strong>交叉验证</strong>来更好地评估：</p><ul><li>可以将训练集分为较小的训练集和验证集，然后加以训练</li><li>也可以使用sklearn的K-折交叉验证功能。（更偏向于使用效用函数而不是使用成本函数）</li></ul><p>在深入某些算法之前，应该<strong>尝试一遍各种机器学习算法的其他模型</strong>（不同内核的支持向量机，神经网络。。）</p><p>但是别花太多时间调整超参数，我们的目的是<strong>筛选出几个（2~5）个有效的模型</strong>，每一个尝试的模型都应该妥善保管，以及对应的超参数和训练过的参数，以及交叉验证的评分和实际检测的结果。</p><p>可以用Python的pickle模块或joblib库来保存模型。</p><h4 id="微调"><a href="#微调" class="headerlink" title="微调"></a>微调</h4><p>有了有效模型的候选列表，现在进行微调。</p><p>你可以手动调整超参数直到找到一组不错的组合。。非常枯燥乏味，耗时间</p><p>你也可以用sklearn的GridSearchCV替你搜索，如果不知道超参数怎么赋值，可以先尝试10的连续次幂</p><p>当然也可以把它用在数据准备的步骤，还可以用来自动寻找处理问题的最佳方法。</p><p><strong>网格搜索👆</strong>是一项模型超参数（即需要预先优化设置而非通过训练得到的参数）优化技术，常用于优化三个或者更少数量的超参数，本质是一种穷举法。</p><p>但是如果超参数搜索的方法较大，建议使用<strong>随机搜索</strong>。</p><p>还有集成方法，组合方法往往比单一的模型更好。。。。。最后通过测试集评估系统。、</p><p>还是小心吴恩达说的那个问题，不要拼命调调超参数让测试集结果好看，这可能会使其“适应测试集”。。。</p><h4 id="启动！监控与维护"><a href="#启动！监控与维护" class="headerlink" title="启动！监控与维护"></a>启动！监控与维护</h4><p>预启动：展示解决方案（学了什么、什么有用、基于什么假设、系统的限制），记录所有的事情，通过可视化和故事化制作漂亮的演示文档。</p><p>你可以部署到服务器，通过web来让用户调用，但更流行的策略是将模型部署到云上：用joblib保存模型上传到Google Cloud Storage（GCS），然后转到Google Cloud AI Platform并创建一个新的模型版本，指向GCS文件。</p><p>你还要编写监控代码以定期检查系统的实时性能，在降低时触发警报，因为数据会过时，会腐朽。</p><p>各种层面，甚至包括相机的图像清晰度、格式变化，还有人们的偏好变化。。。</p><p>但是确定模型的性能并不总是可行的，你可能需要人工分析。。。反正建立一个监控系统和相关流程，包括如何定义故障以及如何做准备。</p><p>这个工作量甚至比构建和训练模型多得多。。你还要定期更新数据集并定期重新训练模型（数据发展），最好自动化：</p><ul><li>自动定期收集数据并标记（如聘用人工标注者）</li><li>编写脚本来训练模型并自动调微超参数。</li><li>编写脚本在更新的测试集上评估新旧模型，性能好则自动部署，差就调查原因。</li></ul><p>做好版本管理（包括每个版本的数据集），以防新模型故障时需要回滚</p><h3 id="3-分类"><a href="#3-分类" class="headerlink" title="3.分类"></a>3.分类</h3><p>终于了解完了大概流程，有些麻烦，但不出所料，让我们正式进入学习吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;机器学习实战&quot;&gt;&lt;a href=&quot;#机器学习实战&quot; class=&quot;headerlink&quot; title=&quot;机器学习实战&quot;&gt;&lt;/a&gt;机器学习实战&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Darren-greenhand/handson-m</summary>
      
    
    
    
    <category term="ML" scheme="https://darren-dong.com/categories/ML/"/>
    
    
    <category term="python" scheme="https://darren-dong.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>道理</title>
    <link href="https://darren-dong.com/2021/08/22/%E9%81%93%E7%90%86/"/>
    <id>https://darren-dong.com/2021/08/22/%E9%81%93%E7%90%86/</id>
    <published>2021-08-22T06:08:16.000Z</published>
    <updated>2021-09-02T15:43:14.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集表象以求真"><a href="#集表象以求真" class="headerlink" title="集表象以求真"></a>集表象以求真</h1><p>境界不够，无从辩驳</p><ol><li><p>大多数人所谓的思考，不过是在重复过去的偏见</p></li><li><p>寻找初心，清楚所需，分辨主次，是人这一生最重要的事，看似最简单，实则最难。任何一个觉得自己差不多能做到的人，都绝对没做到。我做不到，所以我每过一段时间要思考这个问题，要强化认识。更何况，世界在变化，我也会变化</p></li><li><p>人只有从高处俯视，才能选对正确的道路</p></li><li><p>我有种错觉，他在大多数情况下只是个普通人，普通到不能在普通的人。但是，他总能在关键的时候，变得不普通。我感觉，他不是天才，但他总能在特别的领域和特别的时间，无限接近天才。</p></li><li><p>这种完全符合人类需求和历史趋势的商品，永远不可能赔钱，最多是传播速度快慢而已</p></li><li><p>适当展示力量，胜过遮遮掩掩</p></li><li><p>没有必然的成功，只有必然的收获。法斯特将军所谓的幸运，是凭借一步一步的收获，抓住了机会。不幸运的人，不是没有机会，而是没有足够多的收获。成功是外求，收获是内求</p></li><li><p>你现在可以选择两种思考方式，一种是目标思维，我们只关注有益于目标的事情，不关注其他。遇到阻碍，我们把‘解决障碍’当作目标，一切无益于解决障碍的事情，都不考虑。一种，就像你现在的思考方式，总是去想那些与目标无关的事，本质上，你在逃避.</p></li><li><p>其实每个人都有更多的选择，只是大多数时候，我们放弃最好的选择。不过，每个选择，都是当下最好的。</p></li><li><p>雪崩之下，没有一片雪花是无辜的</p></li><li><p>再睿智的目光，也只能看到前方，再狭隘的视线，也可能看到智者的盲区。</p></li><li><p>大人们做事最恶毒，而孩子们说话最恶毒</p></li><li><p>贵族的特权，与生俱来；贵族的责任，自始至终</p></li><li><p>力量越大，责任越大，这句话不是保护别人，是自己。是为了避免自己失控。责任并不是约束，就像衣服并不是为了阻挡我们，是保护</p></li><li><p>将自己举到高处的人，也预留出跌落的距离</p><p>  因蒙他人荣耀而获得的特权，也必将因放弃承担责任而失去</p></li><li><p>确实。金钱的确与罪恶有关，但带来罪恶的不是金钱，而是人。</p></li><li><p>因为，我们容易被表层目标吸引，忘记探索深层目标，也就永远解决不了问题</p></li><li><p>我喜欢和聪明人交往，因为我不用考虑他们的自尊</p><p>  这句话并不是说不尊重他人，而是在说，真正的聪明人，在做任何事的时候，都明白‘自己要做什么’，而不是把次要的脸面、尊严和情绪等等放在首要位置，凡是把这些元素放在首要位置的人，连最基本的主次都分不清，自然无法成为聪明人。而另一个意义是，一旦我们和分不清主次轻重的人交流，我们为了交流更顺畅，就不得不考虑其他因素，从而让自己付出更多的沟通成本，而世界上大部分的沟通成本，都在阻挠人类进步。当然，另一方面来说，另一种聪明的人，会掌握沟通的方式，降低沟通成本，也就是利用别人的情绪、尊严和虚荣的弱点，掌握主动，获益。</p></li><li><p>这让我意识到，反对传播知识的人，维护的不是知识本身；反对白化病患者的人，维护的不是人，而是他们的‘旧日的正确“</p></li><li><p>一个有强大学习能力的人，在小时候可以这么说，但成年之后，不会把核心放在有没有好老师教、有没有好的父母关爱、有没有好的环境熏陶、有没有好的过去，而是把核心回归自身，去追寻自己想要的一切，自己去培养想成为的自己</p></li><li><p>当一个人相信自己看到的就是真实的时候，那么制作这段真实的人，就已经成了他的主宰</p></li><li><p>是的，很多人内心邪恶，却没有犯罪，这样的人，你不能说他是好人，但他绝对不是坏人。</p><pre><code>很多人内心带着挣扎与忏悔，却做了坏事，他以为自己没得选，只想做个好人，但本质上，却就是一个坏人。</code></pre></li><li><p>“就是字面意思，我们做出了某些选择，就代表我们也放弃了某些选择。</p><pre><code>如果我们要因为放弃的选择而自责，那我们以后永远无法做出选择。”</code></pre></li><li><p>信息差，不见得就是你知道的比别人多，有时候只要能够改变信息的对错，就能够瞒天过海</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;集表象以求真&quot;&gt;&lt;a href=&quot;#集表象以求真&quot; class=&quot;headerlink&quot; title=&quot;集表象以求真&quot;&gt;&lt;/a&gt;集表象以求真&lt;/h1&gt;&lt;p&gt;境界不够，无从辩驳&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;大多数人所谓的思考，不过是在重复过去的偏见&lt;/p&gt;
&lt;/</summary>
      
    
    
    
    <category term="others" scheme="https://darren-dong.com/categories/others/"/>
    
    
  </entry>
  
  <entry>
    <title>科学surfing</title>
    <link href="https://darren-dong.com/2021/08/21/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>https://darren-dong.com/2021/08/21/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</id>
    <published>2021-08-21T11:41:32.000Z</published>
    <updated>2021-08-21T11:46:32.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="科学surfing"><a href="#科学surfing" class="headerlink" title="科学surfing"></a>科学surfing</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>根据《中华人民共和国计算机信息网络国际联网管理暂行规定》第六条的规定，计算机信息网络直接进行国际联网，必须使用邮电部国家公用电信网提供的国际出入口信道，任何单位和个人不得自行建立或者使用其他信道进行国际联网。公安机关可对违反此规定的人给予警告，并处以最高15000元罚款。有违法所得的，没收违法所得。<br>所以，在我国境内使用未经电信主管部门批准的翻墙软件是违法的。</p><p>但这并不影响翻墙的泛滥，一旦翻过来，就拥有了无数翻墙的渠道。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210821190301246.png" alt="image-20210821190301246" style="zoom: 33%;" /><p>虚拟私人网络（英语：virtual private network，缩写：VPN）是常用于连接中、大型企业或团体间私人网络的通讯方法。它利用隧道协议（Tunneling Protocol）来达到发送端认证、消息保密与准确性等功能。[1]</p><p>即使我学了计算机网络也有点搞不明白VPN是怎么实现绕过中国防火墙的QWQ</p><h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><p>翻墙的原理只有一个，翻墙的方式千千万万，这里推荐的是占了中国翻墙人大半江山的clash+VPN</p><p>clash是一个翻墙用的软件，用于配置本地网络和链接代理商（大佬可以自己搭梯子，别管他们了）</p><p>但你得找到愿意给你提供服务器的代理商，这是卡死很多人的一步，因为很多99%代理商的购买服务必须翻墙才能看到哈哈哈，卡bug呢。</p><p>我一年找到了不少供应商，最后找到一个既稳定又便宜的，5r/月，相比别的供应商20-30r/月可谓不错了</p><p>当然里面有个返利活动:laughing:，你们用我的邀请链接我会有优惠（谢谢orz！）</p><p><a href="https://sockboom.site/auth/register?affid=251805">https://sockboom.site/auth/register?affid=251805</a></p><p>先用这个链接进去注册一个账号，</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210821192129426.png" alt="image-20210821192129426" style="zoom:67%;" /><p>进去以后按照这个教程走一波，非常小白，刚配好有可能会卡。</p><p>新人会送一些流量，但是要长期用得买，不过真心便宜（那个vip没啥用。。）</p><p>配好以后需要翻墙就打开clash，瞬间翻好。</p><p>结束了，关掉吧。</p><h3 id="Dark-web（dangerous）"><a href="#Dark-web（dangerous）" class="headerlink" title="Dark web（dangerous）"></a>Dark web（dangerous）</h3><p>放在这里仅仅是科普。</p><p>庞大的互联网里IP充当坐标的功能，而这些坐标不是都能被访问的（有技术原因也有隐私保护原因），这些网站可能已经被合理地设计出来了，但是他们却没有被任何搜索引擎编列索引，以至于事实上没有人能找到他们。</p><p>深网≠暗网</p><p>暗网是由深网的一小部分所构成的。构成暗网的隐藏服务网络包括<a href="https://zh.wikipedia.org/w/index.php?title=F2F&action=edit&redlink=1">F2F</a>的小型<a href="https://zh.wikipedia.org/wiki/%E7%82%B9%E5%AF%B9%E7%82%B9%E7%BD%91%E7%BB%9C">点对点网络</a>以及由公共组织和个人运营的大型流行网络。黑暗网络用户之间的通信是高度加密的，允许用户以保密方式交流、发博客以及共享文件。</p><p>里面采用了极其复杂和离谱的层层加密技术，用户几乎完全匿名，但仍然非常非常危险。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210821194006422.png" alt="image-20210821194006422"></p><p>黑暗网络网站只能通过Tor（“洋葱路由”项目）和 I2P（“隐形网计划”）等网络访问。黑暗网络用户广泛使用Tor浏览器和Tor可访问的站点，站点可以通过“.onion”域名识别Tor专注于提供对互联网的匿名访问，而I2P则专注于匿名网站托管</p><p>我曾离暗网只差点一下鼠标，但是我最终还是没有按下去，臭名昭著的暗网并不值得我们的好奇！</p><p>有一篇教程坦白了进暗网之前需做的准备：首先创作一个没有任何信息的操作系统账户，注册一个干净的谷歌账号，购买VPN，开启虚拟机（隔离大部分网络攻击），然后准备好工具，进入洋葱网。</p><p>这不是为了教大家咋进去，而是警示暗网的危险性，互联网如今的协议尚未完善，各种攻击方式仍需警惕。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;科学surfing&quot;&gt;&lt;a href=&quot;#科学surfing&quot; class=&quot;headerlink&quot; title=&quot;科学surfing&quot;&gt;&lt;/a&gt;科学surfing&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="others" scheme="https://darren-dong.com/categories/others/"/>
    
    
    <category term="others" scheme="https://darren-dong.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>跨学科通识课</title>
    <link href="https://darren-dong.com/2021/08/09/%E8%B7%A8%E5%AD%A6%E7%A7%91%E9%80%9A%E8%AF%86%E8%AF%BE/"/>
    <id>https://darren-dong.com/2021/08/09/%E8%B7%A8%E5%AD%A6%E7%A7%91%E9%80%9A%E8%AF%86%E8%AF%BE/</id>
    <published>2021-08-09T05:47:56.000Z</published>
    <updated>2021-09-08T03:13:47.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跨学科通识"><a href="#跨学科通识" class="headerlink" title="跨学科通识"></a>跨学科通识</h1><p><strong><a href="https://www.bilibili.com/cheese/play/ep6902">视频地址</a></strong></p><p>所长林超自阅读查理芒格观点后得出的感悟。本课程信奉 <strong>实用主义</strong></p><p>现实生活中的挑战并不是按照大学学科划分的，但每种学科，都为我们解决问题提供了重要的思维模型</p><p>本课程将介绍约22个学科和120个常见思维模型，以及部分应用：</p><p>热力学、函数、工程学、<strong>复杂性科学</strong>、系统论、信息论、会计学、概率论、金融学、生物学、投资学、社会学、管理学、物理学、脑科学、认知心理学、历史学、语言学、逻辑学、经济学、营销学、哲学</p><p> <strong>大多数人的一生都喜欢用一个单薄的知识结构解决所有问题，这是专业化带来的狭隘思维</strong></p><hr><p>像我这样的人才:laughing:（bushi），就应该逐步构建自己的知识体系，哈哈我就是这样做的，我在大一接触了应用数学、博弈论、经济学、投资学、心理学、信息论、运筹学，但是学习方法不对，我需要的不是变成所有领域的专家，而是专精一两门（数据科学+经济学），然后学到其他学科的思考模型，先拿林超大大的课试试水。</p><hr><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210809140718.png"  style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210809140824.png"  style="zoom: 33%;" /><p>20-35岁是人生的黄金时间，抓住啊！</p><h2 id="一、熵与热力学"><a href="#一、熵与热力学" class="headerlink" title="一、熵与热力学"></a>一、熵与热力学</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>S = k * lnW  也可以说熵正比于微状态数</p><p>可能性大 = 熵高 = 混乱程度高</p><p>这个世界上混乱才是常态，有序需要<strong>刻意营造</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210809142123.png"  style="zoom: 25%;" /><p>熵增定律</p><p>封闭系统，与外界隔绝，随时间推移趋于混乱。</p><p>趋于有序的方法</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210809142524.png"  style="zoom: 25%;" /><p>只要它能正确的做好这两件事，就能使事物变得更加有序。</p><hr><p><strong>应用：思维决策层</strong></p><p>在”脑子里放一个小人“，判断该不该继续思考数量繁多而无序的念头，就能让思维变得有序，这相当于是在正常人的思维输入输出模型里面又加了一个决策层啊！果然方法论决定对外界的反馈，厉害。</p><hr><p>耗散结构</p><p>感知和选择需要信息和能量，封闭系统变成开放系统，吸收外界的能量和信息</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210809142944.png"  style="zoom:33%;" /><p>流水不腐就是一个耗散结构，人体也是，耗散结构是一个动态平衡体，变化又保持一个平衡状态。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210809143434.png"  style="zoom:33%;" /><h3 id="运转策略"><a href="#运转策略" class="headerlink" title="运转策略"></a><strong>运转策略</strong></h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210809143513.png"  style="zoom: 33%;" /><p>ps:虽然很多人都是这么做的，但是却没有总结成结论，没有总结成结论，运用的时候就会无效思考，心生犹豫，但若是作为一条公理、定理，一项判断决策，那就非常有价值了！</p><p><strong>人们应该把焦点全部放在蓝色部分的因，接纳红色的因，而不是因为红色的果而感到自责，反而阻止了身体继续排出熵。所以鸡汤里面的依靠决心和自责什么的假大空的，其实就是抓错了重点。</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210809143954.png"  style="zoom:25%;" /><p>我们改变不了整体系统，但我们可以改变 <strong>感知+选择</strong> 这件事</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210809144227.png"  style="zoom: 33%;" /><p>有些人会困在先天的家庭环境带来的红色的果里，有些人会找到铁饭碗，陷入封闭系统里，这个世界充满辩证法，耗散里的选择才是最关键的，如果落实到具体做法，请看👇</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210809144756.png"  style="zoom:50%;" /><p>逐渐的，两种模式都会形成坚固的闭环。B模式总会伴随痛苦，反人性，充满困难。</p><p>工程学告诉我们如何拆解困难，化为一件件小事，轻松KO。</p><h2 id="二、工程学"><a href="#二、工程学" class="headerlink" title="二、工程学"></a>二、工程学</h2><p>很多人知难而退，其实是知的不够</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210809162445785.png"  style="zoom:50%;" /><p>工程学的细分专业非常多：生物、农业、分子、土木、软件、森林。。。</p><p>这节课将提炼共通的重要方法论：<strong>行胜于言、分解结构、量化、列清单、取舍</strong></p><h3 id="行胜于言"><a href="#行胜于言" class="headerlink" title="行胜于言"></a><strong>行胜于言</strong></h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210809163834216.png"  style="zoom: 33%;" /><p>风口思维找到大方向，高风险，看准下手。</p><p>工程思维就喜欢看得见摸得着的，能清楚看清收益回报，也能付出实践的。</p><p>我个人还是更喜欢风口思维，因为确实难以忍受搬砖的枯燥，但找对风口后，要见成效确实得搬砖┭┮﹏┭┮</p><p><strong>激励</strong>来源：</p><p>要联系到后面讲的生理学：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210809164237881.png"  style="zoom:33%;" /><p>内啡肽更长更持久，更有益身心健康，显然搬砖是后者。</p><p>人们往往习惯了多巴胺型快乐，它让人兴奋，但持续时间短，消散时会带来失落等负面情绪。</p><p>曾经物质不丰富，一般是一连串的内啡肽小快乐才等来一次多巴胺型大快乐。</p><p>但如今大刺激唾手可得，导致恶性循环👇：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210809164639424.png"  style="zoom:33%;" /><p>真正公式：</p><p><strong>日常搬砖获得内啡肽型愉悦感，达到了成功再允许自己激发一些多巴胺型的快乐，彻底放松一次</strong></p><p><strong>要是没有达到成果，那就忍着，这才是良性循环</strong></p><h3 id="工程分解结构"><a href="#工程分解结构" class="headerlink" title="工程分解结构"></a>工程分解结构</h3><p>把任意问题拆解，是工程学最核心的思维。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210809165010342.png"  style="zoom:33%;" /><p>这也有一项孪生能力：focus</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210809165516146.png" style="zoom:50%;" /><p>focus like a laser, not like a flash</p><p>无限分解，直到找到抓手，从想-&gt;做就在那一瞬间，在脑科学里就是从一个新脑区的边缘神经元开始激活整个。</p><p>既见树木、也见森林</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210809170229459.png" alt="image-20210809170229459" style="zoom: 67%;" /><hr><p><strong>应用：接触全新学科</strong></p><p>找到该领域最权威的教材，读目录，建框架</p><ul><li>读目录，查清所有不会的术语</li><li>推敲概念之间的关系，建立宏观全局框架</li></ul><p>这是知的部分，全局了解也是非常重要的。</p><hr><p>这才是知行合一，我就是那种喜欢看全局，然后分解不到位，最后懒得搬砖的人哈哈哈</p><h3 id="量化"><a href="#量化" class="headerlink" title="量化"></a>量化</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210809170731986.png" alt="image-20210809170731986" style="zoom:50%;" /><p>一开始只想到房租、售价等几个变量</p><p>开始叙事，通过”讲故事“一步步推衍：</p><p>从开张开始，需要品牌，装修，开工后要培训，设备，原料。。。。</p><p>最后进行数学运算。</p><p>有两种厉害的商业思维分析框架，后面会讲：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210809171033121.png" alt="image-20210809171033121" style="zoom:50%;" /><p>这件事其实非常简单，更何况我可是数学大佬。</p><p><strong>OKR模型</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210809171243197.png" alt="image-20210809171243197" style="zoom:67%;" /><p>竖直分解目标，水平量化目标，案例：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210809171352398.png" alt="image-20210809171352398" style="zoom: 50%;" /><p>这也为行动力提高打下了坚实的基础！</p><h3 id="清单思维"><a href="#清单思维" class="headerlink" title="清单思维"></a>清单思维</h3><p>对应to do list 和 time schedule</p><p>非常简单，但极其有用</p><p>列出来有利于</p><ul><li>确定优先级</li><li>让人专注，有利于“聚焦”。</li><li>利于推敲，找到不严谨的地方</li><li>节省脑资源！！（我就因为这个当年开始列清单的，记得难受死了</li></ul> <img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210809191126647.png" alt="image-20210809191126647" style="zoom:50%;" /><p>to do表和时间表就像一个事情的两个维度，一个以任务为核心一个以时间为核心，推荐飞书表</p><h3 id="取舍"><a href="#取舍" class="headerlink" title="取舍"></a>取舍</h3><p>对大多数人来说，难度更多在 <strong>舍</strong></p><p>一般最多选两样。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210809191611562.png" alt="image-20210809191611562"></p><p>工程思维：便宜+快  （反完美主义，反本能的</p><p>艺术思维：好</p><h2 id="三、系统论"><a href="#三、系统论" class="headerlink" title="三、系统论"></a>三、系统论</h2><p>可以用来分析公司？</p><p>工程思想是拆分的还原论，那么这里就是整体论</p><p>观点：如果不着眼于系统，只改变局部，最终可能总被系统拉回来，比如一个闭环系统👇</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210812003721985.png" alt="image-20210812003721985" style="zoom:33%;" /><p> 系统论相当于是呈现这些“飞轮”的机制，让我们从整体把握这个逻辑</p><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a><strong>系统</strong></h3><p>很多实体通过相互 <strong>联系</strong> 形成了一个有运作规律的整体</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210812005240164.png" alt="image-20210812005240164" style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210812005306703.png" alt="image-20210812005306703" style="zoom:33%;" /></p><p><strong>要素</strong></p><p>+ 正信息  正能量  资产</p><p>-  负信息  负能量  负债    负信息是让世界变得更加混乱的信息，如谎言、谣言</p><p><strong>关系</strong></p><p>+ 加强  - 减弱</p><p><strong>四种循环</strong></p><p>正要素+正关系 = 良性循环</p><p>负要素+正关系 = 恶性循环</p><p>负要素+负关系 = 贤者时刻（纠错）</p><p>正要素+负关系 = 回归平庸（后两个都是均值回归）</p><p>滞后效应</p><p><strong>负循环</strong></p><p>因果分析法，<strong>找到</strong>生活中的负循环</p><p>利用杠杆解，主要矛盾</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210812010338719.png" alt="image-20210812010338719" style="zoom:33%;" /><p>复杂的模型（混沌），如果能找到关键变量，便能牵一发动全身，彻底重构整个系统</p><hr><p><strong>建立仪式！</strong></p><p>所谓仪式，一旦开始，剩下的步骤就不需要控制，利用惯性执行</p><p>这可以尽可能地减少我们大脑的意识消耗。</p><hr><p>建立良性循环</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210812011007405.png" alt="image-20210812011007405" style="zoom:33%;" /><p>我也要建立对自己的信任！</p><p><strong>均值回归</strong>，人是难以突破社会的。。。我跳出了这个圈子，所以我认识的人还是有点少、、、</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210812011253657.png" alt="image-20210812011253657" style="zoom:33%;" /><p>我大概会抛弃回报公平吧，回报什么的没啥意思。</p><p>草，滞后效应，我现在熬夜会搞得以后难受。。。。哎呀好气</p><p>价值投资！也是滞后效应，这就是“确定性啊”</p><h3 id="储蓄池"><a href="#储蓄池" class="headerlink" title="储蓄池"></a><strong>储蓄池</strong></h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210812011807899.png" alt="image-20210812011807899" style="zoom:50%;" /><p>保护自己的缓冲地带</p><p>一个人何以扛过滞后效应，凭借的是</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210812011901249.png" alt="image-20210812011901249" style="zoom: 50%;" /><p>有储蓄机制的系统，也是一个有非常大适应力的系统。</p><p>这也引出好系统的三大特性：</p><ol><li>鲁棒性，可以<strong>建立模拟攻击（跳出舒适圈</strong></li><li>自组织，不依靠外部指令，按照某种内在规则自动自发地形成有序结构的一种现象(人体)</li><li>层次性，子系统，递归，封装思想（刚才的仪式</li></ol><h2 id="四、函数"><a href="#四、函数" class="headerlink" title="四、函数"></a>四、函数</h2><p>函数是这个世界上最美妙的事物之一。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210812012642329.png" alt="image-20210812012642329" style="zoom: 80%;" /><p>对大部分人来说，二号区是最方便的，实用而且简单直观</p><p>教科书为了严谨才把定义搞得那么抽象。函数重要的能力是可视化</p><h3 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h3><h4 id="高特纳曲线"><a href="#高特纳曲线" class="headerlink" title="高特纳曲线"></a><strong>高特纳曲线</strong></h4><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210813094417037.png" alt="image-20210813094417037" style="zoom: 50%;" /><p><strong>不要高估短期能发生的变化</strong></p><p><strong>不要低估长期能发生的变化</strong></p><p>这是由神经科学的人性曲线和物性曲线（逻辑斯蒂函数（sigmoid））叠加构成的。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210813095148856.png" alt="image-20210813095148856" style="zoom:33%;" /><p>而逻辑斯蒂增长就是由指数增长+环境阻力构成的那个物种曲线hhh</p><h4 id="倒U曲线"><a href="#倒U曲线" class="headerlink" title="倒U曲线"></a><strong>倒U曲线</strong></h4><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210813095346101.png" alt="image-20210813095346101" style="zoom:50%;" /><p>可以用在生命机能等诸多现象中</p><p>正余弦函数——波动，周期</p><p>指数函数，跨过某个拐点，就开始起飞。</p><p>对数函数，玻璃顶的存在。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210813101214895.png" alt="image-20210813101214895" style="zoom: 50%;" /><p>这只是个大概。</p><h2 id="五、脑科学"><a href="#五、脑科学" class="headerlink" title="五、脑科学"></a>五、脑科学</h2><p>又称神经科学，作为几乎所有研究人类行为的基础学科</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210813101722891.png" alt="image-20210813101722891" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210813101844649.png" alt="image-20210813101844649" style="zoom:50%;" /><p>爬行脑是很难主管调节的，比如褪黑素得用化学药物，是生存本能。</p><p>所谓的刻意练习，就是利用人类脑对哺乳脑的驯化过程</p><p>新皮质四大脑区：</p><p>额叶、顶叶、</p><h3 id="额叶"><a href="#额叶" class="headerlink" title="额叶"></a>额叶</h3><p>最核心区域，智慧所在</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210813102929814.png" alt="image-20210813102929814" style="zoom:33%;" /><p>分好几个区：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210813103133065.png" alt="image-20210813103133065" style="zoom:33%;" /><p>ps: 布洛卡区和威尔尼克区就是语言中枢。</p><p>前额叶皮质是非常关键的部分，掌管诸多功能，最重要的是 <strong>社交和自控、专注</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210813102334506.png" alt="image-20210813102334506" style="zoom:50%;" /><p>实际上这个距离就是自控和延迟满足，但如今人们的自控能力发展较慢，取而代之的是高维信息处理能力变强，所以人们自控力要在30岁左右才达到巅峰</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210813103419281.png" alt="image-20210813103419281" style="zoom:33%;" /><p>镜像神经元</p><p>负则模仿能力和社交能力，还有共情能力，还有音乐。</p><p>分布在前运动皮质和初级运动皮层。向下直接连着脑干、脊椎。</p><p>还分布在布洛卡区。所以语言和音乐学习的捷径就是浸泡在大环境里面模仿别人，而不是考试。。</p><p>顶叶</p><p>负则统筹和协调，空间想象力</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210813103936139.png" alt="image-20210813103936139" style="zoom:50%;" /><p>颞叶：语言理解，面部识别，洞察力，观察细节。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210813104113191.png" alt="image-20210813104113191" style="zoom:33%;" /><p>枕叶：完全用于视觉</p><hr><h4 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h4><p>发现人类大脑里处理视觉的区域特别多！可视化yyds</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210813104345656.png" alt="image-20210813104345656" style="zoom:50%;" /><p>依次激发更多的脑区！！</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210813104325285.png" alt="image-20210813104325285" style="zoom: 33%;" /><p>单纯语言沟通效率是很低的。</p><h3 id="哺乳脑"><a href="#哺乳脑" class="headerlink" title="哺乳脑"></a>哺乳脑</h3><p>（女发达）<strong>边缘系统</strong>：长期记忆、情绪管理、<strong>嗅觉</strong>（跟这些有关，所以体香很重要）、性唤醒</p><p>（女尤其发达）<strong>扣带回区域</strong>：情感、焦虑、痛苦、自我调节、负面想象</p><p><strong>杏仁核</strong>：恐惧、愤怒、兴奋、战或逃</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210813104933864.png" alt="image-20210813104933864" style="zoom: 50%;" /><p>因此恐惧会抑制人类脑，再聪明也得服从本能，战或逃取决于过去的经历和基因。</p><p>可以通过训练，用经验告诉杏仁核不必恐惧，选择战而不是逃。</p><p>（商家最爱）<strong>基底神经节</strong>：操作技巧、习惯养成、奖赏系统、上瘾系统</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210813105502624.png" alt="image-20210813105502624" style="zoom:33%;" /><p>这个核是消费关键。</p><h4 id="刻意练习"><a href="#刻意练习" class="headerlink" title="刻意练习"></a>刻意练习</h4><p>刻意选择，不断重复。</p><p>就像是不同脑区的神经元链接，多次重复刺激以后形成坚固的道路</p><p>但关键步骤要放慢速度，可能调度更多的脑区观察这个过程。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210813110129493.png" alt="image-20210813110129493" style="zoom:33%;" /><p>所以贴标签是不可取的。</p><h2 id="六、复杂性科学"><a href="#六、复杂性科学" class="headerlink" title="六、复杂性科学"></a>六、复杂性科学</h2><p>还原论或还原主义（英语：Reductionism，又译化约论），是一种哲学思想，认为复杂的系统、事物、现象可以将其化解为各部分之组合来加以理解和描述。</p><p>在哲学上，还原论是一种观念，它认为某一给定实体是由更为简单或更为基础的实体所构成的集合或组合；或认为这些实体的表述可依据更为基础的实体的表述来定义。” 还原论方法是经典科学方法的内核，将高层的、复杂的对象分解为较低层的、简单的对象来处理；世界的本质在于简单性。</p><p>复杂性科学兴起于20世纪80年代的复杂性科学，是系统科学发展的新阶段，也是当代科学发展的前沿领域之一。复杂性科学的发展，不仅引发了自然科学界的变革，而且也日益渗透到哲学、人文社会科学领域。复杂性科学为什么会赢得如此盛誉，并带给科学研究如此巨大的变革呢？主要是因为复杂性科学在<strong>研究方法论上的突破和创新</strong>。在某种意义上，甚至可以说复杂性科学带来的首先是一场方法论或者思维方式的变革。</p><ol><li>它只能通过研究方法来界定，其度量标尺和框架是<strong>非还原</strong>的研究方法论</li><li>它不是一门具体的学科，而是分散在许多学科中，是学科互涉的</li><li>它力图打破传统学科之间互不来往的界限，寻找各学科之间的相互联系、相互合作的统一机制</li><li>它力图打破从<a href="https://baike.baidu.com/item/%E7%89%9B%E9%A1%BF%E5%8A%9B%E5%AD%A6">牛顿力学</a>以来一直统治和主宰世界的线性理论，抛弃<a href="https://baike.baidu.com/item/%E8%BF%98%E5%8E%9F%E8%AE%BA">还原论</a>适用于所用学科的梦想</li><li>它要创立新的理论框架体系或范式，应用新的思维模式来理解自然界带给我们的问题</li></ol><p>复杂性科学是指以复杂性系统为研究对象，以超越还原论为方法论特征，以揭示和解释复杂系统运行规律为主要任务，以提高人们认识世界、探究世界和改造世界的能力为主要目的的一种“学科互涉”(inter—disciplinary)的新兴科学研究形态。</p><p><u>某学者定义：运用跨学科方法，研究不同复杂系统中的<strong>涌现</strong>行为和<strong>统一性规律</strong></u></p><p>《复杂》 入门必读</p><p>《规模》 研究增长</p><p>《系统论》  系统论入门</p><hr><h3 id="复杂系统"><a href="#复杂系统" class="headerlink" title="复杂系统"></a>复杂系统</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210815174046214.png" alt="image-20210815174046214" style="zoom:33%;" /><ol><li>大量个体聚集</li><li>个体间的运作相对简单，但是叠加后产生群体的复杂行为</li><li>能通过不断进化，对环境产生适应性</li></ol><p>关键词：聚集，进化，适应性，涌现</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210815174524772.png" alt="image-20210815174524772" style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210815174958056.png" alt="image-20210815174958056" style="zoom:33%;" /><p>这样简单的三条原则不断循环后，就能发挥超凡的作用。</p><p>这就是单体简单-&gt;群体智慧。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210815190757944.png" alt="image-20210815190757944" style="zoom:33%;" /><h3 id="聚焦"><a href="#聚焦" class="headerlink" title="*聚焦"></a>*聚焦</h3><p>四段论：</p><ol><li><p>清理念头</p><p>整理、列出思绪，保证自己没有牵挂心无旁骛</p></li><li><p>忘我聚焦</p><p>进入超高效状态持续2个小时，完成大部分任务</p></li><li><p>刻意休息</p><p>只能玩，强迫自己玩，比如半个小时</p></li><li><p>惯性工作</p><p>接着大体完成的脉络继续，由于之前的基础，可以低能耗的工作。</p></li></ol><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>这里讲的是工程学里的迭代，尤其是软件开发里的敏捷开发。</p><p>找到自己的最小内核，一层一层递归、累加、迭代，最终涌现成为传奇</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210815192540335.png" alt="image-20210815192540335" style="zoom: 25%;" /><p>在3.0才找到拐点，我们要抱着正确的心理预期，不是每一次迭代都能升级。</p><p><strong>精益创业</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210815192654391.png" alt="image-20210815192654391" style="zoom:25%;" /><p><strong>适应性</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210815192932647.png" alt="image-20210815192932647" style="zoom:33%;" /><p>过犹不及。。彻底失败</p><h2 id="七、认知心理学"><a href="#七、认知心理学" class="headerlink" title="七、认知心理学"></a>七、认知心理学</h2><p>认知心理学（cognitive psychology），20 世纪 50 年代中期在西方兴起的一种心理学思潮和研究方向。广义指研究人类的高级心理过程，主要是认识过程，如注意、知觉、表象、记忆、创造性、问题解决、言语和思维等。狭义相当于当代的信息加工心理学。即采用信息加工观点研究认知过程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;跨学科通识&quot;&gt;&lt;a href=&quot;#跨学科通识&quot; class=&quot;headerlink&quot; title=&quot;跨学科通识&quot;&gt;&lt;/a&gt;跨学科通识&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.bilibili.com/cheese/play/ep69</summary>
      
    
    
    
    <category term="thought" scheme="https://darren-dong.com/categories/thought/"/>
    
    
  </entry>
  
  <entry>
    <title>《十年一梦》</title>
    <link href="https://darren-dong.com/2021/06/15/%E5%8D%81%E5%B9%B4%E4%B8%80%E6%A2%A6/"/>
    <id>https://darren-dong.com/2021/06/15/%E5%8D%81%E5%B9%B4%E4%B8%80%E6%A2%A6/</id>
    <published>2021-06-15T03:22:57.000Z</published>
    <updated>2021-08-15T05:09:13.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十年一梦"><a href="#十年一梦" class="headerlink" title="十年一梦"></a>十年一梦</h1><p>第一篇<strong>读书笔记</strong>，我也不知道该咋写。。</p><h2 id="序1-唯有事实"><a href="#序1-唯有事实" class="headerlink" title="序1 唯有事实"></a>序1 唯有事实</h2><p>我们的认知需要建立在确切的<strong>事实</strong>上，不然就是无根之萍。事实应该包括两个方面，一个是我们自己，另一个是我们所面对的对象，在面对市场的时候，通常假定谁也改变不了市场，只能适应市场，因此我们更有理由重视“自己”</p><p>我们通常忽略自己，但是这是致命的错误，<strong>我们应该主动适应市场</strong>，成为行动的主体但是要认清自己实在是太难了，我们一言一行对周围的影响远超我们的外观。然而我们对这方面<strong>缺乏足够的参照物</strong>，在社会上，这些后果需要相当长的周期才能看得到，以至于我们可能忘记了前因后果，更何况大部分人总是缺乏反思和改正的想法。</p><p>对于学习市场操作，其实很不错，因为反馈是即刻的，这对于认知自己非常有效，但是我们要注意改进和纠正</p><p>另一方面，认清我们面对的对象也并非易事，每个人都有特定而局限的角度和立场，而这些不一定是最佳的，更不可能是全面的，甚至还随时间而改变。关于对象，我们获得的信息也总是滞后、有限的，观察方法和工具也受到时代的限制和自身能力的限制。</p><p>因此，获取事实是艰难的，但是这也是人生的主课，需要我们持续学习、领悟、突破。</p><p>这对初入社会的大学生是一个巨大的考验，光凭自己的人生经验和脑子，很难不吃苦头。</p><p>不要成为环境的奴隶，被各种情绪和刺激占据了所有的心思，做出过度的反应，而是要保持平静，认清这些事实，<strong>不应该预设某种态度</strong>，<strong>应保持思想的开放而不带着偏见</strong>（我感觉我最近偏见有点多了），但是这是十分占据时间精力的，我们要精挑细选有价值、有意义的刺激，而记住，<strong>刺激的重要程度并不和刺激的强度成正比</strong>。</p><p>做人做事从观察事实开始，进而采取行动；在行动过程中，还得持续观察行动的实际效果，反过来调整和修正行动。得到的事实越少，则虚妄的成本越多。</p><p>建议多读《大学》《中庸》《论语》《老子》，还有《周易》！具有极高的实践性，特别是针对个人行为的管理和塑造。尤其适合投资交易者，关键在自己能不能应用。还有就是研究实际案例。</p><p>第二本书《期货交易的策略与技巧》</p><h2 id="前言-艰难的路"><a href="#前言-艰难的路" class="headerlink" title="前言 艰难的路"></a>前言 艰难的路</h2><p><strong>期货交易是一条艰难的路</strong></p><p>不要小看期货交易的艰难性，两三年，甚至十年都是远远不够称得上是精通交易、战胜市场的，更别说孔子先生所说的“从心所欲不逾矩了”。</p><p>青泽先生认为的难点：</p><ol><li><p>理解、把握市场价格波动的特征难</p><p>最刻骨民心的莫过于市场价格的反复无常、神秘莫测，不确定性、随机性。</p><p>很多市场参与者都有一种认知误区：<strong>追求交易的确定性，把科学的思维简单应用到投机交易中，以为预测是市场交易的全部，希望找到一种科学的预测理论，但是这所谓的科学方法主张的严密和正确，其实很多时候不但无用武之地，还可能成为成功的障碍。</strong></p><p>当然，很多预测工具（比如波浪理论）确实很常用，有价值，但是不要把期货投机当作一门科学，事实上，什么理论都无法保证我们的交易和市场走势。</p><p><strong>投机领域充满了辩证法，模糊和缺陷是美，追求完美恰恰背道而驰</strong>。</p><p><u>市场价格运动表面看起来往往是一个偶然性接着另一个偶然性，但是在看似完全偶然的背后，市场也不是完全混乱无序，隐隐约约透露出一定的必然性或者说是趋势性。投机成功的核心就是要去追求，把握这种必然性。</u>，交易高手就是能够从表面上看来不确定、随机的市场波动中找到相对确定、比较有把握的机会，知道什么时候<strong>成功的概率高，比较有利，什么时候静观其变</strong></p><p>从抽象的层面、事后的角度我们可以看清规律，但是对于未来，需要投机者有客观、定量、科学的理性分析能力，也要有灵活、变通、前瞻的艺术、直觉</p></li><li><p>良好的风险管理难</p><p>市场不确定性、随机性的一面决定了投机永远有<strong>博弈的成分</strong>，不可能有科学系统的预测理论。</p><p>良好的风险管理是投资者的立身之本。</p><p><u>期货交易既是一门赢的艺术，更是一门控制风险的输的艺术</u></p><p>成功的投资者在交易中能做到严格控制损失，<strong>即使砍掉亏损部位</strong>，对盈利头寸则做到了尽可能地扩大战果</p><p>短期的走势偶然性、人为性，投机者的贪婪、恐惧等心理因素，是的投机者找到适合自己的风险管理策略并非易事，但是无论是怎样的交易方式，短或长，感性、程序化，都要坚持<strong>几个原则</strong>：</p><ul><li>任何一笔交易都不要出现大的损失</li><li>一如既往的采取试探——加码的交易策略</li><li>在行情走势和自己的判断不一致时迅速止损，一致时逐步加仓，扩大利润</li></ul><p>青泽把期货交易的盈利模式分为两类：仓位取胜（博弈型）、幅度取胜（趋势性），但核心一样。</p></li><li><p>了解自己、战胜自己难</p><p>在某种意义上说这是一个心理游戏，投机者应该做出正确的决策而不是舒服的决策，心理上舒服的决策结果往往很不好，遵守交易技术和资金管理策略，不要被情绪左右。</p><p>从交易之道到市场行为，隔了 知（了解），情（心理认同），意（执行的意志力），这三者的合力才能决定行为是否理性。</p><p>技术和基础知识其实一两年就够了，但是稳定、良好的心态和境界，这可能是一辈子的事</p></li></ol><p><u>关于期货最好的忠告：在开始之前就停止行动</u></p><p>有奇迹的故事，更有数不胜数的尸骨和黯然的退场</p><p>市场交易是残酷、险恶，梦醒之后，也不要忘记当年的热情和豪言壮志（我的热情还没开始呢！</p><p>青泽先生的前言是一篇难得的好文章。</p><h2 id="一、命运之门"><a href="#一、命运之门" class="headerlink" title="一、命运之门"></a>一、命运之门</h2><p>人的命运可以自己选择吗？可以，你可以走你愿意走的路。</p><p>但是，一旦你上了路，回头恐怕就没有那么容易了，人生的许多事情都无法重来一次。</p><p>人生就像一个怪圈。有些年轻时候认为无足轻重的问题，年龄大后可能觉得很重要，比如一个人的修养、个性、习惯等；有些年轻时认为很有意义的事，以后看来往往没有想象中那么有价值，比如年轻的时候某种特别的兴趣和爱好等。</p><p>索罗斯：“你不可能随心所欲，又在市场中有良好的表现”</p><p>一念之差，一面是个哲学领域的教授、学者。一面是专业投资家，睿智的赌徒。</p><p><strong>期货是浓缩的人生</strong>，交易世界和现实生活有着如梦如幻的巨大反差</p><p>当时头脑精明点就能赚到钱，大部分人都是先扎进去，然后才开始了解基本知识，现在的股市就凶险了许多，人们的整体素质高了不少，难度暴增。</p><p>大多数涉足股市的新手，只要在股票上赚过一次钱，就会被吸引住，从此欲罢不能，沉迷上瘾。心乱了</p><p>一次偶然的急于，让他成为公司的操盘手，即使当时毫无投资理念和策略，但这就是时代和命运。</p><p>这给了他坐着一个巨大的发展机会，也让他的人生充满跌宕起伏，承受了许多常人无法体会的坎坷磨难。曲折的经历，平淡的人生，都在羡慕着彼此。</p><h2 id="二、一个与众不同的赌徒"><a href="#二、一个与众不同的赌徒" class="headerlink" title="二、一个与众不同的赌徒"></a>二、一个与众不同的赌徒</h2><p>股票市场要赚大钱，不仅要靠知识，也要靠信念；不但要靠智慧，也要靠胆量。</p><p><strong>新手的运气往往很好</strong></p><p>有观点：新手想要在投机市场中赚钱，最佳策略时找机会大赌一次，而经验丰富，有胜算和有势的人反而应该注意控制资金，减少偶然性运气的影响。<strong>投机是一个大多数人必输的游戏。</strong></p><hr><p>理解股市：</p><p>西方发达国家证券市场诞生的意义来自经济发展的内在需要。有人需要筹集成本，有人希望投资，这是一个公平、高效的互惠互利、各取所需市场。</p><p>中国早期股市却打上了深深的中国特色烙印，为国有企业融资解困。因此判断国内市场我们既要看内在的市场规律，更要高度关注政治、决策的态度，这样才能提高投资的胜算。</p><ol><li><p>用政治眼光来审视股票市场，抓住市场可能出现的重大变化。</p><p>青泽认为在未来相当长的一段时间内仍是政策市，因此股票市场一点出现过于离谱的暴涨暴跌，就随时可能出现外在的力量左右市场走势，回到社会政治所能容忍的范围内。<strong>政治敏感度极其重要。</strong></p></li><li><p>抓住<strong>大行情</strong>可能来临的机会，长线交易，重仓交易，不贪小利，迷恋股市，整天炒来炒去。</p></li><li><p>绝不染指垃圾股，这些股票甚至在大牛市都没有出头之日。</p><p>分散投资是减少垃圾股上海的一个简单策略。</p></li></ol><p><u>重价不重势——典型的外行炒股手法。</u></p><p>作者有了一些新的认识：</p><p>如果股市波动时循环的，而长远看指数一直在稳步上涨，那么，投机者的操作只要稍稍聪明一点，不太干愚蠢的事，在一定意义上，股票交易其实一点风险都没有。作者希望投机者深入透彻地思考👇：</p><ol><li><p>操作手法问题。大利润一定来自于大的市场波动</p><p>要有足够的耐心等待永恒的牛熊循环，不要整天频繁的短线交易，在市场地无需波动中迷失自我</p></li><li><p>投机者的市场信念问题</p><p>巴菲特：“利润有时候往往来自对市场的愚忠”，对市场没有坚定信念的人，往往拿不住很有可能带来巨大回报的仓位，不能获得市场重大波动的利润。但是还是得远离垃圾股。</p></li><li><p>参与股票交易的投资者，对市场指数高低要有一些基本常识，不能犯太离谱的错误。</p><p>但是指数的高低总是相对的，判断起来不是简单的问题。</p></li></ol><hr><p>股票终究不是真正的赌场，背后有企业、业绩、国家政治的影响。</p><p>股市大跌后再买入，耐心等待下个牛市，这是一种常识，但遵循这个简单的真理却十分困难。</p><p>对市场短期走势过于在意，就不宜涉足股票市场。</p><p>通过抓住重大趋势波动来赢利的交易模式，只是一种策略，需要眼光、胆识、魄力和长线持仓的勇气。</p><p><u>对于操盘手来说，一两次交易中出现亏损是非常普通的事情，但是面对重大的历史机遇，在锐利的行情中只赚了小钱，这种错误是无法原谅的。</u></p><h2 id="三、误入“期”途"><a href="#三、误入“期”途" class="headerlink" title="三、误入“期”途"></a>三、误入“期”途</h2><p>【我刚玩投机就误入了hh】</p><p>我被自我一次次打倒，却不知道敌人在哪里。</p><p>在股票、期货这个弱肉强食的市场，大多数散户投机者的命运，就像天空中一只断了线的风筝，一会上升，一会儿下降。散户的资金、心理承受能力、市场经验决定他们注定是被动的牺牲品。在一个不规范的市场中，主力们只要略使小计，就能杀绝大部分跟风者</p><p><strong>如果股票是抽烟，那么期货就是毒品</strong></p><p>期货投机的魔力在于，对于单独某一次交易，即使是赌博，也有50%赢的可能。</p><p>尽管从账面上看，很多人的本金在一天天减少，但是偶尔的几次交易赢利，会使大多数投机者产生一种幻觉，迟早能重新赚回来，还有暴富的机会。但能赚回损失的人是少数。</p><p>短期交易没有什么道理可言，也无从分析，只是凭着感觉对市场波动做出反应。这样的人往往成了市场短期波动的俘虏，思维、情绪被支配，变得不由自主，控制不了自己的交易冲动，不愿失去一切交易机会，过度敏感。</p><p>赚的时候，幻想一直保持，亏的时候十分沮丧，但是一旦进入下一次交易，不佳的心情就被忘记。</p><h2 id="四、绝处逢生"><a href="#四、绝处逢生" class="headerlink" title="四、绝处逢生"></a>四、绝处逢生</h2><p>327之战。</p><p>这是作者的运气，但是也是作者的经验告诉他选择哪一边。</p><p>也许是年龄增长，市场中经历过的偶然性太多了，很多事情的评价标准有时反而变得模糊了。青泽先生现在也不能完全确定当初自己的举动（全仓多头）是疯狂、鲁莽还是大胆、勇敢。这取决于角度。</p><p>毫无疑问，这种重仓交易、以命相搏的交易手法是自取灭亡之道。</p><p>尽管有时候保守和谨慎可能是一种束缚人的枷锁，短期会拖投机者的后腿，但是长远来看，保守、谨慎、稳健无疑是期货交易者的立身之本。</p><p><strong>一旦一个人获得了如此辉煌的战绩，无论旁观者还是他自己，都会有意无意地把这种成功归功于投机者的主观因素，而对事情发生偶然性的一面选择性忽略。</strong></p><p><strong>对于一个职业投机客来说，交易是一条漫长地路，局部的输赢犹过眼云烟，实在是一件无足轻重地小时。过于拘泥某一笔交易地得失，对此痛心疾首或津津乐道，并非是一种聪明、理智的态度。只能说认识浅。</strong></p><h2 id="五、苦闷的求索"><a href="#五、苦闷的求索" class="headerlink" title="五、苦闷的求索"></a>五、苦闷的求索</h2><p>哲学家必须从感觉世界的”洞穴“上升到理智世界</p><p>但是一个人总不可能平白无故地进行行动，他需要某种行为方式和标准，至于这种权威是否可靠并不重要，不然这会让他面对波动不知所措。</p><p><strong>从预测制胜到重视资金、仓位的风险管理到心理、人生修养是一条漫长而痛苦的路。</strong></p><p>短期交易，迷惑人的心智，其实是赌博罢了。</p><hr><p><u>不可能有预测制胜，没有人能精确地预测市场的未来变化。</u></p><p><strong>市场交易是一个动态、系统的控制过程。理解价格变化、判断未来走势只是成功交易的一个不是最重要的环节</strong></p><p>在实际操作中：</p><ul><li>每一次交易投入的资金多少</li><li>情况不利时如何处理，有利时如何加码</li><li>价码后出现有利、不利情况如何应对</li><li>影里的交易怎样既不由赢转亏，又不丧失一旦市场大波动带来的暴利等</li></ul><p><em><strong>这些问题的应对技巧、策略、方法，远比希望准确预测走势重要得多，需要投机者有一套完整、系统的交易思路。</strong></em></p><hr><p>确实，在大行情下的急剧波动，不论多空其实都无安宁。</p><p>据好事者统计，当年在股票、国债期货市场上赚过大钱的人，90%的结局都不太妙，这反映了一些东西。</p><p><u>投机市场中，一个人偶尔可以赚大钱也许并不难，难的是一直稳稳当当地赚钱，而且守得住钱。</u></p><p><a href="https://baike.baidu.com/item/%E7%AE%A1%E9%87%91%E7%94%9F/10343491">管金生</a></p><p>他们藐视法律，操纵行情，玩弄市场。</p><p>中经开的营业部令人向往——神奇的部门</p><p>早期国内股票市场、期货市场，市场操纵横行，政府法规朝令夕改，普通投机者生存环境十分恶劣，在这样的情况下，已经不能完全的归结于投机者自身的内在原因，外界因素几乎对投资者的命运起到决定性的作用</p><h2 id="六、纸上富贵一场梦"><a href="#六、纸上富贵一场梦" class="headerlink" title="六、纸上富贵一场梦"></a>六、纸上富贵一场梦</h2><p>1995，国债期货叫停，游资转战上海、深圳股票市场。</p><p>一次典型的纸上富贵——两鸟在林不如一鸟在手，但是谁有真正看得清这一点呢。</p><p>鞍山信托的一枝独秀——庄家也可能犯错。</p><p>市场里，没有庄家，往往走势清淡乏味。投机者没有机会</p><p>但是庄家来了以后兴风作浪。谁都不可能独善其身，包括庄家自己。</p><h2 id="七、单纯与复杂"><a href="#七、单纯与复杂" class="headerlink" title="七、单纯与复杂"></a>七、单纯与复杂</h2><p>——交易有那么难么</p><p>在成千上万的交易后，总的结果取决于投机者综合实力和心理优势，而不是一两次的市场预测能力。</p><p>在实际交易中，投机者会面临巨大的心理、精神压力，这是一个股评家不能完全了解和体会的。</p><p>一旦建立头寸，趋势就不像原先一般客观、超然、自信，你的恐惧、焦虑、患得患失等主观因素很有可能扭曲你的思维，使你陷入混乱。你当初的判断完全准确，但是你没有从中赚到钱。</p><p>不要依靠盘面变化和市场感觉、本能杀进杀出，这是缺乏理性的，也缺乏外在的客观约束。</p><p>要从长远分析市场状态和下一步变化的可能。看大势，理性审视。</p><p>在期货交易中，如果投机者入市后三天都没有出现利润，立刻平仓出场。</p><p>作者的第一个月大获成功，他在日后也感慨那段时间的美妙和带给他的信心，他总结：</p><ol><li><p>精神、心理条件非常好。</p><p>保持谨慎的态度，反复思考，再三权衡。</p><p>不要奢望一夜之间赚大钱，不要被急躁、贪婪的欲望支配。</p><p>没有交易的损失，没有历史包袱，不会畏手畏脚，在需要大胆行动时犹豫不决</p></li><li><p>中线顺势操作</p><p>中线顺势交易是期货赚钱的最佳策略</p></li><li><p>严格的风险控制</p></li><li><p>加码策略</p><p>试探-加码策略。在第一次投资后，如果市场走势证明判断错误，立马离场。否则便一次次加码，即使资金量不大，这样总能赚大钱，亏小钱。</p></li><li><p>时代和运气</p></li></ol><h2 id="八、兵败苏州红小豆"><a href="#八、兵败苏州红小豆" class="headerlink" title="八、兵败苏州红小豆"></a>八、兵败苏州红小豆</h2><p>当你将身体交给一个陌生人任意处置，你一定会感到愤慨。那么，当你将自己的精神交给一个偶遇者任意处置时，你难道不感到羞愧吗？</p><p><u>许多投机大师都反对利用内幕消息交易，认为这是投机者自我毁灭的捷径</u></p><p>因为急于翻本，作者被负面情绪支配，越做越赔，越赔越做。</p><h2 id="九、与天为敌"><a href="#九、与天为敌" class="headerlink" title="九、与天为敌"></a>九、与天为敌</h2><p>重仓交易的危害</p><p><strong>以安全性为代价追求收益率最终往往是得不偿失的</strong>。——本杰明</p><p>在期货交易中，一个人的心理、精神状态远比他拥有的市场知识和预测技术重要得多</p><p>作者准确的把握了几次做大钱的趋势，但却被短线思维所害，无法贯彻中长线交易的策略和原则。这是一种从“中长线”开始衍生出的一系列思维模式吧</p><p>害怕自己到手的利润得而复失，不愿继续等待利润自然而然地增长，不断换市场。仿佛非常忙碌，但一无所获</p><p><strong>经验不是你经历过什么，而是你从经历中学到了什么，<em>包括别人的经历</em></strong></p><p>期货的成功建立在一个非常危险的观念之上，就像脆弱地基上的大楼，来的快，去的也快。</p><p>P114生动的讲述了作者在面对期货起落的精神状态</p><p>来自十年后的反思：</p><ol><li><p>对于大多数人来说，即使拿出五分之一的资产来从事期货投机，也是危险的</p><p>保守、胆小的行为其实是高瞻远瞩，胆大妄为的重仓交易，早晚会在市场中牺牲。</p></li><li><p>坏习惯“钱烧口袋漏，一有就不留”</p><p>交易的姬会不是每天都有，不能凭想象行事，否则就是不尊重市场，将会受到市场的惩罚</p></li><li><p>在期货市场可以赚大钱，但需要时间，量的积累带来质的飞跃</p><p>重仓交易者企图战胜时间的束缚，一夜暴富，辉煌的成功靠的是以命相搏，一次意外就可能彻底失败。</p><p>真正成功的人，要么是拥有极其强大的意志，在赌赢后果断离场，要么靠的是长期、稳定的赢利。</p></li></ol><p>索罗斯：</p><ul><li>相对于近期赢利，我更关心<strong>基金资本的安全</strong></li><li>我主要还是着眼于<strong>限制亏损</strong>，而不是牟取暴利</li></ul><h2 id="十、激战海南咖啡"><a href="#十、激战海南咖啡" class="headerlink" title="十、激战海南咖啡"></a>十、激战海南咖啡</h2><p>面对诱惑，人的记忆力总显得太弱</p><p>期货市场本应是用来规避风险的地方，然而，曾几何时，在国内的一些交易所，期货却成了制造风险，激化矛盾的东西。</p><p>海南咖啡交易的几大特点：</p><ol><li><p>咖啡纯粹只是个符号被炒作</p><p>它托利里基本面因素和供求关系的制约，谁也不知道内在价值是多少。</p><p>没有人想阵得买进咖啡，投机者的唯一目的是赚取市场差价，最终结果是金钱的重新分配而已。</p><p>这不就是数字货币的雏形吗</p></li><li><p>波动巨大，虽然比不过炒币</p></li><li><p>波动方式诡异，凶狠，残酷</p><p>常规的风险控制措施不管用，绝对不能出现方向性的措施，连续性的跌涨停板，没有逃命的姬会。</p></li><li><p>市场主力争斗你死我活、白热化</p><p>大量非市场因素参与其中</p></li></ol><p><strong>方向判断准确只是交易成功的第一步，并且可能不是最关键的一步。</strong></p><p><strong>赚大钱最主要的是投机者需要有大的耐心和忍耐力，面对短期波动的不确定性、反复无常，要坚定自己的市场信念。</strong></p><p><em><strong>能否抵御市场短期波动的威胁、欺骗，是顺势交易最令人头疼而不得不面对的现实问题。</strong></em></p><p>K线完全是形而上的思维方式，用静止，片面而孤立的观点看待市场，一叶障目，应该从整体，全局，的角度看待。</p><h2 id="十一、逆势操作的反思"><a href="#十一、逆势操作的反思" class="headerlink" title="十一、逆势操作的反思"></a>十一、逆势操作的反思</h2><p><strong>你不可能靠风向标致富</strong>——巴菲特</p><p>比起重仓的谨慎，逆势者像温水里的青蛙，慢慢丧命。</p><p>大多数情况下，市场的趋势运动是温和、缓慢演变的，趋势都不是很明显，具有偶然性和随机性</p><p>所以逆势操作有可能也能赚到钱，因此其巨大危险性不易察觉，直到大势到来，恶果就暴露无遗。</p><p>一般来说，操纵者并不怕市场对手，他们更怕法律和市场监管。期货市场不完善和监管缺失，使他们有机可乘，那么数字货币呢？</p><p>这些折戟的精英们，每一件失败的事都有大量的偶然因素，但是偶然背后也有必然的一面，他们有一些共同的特点：</p><ol><li><p>自负和贪婪</p><p>大多数人似乎总是高估自己的判断力，过于自负</p><p>如果一个投资者顺势交易，他往往觉得自己没有格调，不能证明自己，一旦被套住他会觉得自己愚蠢，一旦成功他会给予自己极高的评价。</p><p>当自负和贪婪集中在一个人身上，尤其是掌握巨额资金的大人物身上，悲剧就开始上演了。</p></li><li><p>侥幸</p><p>心理学预期认为：失败的时候我们是风险的爱好者，有盈利时我们是风险的厌恶者。</p><p><strong>大多数人都是这样，赚小钱、亏大钱，刚好与正确的交易原则相反。</strong></p><p>其实，任何巨大损失的造成，除了突发性消息引起的个别意外情况，一般有从到质变的过程。</p><p>没有人能避免错误，我们能做的只有——止损原则。</p></li><li><p>虚荣</p><p><u>处于自我保护和虚荣的本能下，不愿让别人知道自己犯的错误。</u></p><p>一大群投机者在牛市做空的原因：</p><ol><li>市场行情看似是高估的</li><li>市场行情的矫正时间到了</li><li>他们听到一个看跌的消息，认为价格将会下跌</li><li>消息</li></ol></li></ol><p>人们不愿反思、正视自己的弱点，不愿承认因为缺乏自我约束而犯下的愚蠢错误，故意遗忘掉那些令人不快的痛苦经历。</p><p>理由是：</p><ol><li><p>短线交易方式隐含的天然缺陷</p><p>过于注重细节的人，往往对大事情一无所知</p></li><li><p>总比市场慢一拍的思维</p><p><strong>总以为历史会简单的重复</strong></p></li><li><p>作者迷失在短期波动的大海里</p><p>投机者很容易沉溺短线思维而失去超然的思维，让投机者不知不觉中，稀里糊涂地变成了一个逆势交易者</p></li><li><p>市场趋势会反弹吗？——思维陷阱</p><p>任何一个市场趋势一旦明朗，市场价格往往已经涨跌了相当幅度。</p><p>在这种情况下，市场趋势随时反转的可能性并非不存在。一般人很难不折不扣地遵循顺势投资地原则，就是怕趋势反转。</p><p><strong>在市场交易中，投机者应该做出正确地决策，而不是做出让自己感觉舒服的决策。</strong>所以说投机是反人性</p></li></ol><p>教训：</p><ol><li>价格变化本身透露出的消息远比指标的意义重要。</li><li>对投机者来说，从众是大忌，风向标不会让人赚钱</li><li>再次强调止损</li></ol><p>现代决策心理学的研究表明：当一个人的内心充满矛盾时，最典型的行为特征是不采取任何行动。</p><h2 id="十二、冥河摆渡者"><a href="#十二、冥河摆渡者" class="headerlink" title="十二、冥河摆渡者"></a>十二、冥河摆渡者</h2><p>让新手盲目进入市场是非常不负责任的</p><p>市场交易离不开预测，但是预测只是一个合理的交易计划的一小部分。</p><p>投机者一定要时时刻刻保持冷静、理智，客观、谦逊的评价自己，不论低谷或高峰。</p><p>投机需要技巧、时机、经验和运气，蛮干、强求是无法成功的。</p><h2 id="十三、与恶魔进餐"><a href="#十三、与恶魔进餐" class="headerlink" title="十三、与恶魔进餐"></a>十三、与恶魔进餐</h2><p>市场主力的目的：让大多数投机者犯错，自己从中获利。</p><p>作者入瓮后试图破局：</p><ol><li>在市场真正突破有意义的技术点位后入市 失败</li><li>设置好小亏损，止盈设置高一点，在众多指标中，找到了一种恰好比较符合的遵守</li></ol><p>作者构建了一套理解市场的核心框架工具，严格遵守。</p><p>大势交易准则。</p><h2 id="十四、Jesse-Livermore"><a href="#十四、Jesse-Livermore" class="headerlink" title="十四、Jesse Livermore"></a>十四、Jesse Livermore</h2><p>进入市场前，要爬上巨人的肩膀。</p><p>作者发现安了里费默的这本书。</p><p>本杰明、投资：《价值投资》</p><p>里费默、投机：《股票作手回忆录》</p><p>ps:大致来讲，我们可以把股市回报分为两大类：<strong>基本面和投机面</strong>。基本面是指股票自身给予投资者的回报，主要包括公司分红和盈利增长。而投机面则主要反映了大众对于市场的悲观或者乐观情绪。从比较长的时间维度来看，基本面给予投资者的回报是可以预测并且比较稳定的，而投机面则变化无常，经常在天堂和地狱之间游走。</p><p>全书内容大致分三类：<u>市场认识、交易策略、心理精神</u></p><p><strong>市场认识</strong>：对股票、期货市场的重大原则问题的基本观点。包括市场趋势出现的原因，市场价格变化的必然性、偶然性，操作行为的影响等</p><p><strong>交易策略</strong>：应对市场价格变化的基本方法、技巧。包括入市时机，点位选择，投入资金，利好利空策略，何谓最佳离场时机。</p><p><strong>心理精神</strong>：如何看待盈亏，对待金钱的态度，长线交易中对待波动的准备，还有种种投机者盲目的心里根源。</p><p>不能无原则的止损！趋于大势。</p><p>主力的力量也必须服从供求关系，经济学理论并非毫无用处，市场价格大方向上必然符合经济大规律。</p><p>赚大钱不能靠看盘，而在于股价整个股市行情和走势。</p><p><strong>试探-加码策略</strong>，<strong>好有道理</strong></p><p>有学者认为投机者应该着重追市，在发生突破后再进入市场。</p><h2 id="十六、离市场远一点"><a href="#十六、离市场远一点" class="headerlink" title="十六、离市场远一点"></a>十六、离市场远一点</h2><p>在缓慢上涨的行情中，如果市场涨姿突然加速，这可能是市场要见顶。。</p><p>大行情要有一个发展过程，投机者必须给市场足够的时间，投机者是不是不该天天注意市场细节，而是离他远一点呢？</p><p>一个看图经验，在大幅下跌后的市场行情中，如果市场价格连续两周上涨，周K线都是中等长度阳线，后市往往极度看好。</p><p>既然自己把持不住短期波动的扰乱，那就躲远一点吧！</p><h2 id="十七、投机者"><a href="#十七、投机者" class="headerlink" title="十七、投机者"></a>十七、投机者</h2><p>面对相同的行情，投机者们有着完全不同的各种应对方式。</p><p>市场交易无非一买一卖，但背后却隐含着投机者不同的观念、意识、目的、动机，反映出投机者的价值观、交易理念、对待风险、金钱的态度等。</p><p>投机者在金融领域的最终命运，深层次的原因取决于一个投机者的综合素质——人生修养和境界。</p><p>这建立在两个方面上：</p><ul><li><u>对市场的理解</u>，对市场交易中一些重大的原则性问题的基本态度</li><li><u>对自我的认识</u>，既包括对人类本性的洞察，也包括对自身独特弱点、性格缺陷的反省</li></ul><p>心理游戏，与人斗，与自己斗。</p><p>很多人们都能随口说出的朴素、简单的经验，投机者都为之可能付出过惨痛的代价才能铭刻于心</p><p>投资的特性让人们容易忘记错误，沉迷于数字上涨的愉悦，忘记反省，便多出了无数的错误成本。</p><p>投机里的止损、冲动性交易等问题，其实都不是孤立的，投机者整体的交易理念、境界达不到一定的高度，就难以彻底</p><p><strong>冲动性交易是一种超级短线交易</strong></p><p>缺乏自我控制能力，沉迷于短时间赚大钱的欲望。</p><p>平静、淡然的欣赏市场的变化，也审视着自己的内心世界，这种境界。。</p><p><strong>止损需要莫大的勇气</strong></p><p>再交易不利时果断止损，推翻原来的市场判断是沉重的。这还涉及投机者的市场认识，投机策略，交易思路是否正确，更要求极高的精神境界。</p><p>每一次交易中，具体止损点位的设立，也是个复杂问题。不然就可能来回割肉，被市场愚弄</p><p>不能孤立、静止、机械地看待市场交易中的止损问题。如果一个人的盈利不能弥补止损的损失，那也毫无用处，止损对长线更有意义，因为利润远远大于损失。</p><ul><li>天下唯一确定的事情就是不确定性</li><li>任何决策都是均衡几率的结果</li><li>一旦做出决定就要立刻付出行动</li><li>决策者的品质远远比决策结果重要</li></ul><p>这是一个长期的培养、追求、领悟过程。</p><p>面对市场的不确定性，哲学的世界观、方法论、价值观和抽象思维模式也许能帮助投机者把握市场脉络。</p><p>高手之间的较量是投资哲学的较量，心态和境界的较量。</p><h2 id="十八、你能摆脱地星引力吗"><a href="#十八、你能摆脱地星引力吗" class="headerlink" title="十八、你能摆脱地星引力吗"></a>十八、你能摆脱地星引力吗</h2><p>理智的最后一步就是意识到有无数事物是它力所不及的。</p><p>不知命无以为君子。市场中人的因素重要，偶然性，同样重要。</p><p>环境、机遇和运气对一个的影响也是很大的，过于强调自我的意志、智慧和天赋，难免陷入幼稚和狂妄，付出惨痛的代价。</p><ol><li>社会政治、经济环境</li><li>政策因素，尤其在中国，一定要看得懂国家的态度，做出准确判断</li><li>市场本身，挑选市场，不同市场的规律不同，蕴含的机会也不同，波动大的市场蕴含更多的机会。</li><li>不公平竞争，几十年前市场的公平、公正原则荡然无存，内部勾结严重，尤其是交易所</li></ol><p>不要赌性太重，不要去做那些毫无把握的交易，珍惜已有的东西，善待自己，善待人生。</p><p>要根据环境的变化，审时度势，难免会被市场淘汰。</p><h2 id="十九、里费默之死"><a href="#十九、里费默之死" class="headerlink" title="十九、里费默之死"></a>十九、里费默之死</h2><p>生命本质的非理性之谜</p><p>人难胜天</p><p>一个富有想象力的人，在他的生活中，总是看到自己的生活具有传奇色彩，这就决定了他的生活方式——与其说他想创造美好的生活，不如说他想使他的生活成为一个美妙的故事。</p><p>没有人是绝对理性的，哪怕是传奇。</p><p>人性的困境如此悲哀。金融工程是不是就是为了解决这个问题？</p><p>忍不住好奇心，厌倦呆板的交易策略，迷失在探索市场奥妙的旅程，沉溺交易的快感，最后一无所有。</p><p>难道有什么比让自己心里愉悦更重要的吗？高明的交易原则在内心面前，也显得苍白无力</p><p>投机遵守的规矩是反人性的，领悟市场交易的局限性、危险性、悲剧性——性格决定命运</p><p>投机算的上是工作吗？——天空不留下鸟的痕迹，但我已飞过。</p><p>期货交易要赚钱，不但要有心，更要有运，多少年轻人都死在里面了。</p><p>市场交易中没有持续、安全、稳定的成功之路。</p><p>在西方国家，大众参与期货交易的方式往往是间接的，一般是通过基金让专业人士来操作，而我国期货市场80%都是散户，期货市场的残酷和凶险最后必然会淘汰大部分人，并使他们收到严重的伤害。</p><p>人啊，也许根本就无法战胜非理智地一面。</p><p>张爱玲《非走不可的弯路》</p><p>一个交易经验丰富、市场理解深刻的投机者，经历了长时间的摸索和尝试以后，往往能够建立起自己的交易模式、套路，具有明确的交易思路和交易风格。其思维和行为方式具有逻辑性和前后一致性。</p><p>成功操盘手的几个特征：</p><ol><li><p>拥有一套相对稳定的，有优势、有胜算的交易模式</p><p>这样才能明确自己在市场中关注什么，什么时候采取行动。</p></li><li><p>交易策略和风险控制的始终一贯性</p><p>坚持每一笔交易都不要出现重大损失；每一次都采取试探—加码策略。</p><p>限制亏损，发展利润</p></li><li><p>市场判断和操作的前后一致性</p><p>紧握头寸，把持住长期的确定性</p></li><li><p>哲学境界</p><p>武士道、茶道等东方哲学，在这个孤独的心里搏斗游戏中，如何贯彻一套哲学</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;十年一梦&quot;&gt;&lt;a href=&quot;#十年一梦&quot; class=&quot;headerlink&quot; title=&quot;十年一梦&quot;&gt;&lt;/a&gt;十年一梦&lt;/h1&gt;&lt;p&gt;第一篇&lt;strong&gt;读书笔记&lt;/strong&gt;，我也不知道该咋写。。&lt;/p&gt;
&lt;h2 id=&quot;序1-唯有事实&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="finance" scheme="https://darren-dong.com/categories/finance/"/>
    
    
    <category term="股市心理" scheme="https://darren-dong.com/tags/%E8%82%A1%E5%B8%82%E5%BF%83%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数据科学导论</title>
    <link href="https://darren-dong.com/2021/06/12/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA/"/>
    <id>https://darren-dong.com/2021/06/12/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA/</id>
    <published>2021-06-12T12:33:45.000Z</published>
    <updated>2021-08-09T07:27:44.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据科学导论"><a href="#数据科学导论" class="headerlink" title="数据科学导论"></a>数据科学导论</h1><h2 id="1-基础理论"><a href="#1-基础理论" class="headerlink" title="1 基础理论"></a>1 基础理论</h2><p>数据富足时代——大数据时代</p><ul><li>现代处理器功能增强，密集度up</li><li>存储、管理成本降低，新的存储技术使得数据运行更快，规模up</li><li>跨计算机集群分布计算处理能力，提高了分析复杂数据的能力</li><li>有更多业务数据集可供分析，而且大部分提供了API</li><li>机器学习算法的开源社区日渐庞大</li><li>可视化更容易使用</li></ul><p>很多过去的研究方法和理论思维有明显的“面向数据贫乏时代”特点，不再适用</p><h3 id="1-1-术语定义"><a href="#1-1-术语定义" class="headerlink" title="1.1 术语定义"></a>1.1 术语定义</h3><p>数据、信息、知识、智慧</p><p>结构化数据、半结构化数据、非结构化数据 （可否用传统关系数据库存储）</p><p><strong>结构化：先有结构，再捕获数据</strong></p><p>4V： Volume  Variety  Value  Velocity</p><p>涌现：质变</p><p>理解数据科学：现实映射到数据，研究问题，对现实进行预测、洞见、解释、决策</p><h3 id="1-2-研究目的"><a href="#1-2-研究目的" class="headerlink" title="1.2 研究目的"></a>1.2 研究目的</h3><p>最终目标：实现数据、物质、能量间的转换，降低后两者损耗、提高后两者效果和效率</p><p>具体：</p><ul><li>揭示大数据内容，元数据特征、规律，帮助人们理解大数据的本质特征</li><li>从数据到智慧的转换 P11</li><li>数据洞见：将数据转化为实际行动</li><li>数据业务化</li><li>数据驱动型决策支持，将数据当作驱动方式</li><li>数据产品研发：<strong>0-3次数据 原生 干净 增值 洞见数据</strong></li><li>数据生态系统建设<ul><li>数据生产</li><li>数据采集</li><li>数据处理</li><li>业务流程</li></ul></li></ul><h3 id="1-3-研究视角"><a href="#1-3-研究视角" class="headerlink" title="1.3 研究视角"></a>1.3 研究视角</h3><p>原本：我能为数据做什么</p><p>​            传统的数据工程、数据结构、数据库、数据仓库、数据挖掘都是这个</p><p>​            强调通过人的努力改变数据，使数据更有价值，便于后续利用</p><p>现在：数据能为我做什么</p><p>​            大数据辅助决策、决策支持，带来商业机会，降低不确定性，发现可用的新模式</p><p>​            新术语：数据驱动、数据业务化、让数据说话、以数据为中心、数据柔术 都强调该视角</p><h3 id="1-4-理论体系"><a href="#1-4-理论体系" class="headerlink" title="1.4 理论体系"></a>1.4 理论体系</h3><p>领域知识：决定数据科学的主要关注点、应用领域和未来发展，重要</p><p>理论基础：统计学、机器学习、数据可视化与故事化</p><p>核心内容：</p><ul><li>基础理论：理念、方法、技术、工具、原则、目标等等</li><li>数据加工：融入3C精神，更强调<strong>增值活动</strong></li><li>数据计算：过渡至云计算，则关注的问题发生根本变化</li><li>数据管理：出现新兴的NoSQL、NewSQL和关系云等</li><li>数据分析</li><li>数据产品开发</li></ul><h3 id="1-5-基本原则"><a href="#1-5-基本原则" class="headerlink" title="1.5 基本原则"></a>1.5 基本原则</h3><ol><li><p>三世界原则</p><p>数据世界，使用“痕迹数据”，更加客观，而不是”采访数据“</p><p>第四范式：数据密集型科学发现范式——更注重相关性而不是因果</p></li><li><p>三要素</p><p>理论、实践、精神（3C）</p><p>提升实践能力：参加竞赛+参加开源项目</p><p>Creative Working</p><p>Critical Thinking</p><p>Curious Asking</p></li><li><p>数据密集型原则</p><p>挑战来自数据本身复杂性而不是计算</p></li><li><p>数据中心原则</p><p>从数据出发，改变业务</p></li><li><p>数据范式</p><p><strong>用数据直接解决问题</strong></p></li><li><p>数据复杂性原则</p><p>复杂性被认为是大数据不可分割的属性，数据在先，模式在后或无模式</p></li><li><p>数据资产原则</p></li><li><p>数据驱动原则</p></li><li><p>协同原则</p></li><li><p>从简原则</p><p>数据科学追求简单高效，面向具体应用需求，不考虑通用而复杂的算法</p></li></ol><h3 id="1-6-能力要求"><a href="#1-6-能力要求" class="headerlink" title="1.6 能力要求"></a>1.6 能力要求</h3><ul><li>创新精神、独特视角、不断进取</li><li>团队合作、协同工作</li><li>提出“nice”研究假设和问题，能够完成对应试验设计</li><li>参与项目的经验</li><li>灵活运用领域实务知识经验</li><li>研发数据产品</li></ul><h3 id="1-7-学习"><a href="#1-7-学习" class="headerlink" title="1.7 学习"></a>1.7 学习</h3><p>加法：操作系极强，培养动手操作能力，利用python和R</p><p>减法：不同学科领域对数据科学的研究视角和侧重点不同，应优先学习领域共性的数据科学，再日后专精</p><p>乘法：经典理论X最佳实践，优先学习最代表数据科学的理论和实践，数据科学里<strong>实践领先于理论</strong></p><p>除法：注意学习知识的完整性和逻辑性，用最简单的逻辑和最清楚的语言来学习</p><p>八个步骤：</p><ol><li><p>数学、统计学、机器学习</p></li><li><p>学会写代码</p></li><li><p>理解数据库</p></li><li><p>探索数据科学流程</p><p>采集、探索、加工、建模、验证、报告</p></li><li><p>重视并学习大数据</p></li><li><p>竞赛，建立自己的项目，培养精神</p></li><li><p>实习、集训、进入职场</p></li><li><p>参与社区</p></li></ol><h2 id="2-理论基础"><a href="#2-理论基础" class="headerlink" title="2 理论基础"></a>2 理论基础</h2><h3 id="2-1-学科地位"><a href="#2-1-学科地位" class="headerlink" title="2.1 学科地位"></a>2.1 学科地位</h3><p>跨学科视角</p><p>关注理论研究和<strong>领域务实知识（需要相关专家参与）</strong>的结合</p><p>主要精神是hacker精神</p><h3 id="2-2-统计"><a href="#2-2-统计" class="headerlink" title="2.2 统计"></a>2.2 统计</h3><p>从行为目的和思维方式看</p><p>描述统计+推断统计</p><p>从方法论角度看</p><p>基本分析法：对低层数据（0次1次）分析</p><p>回归、分类、时间序列、线性分析、方差分析、聚类分析、其他</p><p>元分析法：对高层数据（尤其是基本分析法得出的）进一步分析</p><p>方向：</p><ul><li>不再是随机样本，而是全体数据</li><li>不是精确性，而是复杂性，目的不再是追求精确性，而是提升效率</li><li>不是因果关系，而是相关关系</li></ul><h3 id="2-3-机器学习"><a href="#2-3-机器学习" class="headerlink" title="2.3 机器学习"></a>2.3 机器学习</h3><p>基础理论来自多个学科：</p><p>人工智能、贝叶斯方法、计算复杂性理论、控制论、信息论、哲学、心理学与神经生物学、统计学</p><p>分类P62</p><p>按照输出结果：</p><ul><li>概念学习：用结果推出未知的布尔函数，找到最好你和训练样本的假设</li><li>决策树学习：逼近离散值目标函数过程</li><li>分析学习：用先验知识分析每个样本，推算各特征与目标函数的相关性</li><li>归纳学习</li></ul><p>按照学习方式：</p><ul><li>人工神经网络</li><li>贝叶斯学习</li><li>遗传算法</li><li>基于实例学习</li><li>增强学习</li></ul><p>按照学习任务不同：</p><ul><li>监督学习<ul><li>最近邻</li><li>朴素贝叶斯</li><li>决策树</li><li>随机森林</li><li>线性回归</li><li>支持向量机</li><li>神经网络分析</li><li>。。。。</li></ul></li><li>无监督学习<ul><li>K-Means聚类</li><li>主成分分析</li><li>关联规则分析</li></ul></li><li>半监督学习<ul><li>半监督分类：生成式、判别式</li><li>半监督回归：基于差异、基于流形学习</li><li>半监督聚类：基于距离、大间隔方法</li><li>半监督降维：基于类标签、基于成对约束</li></ul></li></ul><p><strong>挑战</strong>：</p><ul><li><p>过拟合（Overfitting）</p><p>训练集准确率高，测试集准确率低</p></li><li><p>维度灾难（Curse of Dimensionality）</p><p>低维算法难以移植到高维</p></li><li><p>特征工程（Feature Engineering）</p><p>还得考虑相关领域知识</p></li><li><p>算法可拓展性（Scalability）</p></li></ul><p>P74常用统计模型和机器学习算法</p><h2 id="3-流程与方法"><a href="#3-流程与方法" class="headerlink" title="3. 流程与方法"></a>3. 流程与方法</h2><p><em><strong>数据科学没有统一的流程，不同专家、应用场景中所提出的流程可能不同，学习数据科学流程的母的在于掌握活动类型，而不是活动之间的严格先后顺序。</strong></em></p><h3 id="3-1-基本流程"><a href="#3-1-基本流程" class="headerlink" title="3.1 基本流程"></a>3.1 基本流程</h3><p>图P83</p><p>数据化、数据加工、数据规整化、探索性分析、数据分析与洞见、结果展现和数据产品的提供</p><ol><li><p>数据化</p></li><li><p>数据加工和规整化</p><p>本质是将低层数据化为高层数据0-&gt;1-&gt;2-&gt;3</p><p><strong>干净数据</strong>（相对脏）：质量没问题，没有缺失值，错误值和噪声信息</p><p><strong>规整数据</strong>（相对乱）：形态符合计算与算法要求，从数据形态分类</p><p>注意应该是<strong>增值过程</strong>，不等于传统的“数据预处理”和“数据工程”</p></li><li><p>探索性分析</p><p>在尽量少的先验假定下探索，通过作图、制表、方程拟合、计算特征量等<strong>探索数据的结构和规律</strong></p><p>先探索后验证</p><ul><li><p>耐抗性：</p><p>对局部不良行为的非敏感性，因为大数据难免有部分差错</p><p>耐抗性分析统计量：集中趋势、离散程度、分布状态、频度等</p></li><li><p>残差</p></li><li><p>重新表达</p><p>找到合适的尺度或数据表达方式进行准换，有利于化简分析，主语对称性，恒定性，线性和可加性，和线性代数概念类似，也叫变换</p></li><li><p>启示</p></li></ul></li><li><p>数据分析与洞见</p><p>在理解数据的基础上，设计、选择、应用具体的机器学习算法和统计模型进行分析</p><ul><li>描述性分析：转换为信息</li><li>预测性分析：转换为知识</li><li>规范性分析：转换为智慧</li></ul></li><li><p>结果展现，提供数据产品</p></li></ol><h3 id="3-2-数据加工"><a href="#3-2-数据加工" class="headerlink" title="3.2 数据加工"></a>3.2 数据加工</h3><p>需求：数据质量要求 和 数据计算要求</p><p>往往需要综合运用多种数据加工方法</p><p>图见P92</p><ol><li><p>数据清洗（多轮审计和清洗）</p><ul><li><p>缺失数据</p><p>识别、分析（特征，影响，原因）、处理（忽略，删除，插值）</p></li><li><p>冗余（重复、无关）数据</p><p>重复数据用重复过滤</p><p>无关数据用条件过滤</p></li><li><p>噪声（错误、虚假、异常）</p><p>分箱、聚类、回归</p></li></ul><hr></li><li><p>数据变换</p><p>使形式符合算法要求，常见策略：</p><ol><li>平滑处理——去噪声</li><li>特征构造——构造新属性，描述客观现实（体积+质量-&gt;密度）</li><li>聚集——汇总聚合数据，进行粗粒度计算（日销量-&gt;月销量）</li><li>标准化</li><li>离散化——用区间标签和概念标签表示属性值</li></ol></li><li><p>数据集成</p><p>内容集成：结构相同、描述不同对象，或可通过映射变为相同（同时进行冲突检测、处理等清洗操作）</p><p>结构集成：来源不同、描述同一对象，分结构和内容两层次，可进行<strong>属性选择</strong></p><p>难点：</p><ul><li>模式集成：如何匹配来自多个数据源的同一实体</li><li>数据冗余：冗余属性可以从其他属性推演出来，命名不一致，用相关分析P99</li><li>冲突检测和消除：比例尺度或编码不同（kg 和 g）</li></ul></li><li><p>数据脱敏（Data Masking）</p><ol><li>单向性：无法从脱敏数据 推导 出原始数据</li><li>无残留：用户无法用其他途径还原敏感信息，小心用户画像技术</li><li>易于实现：涉及数据量大，所以不能太复杂</li></ol></li><li><p>数据归约（Data Reduction）</p><p>在不影响数据完整性和分析结果正确性前提下，减少数据规模和数据量</p><ol><li><p>维归约</p><p>避免维度灾难，减少考虑的随机变量或属性，通常采用线代方法</p><p>主成分分析、奇异值分解、离散小波转换</p></li><li><p>值规约</p><p>用参数模型或非参数模型近似表示数据，只存储生成方法和参数？？</p></li><li><p>数据压缩</p><p>重构数据来压缩</p></li></ol></li><li><p>数据标注：</p><p>对目标数据补充必要的标签类元数据来提高检索、洞察、分析、挖掘效率</p><p>自动化程度：有手工、半自动、自动化标注</p><p>实现层次：语法标注和语义标注  不懂</p></li></ol><h3 id="3-3-数据审计"><a href="#3-3-数据审计" class="headerlink" title="3.3 数据审计"></a>3.3 数据审计</h3><p>按照数据质量的一般规律与评价方法审计，发现问题</p><p>比如缺失值、噪声值、不一致值（相互矛盾）、不完整值（被篡改或无法溯源）</p><p>P102</p><ol><li>预定义审计、自描述性规则</li><li>自定义审计</li><li>可视化审计</li></ol><p>常用技巧：第一数字定律、小概率原理、语言学规律、数据连续性理论、数据鉴别技术</p><h3 id="3-4-数据分析"><a href="#3-4-数据分析" class="headerlink" title="3.4 数据分析"></a>3.4 数据分析</h3><p>描述性-&gt;诊断性-&gt;预测性-&gt;规范性</p><p>​            ↑商务智能              ↑数据科学</p><ol><li><p>描述性</p><p>已经发生了什么</p><p>描述性统计分析方法</p></li><li><p>诊断性</p><p>为什么发生</p><p>关联分析法（数据科学家）和因果分析法（领域专家）</p></li><li><p>预测性</p><p>将要发生什么</p><p>分类分析方法、趋势分析方法</p></li><li><p>规范性</p><p>关注模拟与优化问题，如何从将要发生的事情受惠、如何优化将发生的事</p><p>运筹学、模拟与仿真技术</p></li></ol><h3 id="3-5-数据可视化"><a href="#3-5-数据可视化" class="headerlink" title="3.5 数据可视化"></a>3.5 数据可视化</h3><ol><li>科学可视化</li><li>信息可视化</li><li>可视分析学</li></ol><p>可视分析学以<strong>可视交互</strong>为基础，综合运用图形学、数据挖掘、人机交互，实现人机协同完成可视化任务</p><p>P112有一个模型，有以下特点:</p><ol><li><p>强调从数据到知识的转换过程</p><p>不是单纯的展示，而是转换成<strong>知识</strong>，两种途径 👇</p></li><li><p>强调可视化分析与自动化建模之间的<strong>相互作用</strong></p></li><li><p>强调数据映射和数据挖掘的重要性</p><p>（用来实现👆，作为重要支撑技术），配合使用</p></li><li><p>强调数据加工工作的必要性</p><p>不然会影响可视化效果</p></li><li><p>强调人机交互的重要性</p><p>人机互补和人机协同，重视互补优势</p></li></ol><p><strong>方法体系</strong></p><ol><li><p>方法论基础</p><p>主要指 <strong>视觉编码</strong> 作为数据可视化方法体系的根基</p><p>通常采用视觉图形元素和视觉通道两个维度进行视觉编码</p></li><li><p>基础方法</p><p>建立在👆之上，应用不局限于特定领域，提供高层不同应用领域的共性方法，比如统计图表、图论方法、视觉隐喻、图形符号学</p></li><li><p>领域方法</p><p>往往仅限于特定领域或任务范围，不具备跨领域/任务性</p><p>但在该领域的信度和效度高于基础方法的直接应用</p><p>比如地理信息可视化、时间数据可视化、不确定性、文本、媒体、实时数据之类的</p><p>很多领域已出现了自己独特的数据可视化方法，比如地铁路线图全球统一</p></li><li><p>视觉感知与视觉认知</p><p>视觉编码的关键在于找到符合目标用户群体的视觉感知习惯的表达方法</p><ul><li><p>视觉感知（Visual Perception）</p><p>指客观事物通过视觉感觉器官在人脑中产生直接反映的过程</p><p>应充分利用人类视觉感知特征</p></li><li><p>视觉认知（Visual Coginiton）</p><p>指个体对视觉感知信息的<strong>进一步加工</strong>处理过程</p><p>包括抽取、转换、存储、简化、合并、理解、决策等，很好的例子是<strong>完图法则</strong></p></li></ul></li><li><p>可视化视角下的数据类型</p><ul><li><p>定类数据</p><p>主要用于记录事物的所属类型或标签信息，只能进行相等判断</p></li><li><p>定序判断</p><p>主要记录事物的排信息，支持相等判断和大小比较运算</p></li><li><p>定距排序</p><p>用于记录事物的量化信息，“0”的位置具有任意性，不代表事物是否存在，如温度为0°</p></li><li><p>定比数据</p><p>用于记录事物的量化信息，“0”为基准，表示不存在，例如我的身高是他的1.5倍</p></li></ul></li><li><p>视觉通道的选择方法<strong>P118</strong></p><p>从人类的视觉感知和认知习惯看，数据类型与视觉通道时存在一定的关系的</p><p>一般有：位置、尺寸、数值、纹理、颜色、方向、形状，分别能够对应不同的数据类型</p><p>要综合考虑目标用户需求、可视化任务本身、原始数据的数据类型，成为数据可视化工作的重要挑战</p><p>不同视觉通道的<strong>数据表现力</strong>不同，评判标准：</p><ol><li><p>精确性</p><p>编码结果与原始数据间的吻合程度</p></li><li><p>可辨认性</p><p>字面意思，不要让视觉通道和背景混淆之类的</p></li><li><p>可分离性</p><p>不同视觉通道的表现力之间应具有一定的独立性，比如面积颜色表现力会受到面积大小影响</p></li><li><p>视觉突出性</p><p>编码结果能否在非常短的时间内迅速、精确传达出主要意图</p></li></ol><p>但是应注意：各种视觉通道的表现力往往是<strong>相对</strong>的，与原始数据、通道类型选择、用户感知习惯都有关</p></li><li><p>数据假象</p><p>不可忽视的特殊问题</p><p>目标用户产生的错误或不正确的视觉感知：</p><ol><li>可视化试图所处的上下文可能导致视觉假象</li><li>人眼对亮度和颜色的相对判断容易造成视觉假象</li><li>目标用户的经历和经验可能造成视觉假象</li></ol></li></ol><h3 id="3-6-数据故事化"><a href="#3-6-数据故事化" class="headerlink" title="3.6 数据故事化"></a>3.6 数据故事化</h3><p>“数据的故事化描述”是为了提升数据的可理解性、可记忆性、可体验性</p><p>将“数据”还原成成关联至特定的“情景”的过程，因此故事化也是数据转换的表现形式之一</p><p>三类“情景”：</p><ul><li><p>还原情景</p><p>还原数据所计算和计算信息的“原始情景”</p></li><li><p>移植情景</p><p>将数据移植到另一个真实发生（比如客户熟悉的情景）的情景中</p></li><li><p>虚构情景</p></li></ul><ol><li><p>重要地位</p><p>这被认为是“最后一公里”问题，直接影响整个数据科学项目的成败</p><ul><li><p>易于记忆</p></li><li><p>易于认知</p><p>可视化易于感知、故事化易于认知</p></li><li><p>易于体验</p><p>一是故事讲述者和倾听者之间共享相同、相似的情景</p><p>二是故事的具体表现形式和情节设计</p></li></ul></li><li><p>故事化描述与故事的展现方式</p><p>👆是两个不同的概念，电影、图书、海报等都是故事化处理后、选择特定的形式具体展现</p><ul><li>故事化描述是故事展现的前提条件，不同展现方式表现效果不同</li><li>故事的展现对故事化描述起反馈作用</li></ul></li><li><p>故事化描述的基本原则</p><ol><li><p>忠于数据原则</p><p>尤其不得以“提高故事生动性”为借口扭曲原始数据</p></li><li><p>设计共同情景原则</p><p>要真正了解目标倾听者，结合他们的经验和知识</p></li><li><p>体验式讲述原则</p><p>比如尽量用第一、第二人称，多一些交互式体验</p></li><li><p>个性化定制原则</p></li><li><p>有效性利用原则</p><p>有时候故事化不一定合适，要论证是否合适，是否应采取其他方法</p></li><li><p>3C精神原则</p><p>实现增值，避免套路化</p></li></ol></li></ol><p>近年来，自动化故事化描述成为新的关注点！</p><h3 id="3-7-数据科学项目管理"><a href="#3-7-数据科学项目管理" class="headerlink" title="3.7 数据科学项目管理"></a>3.7 数据科学项目管理</h3><p>遵循一般项目管理的原则和方法</p><p>涉及 <u>整体、范围、时间、成本、质量、人力资源、沟通、风险、采购</u> 九个方面的管理 P129</p><p>So Complex!</p><ol><li><p>主要角色 P130</p><p>项目发起人、项目经理、客户、数据科学家、数据工程师、操作人员</p></li><li><p>基本流程</p><p>都是双向的链条，主要活动包括六项</p><ul><li><p>项目目标的定义</p><p>我们通此项目解决什么问题</p></li><li><p>数据的获得与管理</p><p>我们需要哪些数据？如何获得？如何管理</p></li><li><p>模式/模型的洞见</p><p>我们从数据洞见了什么模式/模型？</p></li><li><p>模式/模型的验证与优化</p><p>已洞见的模式/模型是否可靠、适用以及如何优化</p></li><li><p>结果的可视化与文档化</p><p>我们用什么方式记录和展现数据预期结果</p></li><li><p>模式/模型的应用与维护</p><p>如何运用已确定的模式/模型解决实际问题，并根据数据和问题的动态变化优化模式/模型。</p></li></ul></li></ol><h3 id="3-8-数据科学常见错误"><a href="#3-8-数据科学常见错误" class="headerlink" title="3.8 数据科学常见错误"></a>3.8 数据科学常见错误</h3><p>主要原因在于人们尚未完全理解数据科学理念、理论、方法、工具</p><p>用自己一贯采用的习惯性思维和传统理论去“解决”大数据问题</p><ol><li><p>不检查数据</p><p>80%时间获取、清理数据，检查是否可用，谨慎使用模拟数据</p></li><li><p>不理解数据</p><p>应该在训练数据模型前仔细研究数据，更快的利用直觉</p></li><li><p>不评估数据</p><p>对数据内容及其模态和目标任务之间的匹配度进行评估，寻找新的途径而不老是局限于过去</p><p>从小目标开始、不要一开始就挑战技术难题</p></li><li><p>不测试模型</p></li><li><p>只有目标、没有假设</p><p>合情的假设可以从一开始缩小范围，减少在这个问题上浪费的时间</p></li><li><p>采用过时失效的模型</p><p>当你的竞争对手从你的市场表现中学习时就已经过时了</p></li><li><p>不评估最终结果</p></li><li><p>忽略业务专家的作用</p><p>比如在确定需要的特征时节省大量的时间</p><p>开始项目前，数据团队和业务专家之间进行对话，确保每个人都清楚项目要实现什么效果，然后做探索性的数据分析，看看能否实现它，如果不能，可能需要用一种新的方法重新表述该问题，或者采用不同的数据源，但这个具体领域的专家<strong>应该帮助确定目标是什么以及项目是否符合目标</strong></p></li><li><p>选择过于复杂的模型/算法</p><p>简单优先，先考虑简单的，注意到过拟合更可能发生在复杂的算法中</p></li><li><p>模型与算法选择上的偏见</p><p>最好从开源模型中构筑自己的版本</p></li><li><p>曲解基本概念和基础原理</p></li><li><p>低估目标用户的理解能力</p></li></ol><p>奥卡姆剃刀定律：</p><ol><li>剃掉不必要的假设</li><li>分割两个类似的结论来区分两个假设</li></ol><p>不应盲目追求数据量，以最必要的数据集为基础数据，不要追求”高大上“。。</p><h2 id="4-技术与工具"><a href="#4-技术与工具" class="headerlink" title="4. 技术与工具"></a>4. 技术与工具</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210612204625.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据科学导论&quot;&gt;&lt;a href=&quot;#数据科学导论&quot; class=&quot;headerlink&quot; title=&quot;数据科学导论&quot;&gt;&lt;/a&gt;数据科学导论&lt;/h1&gt;&lt;h2 id=&quot;1-基础理论&quot;&gt;&lt;a href=&quot;#1-基础理论&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="data science" scheme="https://darren-dong.com/categories/data-science/"/>
    
    
  </entry>
  
  <entry>
    <title>基本数据结构实现</title>
    <link href="https://darren-dong.com/2021/05/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://darren-dong.com/2021/05/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2021-05-25T05:15:54.000Z</published>
    <updated>2021-08-01T15:42:22.152Z</updated>
    
    <content type="html"><![CDATA[<p>考前抱佛脚┭┮﹏┭┮</p><p>记住这里大量用了c++的引用。。好方便，但是答题的时候记得换成 *和全局变量</p><p>一个算法应该具有以下特性：</p><ol><li>有穷性</li><li>确定性  不存在二义性</li><li>可行性</li><li>有输入</li><li>有输出</li></ol><p>1&lt;n&lt;log2n&lt;n&lt;nlog2n&lt;n2&lt;n3 (多项式)|| &lt;2n&lt;n!(指数)</p><h1 id="1-线性表"><a href="#1-线性表" class="headerlink" title="1.线性表"></a>1.线性表</h1><h2 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h2><p>SqList 是线性表</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*基本运算：InitList(&amp;L);DestoryList(&amp;L);ListEmpty(L);ListLength(L);DispList(L);GetElem(L,i,&amp;e);LocateElem(L,e);ListInsert(&amp;L,i,e);ListDelete(&amp;L,i,&amp;e);*/</span><span class="token comment">/*线性表的顺序存储i--; //转化为物理序号if(i&lt;1 || i>L->length+1) //插入的时候是允许插入第 n+1 位置的，所以还要额外+1最后不要忘了改一下k的符号*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">50</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> SqList<span class="token punctuation">;</span> <span class="token comment">//顺序表类型</span><span class="token comment">//需要改变的就传入引用，不需要改变的就直接传入指针就好了。</span><span class="token keyword">void</span> <span class="token function">CreateList</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//用来统计数量，i用来当索引，但是为什么不直接用i呢？</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SqList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    L<span class="token operator">-></span>length <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">InitList</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SqList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestroyList</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">ListEmpty</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> L<span class="token operator">-></span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">ListLength</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> L<span class="token operator">-></span>length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DispList</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token operator">-></span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>bool <span class="token function">GetElem</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> L<span class="token operator">-></span>length<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    e <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">LocateElem</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> L<span class="token operator">-></span>length <span class="token operator">&amp;&amp;</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> e<span class="token punctuation">)</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> L<span class="token operator">-></span>length<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//记住逻辑序号和物理序号差了一个1嗷</span><span class="token punctuation">&#125;</span>bool <span class="token function">ListInsert</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> L<span class="token operator">-></span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> L<span class="token operator">-></span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//插入的时候是允许插入最后一个位置的，所以还要额外+1</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    i<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//转化为物理序号</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">></span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        L<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    L<span class="token operator">-></span>length<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">ListDelete</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> L<span class="token operator">-></span>length<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    i<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//转换成物理非常重要！</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> L<span class="token operator">-></span>length<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        L<span class="token operator">-></span>data<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    L<span class="token operator">-></span>length<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//****************************************************************************************************</span><span class="token comment">//删除L中所有值等于 x 的元素，双指针扫描</span><span class="token keyword">void</span> <span class="token function">delnode1</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token operator">-></span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            L<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    L<span class="token operator">-></span>length <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//用k记录个数</span><span class="token keyword">void</span> <span class="token function">delnode2</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token operator">-></span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            L<span class="token operator">-></span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    L<span class="token operator">-></span>length <span class="token operator">-=</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//这一片巧妙利用“缺位，补位”的技巧，节省了许多空间和时间，直接对换会消耗一个额外内存，不如缺位补位</span><span class="token comment">//感觉不够通用,不过现在懒得改了，很多二分的其实都是pattition，跟python提供的key函数参数一样</span><span class="token keyword">void</span> <span class="token function">partition1</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> L<span class="token operator">-></span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    ElemType pivot <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//中文翻译：枢</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> i <span class="token operator">&amp;&amp;</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> pivot<span class="token punctuation">)</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        L<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    L<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//顺序表归并算法,要求不改变原有的LA和LB</span><span class="token keyword">void</span> <span class="token function">UnionList</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>LA<span class="token punctuation">,</span> SqList <span class="token operator">*</span>LB<span class="token punctuation">,</span> SqList <span class="token operator">*</span><span class="token operator">&amp;</span>LC<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//i,j为两组下标</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>LA<span class="token operator">-></span>length <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>LB<span class="token operator">-></span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LA<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>LB<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            LC<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> LA<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">,</span>k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            LC<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> LB<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">,</span>k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>LA<span class="token operator">-></span>length<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        LC<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> LA<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">,</span>k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token operator">&lt;</span>LB<span class="token operator">-></span>length<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        LC<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> LB<span class="token operator">-></span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">,</span>k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    LC<span class="token operator">-></span>length <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>p是遍历用的节点，有一个工具节点用来接受创建或者进行删除，insert用s，delete用q</p><p>尾插法的工具节点r</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*单链表记得要设置最后一个是NULLLinkNode *pre = L,*p = L->next   //这个初始化挺好的！！！分析多或少1的时候，从开头0各和少数几个的极端情况分析。头节点L是没有存放数据的，也不算进长度，这就解释了为什么p有时是L有时是L->next，插入和删除都是先j&lt;i-1找到第i-1然后操作,所以初始化为p = L，因为是对后面那个操作*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">50</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> LinkNode<span class="token punctuation">;</span> <span class="token comment">//顺序表类型</span><span class="token comment">//头插法</span><span class="token comment">/*这里如果只传指针的话，只是传了一个指针的副本，相当于告诉你我的地址在这里，你可以修改我地址里的东西，但是这没有什么意义，因为我需要操作的是这个指针，不然操作全都传不回去，相当于你把一个副本连在一个结构里了，虽然这个副本和原来的指针有着相同的地址，但是此时我并不需要这个地址，我此时需要的是指针本身。加引用才是把原本的指针传过来了。*/</span><span class="token keyword">void</span> <span class="token function">CreateListF</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkNode <span class="token operator">*</span>s<span class="token punctuation">;</span> <span class="token comment">//工具节点上线</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//经典创建</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>data <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>next <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>        L<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token comment">//头插四件套</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//尾插法</span><span class="token keyword">void</span> <span class="token function">CreateListR</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkNode <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>data <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        r <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">InitList</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestroyList</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkNode <span class="token operator">*</span>pre <span class="token operator">=</span> L<span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">//这个初始化挺好的！！！</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>        pre <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最后一步别忘了！！</span><span class="token punctuation">&#125;</span>bool <span class="token function">ListEmpty</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">ListLength</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    LinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        n<span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DispList</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">GetElem</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token comment">//别漏了</span>    LinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> i <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        e <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token keyword">int</span> <span class="token function">LocateElem</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span>L<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//逻辑修正</span>    LinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>data <span class="token operator">!=</span> e<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">ListInsert</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    LinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">,</span> <span class="token operator">*</span>s<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>        s<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>bool <span class="token function">ListDelete</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    LinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token comment">//多检验一次，因为检验不到这里</span><span class="token comment">/*不如直接if(!(p &amp;&amp; p->next)) return false;*/</span>        e <span class="token operator">=</span> q<span class="token operator">-></span>data<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//****************************************************************************************************</span><span class="token comment">//删除一个单链表L中元素最大的节点（假设唯一）插入一个标记就好了</span><span class="token keyword">void</span> <span class="token function">delmaxnode</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>pre <span class="token operator">=</span> L<span class="token punctuation">,</span> <span class="token operator">*</span>maxp <span class="token operator">=</span> p<span class="token punctuation">,</span> <span class="token operator">*</span>maxpre <span class="token operator">=</span> pre<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxp<span class="token operator">-></span>data <span class="token operator">&lt;</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            maxp <span class="token operator">=</span> p<span class="token punctuation">;</span>            maxpre <span class="token operator">=</span> pre<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        pre <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    maxpre<span class="token operator">-></span>next <span class="token operator">=</span> maxp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>maxp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使元素递增有序排列，没有想象中巧妙</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkNode <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>pre<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>    L<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">//p接下了第二个节点，原来的头和首被当作了新的有序链表</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">//保存原来剩下的链</span>        pre <span class="token operator">=</span> L<span class="token punctuation">;</span>     <span class="token comment">//每次pre都从头扫描一遍。。。</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pre<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pre<span class="token operator">-></span>next<span class="token operator">-></span>data <span class="token operator">&lt;</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span>            pre <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment">//找到合适的位置</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>        pre<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//p接在这</span>        p <span class="token operator">=</span> q<span class="token punctuation">;</span><span class="token comment">//去q保存的地方继续操作</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">UnionList1</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span>LA<span class="token punctuation">,</span>LinkNode <span class="token operator">*</span>LB<span class="token punctuation">,</span>LinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>LC<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkNode <span class="token operator">*</span>pa <span class="token operator">=</span> LA<span class="token operator">-></span>next<span class="token punctuation">,</span><span class="token operator">*</span>pb <span class="token operator">=</span> LB<span class="token operator">-></span>next<span class="token punctuation">,</span><span class="token operator">*</span>r<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">;</span><span class="token comment">//尾插法和创建</span>    LC <span class="token operator">=</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pa<span class="token operator">!=</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pb<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pa<span class="token operator">-></span>data <span class="token operator">&lt;</span> pb<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            s <span class="token operator">=</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token operator">-></span>data <span class="token operator">=</span> pa<span class="token operator">-></span>data<span class="token punctuation">;</span>            r<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>            r <span class="token operator">=</span> s<span class="token punctuation">;</span>            pa <span class="token operator">=</span> pa<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pb<span class="token operator">-></span>data <span class="token operator">></span> pa<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            s <span class="token operator">=</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token operator">-></span>data <span class="token operator">=</span> pb<span class="token operator">-></span>data<span class="token punctuation">;</span>            r<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>            r <span class="token operator">=</span> s<span class="token punctuation">;</span>            pb <span class="token operator">=</span> pb<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pa<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>data <span class="token operator">=</span> pa<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        r <span class="token operator">=</span> s<span class="token punctuation">;</span>        pa <span class="token operator">=</span> pa<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pb<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>data <span class="token operator">=</span> pb<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        r <span class="token operator">=</span> s<span class="token punctuation">;</span>        pb <span class="token operator">=</span> pb<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*双链表return true;//不要漏了*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DNode</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">DNode</span> <span class="token operator">*</span>prior<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">DNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> DLinkNode<span class="token punctuation">;</span> <span class="token comment">//顺序表类型</span><span class="token comment">//建立头插法</span><span class="token keyword">void</span> <span class="token function">CreateListF</span><span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    DLinkNode <span class="token operator">*</span>s<span class="token punctuation">;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DLinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>prior <span class="token operator">=</span> L<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DLinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>prior <span class="token operator">=</span> L<span class="token punctuation">;</span>        s<span class="token operator">-></span>data <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>next <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment">//一共要链4条，但是这一条可能不需要链接👇</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            L<span class="token operator">-></span>next<span class="token operator">-></span>prior <span class="token operator">=</span> s<span class="token punctuation">;</span>        L<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">CreateListR</span><span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    DLinkNode <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DLinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DLinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>data <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        s<span class="token operator">-></span>prior <span class="token operator">=</span> r<span class="token punctuation">;</span>        r <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//其余操作很多类似单链表，插入和删除有点区别罢了,工具节点叫s</span>bool <span class="token function">ListInsert</span><span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    DLinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">,</span> <span class="token operator">*</span>s<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DLinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>        s<span class="token operator">-></span>prior <span class="token operator">=</span> p<span class="token punctuation">;</span>        s<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            p<span class="token operator">-></span>next<span class="token operator">-></span>prior <span class="token operator">=</span> s<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span> <span class="token comment">//不要漏了</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//****************************************************************************************************</span><span class="token comment">//工具节点叫q</span>bool <span class="token function">ListDelete</span><span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    DLinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> i <span class="token operator">&amp;&amp;</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        e <span class="token operator">=</span> q<span class="token operator">-></span>data<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            q<span class="token operator">-></span>next<span class="token operator">-></span>prior <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//逆置,头插法就能进行逆置,头节点还能保留</span><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    DLinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    L<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            L<span class="token operator">-></span>next<span class="token operator">-></span>prior <span class="token operator">=</span> p<span class="token punctuation">;</span>        p<span class="token operator">-></span>prior <span class="token operator">=</span> L<span class="token punctuation">;</span>        L<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        p <span class="token operator">=</span> q<span class="token punctuation">;</span> <span class="token comment">//继续指向后继节点</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//双链表的删除是不需要工具节点的，这里用一个循环双链表的例子展示一下,删除第一个data为x的节点</span>bool <span class="token function">delelem</span><span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    DLinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">//不需要工具点，p可以直接指向操作节点，而不是前一个</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> L <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>data <span class="token operator">!=</span> x<span class="token punctuation">)</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> L<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        p<span class="token operator">-></span>next<span class="token operator">-></span>prior <span class="token operator">=</span> p<span class="token operator">-></span>prior<span class="token punctuation">;</span>        p<span class="token operator">-></span>prior<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//循环双链表判断对称</span>bool <span class="token function">Symm</span><span class="token punctuation">(</span>DLinkNode <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    bool same <span class="token operator">=</span> true<span class="token punctuation">;</span> <span class="token comment">//这类题的典型flag</span>    DLinkNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    DLinkNode <span class="token operator">*</span>q <span class="token operator">=</span> L<span class="token operator">-></span>prior<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>same<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">!=</span> q<span class="token operator">-></span>data<span class="token punctuation">)</span>            same <span class="token operator">=</span> false<span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> q <span class="token operator">||</span> p <span class="token operator">==</span> q<span class="token operator">-></span>prior<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//当相等（奇数）或相邻（偶数），为结束条件</span>            q <span class="token operator">=</span> q<span class="token operator">-></span>prior<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> same<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-栈和队列"><a href="#2-栈和队列" class="headerlink" title="2.栈和队列"></a>2.栈和队列</h1><h2 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">50</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> SqStack<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InitStack</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>SqStack <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SqStack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestroyStack</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">StackEmpty</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">Push</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>top <span class="token operator">==</span> MAXSIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    s<span class="token operator">-></span>top<span class="token operator">++</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>data<span class="token punctuation">[</span>s<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">Pop</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    e <span class="token operator">=</span> s<span class="token operator">-></span>data<span class="token punctuation">[</span>s<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>top<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">GetTop</span><span class="token punctuation">(</span>SqStack <span class="token operator">*</span>s<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    e <span class="token operator">=</span> s<span class="token operator">-></span>data<span class="token punctuation">[</span>s<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断字符串是否为对称串</span>bool <span class="token function">Symmetry</span><span class="token punctuation">(</span>ElemType str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    ElemType e<span class="token punctuation">;</span>    SqStack <span class="token operator">*</span>st<span class="token punctuation">;</span>    <span class="token function">InitStack</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">Push</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Pop</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">DestroyStack</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">DestroyStack</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*共享栈，适用于一方可能用到满，另一方还有很多空间栈空：top1 == -1   top2 == MAXSIZE栈满：top1 ==top2-1进栈出栈的时候top2的操作和top1是反的循环队列A[0..n-1]存放其元素值，F表示队头元素所在的前一个位置，R表示队尾元素的位置。则当前队列中的元素数是当R>F时，元素个数为  R-F个当R&lt;F时，元素个数为 n - （F-R）= R-F+n个*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//选用带头结点的，更加便捷</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">50</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">linknode</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    linknode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> LinkStNode<span class="token punctuation">;</span> <span class="token comment">//这名字真长</span><span class="token keyword">void</span> <span class="token function">InitStack</span><span class="token punctuation">(</span>LinkStNode <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestroyStack</span><span class="token punctuation">(</span>LinkStNode <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkStNode <span class="token operator">*</span>pre <span class="token operator">=</span> s<span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>        pre <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">StackEmpty</span><span class="token punctuation">(</span>LinkStNode <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>LinkStNode <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkStNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">;</span>    s<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">Pop</span><span class="token punctuation">(</span>LinkStNode <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkStNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">;</span>    e <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>    s<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">GetTop</span><span class="token punctuation">(</span>LinkStNode <span class="token operator">*</span>s<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    e <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token operator">-></span>data<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//迷宫问题和逆波兰表达式在P87</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//在队头进行删除，在队尾进行插入</span><span class="token comment">//记住，front指的是空的地方</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">50</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Elemtype<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    Elemtype data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">,</span> rear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> SqQueue<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    q <span class="token operator">=</span> <span class="token punctuation">(</span>SqQueue <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SqQueue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-></span>front <span class="token operator">=</span> q<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestoryQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>front <span class="token operator">==</span> q<span class="token operator">-></span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">enQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">,</span> Elemtype e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>rear <span class="token operator">==</span> MAXSIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    q<span class="token operator">-></span>rear<span class="token operator">++</span><span class="token punctuation">;</span>    q<span class="token operator">-></span>data<span class="token punctuation">[</span>q<span class="token operator">-></span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">deQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">,</span> Elemtype <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>front <span class="token operator">==</span> q<span class="token operator">-></span>rear<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    q<span class="token operator">-></span>front<span class="token operator">++</span><span class="token punctuation">;</span>    e <span class="token operator">=</span> q<span class="token operator">-></span>data<span class="token punctuation">[</span>q<span class="token operator">-></span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/****************************************************************************************/</span><span class="token comment">//环形队列</span><span class="token keyword">void</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    q <span class="token operator">=</span> <span class="token punctuation">(</span>SqQueue <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SqQueue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-></span>front <span class="token operator">=</span> q<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//不是-1了</span><span class="token punctuation">&#125;</span>bool <span class="token function">enQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">,</span> Elemtype e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>q<span class="token operator">-></span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAXSIZE <span class="token operator">==</span> q<span class="token operator">-></span>front<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    q<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAXSIZE<span class="token punctuation">;</span>    q<span class="token operator">-></span>data<span class="token punctuation">[</span>q<span class="token operator">-></span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">dequeue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">,</span> Elemtype e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>front <span class="token operator">==</span> q<span class="token operator">-></span>rear<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    q<span class="token operator">-></span>front <span class="token operator">=</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAXSIZE<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//这两个if判断条件挺有趣的</span><span class="token comment">//队列非常有层次感，有很多妙用，既可以用于递归层次，又可以用于重复</span><span class="token comment">//比如书上这个很强的1212报到1出列的问题</span><span class="token keyword">void</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    ElemType e<span class="token punctuation">;</span>    SqQueue <span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">enQueue</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"报数出列顺序：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">dequeue</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">dequeue</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">enQueue</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//偶数惨遭重新排队哈哈</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DestoryQueue</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//还可以定制双端队列什么的，其实原理都差不多</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链队"><a href="#链队" class="headerlink" title="链队"></a>链队</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">qnode</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">qnode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> DataNode<span class="token punctuation">;</span><span class="token comment">//需要一个链队节点</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    DataNode <span class="token operator">*</span>front<span class="token punctuation">;</span>    DataNode <span class="token operator">*</span>rear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> LinkQuNode<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>LinkQuNode <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkQuNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkQuNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-></span>front <span class="token operator">=</span> q<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestroyQueue</span><span class="token punctuation">(</span>LinkQuNode <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    DataNode <span class="token operator">*</span>pre <span class="token operator">=</span> q<span class="token operator">-></span>front<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">free</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这个怎么总是忘掉啊！</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>LinkQuNode <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>rear <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>LinkQuNode <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span> <span class="token comment">//因为无限长度，所以类型是bool</span><span class="token punctuation">&#123;</span>    DataNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span>DataNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>rear <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        q<span class="token operator">-></span>front <span class="token operator">=</span> q<span class="token operator">-></span>rear <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment">//还要判断是不是空列表！！！</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        q<span class="token operator">-></span>rear<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>        q<span class="token operator">-></span>rear <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>bool <span class="token function">dequeue</span><span class="token punctuation">(</span>LinkQuNode <span class="token operator">*</span><span class="token operator">&amp;</span>q<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    DataNode <span class="token operator">*</span>t<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>rear <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    t <span class="token operator">=</span> q<span class="token operator">-></span>front<span class="token punctuation">;</span><span class="token comment">//两种情况都可以先将t指过来</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>front <span class="token operator">==</span> q<span class="token operator">-></span>rear<span class="token punctuation">)</span> <span class="token comment">//只有一个节点</span>        q<span class="token operator">-></span>front <span class="token operator">=</span> q<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        q<span class="token operator">-></span>front <span class="token operator">=</span> t<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-串"><a href="#3-串" class="headerlink" title="3.串"></a>3.串</h1><h2 id="顺序串"><a href="#顺序串" class="headerlink" title="顺序串"></a>顺序串</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">若串S<span class="token operator">=</span>′software′<span class="token punctuation">,</span>其子串的数目是<span class="token punctuation">(</span><span class="token punctuation">)</span>字符串的子串，就是字符串中的某一个连续片段。截取一个字符串长度需要一个起始位置和结束位置。字符串“software”有<span class="token number">8</span>个字符，可是设置间隔的位置有<span class="token number">9</span>个，使用<span class="token function">C</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">36</span>即可求得字符串“software”的所有子串。因为题目标明空串也是子串，故还需要加上<span class="token number">1</span>，总共<span class="token number">37</span>个子串。所以答案选<span class="token number">37</span>空格串是指由空格字符所组成的字符串，其长度等于空格个数。 。组成串的数据元素只能是字符。<span class="token comment">/*StrAssign(&amp;s,cstr)将cstr字符串内容赋给sDestoryStr(&amp;s)销毁串StrCopy(&amp;s,t)串复制，将串t赋给串sStrEqual(s,t)StrLength(s)Concat(s,t)返回一个新串，不改变原来的串SubStr(s,i,j)求子串InsStr(s1,i,s2)字串插入DelStr(s,i,j)字串删除RepStr(s,i,j,t)字串替换DispStr(s)串输出*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">50</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> SqString<span class="token punctuation">;</span><span class="token comment">//把字符串转换成串的数据结构</span><span class="token keyword">void</span> <span class="token function">StrAssign</span><span class="token punctuation">(</span>SqString <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">char</span> cstr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cstr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cstr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>length <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestoryStr</span><span class="token punctuation">(</span>SqString <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//因为这个不是malloc分配的，会自动回收</span><span class="token keyword">void</span> <span class="token function">StrCopy</span><span class="token punctuation">(</span>SqString <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> SqString t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span>length <span class="token operator">=</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断相等</span>bool <span class="token function">StrEqual</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">,</span> SqString t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    bool same <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">!=</span> t<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">//能用长度排除就直接去世吧</span>        same <span class="token operator">=</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                same <span class="token operator">=</span> false<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> same<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">StrLength</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//链接</span>SqString <span class="token function">Concat</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">,</span> SqString t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    SqString str<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    str<span class="token punctuation">.</span>length <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">+</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//从这时起，下标注意进行简单的计算</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//求子串，返回从第i个字符开始的，连续j个字符组成的字串</span>SqString <span class="token function">SubStr</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    SqString str<span class="token punctuation">;</span>    str<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> s<span class="token punctuation">.</span>length <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span>         <span class="token comment">//i+j-1注意一下下，理解不了就最简单的i=1,j=2,s</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//i-1开始，因为逻辑和物理差1</span>    <span class="token punctuation">&#123;</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str<span class="token punctuation">.</span>length <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//这个里面的加减1有点骚，理解好了这类题就不怕了。</span>SqString <span class="token function">IntStr</span><span class="token punctuation">(</span>SqString s1<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> SqString s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    SqString str<span class="token punctuation">;</span>    str<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> s1<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//插入的时候是可以多插一位的</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>                  <span class="token comment">//返回空串</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s1<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> s2<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>s2<span class="token punctuation">.</span>length <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> s1<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    str<span class="token punctuation">.</span>length <span class="token operator">=</span> s1<span class="token punctuation">.</span>length <span class="token operator">+</span> s2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>SqString <span class="token function">DelStr</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    SqString str<span class="token punctuation">;</span>    str<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//便于返回空串</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> s<span class="token punctuation">.</span>length <span class="token operator">||</span> i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> s<span class="token punctuation">.</span>length <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k <span class="token operator">-</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    str<span class="token punctuation">.</span>length <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//将i开始到j的字串用t替换</span><span class="token comment">//我好像有点明白了，他在for循环里用的索引对标某个长度，很简单，其他的操作通过改变数组索引的表达式来实现。</span>SqString <span class="token function">RepStr</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> SqString t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    SqString str<span class="token punctuation">;</span>    str<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> s<span class="token punctuation">.</span>length <span class="token operator">||</span> i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        str<span class="token punctuation">.</span>data<span class="token punctuation">[</span>t<span class="token punctuation">.</span>length <span class="token operator">-</span> j <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    str<span class="token punctuation">.</span>length <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> j <span class="token operator">+</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DispStr</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//比较大小</span><span class="token keyword">int</span> <span class="token function">Strcmp</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">,</span> SqString t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> comlen<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        comlen <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">else</span>        comlen <span class="token operator">=</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">//这里也包括了相等的情况</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> comlen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">==</span> t<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">></span> t<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//求s中出现的第一个最长连续相同字符构成的平台，用index开始索引，maxlen保存长度</span><span class="token keyword">void</span> <span class="token function">LongestString</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>index<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>maxlen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    index <span class="token operator">=</span> maxlen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> start<span class="token punctuation">;</span> <span class="token comment">//用来保存局部的  这种全局和局部都有对应的变量！</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        start <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//留个物理索引</span>        length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            length<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxlen <span class="token operator">&lt;</span> length<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            maxlen <span class="token operator">=</span> length<span class="token punctuation">;</span>            index <span class="token operator">=</span> start<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//Brute-Force</span><span class="token keyword">int</span> <span class="token function">BF</span><span class="token punctuation">(</span>SqString s<span class="token punctuation">,</span> SqString t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>t<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        i <span class="token operator">=</span> i<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//i回退到最初的后一位，j清空</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span>t<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">(</span>i<span class="token operator">-</span>t<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链串（堆串）"><a href="#链串（堆串）" class="headerlink" title="链串（堆串）"></a>链串（堆串）</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token comment">//链串的创建都是用尾插法，因此都有一个工具节点r</span><span class="token comment">//带头节点的单链表作为链串，结点大小是每个结点存储的字符个数,未占用的用特殊符号（#）填补</span><span class="token comment">//链串中，节点大小越大，存储密度越大，基本操作有所不便，适合很少修改的情况，这里规定大小为1</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">snode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span> <span class="token comment">//存放字符</span>    <span class="token keyword">struct</span> <span class="token class-name">snode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> LinkStrNode<span class="token punctuation">;</span><span class="token comment">//要用尾插法保证顺序</span><span class="token keyword">void</span> <span class="token function">StrAssign</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">char</span> cstr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    LinkStrNode <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cstr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>data <span class="token operator">=</span> cstr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>        r <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestroyStr</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkStrNode <span class="token operator">*</span>pre <span class="token operator">=</span> s<span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        pre <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">StrCopy</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> LinkStrNode <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkStrNode <span class="token operator">*</span>p <span class="token operator">=</span> t<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">StrEqual</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span>s<span class="token punctuation">,</span> LinkStrNode <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkStrNode <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q <span class="token operator">=</span> t<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">//直接比较本身</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>data <span class="token operator">==</span> q<span class="token operator">-></span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> q<span class="token operator">-></span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">StrLength</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    LinkStrNode <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//链接两个数组其实就是分别遍历一遍</span>LinkStrNode <span class="token operator">*</span><span class="token function">Concat</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span>s<span class="token punctuation">,</span> LinkStrNode <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkStrNode <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q <span class="token operator">=</span> t<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>    str <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    p <span class="token operator">=</span> t<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">//这样直接转过来，少一个工具节点，是我蠢了</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//当参数不正确的时候返回一个空串，这里需要调用之前已经封装好的函数</span>LinkStrNode <span class="token operator">*</span><span class="token function">Substr</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    LinkStrNode <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span> <span class="token comment">//经典四件套哈哈</span>    str <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//先把空串准备好在这里</span>    r <span class="token operator">=</span> str<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> <span class="token function">StrLength</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token function">StrLength</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//这里的k取得是1，因为要取到逻辑顺序第i位的前一位，而不是物理顺序</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//怎么感觉这里所有的其实都差不多，都是链表啊啥的，没啥意思</span>LinkStrNode <span class="token operator">*</span><span class="token function">InsStr</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> LinkStrNode <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    LinkStrNode <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> t<span class="token operator">-></span>next<span class="token punctuation">;</span>    str <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> str<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> <span class="token function">StrLength</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p1<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p1 <span class="token operator">=</span> p1<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//这个基本上都是完全一样的，直接copy一部分，瞬间刷完，我吐了，这些那么相似的还搞</span>LinkStrNode <span class="token operator">*</span><span class="token function">DelStr</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    LinkStrNode <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>    str <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> <span class="token function">StrLength</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token function">StrLength</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//这里的k应该是0，因为这个就不是逻辑序号，而是物理上的序号了</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>LinkStrNode <span class="token operator">*</span><span class="token function">RepStr</span><span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> LinkStrNode <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    LinkStrNode <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">,</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> t<span class="token operator">-></span>next<span class="token punctuation">;</span>    str <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> <span class="token function">StrLength</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token function">StrLength</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//这样的其实也是逻辑，所以i-1，使用哪种看自己喜欢吧</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token operator">-></span>data <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>        r <span class="token operator">=</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//好垃圾啊，，真的全都一样的，我感觉我都能背下来了</span><span class="token keyword">void</span> <span class="token function">DispStr</span><span class="token punctuation">(</span>LinkStrNode s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkStrNode <span class="token operator">*</span>p <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-递归"><a href="#4-递归" class="headerlink" title="4.递归"></a>4.递归</h1><p>只要确保了子结构和大结构 <strong>结构一致</strong>，就不用考虑过多细节，在设计算法的时候留意递归调用的意义，比如求树的深度，在某个地方需要子树的深度了，<strong>就直接调用就好</strong>，只用关心你这最宏观的一层，不用考虑内在的东西，这就是递归的魔力。因此【递归模型】非常重要</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//在算法设计中，任何间接递归都可以转换为直接递归，这是自顶向下，同时考虑最底部的</span><span class="token comment">//如果递归过程或者递归函数的递归调用语句是最后一条执行语句，则称为尾递归</span><span class="token comment">/* 三个条件：1.问题可以转化为1个或多个2.递归调用的次数必须是有限的3.必须有用来结束递归的条件*/</span>用到递归的三种情况：<span class="token number">1.</span> 数学公式，数列本身的定义就是递归的，比如n！和斐波那契数列<span class="token number">2.</span> 数据结构是递归的，比如指向本身的链表，对于这样的结构，递归方法既方便又有效但是要注意大结构和小结构保持一致性，比如对单链表设计递归算法时，通常采用不带头结点的单链表。<span class="token keyword">int</span> <span class="token function">Sum</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span><span class="token punctuation">(</span>L<span class="token operator">-></span>data <span class="token operator">+</span> <span class="token function">Sum</span><span class="token punctuation">(</span>L<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token number">3.</span> 问题的求解是递归的，比如汉诺塔P149<span class="token keyword">void</span> <span class="token function">Hanoil</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">char</span> Y<span class="token punctuation">,</span><span class="token keyword">char</span> Z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"将第%d个盘片从%c移动到%c"</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>X<span class="token punctuation">,</span>Z<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">Hanoil</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>X<span class="token punctuation">,</span>Z<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"将第%d个盘片从%c移动到%c"</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>X<span class="token punctuation">,</span>Z<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>递归模型：递归出口和递归体，可以看P150</strong></p><p>可以说递归的思想来自数学归纳法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">50</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">char</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>    bool flag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> StackType<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InitStack</span><span class="token punctuation">(</span>StackType <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>StackType <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>StackType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestroyStack</span><span class="token punctuation">(</span>StackType <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">StackEmpty</span><span class="token punctuation">(</span>StackType <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">Push</span><span class="token punctuation">(</span>StackType <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>top <span class="token operator">==</span> MAXSIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    s<span class="token operator">-></span>top<span class="token operator">++</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>data<span class="token punctuation">[</span>s<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">Pop</span><span class="token punctuation">(</span>StackType <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    e <span class="token operator">=</span> s<span class="token operator">-></span>data<span class="token punctuation">[</span>s<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>top<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">GetTop</span><span class="token punctuation">(</span>StackType <span class="token operator">*</span>s<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    e <span class="token operator">=</span> s<span class="token operator">-></span>data<span class="token punctuation">[</span>s<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*共享栈，适用于一方可能用到满，另一方还有很多空间栈空：top1 == -1   top2 == MAXSIZE栈满：top1 ==top2-1进栈出栈的时候top2的操作和top1是反的*/</span><span class="token comment">//********************************************************************</span><span class="token comment">//一般，尾递归算法可以通过循环或者迭代转换为等价的非递归算法</span><span class="token keyword">int</span> <span class="token function">Fib2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> s<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            s <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            a <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*对于不是尾递归的复杂递归，可以在 理解递归调用实现过程 的基础上用栈来模拟递归执行过程(这是关键啊)，从而将其转换为等价的非递归算法*/</span><span class="token comment">//汉诺塔问题的非递归实现：注意栈的结构决定了e1,e3的push顺序和实际执行顺序相反！</span><span class="token keyword">void</span> <span class="token function">Hanoi2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    StackType <span class="token operator">*</span>st<span class="token punctuation">;</span>    ElemType e<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">;</span> <span class="token comment">//一共要用到这么多变量</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">InitStack</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>    e<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    e<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>    e<span class="token punctuation">.</span>z <span class="token operator">=</span> z<span class="token punctuation">;</span>    <span class="token function">Push</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Pop</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>flag <span class="token operator">==</span> false<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            e1<span class="token punctuation">.</span>n <span class="token operator">=</span> e<span class="token punctuation">.</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            e1<span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">.</span>y<span class="token punctuation">;</span>            e1<span class="token punctuation">.</span>y <span class="token operator">=</span> e<span class="token punctuation">.</span>x<span class="token punctuation">;</span>            e1<span class="token punctuation">.</span>z <span class="token operator">=</span> e<span class="token punctuation">.</span>z<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e1<span class="token punctuation">.</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                e1<span class="token punctuation">.</span>flag <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token keyword">else</span>                e1<span class="token punctuation">.</span>flag <span class="token operator">=</span> false<span class="token punctuation">;</span>            <span class="token function">Push</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> e1<span class="token punctuation">)</span><span class="token punctuation">;</span>            e2<span class="token punctuation">.</span>n <span class="token operator">=</span> e<span class="token punctuation">.</span>n<span class="token punctuation">;</span>            e2<span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">.</span>x<span class="token punctuation">;</span>            e2<span class="token punctuation">.</span>y <span class="token operator">=</span> e<span class="token punctuation">.</span>y<span class="token punctuation">;</span>            <span class="token function">Push</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span>            e3<span class="token punctuation">.</span>n <span class="token operator">=</span> e<span class="token punctuation">.</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            e3<span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">.</span>x<span class="token punctuation">;</span>            e3<span class="token punctuation">.</span>y <span class="token operator">=</span> e<span class="token punctuation">.</span>z<span class="token punctuation">;</span>            e3<span class="token punctuation">.</span>z <span class="token operator">=</span> e<span class="token punctuation">.</span>y<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e3<span class="token punctuation">.</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                e3<span class="token punctuation">.</span>flag <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token keyword">else</span>                e3<span class="token punctuation">.</span>flag <span class="token operator">=</span> false<span class="token punctuation">;</span>            <span class="token function">Push</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> e3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"将%d个盘片从%c移动到%c\n"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>n<span class="token punctuation">,</span> e<span class="token punctuation">.</span>x<span class="token punctuation">,</span> e<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">DestroyStack</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//递归算法执行中，最长的递归调用的链长称为该算法的递归调用深度</span><span class="token comment">/*设计队规算法的基本步骤是先确定问题的递归模型，再转化成C/C++语言的函数确定递归模型的步骤是：1. 对原问题f(n)进行分析，假设出合理的小问题f(n-1)2. 给出f(n)与f(n-1)甚至更多项之间的关系，也就是确定递归体，也就是数学归纳法中的假设i = n-1成立，求证 i =n3. 找到特定情况如f(1)作为递归出口 4. 注意栈的次序和你的逻辑次序可能需要一定的调整*/</span><span class="token comment">//有0~i个元素，求最小值，思路是找到前面的最小值</span><span class="token keyword">double</span> <span class="token function">Min</span><span class="token punctuation">(</span><span class="token keyword">double</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> min<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        min <span class="token operator">=</span> <span class="token function">Min</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">></span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> min<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-数组"><a href="#5-数组" class="headerlink" title="5.数组"></a>5.数组</h1><p>通常只有读和写两种操作。</p><p>每个元素占k个存储单元，则LOC(ai) = LOC(a1)+(i-1) x k</p><p>二维数组大家都是按行存放的，为啥要搞出按列来。</p><h2 id="特殊矩阵压缩"><a href="#特殊矩阵压缩" class="headerlink" title="特殊矩阵压缩"></a>特殊矩阵压缩</h2><p>对于ai,j  = bk</p><ol><li><p>对称矩阵 P169</p><p>k = i(i+1)/2 + j   i&gt;=j                     k= j(j+1)/2  +i  j&gt;=i</p></li><li><p>下三角和对称矩阵十分相似，但是上三角还是有点差距的，最后一位有一个常数c P70</p><p>上三角：k = i(2n-i+1)/2 +j-i   i&lt;=j           n(n+1)/2   i&gt;j</p><p>下三角：k = i(i+1)/2 + j   i&gt;=j                  n(n+1)/2   i&lt;j</p></li><li><p>三对角矩阵且存储到一维数组时，k = 2i+j   b = 1</p></li></ol><p>这样的压缩存储只需在算法中按公式作映射就可以实现随机存取</p><h2 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h2><p>非零元素具有随机性，用三元组表，十字链表比较复杂来存取</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M</span> <span class="token expression"><span class="token number">100</span>       </span><span class="token comment">//行数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">200</span>       </span><span class="token comment">//列数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">100</span> </span><span class="token comment">//假设最多只有100个非零项</span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> r<span class="token punctuation">;</span>      <span class="token comment">//行号</span>    <span class="token keyword">int</span> c<span class="token punctuation">;</span>      <span class="token comment">//列号</span>    ElemType d<span class="token punctuation">;</span> <span class="token comment">//元素值</span><span class="token punctuation">&#125;</span> TupNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> rows<span class="token punctuation">;</span>    <span class="token keyword">int</span> cols<span class="token punctuation">;</span>    <span class="token keyword">int</span> nums<span class="token punctuation">;</span>    TupNode data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> TSMatrix<span class="token punctuation">;</span><span class="token comment">//从二维稀疏矩阵创建三元组表示,有点新奇哈哈</span><span class="token keyword">void</span> <span class="token function">CreateMat</span><span class="token punctuation">(</span>TSMatrix <span class="token operator">&amp;</span>t<span class="token punctuation">,</span> ElemType A<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    t<span class="token punctuation">.</span>rows <span class="token operator">=</span> M<span class="token punctuation">;</span>    t<span class="token punctuation">.</span>cols <span class="token operator">=</span> N<span class="token punctuation">;</span>    t<span class="token punctuation">.</span>nums <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>t<span class="token punctuation">.</span>nums<span class="token punctuation">]</span><span class="token punctuation">.</span>d <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>t<span class="token punctuation">.</span>nums<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> i<span class="token punctuation">;</span>                t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>t<span class="token punctuation">.</span>nums<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">=</span> j<span class="token punctuation">;</span>                t<span class="token punctuation">.</span>nums<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//三元组元素的赋值，不存在（0）时插入一个非零元素，存在时修改要理解好他这个数据结构是怎样的</span>bool <span class="token function">Value</span><span class="token punctuation">(</span>TSMatrix <span class="token operator">&amp;</span>t<span class="token punctuation">,</span> ElemType x<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> t<span class="token punctuation">.</span>rows <span class="token operator">||</span> j <span class="token operator">>=</span> t<span class="token punctuation">.</span>cols<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>nums <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&lt;</span> i<span class="token punctuation">)</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>nums <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">==</span> i <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>        k<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//这个查找方式。。。秀啊</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">==</span> i <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">==</span> j<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">//存在这样的非0元素</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k1 <span class="token operator">=</span> t<span class="token punctuation">.</span>nums <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k1 <span class="token operator">>=</span> k<span class="token punctuation">;</span> k1<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token comment">//这里注意带 =，不然第k项原本有意义的就被覆盖了</span>        <span class="token punctuation">&#123;</span>            t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>            t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>            t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>d <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> i<span class="token punctuation">;</span>        t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">=</span> j<span class="token punctuation">;</span>        t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d <span class="token operator">=</span> x<span class="token punctuation">;</span>        t<span class="token punctuation">.</span>nums<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//最终四步处理</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">Assign</span><span class="token punctuation">(</span>TSMatrix t<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> t<span class="token punctuation">.</span>rows <span class="token operator">||</span> j <span class="token operator">>=</span> t<span class="token punctuation">.</span>cols<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>nums <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&lt;</span> i<span class="token punctuation">)</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>nums <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">==</span> i <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">==</span> i <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">==</span> j<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//返回0</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DispMat</span><span class="token punctuation">(</span>TSMatrix t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>nums <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t%d\t%d\t%d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>rows<span class="token punctuation">,</span> t<span class="token punctuation">.</span>cols<span class="token punctuation">,</span> t<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t------------------------\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>nums<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t%d\t%d\t%d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">,</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//转置，把列号放在前面，那就要依次查找列号，高效的是快速转置</span><span class="token keyword">void</span> <span class="token function">TranTat</span><span class="token punctuation">(</span>TSMatrix t<span class="token punctuation">,</span> TSMatrix <span class="token operator">&amp;</span>tb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span> k1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> v<span class="token punctuation">;</span> <span class="token comment">//k1记录tb中的元素个数</span>    tb<span class="token punctuation">.</span>rows <span class="token operator">=</span> t<span class="token punctuation">.</span>cols<span class="token punctuation">;</span>    tb<span class="token punctuation">.</span>cols <span class="token operator">=</span> t<span class="token punctuation">.</span>rows<span class="token punctuation">;</span>    tb<span class="token punctuation">.</span>nums <span class="token operator">=</span> t<span class="token punctuation">.</span>nums<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>nums <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>cols<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//每一列都完整的遍历一遍，效率巨低。</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>nums<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">==</span> v<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    tb<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>                    tb<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>                    tb<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token punctuation">.</span>d <span class="token operator">=</span> t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">;</span>                    k1<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//接下来是十字链表的数据结构P178</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Max</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>N<span class="token punctuation">)</span> <span class="token operator">?</span> M <span class="token operator">:</span> N<span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">mtxn</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> row<span class="token punctuation">;</span>    <span class="token keyword">int</span> col<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">mtxn</span> <span class="token operator">*</span>right<span class="token punctuation">,</span> <span class="token operator">*</span>down<span class="token punctuation">;</span>  <span class="token comment">//向右循环的行指针和向下循环的列指针</span>    <span class="token keyword">union</span>    <span class="token punctuation">&#123;</span>        ElemType value<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">mtxn</span> <span class="token operator">*</span>link<span class="token punctuation">;</span> <span class="token comment">//指向下个头节点</span>    <span class="token punctuation">&#125;</span> tag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> MatNode<span class="token punctuation">;</span><span class="token comment">//代价是运算算法比较复杂</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h2><p>广义表的特征：</p><ol><li>广义表中的数据元素是有相对次序的</li><li>长度定义为最外层包含元素的个数</li><li>深度定义为包含括弧的重数，原子的深度为0，空表的深度为1</li><li>广义表可以共享，这种叫再入表</li><li>广义表可以是一个递归表，一个广义表可以是自己的子表，这种叫递归表，深度∞，长度有限</li></ol><p>不讨论再入表和递归表，小写字母表示原子，大写字母表示广义表的表名</p><p>没有给出表明的叫做<em>匿名表</em> ，用 <strong>·</strong> 表示</p><p>表头：head（GL）叫做表头，取第一个元素，tail（GL）为其余所有部分（<strong>包括原来的括号</strong>），显然一个广义表的表尾始终为一个广义表，空表无表头表尾：</p><p>A（）无表头表尾</p><p>B（e） 表头e   表尾（） <strong>空的也会被算上！！</strong></p><p>C（a，· （b,c,d）） 表头 a   表尾（（b,c,c））<strong>注意有两层括号</strong>，看来表尾会保持原有的深度</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lnode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> tag<span class="token punctuation">;</span> <span class="token comment">//标识符 0为原子节点，1为表节点</span>    <span class="token keyword">union</span>    <span class="token punctuation">&#123;</span>        ElemType data<span class="token punctuation">;</span>         <span class="token comment">//存放数据值</span>        <span class="token keyword">struct</span> <span class="token class-name">lnode</span> <span class="token operator">*</span>sublist<span class="token punctuation">;</span> <span class="token comment">//指向子表的指针</span>    <span class="token punctuation">&#125;</span> val<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">lnode</span> <span class="token operator">*</span>link<span class="token punctuation">;</span> <span class="token comment">//同一层的下一个元素</span><span class="token punctuation">&#125;</span> GLNode<span class="token punctuation">;</span><span class="token comment">//tag = 1的节点可以看成是一个单链表的头节点，指向子表的首节点,通过递归性，有两种解法</span><span class="token comment">//解法1，把整个看成一个带头节点的单链表，种类分原子和子表，子表类似整个表，而原子则仅仅是原子处理罢了。</span><span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span>GLNode <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    GLNode <span class="token operator">*</span>gl <span class="token operator">=</span> g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>gl <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gl<span class="token operator">-></span>tag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">fun1</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//z</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"原子处理语句"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        gl <span class="token operator">=</span> gl<span class="token operator">-></span>link<span class="token punctuation">;</span> <span class="token comment">//处理后继元素</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//解法2，对于元素节点，其兄弟域的节点和整个广义表是相似的，对于表节点，其元素域和兄弟域的处理均与整个广义表相似</span><span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span>GLNode <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-></span>tag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>          <span class="token comment">//为子表</span>            <span class="token function">fun2</span><span class="token punctuation">(</span>g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//先递归处理表节点的元素域</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"原子处理语句"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fun2</span><span class="token punctuation">(</span>g<span class="token operator">-></span>link<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//处理两种节点的兄弟（不用分类，因为无论什么节点，兄弟都相似于整个表）</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//实际问题中根据求解问题的特点自行选择其中来设计递归求解，比如计数：</span><span class="token keyword">int</span> <span class="token function">Count1</span><span class="token punctuation">(</span>GLNode <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    GLNode <span class="token operator">*</span>gl <span class="token operator">=</span> g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>gl <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gl<span class="token operator">-></span>tag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            n <span class="token operator">+=</span> <span class="token function">Count1</span><span class="token punctuation">(</span>gl<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">)</span><span class="token punctuation">;</span>        gl <span class="token operator">=</span> gl<span class="token operator">-></span>link<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Count2</span><span class="token punctuation">(</span>GLNode <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    GLNode <span class="token operator">*</span>gl <span class="token operator">=</span> g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>gl <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gl<span class="token operator">-></span>tag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            n <span class="token operator">+=</span> <span class="token function">Count2</span><span class="token punctuation">(</span>gl<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>        n <span class="token operator">+=</span> <span class="token function">Count2</span><span class="token punctuation">(</span>g<span class="token operator">-></span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">GLLength</span><span class="token punctuation">(</span>GLNode <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    GLNode <span class="token operator">*</span>gl <span class="token operator">=</span> g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>g <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        n<span class="token operator">++</span><span class="token punctuation">;</span>        gl <span class="token operator">=</span> gl<span class="token operator">-></span>link<span class="token punctuation">;</span> <span class="token comment">//只用算最表层的哈哈</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">GLDepth</span><span class="token punctuation">(</span>GLNode <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    GLNode <span class="token operator">*</span>gl<span class="token punctuation">;</span>    <span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dep<span class="token punctuation">;</span> <span class="token comment">//maxd是同一层子表中深度的最大值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-></span>tag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    gl <span class="token operator">=</span> g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>gl <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//这下面这个操作还是挺妙的</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>gl <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gl<span class="token operator">-></span>tag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            dep <span class="token operator">=</span> <span class="token function">GLDepth</span><span class="token punctuation">(</span>gl<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//dep代表该节点的深度！自顶向下</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dep <span class="token operator">></span> maxd<span class="token punctuation">)</span>                maxd <span class="token operator">=</span> dep<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        gl <span class="token operator">=</span> gl<span class="token operator">-></span>link<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>maxd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回这一层的最大值到上一层的节点</span><span class="token punctuation">&#125;</span><span class="token comment">//要输出成括号的形式还是有点麻烦的，元素直接输出值，子表则输出 ‘（’，空表输出‘#’，非空子表递归，再输出‘）’</span><span class="token comment">//这里其实用到的就是递归思想，仅考虑一层。非常简单</span><span class="token keyword">void</span> <span class="token function">DispGL</span><span class="token punctuation">(</span>GLNode <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-></span>tag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> g<span class="token operator">-></span>val<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">DispGL</span><span class="token punctuation">(</span>g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这个括号不要漏了</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-></span>link <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">DispGL</span><span class="token punctuation">(</span>g<span class="token operator">-></span>link<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//兄弟应该在子表后面输出</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//与输出对应的，建立广义表的链式存储结构,记得空表是 “#”，遇到则将g->val.sublist置空</span><span class="token comment">//扫描到 （ 则用g递归开启一个子表节点，遇到 ）说明已经处理完，g置空</span><span class="token comment">//时空复杂的均为O（n）</span><span class="token comment">//切记把链式结构和符号表示分开想，不要混在一起！</span><span class="token comment">//巧妙地递归逻辑，配合引用参数（注意这里默认一个元素是‘单个’字符）</span><span class="token comment">//这里我一开始理解难受是因为它既有嵌套递归，又有把子任务视为平级的递归，害。</span>GLNode <span class="token operator">*</span><span class="token function">CreateGL</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    GLNode <span class="token operator">*</span>g<span class="token punctuation">;</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token operator">*</span>s<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//取一个字符,直接操作指针的话，便于后续调用</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        g <span class="token operator">=</span> <span class="token punctuation">(</span>GLNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>GLNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            g<span class="token operator">-></span>tag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist <span class="token operator">=</span> <span class="token function">CreateGL</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span>            g <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">)</span>            g <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            g<span class="token operator">-></span>tag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            g<span class="token operator">-></span>val<span class="token punctuation">.</span>data <span class="token operator">=</span> ch<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        g <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//若s扫描完，把g置空</span>    ch <span class="token operator">=</span> <span class="token operator">*</span>s<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">','</span><span class="token punctuation">)</span>            g<span class="token operator">-></span>link <span class="token operator">=</span> <span class="token function">CreateGL</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            g<span class="token operator">-></span>link <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> g<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//采用解法1,递归销毁，注意要灵活一点，顺序什么的不影响那么怎样方便怎样来</span><span class="token keyword">void</span> <span class="token function">DestroyGL</span><span class="token punctuation">(</span>GLNode <span class="token operator">*</span><span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    GLNode <span class="token operator">*</span>g1<span class="token punctuation">,</span> <span class="token operator">*</span>g2<span class="token punctuation">;</span>    g1 <span class="token operator">=</span> g<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>g1 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>g1<span class="token operator">-></span>tag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            g2 <span class="token operator">=</span> g1<span class="token operator">-></span>link<span class="token punctuation">;</span> <span class="token comment">//保存兄弟节点</span>            <span class="token function">free</span><span class="token punctuation">(</span>g1<span class="token punctuation">)</span><span class="token punctuation">;</span>            g1 <span class="token operator">=</span> g2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            g2 <span class="token operator">=</span> g1<span class="token operator">-></span>link<span class="token punctuation">;</span>            <span class="token function">DestroyGL</span><span class="token punctuation">(</span>g1<span class="token operator">-></span>val<span class="token punctuation">.</span>sublist<span class="token punctuation">)</span><span class="token punctuation">;</span>            g1 <span class="token operator">=</span> g2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-树"><a href="#6-树" class="headerlink" title="6.树"></a>6.树</h1><h2 id="基本和存储"><a href="#基本和存储" class="headerlink" title="基本和存储"></a>基本和存储</h2><p>有树形表示法，文氏图表示法，凹入表示法和括号表示法等等。</p><p>树的定义是递归的，树的性质在P192</p><ol><li>结点数 = 所有节点的出度（其实就是边数） + 1</li><li>度为m的树（就是节点中最大出度为m）中第i层上最多有m^(i-1)个节点，若每一层都是满的，称为满m次树</li><li>高度为h的m次树最多有(m^h - 1)/(m-1) 个节点</li><li>具有n个结点的m次树的最小高度为logm(n(m-1)+1)向大取整</li></ol><p>其实性质2，3，4说的都是一种情况。。。</p><p>对于m次树，含有n个节点，那么最大高度maxh = n - (m-1) 显然，除了最后一个节点，其他度都为1就好了</p><p>基本运算有寻找特定节点，插入/删除特定节点，<strong>遍历</strong></p><p>遍历的先中后原来是根节点的输出次序，一般都习惯先左后右。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//存储结构</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token comment">//1.双亲存储，顺序存储，根节点的父节点设置为-1，其余设置为父节点在顺序中的位置</span><span class="token comment">//求双亲容易，但是求某个节点的子节点难，要遍历整个存储结构</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">100</span> </span><span class="token comment">//假设最多只有100个非零项</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSons</span> <span class="token expression"><span class="token number">100</span> </span><span class="token comment">//假设树的度为100</span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">int</span> parent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> PTree<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//2.子链存储，每个节点有指向所有孩子结点的指针，因为难以确定数目，统一用最大的【树的度】来分配</span><span class="token comment">//找双亲费时，找孩子很方便，树的度与平均度偏差较大时，浪费</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSons</span> <span class="token expression"><span class="token number">100</span> </span><span class="token comment">//假设树的度为100</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>sons<span class="token punctuation">[</span>MaxSons<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> TSonNode<span class="token punctuation">;</span><span class="token comment">//以此为基础求树的高度</span><span class="token keyword">int</span> <span class="token function">TreeHeight1</span><span class="token punctuation">(</span>TSonNode <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    TSonNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> h<span class="token punctuation">,</span> maxh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MaxSons<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> t<span class="token operator">-></span>sons<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                h <span class="token operator">=</span> <span class="token function">TreeHeight1</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//求子树的深度</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>maxh <span class="token operator">&lt;</span> h<span class="token punctuation">)</span>                    maxh <span class="token operator">=</span> h<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>maxh <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3.孩子兄弟链，每个节点三个域，一个元素，一个指向长子，一个指向兄弟</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">tnode</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">tnode</span> <span class="token operator">*</span>hp<span class="token punctuation">;</span> <span class="token comment">//指向兄弟 horizontal point</span>    <span class="token keyword">struct</span> <span class="token class-name">tnode</span> <span class="token operator">*</span>vp<span class="token punctuation">;</span> <span class="token comment">//指向孩子 vertical point</span><span class="token punctuation">&#125;</span> TSBNode<span class="token punctuation">;</span><span class="token comment">//其实这种结构是把树转换为二叉树的存储结构</span><span class="token comment">//最大的优点就是方便的实现树和二叉树的相互转换,缺点时查找父节点麻烦</span><span class="token keyword">int</span> <span class="token function">TreeHeight2</span><span class="token punctuation">(</span>TSBNode <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    TSBNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span> h<span class="token punctuation">,</span> maxh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> t<span class="token operator">-></span>vp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">//遍历同一层的p</span>    <span class="token punctuation">&#123;</span>        h <span class="token operator">=</span> <span class="token function">TreeHeight2</span><span class="token punctuation">(</span>p<span class="token operator">-></span>vp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//求出这一层的最大值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxh <span class="token operator">&lt;</span> h<span class="token punctuation">)</span>            maxh <span class="token operator">=</span> h<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>hp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> maxh <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>呜呜呜，好长这里，冲冲冲！</p><p>二叉树是区分左右的，任何m次数都可以转化为二叉树结构</p><p><strong>满二叉树</strong>：叶子节点都集中在二叉树的最下一层，所有分支节点都有左右孩子的树，只有度为0或2的节点。</p><p>可以进行层序编号，第一个是0，若节点为x，则左孩子为2x，右孩子为2x + 1</p><p><strong>完全二叉树</strong>：只有最下两层节点度数可以小于2，且叶子节点全都靠左排列。</p><p>最多只有1个出度为1的节点，且节点有左孩子，结点总数n为奇数时没有出度为1的结点</p><p><strong>满二叉树是完全二叉树的特例</strong></p><p>二叉树性质：</p><ol><li><p>非空二叉树上的<strong>叶子节点数</strong>等于<strong>双分支结点数+1</strong></p><p>用到了：m(度的和) = n-1   度的和 = n1 + 2n2    n = n0(叶子结点数) + n1 + n2</p></li><li><p>非空二叉树的第i层最多只有2^(i-1)个结点</p></li><li><p>高度为h的二叉树最多有 2^h - 1 个结点</p></li><li><p>若节点为x，则左孩子为2x，右孩子为2x + 1，父节点为x/2 向下取整</p></li><li><p>具有n个节点的完全二叉树高度为 log2(n+1)向上取整 或者log2n向下取整 +1</p></li></ol><p>树转二叉树：相邻兄弟加线，保留长子线，其余删除    森林则把根节点链接</p><p>二叉树转树：若某节点为双亲的左孩子，则把该节点的右孩子，右孩子的右孩子都与该节点的双亲连起来，</p><p>删除原二叉树中所有双亲结点与右孩子结点之间的连线。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token comment">/*先看看顺序存储结构对于完全二叉树和满二叉树，可以实现随机存储，完全二叉树最后几个空的用 # 表示对于一般的二叉树，可以增添一些不存在的空结点，使之成为一棵完全二叉树的形式。图可以看看P204  */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">100</span> </span><span class="token comment">//假设最多只有100个非零项</span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> ElemType SqBinTree<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//但是如果空的太多，会造成空间的大量浪费，但是查找子节点和父节点都很方便。</span><span class="token comment">//当然还有一般顺序存储结构的缺点，就是插入，删除很不方便</span><span class="token comment">//链式存储，称为二叉链，用根节点指针b唯一标识整个存储结构，称为二叉树b</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>lchild<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span>    <span class="token comment">//struct node *parent;</span><span class="token punctuation">&#125;</span> BTNode<span class="token punctuation">;</span><span class="token comment">//这样节省空间，但不方便访问父节点，可以增加一个指向父节点的指针域parent来解决。</span><span class="token comment">//后续一般假设一棵二叉树中所有结点值均不同，为单个字符</span><span class="token comment">//创建，销毁，按值查找（父），找孩子，求高度，输出   创建和输出都用括号表示法</span><span class="token comment">//首先得理解二叉树的括号表示，模拟一个栈来实现,因为栈的实现很简单，并没有封装</span><span class="token comment">//这个用栈保存双亲结点的思想太妙了！栈顶存放的是当前处理节点的父节点</span><span class="token keyword">void</span> <span class="token function">CreateBTree</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BTNode <span class="token operator">*</span>St<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">//St为顺序栈</span>    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//j为str索引,k用来判断孩子类型</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    ch <span class="token operator">=</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">'('</span><span class="token operator">:</span>            top<span class="token operator">++</span><span class="token punctuation">;</span>            St<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>            k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">')'</span><span class="token operator">:</span>            top<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">','</span><span class="token operator">:</span>            k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            p <span class="token operator">=</span> <span class="token punctuation">(</span>BTNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">-></span>data <span class="token operator">=</span> ch<span class="token punctuation">;</span>            p<span class="token operator">-></span>lchild <span class="token operator">=</span> p<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                b <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment">//这是只存在一次的还未建立根节点的情况</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token comment">//只有1和2的情况来回切换！</span>                <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                    St<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token operator">-></span>lchild <span class="token operator">=</span> p<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                    St<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token operator">-></span>rchild <span class="token operator">=</span> p<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        ch <span class="token operator">=</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestroyBTree</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">DestroyBTree</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DestroyBTree</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//查找x的结点</span>BTNode <span class="token operator">*</span><span class="token function">FindeNode</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BTNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">-></span>data <span class="token operator">==</span> x<span class="token punctuation">)</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> <span class="token function">FindeNode</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token function">FindeNode</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//p</span>        <span class="token comment">//这也把没找到的情况包含在内了，要学会简化代码</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>BTNode <span class="token operator">*</span><span class="token function">LchildNode</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>BTNode <span class="token operator">*</span><span class="token function">RchildNode</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//求高度</span><span class="token keyword">int</span> <span class="token function">BTHeight</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> lchild<span class="token punctuation">,</span> rchild<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        lchild <span class="token operator">=</span> <span class="token function">BTHeight</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        rchild <span class="token operator">=</span> <span class="token function">BTHeight</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>lchild <span class="token operator">></span> rchild <span class="token operator">?</span> lchild <span class="token operator">:</span> rchild<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//终究还是比广义表简单不少啊,当是NULL的时候不操作，非常流弊</span><span class="token keyword">void</span> <span class="token function">DispBTree</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> b<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">-></span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">||</span> b<span class="token operator">-></span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">DispBTree</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">DispBTree</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//突然想玩一下下</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"A(B(D(,G))C(E,F))"</span><span class="token punctuation">;</span>    BTNode <span class="token operator">*</span>BT<span class="token punctuation">;</span>    <span class="token function">CreateBTree</span><span class="token punctuation">(</span>BT<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DispBTree</span><span class="token punctuation">(</span>BT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nI prefer Python, C is to complex and confused"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*遍历，四种顺序，层次遍历是非递归的一颗二叉树可以分为根节点和子树两类，根节点直接处理，子树递归处理如果必须先处理子树，那就用后序，如果必须先处理根节点，那就用先序，否则随便如果要区分左，右树，那就要考虑中序，但是比较少*/</span><span class="token keyword">void</span> <span class="token function">Preorder</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> b<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Preorder</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Preorder</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Inorder</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Inorder</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> b<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Inorder</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">PostOrder</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">PostOrder</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PostOrder</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> b<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//求给定二叉树的所有结点个数</span><span class="token keyword">int</span> <span class="token function">Nodes</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">Nodes</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Nodes</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//这个是先左后右后根，是后续遍历</span><span class="token punctuation">&#125;</span><span class="token comment">//输出所有的叶子节点</span><span class="token comment">/*递归模型很重要！f(b) === 不做任何事情    b=NULLf(b) === 输出b的data域   b为叶子结点f(b) === f(b->lchild);f(b->rchild) 其他情况*/</span><span class="token keyword">void</span> <span class="token function">DispLeaf</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">-></span>lchild <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> b<span class="token operator">-></span>rchild <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> b<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DispLeaf</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DispLeaf</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//求深度，h置处置1，这个和之前那个稍微有点不同，具体分析</span><span class="token keyword">int</span> <span class="token function">Level</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">,</span> ElemType x<span class="token punctuation">,</span> <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> l<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">-></span>data <span class="token operator">==</span> x<span class="token punctuation">)</span>        <span class="token keyword">return</span> h<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        l <span class="token operator">=</span> <span class="token function">Level</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">,</span> x<span class="token punctuation">,</span> h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token punctuation">)</span>            <span class="token keyword">return</span> l<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Level</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">,</span> x<span class="token punctuation">,</span> h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//又见到了这种操作</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//求b树第k层的结点数,h是用来传递参数，初始为1</span><span class="token comment">//这是另一种递归思路，并没有回带的过程，利用了void和引用</span><span class="token comment">//如果在c语言中，可以用全局变量来代替所谓的引用。</span><span class="token keyword">void</span> <span class="token function">Lnodenum</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> h<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">&lt;</span> k<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">Lnodenum</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">,</span> h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Lnodenum</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">,</span> h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出x的结点的所有祖先,多判断一级的思维</span>bool <span class="token function">ancestor</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">-></span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> b<span class="token operator">-></span>lchild<span class="token operator">-></span>data <span class="token operator">==</span> x <span class="token operator">||</span> b<span class="token operator">-></span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> b<span class="token operator">-></span>rchild<span class="token operator">-></span>data <span class="token operator">==</span> x<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">putchar</span><span class="token punctuation">(</span>b<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ancestor</span><span class="token punctuation">(</span>b<span class="token operator">-></span>lchild<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">ancestor</span><span class="token punctuation">(</span>b<span class="token operator">-></span>rchild<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">putchar</span><span class="token punctuation">(</span>b<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//非递归算法区域P218</span><span class="token comment">//层次遍历算法</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    BTNode <span class="token operator">*</span>data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">,</span> rear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> SqQueue<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LevelOrder</span><span class="token punctuation">(</span>BTNode <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BTNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    SqQueue <span class="token operator">*</span>qu<span class="token punctuation">;</span>    <span class="token function">enqueue</span><span class="token punctuation">(</span>qu<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>qu<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">deQueue</span><span class="token punctuation">(</span>qu<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">putchar</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token function">enqueue</span><span class="token punctuation">(</span>qu<span class="token punctuation">,</span> p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token function">enqueue</span><span class="token punctuation">(</span>qu<span class="token punctuation">,</span> p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二叉树构造"><a href="#二叉树构造" class="headerlink" title="二叉树构造"></a>二叉树构造</h2><p>由先序序列+中序序列，或者中序序列+后序序列唯一地确定一颗二叉树</p><p>实际上，先序序列的作用是确定一棵二叉树的根节点，中序序列的作用是确定左、右子树的中序序列，从而进一步确定先序序列，递归构造左右子树。</p><p>原理在P229</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//二叉树的构造</span><span class="token comment">//pre存放先序序列，in存放中序序列，n为二叉树的节点个数</span><span class="token comment">//其实函数的参数选择同时得考虑递归时不同层级间需要的参数</span>BTNode <span class="token operator">*</span><span class="token function">CreateBT1</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>pre<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>in<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BTNode <span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token punctuation">(</span>BTNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token operator">*</span>pre<span class="token punctuation">;</span> <span class="token comment">//根节点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> in<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> in <span class="token operator">+</span> n<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">==</span> <span class="token operator">*</span>pre<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    k <span class="token operator">=</span> p <span class="token operator">-</span> in<span class="token punctuation">;</span> <span class="token comment">//确定根节点在in中的位置</span>    b<span class="token operator">-></span>lchild <span class="token operator">=</span> <span class="token function">CreateBT1</span><span class="token punctuation">(</span>pre <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> in<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token function">CreateBT1</span><span class="token punctuation">(</span>pre <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这里不能光考虑第一次的，要用通用的写法</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//和上面基本一致</span>BTNode <span class="token operator">*</span><span class="token function">CreateBT2</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>post<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>in<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BTNode <span class="token operator">*</span>b    <span class="token keyword">char</span> r<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">//因为根节点在后头，所以得用一个变量单独保存</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token punctuation">(</span>BTNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>post <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token operator">-></span>data <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> post<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> post <span class="token operator">+</span> n<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">==</span> r<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    k <span class="token operator">=</span> p <span class="token operator">-</span> post<span class="token punctuation">;</span>    b<span class="token operator">-></span>lchild <span class="token operator">=</span> <span class="token function">CreateBT2</span><span class="token punctuation">(</span>post<span class="token punctuation">,</span> in<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token function">CreateBT2</span><span class="token punctuation">(</span>post <span class="token operator">+</span> k<span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="哈夫曼"><a href="#哈夫曼" class="headerlink" title="哈夫曼"></a>哈夫曼</h2><p>WPL  Weighted Path Length 带权路径长度</p><p>定理：假如哈夫曼树有n个叶子结点，那么一共有2n+1个</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//哈夫曼树采用数组存放，总的结点数可以算出来 P239</span><span class="token comment">//前n个存放原结点（叶子结点），剩下的存放分支节点。</span><span class="token comment">//思路是先将全部节点的parent、lchild、rchild赋值为-1,然后不断找最小的放在后面，同时补全信息</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span>    <span class="token keyword">double</span> weight<span class="token punctuation">;</span>    <span class="token keyword">int</span> parent<span class="token punctuation">;</span>    <span class="token keyword">int</span> lchild<span class="token punctuation">;</span>    <span class="token keyword">int</span> rchild<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> HTNode<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">CreateHT</span><span class="token punctuation">(</span>HTNode ht<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n0<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> k<span class="token punctuation">,</span> lnode<span class="token punctuation">,</span> rnode<span class="token punctuation">;</span>    <span class="token keyword">double</span> min1<span class="token punctuation">,</span> min2<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> n0 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lchild <span class="token operator">=</span> ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> n0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        min1 <span class="token operator">=</span> min2 <span class="token operator">=</span> <span class="token number">32767</span><span class="token punctuation">;</span>        lnode <span class="token operator">=</span> rnode <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token comment">//通过确定两个最小值的相对次序来巧妙地处理该问题</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ht<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>parent <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span> <span class="token comment">//在尚未构造二叉树的结点中查找</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ht<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">&lt;</span> min1<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    min2 <span class="token operator">=</span> min1<span class="token punctuation">;</span>                    rnode <span class="token operator">=</span> lnode<span class="token punctuation">;</span>                    min1 <span class="token operator">=</span> ht<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>                    lnode <span class="token operator">=</span> k<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ht<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">&lt;</span> min2<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    min2 <span class="token operator">=</span> ht<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>                    rnode <span class="token operator">=</span> k<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> ht<span class="token punctuation">[</span>lnode<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">+</span> ht<span class="token punctuation">[</span>rnode<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>        ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lchild <span class="token operator">=</span> lnode<span class="token punctuation">;</span>        ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rchild <span class="token operator">=</span> rnode<span class="token punctuation">;</span>        ht<span class="token punctuation">[</span>lnode<span class="token punctuation">]</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> i<span class="token punctuation">;</span>        ht<span class="token punctuation">[</span>rnode<span class="token punctuation">]</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//哈夫曼编码,规定左分支为0，右分支为1</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> cd<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//存放当前节点的哈夫曼编码</span>    <span class="token keyword">int</span> start<span class="token punctuation">;</span>  <span class="token comment">//表明cd[start..n0]部分是哈夫曼编码</span><span class="token punctuation">&#125;</span> HCode<span class="token punctuation">;</span><span class="token comment">//这是个从下向上的过程，但是最终是顺序的</span><span class="token keyword">void</span> <span class="token function">CreateHCode</span><span class="token punctuation">(</span>HTNode ht<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> HCode hcd<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n0<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> f<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    HCode hc<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n0<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        hc<span class="token punctuation">.</span>start <span class="token operator">=</span> n0<span class="token punctuation">;</span>        c <span class="token operator">=</span> i<span class="token punctuation">;</span>        f <span class="token operator">=</span> ht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token punctuation">;</span> <span class="token comment">//初始化</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>f <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span> <span class="token comment">//循环到根节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ht<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>lchild <span class="token operator">==</span> c<span class="token punctuation">)</span>                hc<span class="token punctuation">.</span>cd<span class="token punctuation">[</span>hc<span class="token punctuation">.</span>start<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                hc<span class="token punctuation">.</span>cd<span class="token punctuation">[</span>hc<span class="token punctuation">.</span>start<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> f<span class="token punctuation">;</span>            f <span class="token operator">=</span> ht<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        hc<span class="token punctuation">.</span>start<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//因为多减了一次，加回来</span>        hcd<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> hc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-图"><a href="#7-图" class="headerlink" title="7.图"></a>7.图</h1><p>找强连通分量：先找一个有向环，如果外面的某个顶点到该环任意结点均有双向路径，则加入</p><p>带权图也称作网</p><h2 id="矩阵、表存储"><a href="#矩阵、表存储" class="headerlink" title="矩阵、表存储"></a>矩阵、表存储</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXV</span> <span class="token expression"><span class="token number">100</span>  </span><span class="token comment">//最大结点数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">32767</span> </span><span class="token comment">//所谓的正无穷，也就是没有路</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> InfoType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> no<span class="token punctuation">;</span>        <span class="token comment">//顶点编号</span>    InfoType info<span class="token punctuation">;</span> <span class="token comment">//其他信息</span><span class="token punctuation">&#125;</span> VertexType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> edges<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//邻接矩阵数组</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> e<span class="token punctuation">;</span>              <span class="token comment">//顶点数、边数</span>    VertexType vexs<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//存放结点信息</span><span class="token punctuation">&#125;</span> MatGraph<span class="token punctuation">;</span><span class="token comment">/*适合储存边比较多的稠密图邻接矩阵表示是唯一的，注意无向图、有向图每一行/列的意义非常适合提取两个顶点之间的边，适用于该目的的算法*/</span><span class="token comment">//邻接表结构是后续众多算法的基础，一定要弄清楚P259</span><span class="token comment">//每个顶点一个链表，链接关联的边。其中的每个边结点表示一条！边！的信息，not 点</span><span class="token comment">//头节点存储的则是顶点的信息，并指向首节点。</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ANode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">;</span>            <span class="token comment">//该边的临界点编号,指的是出边临界点</span>    <span class="token keyword">struct</span> <span class="token class-name">ANode</span> <span class="token operator">*</span>nextarc<span class="token punctuation">;</span> <span class="token comment">//指向下个边的指针</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span>            <span class="token comment">//该边的相关信息</span><span class="token punctuation">&#125;</span> ArcNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Vnode</span><span class="token punctuation">&#123;</span>    InfoType info<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>firstarc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> VNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    VNode adjlist<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//头节点数组</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> AdjGraph<span class="token punctuation">;</span><span class="token comment">//还有所谓的逆邻接表</span><span class="token comment">/*邻接表的表示不唯一，取决于算法和输入次序，适合边数目稀疏的图对于无向图，第i个单链表的边数目是顶点i的度，有向图则为出度，入度得统计所有的adjvex域为i的数目适合提取某个顶点的所有临界点*/</span><span class="token comment">//依次扫描，头插法插入。</span><span class="token keyword">void</span> <span class="token function">CreateAdj</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span><span class="token operator">&amp;</span>G<span class="token punctuation">,</span> <span class="token keyword">int</span> A<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//初始化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> INF<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                p <span class="token operator">=</span> <span class="token punctuation">(</span>ArcNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ArcNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token operator">-></span>adjvex <span class="token operator">=</span> j<span class="token punctuation">;</span>                p<span class="token operator">-></span>weight <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                p<span class="token operator">-></span>nextarc <span class="token operator">=</span> G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>                G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    G<span class="token operator">-></span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>    G<span class="token operator">-></span>e <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出规则为先输出头结点的定点信息，再依次输出所有结点的顶点编号</span><span class="token keyword">void</span> <span class="token function">DispAdj</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d:"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d[%d]"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">,</span> p<span class="token operator">-></span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DestroyAdj</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span><span class="token operator">&amp;</span>G<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>pre<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        pre <span class="token operator">=</span> G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> pre<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                pre <span class="token operator">=</span> p<span class="token punctuation">;</span>                p <span class="token operator">=</span> pre<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">free</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//别忘了把头节点数组也释放掉</span><span class="token punctuation">&#125;</span><span class="token comment">//将邻接表转换为邻接矩阵</span><span class="token keyword">void</span> <span class="token function">ListToMat</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span><span class="token operator">&amp;</span>G<span class="token punctuation">,</span> MatGraph <span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>weight<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    g<span class="token punctuation">.</span>n <span class="token operator">=</span> G<span class="token operator">-></span>n<span class="token punctuation">;</span>    g<span class="token punctuation">.</span>e <span class="token operator">=</span> G<span class="token operator">-></span>e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*十字链表是给有向图用的，是邻接表和逆邻接表的结合，现在看其实非常简单。。不知道当时为啥讲那么久。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="图遍历及应用"><a href="#图遍历及应用" class="headerlink" title="图遍历及应用"></a>图遍历及应用</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//图的遍历，要求每个顶点仅被访问一次。</span><span class="token comment">//因为图不像树，存在回路，得设置一个访问标记数组visited,当访问过时置1，否则为0</span><span class="token comment">//深度优先Depyh First Search DFS</span><span class="token keyword">int</span> visited<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//全局置0,从v开始遍历</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span>G<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ArcNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2d"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//广度优先算法Breadth First Search BFS,显然这种结构要用到队列</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"linked_queue.cpp"</span></span><span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span>G<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> w<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    LinkQuNode <span class="token operator">*</span>qu<span class="token punctuation">;</span>    <span class="token function">InitQueue</span><span class="token punctuation">(</span>qu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> visited<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2d"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">enqueue</span><span class="token punctuation">(</span>qu<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>qu<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">dequeue</span><span class="token punctuation">(</span>qu<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2d"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span>                visited<span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token function">enqueue</span><span class="token punctuation">(</span>qu<span class="token punctuation">,</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历非连通图</span><span class="token keyword">void</span> <span class="token function">DFS1</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">BFS1</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">BFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">Connect</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    bool flag <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            flag <span class="token operator">=</span> false<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//图遍历算法的应用</span><span class="token comment">//深度搜索判断是否存在路径。</span><span class="token keyword">void</span> <span class="token function">ExitPath</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span>G<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> bool <span class="token operator">&amp;</span>has<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> w<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> v<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        has <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    p <span class="token operator">=</span> G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        w <span class="token operator">=</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">ExitPath</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> w<span class="token punctuation">,</span> v<span class="token punctuation">,</span> has<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出从u到v的一条路径，假设已知u到v间有路径。</span><span class="token comment">//只要正常遍历就好，绝对会输出一条路径，不过非常随机就是了。</span><span class="token keyword">void</span> <span class="token function">FindaPath</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span>G<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> path<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//d表示path中的路径长度，初始为-1</span>    <span class="token keyword">int</span> w<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    d<span class="token operator">++</span><span class="token punctuation">;</span>    path<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> v<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> d<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    p <span class="token operator">=</span> G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        w <span class="token operator">=</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">FindaPath</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> w<span class="token punctuation">,</span> v<span class="token punctuation">,</span> path<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>nextarc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//这个递归还是让人想了一会</span><span class="token keyword">void</span> <span class="token function">FindALLPath</span><span class="token punctuation">(</span>AdjGraph <span class="token operator">*</span>G<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> path<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//d表示path中的路径长度，初始为-1</span>    <span class="token keyword">int</span> w<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    d<span class="token operator">++</span><span class="token punctuation">;</span>    path<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> v<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> d<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    p <span class="token operator">=</span> G<span class="token operator">-></span>adjlist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        w <span class="token operator">=</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">FindALLPath</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> w<span class="token punctuation">,</span> v<span class="token punctuation">,</span> path<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>nextarc<span class="token punctuation">;</span> <span class="token comment">//递归体的核心就在这里</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//恢复环境，可以重复利用。</span><span class="token punctuation">&#125;</span><span class="token comment">//后面的广度优先算法的应用暂时没有更新</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><p>图的最小生成树是树的所有生成树中边上权值最小的。（实际上是选节点）</p><ul><li>n个顶点的话就有n - 1条边。</li><li>必须只使用该图中的边来构造</li><li>不能使用会产生回路的边。</li></ul><p>这个应用有很多，求最小生成树的算法：Prim 、克鲁斯卡尔</p><p>只要遍历一次，就能得到生成树，分为深度优先生成树和广度优先生成树。</p><p><strong>普利姆算法</strong></p><p>P281 依次选择最小边，因为需要频繁取边，所以图采用邻接矩阵更合适</p><p>这体现出了从算法逻辑设计到代码实现的过程也并非易事的，需要一些巧妙的构思</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// Prim算法</span><span class="token comment">//建议先阅读一下P284,搞清楚lowcost(到U中的最小边)和closet（最小边对应的顶点）,这种实时更新最值的思想很有用，简化了算法</span><span class="token keyword">void</span> <span class="token function">Prim</span><span class="token punctuation">(</span>MatGraph g<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> lowcost<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> MIN<span class="token punctuation">;</span>    <span class="token keyword">int</span> closet<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        lowcost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        closet<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token comment">//初始化</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//找出n - 1个顶点</span>    <span class="token punctuation">&#123;</span>        MIN <span class="token operator">=</span> INF<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> MIN<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                MIN <span class="token operator">=</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                k <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">//k记录最小边的顶点编号</span>            <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"边(%d,%d)权为%d\n"</span><span class="token punctuation">,</span> closet<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> MIN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出最小生成树的一条边</span>        lowcost<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                 <span class="token comment">//标记k已经加入U中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                closet<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>克鲁斯卡尔算法</strong></p><p>这才是正儿八经的选边。P285</p><p>当一个图有多个最小生成树时，这两个算法的求解结果不一定是相同的。</p><p>因为同样要频繁取边，也采用邻接矩阵来处理。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//关键在于如何判断选取一条边(i,j)加入到T中是否出现回路，可以通过判断顶点i,j是否同属于一个连通分量来解决</span><span class="token comment">//利用vset[0..n-1]数组来完成，太厉害了，i和j处理时，改成i或j的vset值都可以</span><span class="token comment">// Prim算法</span><span class="token comment">//建议先阅读一下P284,搞清楚lowcost(到U中的最小边)和closet（最小边对应的顶点）,这种实时更新最值的思想很有用，简化了算法</span><span class="token keyword">void</span> <span class="token function">Prim</span><span class="token punctuation">(</span>MatGraph g<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> lowcost<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> MIN<span class="token punctuation">;</span>    <span class="token keyword">int</span> closet<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        lowcost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        closet<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token comment">//初始化</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//找出n - 1个顶点</span>    <span class="token punctuation">&#123;</span>        MIN <span class="token operator">=</span> INF<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> MIN<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                MIN <span class="token operator">=</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                k <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">//k记录最小边的顶点编号</span>            <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"边(%d,%d)权为%d\n"</span><span class="token punctuation">,</span> closet<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> MIN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出最小生成树的一条边</span>        lowcost<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                 <span class="token comment">//标记k已经加入U中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                closet<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//克鲁斯卡尔</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> u<span class="token punctuation">;</span>    <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token keyword">int</span> w<span class="token punctuation">;</span>    <span class="token comment">//起始顶点，终止顶点和权值</span><span class="token punctuation">&#125;</span> Edge<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Maxsize</span> <span class="token expression"><span class="token number">20000</span> </span><span class="token comment">//最大边数</span></span><span class="token keyword">void</span> <span class="token function">Kruskal</span><span class="token punctuation">(</span>MatGraph g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> u1<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> sn1<span class="token punctuation">,</span> sn2<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">int</span> vset<span class="token punctuation">[</span>MAXV<span class="token punctuation">]</span><span class="token punctuation">;</span>    Edge E<span class="token punctuation">[</span>Maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//存放所有的边</span>    k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment">//e数组的下标</span>    <span class="token comment">//第一步，由g产生E</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> INF<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                E<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>u <span class="token operator">=</span> i<span class="token punctuation">;</span>                E<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> k<span class="token punctuation">;</span>                E<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> g<span class="token punctuation">.</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token comment">//InsertSort(E,g.e)//对所有的边按照权值排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        vset<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">//初始化辅助数组</span>    k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment">//表示当前构造生成树的第几条边，初始为1</span>    j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment">//E中边的下标，初始为0</span>    <span class="token comment">//主体</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">)</span> <span class="token comment">//生成树有n-1条边</span>    <span class="token punctuation">&#123;</span>        u1 <span class="token operator">=</span> E<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">;</span>        v1 <span class="token operator">=</span> E<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>        sn1 <span class="token operator">=</span> vset<span class="token punctuation">[</span>u1<span class="token punctuation">]</span><span class="token punctuation">;</span>        sn2 <span class="token operator">=</span> vset<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sn1 <span class="token operator">!=</span> sn2<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(%d,%d):%d\n"</span><span class="token punctuation">,</span> u1<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> E<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出一条边</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>vset<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sn2<span class="token punctuation">)</span>                    vset<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sn1<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h2><p>突然想研究一下能不能上传文件</p><p><a href="/papers/2021%E5%B9%BF%E4%B8%9C%E6%8B%9B%E7%94%9F%E8%AE%A1%E5%88%92.pdf">广东省2021招生计划</a></p><p>haha，那我到时候直接把源代码传上来好了，免得这个复制太难弄了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//不想做了。。狄克斯特拉算法和弗洛伊德算法，反正只考概念罢了</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><h3 id="AOV"><a href="#AOV" class="headerlink" title="AOV"></a>AOV</h3><p>AOV网，用顶点表示活动，用有向边表示活动之间优先关系的有向图称为AOV网（顶点表示活动的网）</p><p>选择没有前驱的顶点输出，删去该顶点以及该顶点发出的所有边，重复以上二步</p><p>若全部顶点被输出，则不存在回路，否则存在回路</p><h3 id="AOE"><a href="#AOE" class="headerlink" title="AOE"></a>AOE</h3><p>顶点表示事件，有向<strong>边表示活动</strong>，开始事件（源点），结束事件（汇点）</p><p>从源点到汇点所有路径中具有最大路径长度的路径称为<strong>关键路径</strong>。</p><p>建议看看P304</p><p>先进行一次拓扑排序，然后递归从头找最大，递归从尾找最小。</p><h1 id="8-查找"><a href="#8-查找" class="headerlink" title="8.查找"></a>8.查找</h1><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">//线性表分顺序和链式，只介绍顺序表，属于静态查找。</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> KeyType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> years<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> InfoType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    KeyType key<span class="token punctuation">;</span>   <span class="token comment">//关键字</span>    InfoType data<span class="token punctuation">;</span> <span class="token comment">//其他数据</span><span class="token punctuation">&#125;</span> RecType<span class="token punctuation">;</span><span class="token comment">//顺序查找，ASL成功 = (n+1)/2 ASL失败 = n</span><span class="token keyword">int</span> <span class="token function">SeqSearch</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> KeyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!=</span> k <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> n<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//逻辑值要加一</span><span class="token punctuation">&#125;</span><span class="token comment">//从精简算法，提高查找速度的角度说，可以在R末尾增加一个关键字为k的记录为哨兵，就不用判断i是否超界</span><span class="token keyword">int</span> <span class="token function">SeqSearch1</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> KeyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    R<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!=</span> k<span class="token punctuation">)</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//折半查找</span><span class="token comment">//要求有序表,mid = (low+high)/2向下取整，成功返回逻辑序号，失败返回0</span><span class="token keyword">int</span> <span class="token function">BinSearch</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> KeyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> R<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            <span class="token keyword">return</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//好精简的算法！</span><span class="token comment">//可以用判定树刻画，n种成功情况，成功时比较次数恰为层数和n+！种失败情况。失败时比较次数为层数-1</span><span class="token comment">//ASLbn = log2(n+1)-1  最坏性能和平均性能相当接近,归纳起来复杂度为O（log2n）</span><span class="token comment">//索引结构和分块查找</span><span class="token comment">/*索引项一般为（关键字，地址），可以现在有序索引表中快速查找，然后通过地址找到提高了查找效率，但是需要建立索引表会增加时空开销*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXI</span> <span class="token expression"><span class="token number">10000</span> </span><span class="token comment">//索引表最大容量。</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    KeyType key<span class="token punctuation">;</span>    <span class="token keyword">int</span> link<span class="token punctuation">;</span> <span class="token comment">//对应在存储表里的下标</span><span class="token punctuation">&#125;</span> IdxType<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">IdxSearch</span><span class="token punctuation">(</span>IdxType I<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> KeyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> b<span class="token punctuation">;</span> <span class="token comment">//s为每块的元素个数，I的长度为b</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>I<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">>=</span> k<span class="token punctuation">)</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//接下来在该块中顺序查找</span>    i <span class="token operator">=</span> I<span class="token punctuation">[</span>high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>link<span class="token punctuation">;</span> <span class="token comment">//记住是high+1，总会取到偏小的一个</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> I<span class="token punctuation">[</span>high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>link <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!=</span> k<span class="token punctuation">)</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> I<span class="token punctuation">[</span>high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>link <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*折半查找配合时，成功查找的平均长度为ASLblk = ASLbn + ASLsq= log2(b+1) -1 + (s+1)/2 = log2(n/s+1) + s/2 可见s即每块的长度越小越好*/</span><span class="token comment">/*顺序查找时，ASLblk = ((b+1)+(s+1))/2 =1/2(n/s +s) +1 因为b = n/s向上取值，当s=根号n时最佳*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树表"><a href="#树表" class="headerlink" title="树表"></a>树表</h2><p>如果要进行表的删除、插入操作，会带来很多额外开销，若要对动态查找表进行查找，可以用几种树来。</p><p>二叉排序树的中序序列就是排好序的表</p><p>查找的ASL成功和ASL失败在P328</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">//假设各结点的关键字是唯一的</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> KeyType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> years<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> InfoType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    KeyType key<span class="token punctuation">;</span>    InfoType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> BSTNode<span class="token punctuation">;</span><span class="token comment">//用根节点bt来唯一标识一棵二叉排序树</span><span class="token comment">//插入关键字k，若已有则返回假</span>bool <span class="token function">InsertBST</span><span class="token punctuation">(</span>BSTNode <span class="token operator">*</span><span class="token operator">&amp;</span>bt<span class="token punctuation">,</span> KeyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bt <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        bt <span class="token operator">=</span> <span class="token punctuation">(</span>BSTNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BSTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bt<span class="token operator">-></span>key <span class="token operator">=</span> k<span class="token punctuation">;</span>        bt<span class="token operator">-></span>lchild <span class="token operator">=</span> bt<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> bt<span class="token operator">-></span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> bt<span class="token operator">-></span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">InsertBST</span><span class="token punctuation">(</span>bt<span class="token operator">-></span>lchild<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">></span> bt<span class="token operator">-></span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">InsertBST</span><span class="token punctuation">(</span>bt<span class="token operator">-></span>rchild<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建一棵二叉排序树是从一个空树开始，一直调用插入就好了。</span>BSTNode <span class="token operator">*</span><span class="token function">CreateBST</span><span class="token punctuation">(</span>KeyType A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BSTNode <span class="token operator">*</span>bt <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">InsertBST</span><span class="token punctuation">(</span>bt<span class="token punctuation">,</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> bt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//销毁算法和普通的二叉树算法一样</span><span class="token comment">//查找就要方便很多</span>BSTNode <span class="token operator">*</span><span class="token function">SearchBST</span><span class="token punctuation">(</span>BSTNode <span class="token operator">*</span>bt<span class="token punctuation">,</span> KeyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bt<span class="token operator">-></span>key <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> bt<span class="token operator">-></span>key <span class="token operator">=</span> k<span class="token punctuation">)</span>        <span class="token keyword">return</span> bt<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> bt<span class="token operator">-></span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">SearchBST</span><span class="token punctuation">(</span>bt<span class="token operator">-></span>lchild<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">SearchBST</span><span class="token punctuation">(</span>bt<span class="token operator">-></span>rchild<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//求最大\最小结点可以利用性质</span>KeyType <span class="token function">maxnode</span><span class="token punctuation">(</span>BSTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>KeyType <span class="token function">minnode</span><span class="token punctuation">(</span>BSTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//一定是叶子节点</span><span class="token comment">//删除要分几种情况讨论，是最麻烦的。</span><span class="token comment">//是叶子就直接删除，只有左、右子树就接上去</span><span class="token comment">//同时有左右子树的话可以从左中选最大的结点r代替p，然后把r删除，也可以选右中最小的，一般前者</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>平衡因子：左子树高度 - 右子树高度</p><p>平衡条件：平衡因子的绝对值小于1</p><p>前提是二叉排序树，</p><p>四种类型 调整前后中序序列相同是前提条件。这个建议看学校发的教材P283</p><p>删除的时候，如果不平衡了，可以通过左右孩子的平衡因子来判断做哪一种调整，P337</p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>又称散列表，设要存储的元素个数为n，设置一个长度为m&gt;=n的连续内存单元，每个元素的关键字ki(i&lt;=n-1)</p><p>为自变量，通过哈希函数映射到内存单元的地址h(ki)，并存储在这个内存单元中。</p><p>哈希冲突，不同的自变量映射到同一个地址</p><p>通常情况是关键字的取值区间远大于哈希地址的变化区间</p><p>查找性能取决于：</p><ul><li>装填因子 α = n/m 应控制最终的α在0.6~0.9范围内</li><li>哈希函数应该使哈希地址尽可能均匀地分布在哈希地址空间上</li><li>合适的解决哈希冲突的策略。</li></ul><h3 id="构造哈希函数"><a href="#构造哈希函数" class="headerlink" title="构造哈希函数"></a>构造哈希函数</h3><p>构造哈希函数</p><p>根据关键字的结构和分布的不同可构造出许多不同的哈希函数，这里主要讨论几种常用的整数类型关键字的</p><ol><li><p>直接定址法 h(k) = k + c</p><p>当关键字分布基本连续时比较好</p></li><li><p>除留余数法 h(k) = k mod p (p &lt;= m) </p><p>这种该方法的关键是选好p，使得概率分布较平均，p奇数好，不大于m的素数效果最好</p></li><li><p>数字分析法</p><p>提取关键字较均匀的数字位，适合所有关键字值都已知的情况</p></li></ol><p>还有平方取中法，折叠法等。</p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>开放地址法(也叫再散列法)：</p><ol><li><p>线性探测法</p><p>容易产生堆积问题，d0 = h(k)  di = ( (d(i-1) + 1) mod m)</p></li><li><p>平方探测法</p><p>d0 = h(k)    di = ( (d0 +- i2) mod m)</p><p>不一定能探测到哈希表上的所有单元，但最少能探测到一半的单元</p></li><li><p>还有伪随机序列法，双哈希函数法等</p></li></ol><p>再哈希法：</p><p>同时构造多个哈希函数，一个冲突就换另一个</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">//用开放地址法构造的哈希表的运算算法</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NULLKEY</span> <span class="token expression"><span class="token operator">-</span><span class="token number">1</span> </span><span class="token comment">//空关键字值</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DELKEY</span> <span class="token expression"><span class="token operator">-</span><span class="token number">2</span>  </span><span class="token comment">//被删除关键字值</span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> KetType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    KetType key<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span> <span class="token comment">//探测次数域</span><span class="token punctuation">&#125;</span> HashTable<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InsertHT</span><span class="token punctuation">(</span>HashTable ha<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> KetType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> adr<span class="token punctuation">;</span>    adr <span class="token operator">=</span> k <span class="token operator">%</span> p<span class="token punctuation">;</span>                                         <span class="token comment">//adr是关键字k对应的哈希值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">==</span> NULLKEY <span class="token operator">||</span> ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">==</span> DELKEY<span class="token punctuation">)</span> <span class="token comment">//可以直接放入</span>    <span class="token punctuation">&#123;</span>        ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> k<span class="token punctuation">;</span>        ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//i 记录k发生的次数</span>        <span class="token keyword">do</span>        <span class="token punctuation">&#123;</span>            adr <span class="token operator">=</span> <span class="token punctuation">(</span>adr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> m<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!=</span> NULLKEY <span class="token operator">&amp;&amp;</span> ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!=</span> DELKEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> k<span class="token punctuation">;</span>        ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>count <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">//设置探测次数</span>    <span class="token punctuation">&#125;</span>    n<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//哈希表中总元素个数增1</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">CreateHT</span><span class="token punctuation">(</span>HashTable ha<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> KetType keys<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> nl<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//由关键字序列keys[0..nl-1]创建哈希表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ha<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> NULLKEY<span class="token punctuation">;</span>        ha<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nl<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">InsertHT</span><span class="token punctuation">(</span>ha<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> p<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//插入nl个</span><span class="token punctuation">&#125;</span><span class="token comment">//删除算法</span><span class="token comment">//在开放地址法处理的哈希表上不能简单的删除，因为在查找算法中空是查找失败，应该置特殊值</span>bool <span class="token function">DeleteHT</span><span class="token punctuation">(</span>HashTable ha<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> KetType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> adr<span class="token punctuation">;</span>    adr <span class="token operator">=</span> k <span class="token operator">&amp;</span> p<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!=</span> NULLKEY <span class="token operator">&amp;&amp;</span> ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!=</span> DELKEY<span class="token punctuation">)</span>        adr <span class="token operator">=</span> <span class="token punctuation">(</span>adr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> m<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">==</span> k<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> DELKEY<span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">SearchHT</span><span class="token punctuation">(</span>HashTable ha<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> KetType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> adr<span class="token punctuation">;</span>    adr <span class="token operator">=</span> k <span class="token operator">%</span> p<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!=</span> NULLKEY <span class="token operator">&amp;&amp;</span> ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!=</span> k<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        adr <span class="token operator">=</span> <span class="token punctuation">(</span>adr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> m<span class="token punctuation">;</span> <span class="token comment">//线性探测</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">==</span> k<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Success:%d compare %d times"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ASL成功为关键字列表中每个关键字的比较次数的平均数</p><p>ASL失败为直到空时的探测次数，P357 记得要算上自己的这次</p><p>拉链法：</p><p>此时的装填因子可以设定为大于1</p><p>优点：无堆积现象，平均查找长度较短，适合无法定长的情况，元素较大时指针开销可忽略不计，删除操作容易实现</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">//拉链法</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> KeyType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    KeyType key<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> NodeType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    NodeType <span class="token operator">*</span>firstp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> HashTable<span class="token punctuation">;</span><span class="token comment">//理解这个HashTable ha数组，下标即为“地址”</span><span class="token keyword">void</span> <span class="token function">InsertHT</span><span class="token punctuation">(</span>HashTable ha<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> KeyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> adr<span class="token punctuation">;</span>    adr <span class="token operator">=</span> k <span class="token operator">%</span> p<span class="token punctuation">;</span>    NodeType <span class="token operator">*</span>q<span class="token punctuation">;</span>    q <span class="token operator">=</span> <span class="token punctuation">(</span>NodeType <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NodeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-></span>key <span class="token operator">=</span> k<span class="token punctuation">;</span>    q<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>firstp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>firstp <span class="token operator">=</span> q<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        q<span class="token operator">-></span>next <span class="token operator">=</span> ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>firstp<span class="token punctuation">;</span>        ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>firstp <span class="token operator">=</span> q<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">CreateHT</span><span class="token punctuation">(</span>HashTable ha<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> KeyType keys<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> nl<span class="token punctuation">)</span><span class="token comment">//由关键字序列keys[0..nl-1]创建哈希表</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        ha<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nl<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">InsertHT</span><span class="token punctuation">(</span>ha<span class="token punctuation">,</span> n<span class="token punctuation">,</span> p<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//删除算法 在逻辑上更为简单，可以直接删除</span>bool <span class="token function">DeleteHT</span><span class="token punctuation">(</span>HashTable ha<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> KeyType k<span class="token punctuation">)</span> <span class="token comment">//删除哈希表中的关键字k</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> adr<span class="token punctuation">;</span>    adr <span class="token operator">=</span> k <span class="token operator">%</span> p<span class="token punctuation">;</span>    NodeType <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token operator">*</span>preq<span class="token punctuation">;</span>    q <span class="token operator">=</span> ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>firstp<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>key <span class="token operator">==</span> k<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>firstp <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//首节点不为k时</span>    preq <span class="token operator">=</span> q<span class="token punctuation">;</span>    q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>key <span class="token operator">==</span> k<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        preq<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">SearchHT</span><span class="token punctuation">(</span>HashTable ha<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> KeyType k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> adr<span class="token punctuation">;</span>    adr <span class="token operator">=</span> k <span class="token operator">%</span> p<span class="token punctuation">;</span>    NodeType <span class="token operator">*</span>q <span class="token operator">=</span> ha<span class="token punctuation">[</span>adr<span class="token punctuation">]</span><span class="token punctuation">.</span>firstp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-></span>key <span class="token operator">==</span> k<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ASL成功就是比较次数求平均嘛</p><p>ASL不成功 就是每条链的结点数求平均哈哈，有几个结点就白比较了几次</p><h1 id="9-内排序"><a href="#9-内排序" class="headerlink" title="9.内排序"></a>9.内排序</h1><p>此处的关键字是可以重复的</p><p>根据相同关键字排序后相对次序是否改变可分为稳定和不稳定，这相对于<strong>所有可能的输入实例</strong></p><p>在排序中不需要进行数据的内、外存交换，称之为内排序。</p><p>需要关键字<strong>比较</strong>的方法有插入排序、选择排序、交换排序、归并排序</p><p>不需要的方法有基数排序</p><p>基于比较的排序主要进行两种操作：比较+移动</p><p>正序：关键字顺序正好和排序顺序相同，反序则相反。</p><p>比较排序的<strong>最好的平均理论时间</strong>复杂度为O(nlog2n) 比如堆排序、二路归并、快速排序 P367</p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//基本数据类型</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> KeyType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> one<span class="token punctuation">;</span>    <span class="token keyword">char</span> two<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> InfoType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    KeyType key<span class="token punctuation">;</span>    InfoType data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> RecType<span class="token punctuation">;</span><span class="token comment">//插入排序</span><span class="token comment">//直接插入排序</span><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    RecType tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token comment">//如果直接就大于有序区最大的，</span>        <span class="token punctuation">&#123;</span>            tmp <span class="token operator">=</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">&#123;</span>                R<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">></span> tmp<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            R<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//折半插入排序</span><span class="token comment">//在有序区查找位置时用折半查找就好了</span><span class="token keyword">void</span> <span class="token function">BinInsertSort</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> mid<span class="token punctuation">;</span>    RecType tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            tmp <span class="token operator">=</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            high <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>key <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>                    high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>                R<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            R<span class="token punctuation">[</span>high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//希尔排序</span><span class="token comment">//这和上一章查找好像啊，分组插入,原理我感觉是避免高次运算的爆炸增长</span><span class="token comment">//这里取di+1 = di/2向下取整,d1 = n/2</span><span class="token keyword">void</span> <span class="token function">ShellSort</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> d <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    RecType tmp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>d <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> d<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//这个上下界真是绝了，一步到位全部都排好，我还想了一会</span>        <span class="token punctuation">&#123;</span>            tmp <span class="token operator">=</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> i <span class="token operator">-</span> d<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tmp<span class="token punctuation">.</span>key <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                R<span class="token punctuation">[</span>j <span class="token operator">+</span> d<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                j <span class="token operator">=</span> j <span class="token operator">-</span> d<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            R<span class="token punctuation">[</span>j <span class="token operator">+</span> d<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        d <span class="token operator">=</span> d <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//交换排序</span><span class="token comment">//冒泡排序,从后开始，把有序的冒到最前面</span><span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    RecType tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">></span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                tmp <span class="token operator">=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                R<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                R<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//实际上，一旦某一趟不出现任何元素交换，就说明排好序了，可以用一个flag来达到这点</span><span class="token comment">//快速排序 当年初学感觉非常巧妙的算法哈哈</span><span class="token comment">//选一个枢纽（一般第一个），然后将所有的放在其前后，递归进行处理</span><span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//从头尾向中扫描</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> s<span class="token punctuation">,</span> j <span class="token operator">=</span> t<span class="token punctuation">;</span>    RecType tmp <span class="token operator">=</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> i <span class="token operator">&amp;&amp;</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">>=</span> tmp<span class="token punctuation">.</span>key<span class="token punctuation">)</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        R<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">></span> j <span class="token operator">&amp;&amp;</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;=</span> tmp<span class="token punctuation">.</span>key<span class="token punctuation">)</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        R<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    R<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token comment">//对R[s...t]元素进行快速排序</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> t<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        i <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">QuickSort</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span> s<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">QuickSort</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span> s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//选择排序</span><span class="token comment">//基本思路是每一趟都挑出最大、最小的，适合从大量元素中选择一部分排序元素</span><span class="token comment">//简单选择选择</span><span class="token comment">//分成有序区和无序区，从无序区选出最的后与无序区第一个元素交换，之所以叫简单排序是因为找最小值的方法是简单的两两比较</span><span class="token keyword">void</span> <span class="token function">SelectSort</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    RecType tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        k <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>                k <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">//k记录最值的位置</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            tmp <span class="token operator">=</span> R<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            R<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//堆排序</span><span class="token comment">/*看成是一颗完全二叉树的顺序存储结构，大根堆，小根堆，挑选最大元素是采用筛选方法实现的筛选：假定某节点左右子树是大根堆，选择子节点和本身最大的上来，由于可能会破坏子树，因此递归判断*/</span><span class="token keyword">void</span> <span class="token function">sift</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> low<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">;</span> <span class="token comment">//low是根节点,j指向当前结点的孩子</span>    RecType tmp <span class="token operator">=</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>            j<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//看看两个孩子谁大</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>key <span class="token operator">&lt;</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            R<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> j<span class="token punctuation">;</span>            j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">;</span> <span class="token comment">//这个索引的变换有点巧妙</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>            <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//筛选结束</span>    <span class="token punctuation">&#125;</span>    R<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//构建初始堆，从最后一个分支点n/2向下取整开始，反复筛选</span><span class="token comment">//for(i = n/2;i>=1;i--) sift(R,i,n)</span><span class="token keyword">void</span> <span class="token function">HeapSort</span><span class="token punctuation">(</span>RecType R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    RecType tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token function">sift</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//建立初始堆</span>    <span class="token comment">//每次抽掉“根”，就是堆上最大那个</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        tmp <span class="token operator">=</span> R<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        R<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        R<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token function">sift</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>多次将两个或以上的有序表合成一个新的有序表。我们研究二路归并</p><p>先分成n个长度为1的，两两归并成n/2个向上取整的有序序列，依次类推直到得到长度为n的有序序列</p><p>我不想写啦！！！！P389自己看图吧</p><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>借助多关键字排序的思想堆单关键字进行排序。通过“分配”、“收集”</p><p>单关键字R[i].key 由d位数字组成，每一位的值都在(0 , r)之间，二进制r为2</p><p>最低位LSD和最高位优先MSD。选择方式由数据序列特点决定，越重要的位越放在后面.</p><p>想看原理在P390</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//基数排序</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXD</span> <span class="token expression"><span class="token number">10000</span> </span><span class="token comment">//最大关键字位数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXR</span> <span class="token expression"><span class="token number">10</span>    </span><span class="token comment">//每一位的取值上限（开区间）</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> data<span class="token punctuation">[</span>MAXD<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//存放关键字的各位</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment">//指向下一个结点</span><span class="token punctuation">&#125;</span> NodeType<span class="token punctuation">;</span><span class="token comment">//输入数据为p为首节点的单链表</span><span class="token keyword">void</span> <span class="token function">RadixSort</span><span class="token punctuation">(</span>NodeType <span class="token operator">*</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    NodeType <span class="token operator">*</span>head<span class="token punctuation">[</span>MAXR<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>tail<span class="token punctuation">[</span>MAXR<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>t<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            head<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//初始化指针</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>             <span class="token comment">//将原链表所有节点分配到链队</span>        <span class="token punctuation">&#123;</span>            k <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span> <span class="token comment">//找到第k个链队</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                head<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>                tail<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                tail<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                tail<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//重新用p来收集所有节点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">//找到第一个非空链队,通过首位指针处理，中间已经连好了</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    p <span class="token operator">=</span> head<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    t <span class="token operator">=</span> tail<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    t<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    t <span class="token operator">=</span> tail<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//如果不是第一个,就连上来</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        t<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//别忘了！！！！！卧槽结束了！</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然课后习题一道没写</p><p>虽然后面跳过了一些明显不考的算法，但是终于在考试前5天写完了还是好开心</p><p>但是还有大雾和微积分:cry:</p><p>学弟学妹们，虽然这门数据结构在未来会被淘汰，但是它的绩点很重啊QWQ,不要向我一样临时抱佛脚QWQ</p><p>试验一下新功能，把我的代码看能不能直接放在这方便你们下载</p><p><a href="/papers/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0.zip">数据结构</a></p><p>👆</p><h1 id="待补充"><a href="#待补充" class="headerlink" title="待补充"></a>待补充</h1><p>串：KMP</p><p>稀疏矩阵快速转置</p><p>二叉树遍历的非递归</p><p>最短路径的两种算法</p><p>AOV和AOE</p><p>平衡二叉树的算法实现</p><p>归并排序</p><p>明年学算法设计前应该会写完这些</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;考前抱佛脚┭┮﹏┭┮&lt;/p&gt;
&lt;p&gt;记住这里大量用了c++的引用。。好方便，但是答题的时候记得换成 *和全局变量&lt;/p&gt;
&lt;p&gt;一个算法应该具有以下特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有穷性&lt;/li&gt;
&lt;li&gt;确定性  不存在二义性&lt;/li&gt;
&lt;li&gt;可行性&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    <category term="algorithm" scheme="https://darren-dong.com/categories/algorithm/"/>
    
    
    <category term="data-structure" scheme="https://darren-dong.com/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>python二刷</title>
    <link href="https://darren-dong.com/2021/05/21/python%E4%BA%8C%E5%88%B7/"/>
    <id>https://darren-dong.com/2021/05/21/python%E4%BA%8C%E5%88%B7/</id>
    <published>2021-05-21T06:28:04.000Z</published>
    <updated>2021-08-09T07:24:18.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="白嫖的python课件总结"><a href="#白嫖的python课件总结" class="headerlink" title="白嫖的python课件总结"></a>白嫖的python课件总结</h1><p>[toc]</p><p>ps：</p><p>这份笔记并不完整，是笔者学了一遍粗糙的python后二刷看课件觉得有用的东西，课件想要的私聊，不贵不贵，一杯奶茶:laughing:</p><p>还有那份课件的题目值得一做！</p><h2 id="1-语言基础"><a href="#1-语言基础" class="headerlink" title="1.语言基础"></a>1.语言基础</h2><p>面向对象 、 解释型 、 动态数据类型</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521101010.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521101018.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521101003.png"  style="zoom:50%;" /><h3 id="变量与地址"><a href="#变量与地址" class="headerlink" title="变量与地址"></a>变量与地址</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521101121.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521101133.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521101142.png"  style="zoom:50%;" /><p> Python  解释器会为每个出现的对象分配内存单元，即使它们的值相等，也会这样 </p><p>为了 提高内存利用效率，对于一些简单的对象，如一些数值 较小（-256~256 ）的 整型（int ）对象，Python  采取重用对象内存的办法</p><p>单独的下画线（_ ）是一个特殊变量，用于表示上一次运算的结果</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521110533.png"  style="zoom:50%;" /><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>整数二进制0b\0B开头,八进制0o\0O开头，十六进制0x\0X开头</p><p>对于浮点数，Python 3.x  默认提供17  位有效数字的精度，相当<br>于C  语言中的双精度浮点数</p><p>可以通过x.real  和x.imag  来分别获取复数x  的实部和虚部，结果都是浮点型，是j不是i</p><p>数学常量：e  pi</p><p>函数：</p><p>fabs  sqrt  pow(x,y)   exp log(x[,base])（base默认是e）  log10()</p><p>ceil floor  </p><p>fmod(x,y) # x/y的余数 （浮点）</p><p>degrees  &lt;=&gt;  radians</p><p>sin cos tan asin acos atan（默认用弧度）</p><p>Cmath模块函数基本一致，但是对复数运算</p><p>cmath.sqrt(-1)  ij 用的是j不是i</p><p> cmath 模块包括复数 运算特有的 函数。</p><p>复数x=a+bi ，phase(x) 函数返回复数x 的幅 角，即atan(b/a) 。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521111433.png"  style="zoom:50%;" /><h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3><p>seed设置种子，默认将<strong>系统时间</strong>设为种子值</p><p>choice(seq) ：从 序列的元素中随机挑选一个 元素 。</p><p>sample(seq,k) ：从 序列中随机挑选k 个元素。</p><p>shuffle(seq) ：将 序列的所有元素随机排序 ,这个只能用于可更改的，字符串不可用</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521111617.png"  style="zoom:50%;" /><h3 id="时间和日历"><a href="#时间和日历" class="headerlink" title="时间和日历"></a>时间和日历</h3><p>datetime基于time进行了优化，更方便全面</p><h4 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span>date<span class="token punctuation">,</span>timedt <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>dt<span class="token punctuation">.</span>year<span class="token punctuation">,</span>month<span class="token punctuation">,</span>day<span class="token punctuation">,</span>hour<span class="token punctuation">,</span>minute<span class="token punctuation">,</span>seconddt<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token punctuation">)</span>输出前三个dt<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>输出后三个dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%x%x%x'</span><span class="token punctuation">)</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">'202151'</span><span class="token punctuation">,</span><span class="token string">"%Y%m%d"</span><span class="token punctuation">)</span><span class="token comment">#转换为datetime对象！！这个是datetime下的datetime子类！！！</span>datetime相减会产生datetime<span class="token punctuation">.</span>delta对象delta <span class="token operator">=</span> datetime2 <span class="token operator">-</span> datetime1delta <span class="token operator">==</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">7179</span><span class="token punctuation">)</span> <span class="token comment">#间隔99天,7179秒</span>timedelta和datetime可以做加减得到新的datetime<span class="token operator">%</span>y     两位数的年份表示（<span class="token number">00</span><span class="token operator">-</span><span class="token number">99</span>）<span class="token operator">*</span><span class="token operator">%</span>Y     四位数的年份表示（<span class="token number">000</span><span class="token operator">-</span><span class="token number">9999</span>）<span class="token operator">*</span><span class="token operator">%</span>m     月份（<span class="token number">01</span><span class="token operator">-</span><span class="token number">12</span>）<span class="token operator">*</span><span class="token operator">%</span>d     月内中的一天（<span class="token number">0</span><span class="token operator">-</span><span class="token number">31</span>）<span class="token operator">*</span><span class="token operator">%</span>H     <span class="token number">24</span>小时制小时数（<span class="token number">0</span><span class="token operator">-</span><span class="token number">23</span>）<span class="token operator">*</span><span class="token operator">%</span>I     <span class="token number">12</span>小时制小时数（<span class="token number">01</span><span class="token operator">-</span><span class="token number">12</span>）<span class="token operator">*</span><span class="token operator">%</span>M     分钟数（<span class="token number">00</span><span class="token operator">=</span><span class="token number">59</span>）<span class="token operator">*</span><span class="token operator">%</span>S     秒（<span class="token number">00</span><span class="token operator">-</span><span class="token number">59</span>）<span class="token operator">*</span><span class="token operator">%</span>a     本地简化星期名称<span class="token operator">*</span><span class="token operator">%</span>A     本地完整星期名称<span class="token operator">%</span>b     本地简化的月份名称<span class="token operator">%</span>B     本地完整的月份名称<span class="token operator">%</span>c     本地相应的日期表示和时间表示<span class="token operator">%</span>j     年内的一天（<span class="token number">001</span><span class="token operator">-</span><span class="token number">366</span>）<span class="token operator">%</span>p     本地A<span class="token punctuation">.</span>M<span class="token punctuation">.</span>或P<span class="token punctuation">.</span>M<span class="token punctuation">.</span>的等价符<span class="token operator">%</span>U     一年中的星期数（<span class="token number">00</span><span class="token operator">-</span><span class="token number">53</span>）星期天为星期的开始<span class="token operator">%</span>w     星期（<span class="token number">0</span><span class="token operator">-</span><span class="token number">6</span>），星期天为星期的开始<span class="token operator">%</span>W     一年中的星期数（<span class="token number">00</span><span class="token operator">-</span><span class="token number">53</span>）星期一为星期的开始<span class="token operator">%</span>x     本地相应的日期表示<span class="token operator">%</span>X     本地相应的时间表示<span class="token operator">%</span>Z     当前时区的名称<span class="token operator">%</span><span class="token operator">%</span>     <span class="token operator">%</span>号本身<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://zhuanlan.zhihu.com/p/101939095">详述</a></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521112059.png"  style="zoom:50%;" /><h3 id="python内置"><a href="#python内置" class="headerlink" title="python内置"></a>python内置</h3><p>range  iter</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521112219.png"  style="zoom:50%;" /><h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521112244.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521112255.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521112308.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521112324.png"  style="zoom:50%;" /><p> Python 中能表示浮点数的有效数字是有限的，而在实际应用中数据的有效位数并无限制，这种矛盾，势必带来计算时的微小误差。</p><h2 id="2-顺序结构"><a href="#2-顺序结构" class="headerlink" title="2.顺序结构"></a>2.顺序结构</h2><p>在Python 中，语句行从解释器提示符后的第一列开始， 前面不能有任何空格 ，否则会产生语法错误</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521112701.png"  style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521112733.png"  style="zoom:67%;" /><p>Python 中的赋值并不是直接将一个值赋给一个变量的，而是通过引用传递的，在赋值时，不管这个对象是新创建的还是一个已经存在的，都是将该对象的 引用（ 并不是值 ）</p><p>同步赋值指的是多变量一条式子赋值时，实际上先创建了一个元组，先后顺序不影响</p><p>eval（）去掉字符串最外侧的引号</p><p>print(xxx[,sep =][,end = ])</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113027.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113057.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113106.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113124.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113149.png"  style="zoom:50%;" /><h3 id="字符串format方法"><a href="#字符串format方法" class="headerlink" title="字符串format方法"></a>字符串format方法</h3><p>这才是王道</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113226.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113241.png"  style="zoom:50%;" /><p>用序号调整次序，重复什么的很方便</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113335.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113426.png"  style="zoom:50%;" /><p>注意这个居中填充，还有居中不对称时左边少一个</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'what &#123;1:&lt;10&#125;&#123;0&#125;the &#123;c:&amp;&lt;10.1f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token number">21.311</span><span class="token punctuation">)</span><span class="token punctuation">)</span>what b         athe <span class="token number">21.3</span><span class="token operator">&amp;</span><span class="token operator">&amp;</span><span class="token operator">&amp;</span><span class="token operator">&amp;</span><span class="token operator">&amp;</span><span class="token operator">&amp;</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'what &#123;1:&lt;10&#125;&#123;0&#125;the &#123;c:&amp;=+10.1f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token number">21.311</span><span class="token punctuation">)</span><span class="token punctuation">)</span>what b         athe <span class="token operator">+</span><span class="token operator">&amp;</span><span class="token operator">&amp;</span><span class="token operator">&amp;</span><span class="token operator">&amp;</span><span class="token operator">&amp;</span><span class="token number">21.3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113449.png"  style="zoom:50%;" /><h2 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3.循环结构"></a>3.循环结构</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210706145044.png"  style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210706145338.png"  style="zoom:50%;" /><p>for 语句是通过遍历任意序列的元素进行来建立循环的，针对序列的每一个元素执行一次循环体</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113716.png"  style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521113742.png"  style="zoom: 67%;" /><p>首先Python 对关键字in 后的对象调用iter() 函数获得迭代 器，然后 调用next() 函数获得迭代器的 元素，直到 抛出stopIteration</p><p> while 语句多用于循环次数不确定的情况，而对于循环次数确定的情况，使用for</p><p>pass空语句</p><p>注意 ：布尔常量True 和False 首字母必须大写 ！</p><h2 id="4-字符串"><a href="#4-字符串" class="headerlink" title="4.字符串"></a>4.字符串</h2><p><strong>建议看看原文</strong></p><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>万国码Unicode是python选择的标准符号表，它每种语言中的每个字符设定了<strong>统一并且唯一的二进制编码</strong>，以满足跨语言、跨平台进行文本转换、处理的要求（翻译二进制码的方式）</p><p>ASCII 码中，一个英文字母（不分大小写）为一个字节，一个中文汉字为两个字节。</p><p>UTF-8 编码中，一个英文字为一个字节，一个中文为三个字节。</p><p>Unicode 编码中，一个英文为一个字节，一个中文为两个字节。</p><p>字节只是一个单位（8位）罢了，不同的编码中采用不同的规则存储字符，而这些规则实现的时候消耗字节大小不同</p><p>UTF-8</p><p>​    是 一种为Unicode 字符设计的变长编码系统</p><p>对于ASCII 字符，UTF-8 仅使用1 个字节来编码</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521123412.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521123508.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521123527.png"  style="zoom:50%;" /><p>Unicode规定了，所有字符<strong>统一由两个字符</strong>来表示，也就是<strong>16位</strong></p><p>utf-8就是缩小一点，从4到8到12到16分段</p><p><a href="https://zhuanlan.zhihu.com/p/137875615">详述</a>有一点错误就是最后那个中文例子，看我的👇</p><p><strong>而python字符串默认是unicode编码</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token string">'卧槽'</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'卧'</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">b'\xe5\x8d\xa7\xe6\xa7\xbd'</span> <span class="token comment">#一个汉字拆成三个字节</span>    In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c <span class="token operator">=</span> <span class="token string">'dnoad'</span>In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">b'dnoad'</span><span class="token comment"># 英文在utf-8中不会发生转换，直接用一个字节表示</span>In <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'我'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">25105</span> <span class="token comment">#unicode</span>    In <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">25104</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'成'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分片的操作很灵活，开始和结束 的索引值 可以超<br>过字符串的长度 </p><p>字符串用 +  和 *</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130045.png"  style="zoom:50%;" /><p>但是在解释器里面，都是输出普通的’abc’</p><p>Python 的字符串是不可变类型，只能通过新建一<br>个字符串去改变一个字符串的元素</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130119.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130139.png"  style="zoom:50%;" /><p>字符比较是按其计算机内部字符编码值的大小进<br>行比较，西文字符按ASCII 码值大小进行比较</p><p>  比较的基本规则是，空格字符最小，数字比字母<br>小，大写字母比小写字母小（ 对应字母相 差32</p><h3 id="函数。。"><a href="#函数。。" class="headerlink" title="函数。。"></a>函数。。</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130239.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130256.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130327.png"  style="zoom:50%;" /><p>prefix和suffix是字符串，start 可以选择开头位置，end我不知道干嘛的</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130413.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130614.png"  style="zoom:50%;" /><p>split如果两个分隔符中没东西，也会拆出空字符串,从左右拆顺序不变，可能只影响matsplit参数</p><p>那个splitlines试了一下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> <span class="token string">'dada\nwdad'</span>cOut<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'dada\nwdad'</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>dadawdadc<span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'dada'</span><span class="token punctuation">,</span> <span class="token string">'wdad'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130715.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130738.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130818.png"  style="zoom:50%;" /><h3 id="字节类型"><a href="#字节类型" class="headerlink" title="字节类型"></a>字节类型</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521130927.png"  style="zoom:50%;" /><p>和字符串一样，可以使用内置的len() 函数求bytes对象的长度，也可以 使用“+ ” 运算符连接两个bytes 对象，其操作结果是一个新的bytes 对象</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131019.png"  style="zoom:50%;" /><p>如果需要改变某个字节，可以组合使用字符串的分片和连接操作（效果跟字符串是一样的）， 也可以 将bytes 对象转换为bytearray 对象，bytearray对象是可以被修改的</p><p>可以 使用编号给bytearray 对象的某个字节赋值 ， <strong>并且这个值必须是0~255 之间的一个整数</strong></p><p>  也 不允许针对bytes 对象的出现次数进行计数，因为字符串里面 根本没有字节字符</p><p>encode和decode可以在两者间转换</p><h2 id="5-正则"><a href="#5-正则" class="headerlink" title="5.正则"></a>5.正则</h2><p><a href="https://darren-dong.com/2021/03/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/">看我的博客了解基础知识</a></p><p>  在Python 中，正则表达式的功能通过正则表达式<br>模块re</p><p> re 模块提供各种正则表达式 的匹配 操作，在文本解析、复杂字符串分析和信息提取时是一个非常有用的工具。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131633.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131657.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131718.png"  style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131726.png"  style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131733.png"  style="zoom:33%;" /><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131810.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131819.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131839.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131907.png"  style="zoom:50%;" /><p>正则表达式中，group（）用来提出分组截获的字符串<strong>，（）用来分组</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span>  rea  <span class="token operator">=</span>  <span class="token string">"123abc456"</span><span class="token keyword">print</span>  re<span class="token punctuation">.</span>search<span class="token punctuation">(</span> <span class="token string">"([0-9]*)([a-z]*)([0-9]*)"</span> <span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token comment">#123abc456,返回整体</span><span class="token keyword">print</span>  re<span class="token punctuation">.</span>search<span class="token punctuation">(</span> <span class="token string">"([0-9]*)([a-z]*)([0-9]*)"</span> <span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token comment">#123</span><span class="token keyword">print</span>  re<span class="token punctuation">.</span>search<span class="token punctuation">(</span> <span class="token string">"([0-9]*)([a-z]*)([0-9]*)"</span> <span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token comment">#abc</span><span class="token keyword">print</span>  re<span class="token punctuation">.</span>search<span class="token punctuation">(</span> <span class="token string">"([0-9]*)([a-z]*)([0-9]*)"</span> <span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span>    <span class="token comment">#456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>正则表达式中的三组<strong>括号</strong>把匹配结果分成三组</li></ol><ul><li> group() 同group（0）就是匹配正则表达式整体结果</li><li> group(1) 列出第一个括号匹配部分，group(2) 列出第二个括号匹配部分，group(3) 列出第三个括号匹配部分。</li></ul><ol start="2"><li>没有匹配成功的，re.search（）返回None</li></ol><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521131927.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521132000.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521132021.png"  style="zoom:50%;" /><p><strong>注意到匹配模式串使用了原始字符串r’  ‘</strong></p><p> match() 方法并不是完全匹配。当正则表达式结束时，若string 还有剩余字符 ，仍然视为 成功</p><p>  想 要完全匹配，可以在表达式末尾加上边界匹配符’$</p><hr><p>match() 函数只是在字符串 的左端位置 尝试匹配正则表达式，也就是只报告从位置0 开始的 匹配情况。</p><p>  如果想要搜索整个字符串来寻找匹配，应当用search() 函数 ,使用方法完全一样</p><p> findall() 函数搜索字符串，以列表形式返回全部能匹配正则表达式的子串 。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521132802.png"  style="zoom:50%;" /><p>finditer()  与findall() 函数类似，在字符串中找到正则表达式所匹配的所有子串，并组成一个迭代器返回。</p><hr><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521132849.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521132909.png"  style="zoom:50%;" /><p> subn() 函数的功能和sub() 函数 相同，但 返回新的字符串以及替换的次数组成的元组 。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521132944.png"  style="zoom:50%;" /><hr><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521133009.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521133156.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521133228.png"  style="zoom:50%;" /><p><strong>两个斜杠噢，第一次先让编译器把两个斜杠转成一个斜杠，第二步到正则字符串则把剩下的单斜杠看成是转义</strong></p><h2 id="6-列表-amp-元组"><a href="#6-列表-amp-元组" class="headerlink" title="6.列表&amp;元组"></a>6.列表&amp;元组</h2><p>len()  min()  max()</p><p>sum()返回序列s中所有元素和，元素必须为数值</p><p>reduce 位于functools模块中</p><p> reduce(f,s[,n]) ：reduce() 函数把序列s 的前两个元素作为 参数，传 给函数f ，返回 计算的结果和 序列的下一个元素重新作为f 的参数，直到序列的最后一个元素 </p><p>enumerate 和 zip不必多言</p><p>利用* 号操作符，可以将对象解压 还原</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> t<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> m<span class="token operator">=</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有sorted reversed  all any</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521141444.png"  style="zoom:50%;" /><p>加星号的变量只允许一个，否则会出现语法错误syntaxError 。</p><p>列表可以进行元素赋值（索引不能超）</p><p>元素删除  del   分片赋值  在使用<strong>分片赋值</strong>时，<strong>可使用与原序列不等长的序列将分片替换</strong> </p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521141731.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210706154841.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521141802.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521141833.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521141849.png"  style="zoom:50%;" /><p>for前面的部分是一个表达式，它必须根据<code>x</code>计算出一个结果，必须加上else，如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>x <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="列表常用方法"><a href="#列表常用方法" class="headerlink" title="列表常用方法"></a>列表常用方法</h3><ol><li><strong>序列都可以用</strong></li></ol><p>并不改变序列本身，可用于列表，元组，字符串</p><p>s.count(x) ：返回x 在序列s 中出现的次数</p><p>s.index(x) ：返回x 在s 中第一次出现的下标</p><p>不过x是完整的</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521142351.png"  style="zoom:50%;" /><ol start="2"><li>仅使用列表</li></ol><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521143101.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521143117.png"  style="zoom: 50%;" /><p>s.reverse() ：将列表s 中的元素逆序排</p><p> s.pop([i]) ：删除并返回列表s 中指定位置i 的元素，默认是最后一个元素。若i 超出列表长度 ，则 抛出IndexError 异常 </p><p> s.insert(i,x) ：在列表s 的i 位置处插入x 。<strong>如果i 大于列表的长度，则插入到列表最后 。</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521143709.png"  style="zoom:50%;" /><p>可以看看题目</p><h2 id="7-字典"><a href="#7-字典" class="headerlink" title="7.字典"></a>7.字典</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144114.png"  style="zoom:50%;" /><p>更新和创建都用索引，删除则用del，检查关键字用in / not in</p><p> len() 函数可以获取字典所包含“关键字: 值”对的数目，即字典长度 。虽然 也支持max() 、min() 、sum() 和sorted() 函数，但只针对字典的关键字进行计算，很多情况下没有实际意义。</p><p>  字典不支持连接(+) 和重复操作符(*) ，关系运算中只有“==”  和“!=”  有意义 </p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>dict三用法:</p><ol><li><p>使用dict() 函数创建一个空字典并给变量赋值</p></li><li><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210706160413.png"  style="zoom:50%;" /><p><strong>第二种方法应该是大规模处理中用的多的</strong></p></li><li><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210706160432.png"  style="zoom:50%;" /></li></ol><p>Python 字典和集合实际上也是对象，Python 提供了很多有用的方法。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144729.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144739.png"  style="zoom:50%;" /><p>原先的键会被清除，字符串也可以做序列，   <strong>重复的键会被删除</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">d2 <span class="token operator">=</span> d<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'dwad'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>d2Out<span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144757.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144814.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144833.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144857.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144930.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144948.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521144955.png"  style="zoom:50%;" /><h2 id="8-集合"><a href="#8-集合" class="headerlink" title="8.集合"></a>8.集合</h2><p>  在Python 中， 集合（ set  ）是 一个无序排列的、不重复的数据集合体，类似于数学中的集合概念 ，可 对其 进行并、 交、 差等 运算</p><p>集合和字典都属于无序集合体，有许多操作是一致的 </p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521145206.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521145235.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521145238.png"  style="zoom:50%;" /><p>  在Python 中，用大括号将集合元素括起来，这与字典的创建类似，但{} 表示空字典，空集合用set()表示。</p><p>集合 的 自动删除重复元素 这个特性非常有用，例如，要删除列表中大量的重复元素，可以先用set()函数将列表转换成集合，再用list() 函数将集合转换成列表，操作效率非常高。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521150012.png"  style="zoom:50%;" /><p> Python 提供frozenset() 函数来创建不可变集合，不可变集合是不能修改的，因此能作为其他集合的元素，也能作为字典的关键字。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521150057.png"  style="zoom:50%;" /><h3 id="传统运算"><a href="#传统运算" class="headerlink" title="传统运算"></a>传统运算</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521150124.png"  style="zoom:50%;" /><p>比较用 == 和 ！=  还有包含真包含 &lt; &lt;=</p><p>当然还有赋值运算符 s1 |= s2</p><p>集合与for 循环语句配合使用，可实现对集合各个元素的遍历</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210706161507.png"></p><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><ol><li><strong>适用于可变和不可变集合</strong></li></ol><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521150431.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521150451.png"  style="zoom:50%;" /><p> s.copy() ：复制集合s 。</p><ol start="2"><li><strong>适合可变集合的方法</strong></li></ol><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521150621.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521150630.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521150705.png"  style="zoom:50%;" /><h2 id="9-函数与模块"><a href="#9-函数与模块" class="headerlink" title="9.函数与模块"></a>9.函数与模块</h2><p>在Python 中，实参向形参传送数据的方式是“值传递”，即“拷贝”或“复制”</p><p>  实参 的值传给形参 ，是对象间整体赋值，是 一种单向传递方式，不能由形参传回给实参。</p><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521151042.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521151105.png"  style="zoom:50%;" /><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> 必选参数就是位置参数，必须填，<span class="token number">2</span><span class="token punctuation">.</span> 默认参数可填可不填。默认参数有个坑，就是每次调用函数，默认参数的指向不便且会保存，所以可修改，每次都不一样，因此定义默认参数要牢记一点：默认参数必须指向不变对象!<span class="token number">3</span><span class="token punctuation">.</span> 然后就到可变参数，指的是可以接受所有值的元组，<span class="token operator">*</span>args  放在第三位接受所有的<span class="token number">4</span><span class="token punctuation">.</span> 第四是命名关键字，或者说可变字典<span class="token operator">**</span>kw  接受所有的 a <span class="token operator">=</span> <span class="token string">'xxx'</span> 这样的参数，并赋给字典，但是key不用加引号<span class="token number">5</span><span class="token punctuation">.</span> 最后是关键字参数，不能省略的键值对！<span class="token comment">#其实就是无限接受的俩args放中间</span>如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：<span class="token keyword">def</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> city<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> city<span class="token punctuation">,</span> job<span class="token punctuation">)</span>    和关键字参数<span class="token operator">**</span>kw不同，命名关键字参数需要一个特殊分隔符<span class="token operator">*</span>，<span class="token operator">*</span>后面的参数被视为命名关键字参数。调用方式如下：<span class="token operator">>></span><span class="token operator">></span> person<span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">'Beijing'</span><span class="token punctuation">,</span> job<span class="token operator">=</span><span class="token string">'Engineer'</span><span class="token punctuation">)</span>Jack <span class="token number">24</span> Beijing Engineer如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符<span class="token operator">*</span>了：<span class="token keyword">def</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> city<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> args<span class="token punctuation">,</span> city<span class="token punctuation">,</span> job<span class="token punctuation">)</span>    命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错：<span class="token operator">>></span><span class="token operator">></span> person<span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'Beijing'</span><span class="token punctuation">,</span> <span class="token string">'Engineer'</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>TypeError<span class="token punctuation">:</span> person<span class="token punctuation">(</span><span class="token punctuation">)</span> takes <span class="token number">2</span> positional arguments but <span class="token number">4</span> were given<span class="token comment">#但是命名关键字参数可以有缺省值，从而简化调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数参数规则：</p><ol><li><em><strong>参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</strong></em></li><li>对于任意函数，都可以通过类似<code>func(*args, **kw)</code>的形式调用它，无论它的参数是如何定义的。</li><li><strong>虽然可以组合多达5种参数，但不要同时使用太多的组合，否则函数接口的可理解性很差。</strong></li></ol><hr><p>  当在 函数内部修改列表、字典的 元素时，形参的改变会影响实参，即双向传递，类似于“传地址”、“共享内存”、“借”，</p><p>匿名函数lambda</p><p> lambda [ 参数1[, 参数2,……, 参数n]]: 表达式</p><p>  关键字lambda 表示匿名函数，冒号前面是函数参数，可以有多个函数参数，但只有一个返回值 ，所以只能有一个表达式，返回值就是该表达式的结果。</p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>这个讲的比一般的清楚一点所以放在这。</p><p>  装饰器 （decorator ，[ˈdekəreɪtə(r)] ）可简单地理解为一个函数，这是一个用来包装函数的函数，经常用于为已经存在的函数添加额外的功能</p><p>  当多个函数有重复代码时，可以将此部分代码单独拿出来整理成一个 装饰 器，然后对每个函数调用该装饰器，这样可以实现代码的复用，而且可以让原来的函数更轻便 。</p><p>  当 需要为多个己经写好的函数添加一个共同功能，例如检查参数的合法性时，就可以单独写一个检查合法性的装饰器，然后在每个需要检查参数合法性的函数处调用即可，而不用去每个函数内部修改 </p><h4 id="无参数"><a href="#无参数" class="headerlink" title="无参数"></a>无参数</h4><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521153116.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521153130.png"  style="zoom:50%;" /><p>  <strong>把@deco 语句放在函数square_sum() 定义之前，实际上是将square_sum 传递给装饰器deco  ，并将deco 返回的新函数对象赋给原来的函数名</strong> square_sum=deco(square_sum)</p><p>从本质上，装饰器起到的就是这样一个重新指向函数名的作用，让同一个对象名指向一个新返回的函数，从而达到修改可调用函数的目的 </p><h4 id="有参数"><a href="#有参数" class="headerlink" title="有参数"></a>有参数</h4><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521153708.png"  style="zoom:50%;" /><p><strong>要注意多重装饰器的执行顺序，应该是先执行后面的装饰器，再执行前面的装饰器。</strong></p><p>global</p><p>在程序中定义全局变量的主要目的是，为函数间的数据联系提供一个直接传递的通道 。</p><p>  因此不要滥用全局变量</p><h3 id="模板有条件执行"><a href="#模板有条件执行" class="headerlink" title="模板有条件执行"></a>模板有条件执行</h3><p>模块 中可以是一段 可以 直接执行的 程序（也称为<br>脚本 ） ， 也可以定义一些变量、类或函数，让别的模块导入和调用， 类似于库。</p><p>  模块中的定义部分，例如全局变量定义、类定义、函数定义等，因为没有程序执行入口，所以 不能直接运行，但对主程序代码部分有时希望只让它在模块直接执行的时候才执行，被其他模块加载时就不执行。</p><p>  在Python 中，可以通过系统变量“__name__”（注意前后都是两个下画线）的值来区分这两种情况。  如果模块是被其他模块导入的，__name__ 的值是模块的名称，主动执行时它的值就是字符串“__main__” 。</p><p>  通过__name__ 变量的这个特性，可以将一个模块文件既作为普通的模块库供其他模块使用，又可以作为一个可执行文件进行 执行。</p><h2 id="10-面向对象"><a href="#10-面向对象" class="headerlink" title="10.面向对象"></a>10.面向对象</h2><p>  <strong>面向对象程序设计（Object-Oriented programming ，OOP ）则以对象作为程序的主体，将程序和数据封装于其中，以提高软件的重用性、灵活性和扩展性</strong></p><p>面向对象程序设计是按照人们认识客观世界的系统思维方式，采用基于对象的概念建立问题模型，模拟客观世界，分析、设计和实现软件的办法</p><p>面向对象语言的三大核心内容是封装（类和对象）、 继承（派生）和 多态 </p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521154319.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521154329.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521154351.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521154441.png"  style="zoom:50%;" /><p>class  A：</p><p>   x = 5</p><p>我定义了一个类A，这个时候自动出现了个类对象A，我可以使用A.x调用类属性</p><p>  <strong>“ .” 运算符：成员运算符</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521154708.png"  style="zoom:50%;" /><p>  类中的实例方法至少应有 一 个变量 参数，一般命名为“ self ”( 习惯，非语法要求) ) ，而且该参数必须 作为形参表的第一 个参数，即必须放 于形式参数 表的最左边 </p><p>实例的方法和对象只能实例调用，不能类调用，这不是废话嘛</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>  类 属性（class attribute ）是类的 属性，它被 所有类对象和实例对象共有 ，在内存中只存在一个副本</p><p>公有 的类属性，在类外可以通过类对象和实例对象访问 ，但是不提倡用实例对象访问，容易绕晕</p><p>  类属性还可以在类定义结束之后通过类 名（类对象）增加  比如 A.new  = 212</p><p>实例对象也 可以在类定义结束之后通过实例对象名增加实例属性</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155315.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155327.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155408.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521160210.png"  style="zoom:50%;" /><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155453.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155458.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155511.png"  style="zoom:50%;" /><p> 只要创建实例对象，就一定要调用构造方法</p><p> 只要调用了构造方法，就一定创建了实例对象</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155619.png"  style="zoom:50%;" /><h3 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155658.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155717.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521155752.png"  style="zoom:50%;" /><p><a href="http://c.biancheng.net/view/4552.html">一点详解</a></p><h3 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h3><p>  从已有类产生新类的过程就称为类的派生（derivation）（派生是继承的另一种说法）</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521161333.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521161544.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521161554.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521161602.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521161627.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521161723.png"  style="zoom:50%;" /><p>多重 继承（multiple inheritance ）是指一个子类有两个或多个直接父类，子类从两个或多个直接父类中继承所需的 属性和方法。</p><p>class  子类名( 父类名1, 父 类名2,…):</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521161843.png"  style="zoom:50%;" /><p> Python 本身是一种 解释型语言 ，不进行编译，因此它就只在运行时 确定 其状态，故也可以说Python 是一种多态语言 。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521163054.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521163113.png"  style="zoom:50%;" /><h2 id="11-文件操作"><a href="#11-文件操作" class="headerlink" title="11.文件操作"></a>11.文件操作</h2><p>这个把我的心态搞炸了一会 </p><p>首先python里的默认编码都是Unicode，所有的文件其实本质都是二进制码，二进制文件只能用bytes类型操作，读出来怎么解读自己来，一般都用Unicode规则来decode（  二进制文件 是把数据按其在内存中的存储形式原样输出到磁盘上存放。）</p><p>小心那个文件指针位置，你写入了以后会放在最后，再读取啥都读不出来类似的</p><p>Python你在读写文件的时候<strong>不要打开</strong>。。不然会出现更改不了。。</p><p>理解python的<a href="https://blog.csdn.net/qq_23953717/article/details/78434292">open</a>txt默认是ANSI编码，不是UTF-8，坑死了，解决方案👈</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521163612.png"  style="zoom:50%;" /><p>经常需要用到“终端形式”阅读的，用文本，经常修改的，最好用二进制</p><p>  读/ 写操作是相对于磁盘文件而言的，而输入/ 输出操作是相对于内存储器而言的</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521163715.png"></p><p> r+是从最开始开始读的</p><p>文件对象=open( 文件说明符[, 打开方式][, 缓冲区])</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210706170109.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210706170146.png"  style="zoom:50%;" /><hr><p>文件对象有一些属性</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521163754.png"  style="zoom:50%;" /><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521163811.png"></p><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>文本文件是指以ASCII 码方式存储的文件：英文、数字等字符存储的是ASCII 码 ，而 汉字存储的是机内码。</p><p>  文本文件中除了存储文件有效字符信息（包括能用ASCII 码字符表示的回车、换行等信息）外，不能存储其他任何信息</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521164102.png"  style="zoom:50%;" /><p>文本文件的 优点：方便 阅读和理解，使用常用的文本编辑器或文字处理器就可以对其创建和修改的，文件 对象提供了read() 、readline() 和readlines() 方法 用于读取文本文件的内容</p><p>  每次write() 方法 执行完后并不 换行，如果 需要换行则在字符串最后加 换行符“\n</p><p>读取中文问题：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">InIn <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'try.txt'</span><span class="token punctuation">,</span><span class="token string">'r+'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>UnicodeDecodeError                        Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span><span class="token builtin">input</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">648df9718e18</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> a <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>UnicodeDecodeError<span class="token punctuation">:</span> <span class="token string">'gbk'</span> codec can't decode byte <span class="token number">0xad</span> <span class="token keyword">in</span> position <span class="token number">8</span><span class="token punctuation">:</span> illegal multibyte sequence    默认gbkIn <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'try.txt'</span><span class="token punctuation">,</span><span class="token string">'r+'</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> aOut<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'我是中文'</span>    In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'现在能输中文吗'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">7</span> <span class="token comment">#成功了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521164604.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521164625.png"  style="zoom:50%;" /><p>seek()偏移为正数表示朝文件尾方向移动，偏移为负数表示朝文件头方向移动；</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521165042.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521165103.png"  style="zoom:50%;" /><p>  文本文件 存放的是与编码对应的字符，而二进制文件直接存储字节编码。</p><h3 id="struct模块"><a href="#struct模块" class="headerlink" title="struct模块"></a>struct模块</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521185801.png"  style="zoom: 50%;" /><p>读文件的时候，可以一次读出4 个字节，然后用unpack() 方法转换成Python 的整数 。</p><p>注意：<strong>unpack() 方法执行后得到的结果是一个元组。</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521185829.png"  style="zoom:50%;" /><p>  如果写入的数据是由多个数据构成的，则需要在pack() 方法中使用格式串</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521185901.png"  style="zoom:50%;" /><p>  此时的bytes 就是二进制形式的数据了，可以直接写入二进制文件 。当需要时可以读出来，再通过struct.unpack() 方法解码成Python 变量</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521185938.png"  style="zoom:50%;" /><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521185948.png"></p><h3 id="pickle模块"><a href="#pickle模块" class="headerlink" title="pickle模块"></a>pickle模块</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521190026.png"  style="zoom:50%;" /><p>在pickle 模块中有2 个常用的方法：dump() 和load()</p><p>pickle.dump( 数据，文件对象）</p><p>  其功能是直接把数据对象转换为字节 字符串，并保存到文件中 。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521191834.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521191845.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521192855.png"  style="zoom:50%;" /><h3 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h3><p> Python 的os 模块提供了类似于操作系统级的文件管理功能，如文件重命名、文件删除、目录管理等 </p><p>os.rename(“ 当前文件名”,” 新文件名”)</p><p>os.remove(“ 文件名”)</p><p>os.mkdir(“ 新目录名”)</p><p>os.chdir(“要成为当前目录的目录名”)</p><p>getcwd() 方法显示当前的工作目录。</p><p>os.rmdir(“ 待删除目录名”) <strong>在用rmdir() 方法删除一个目录前，先要删除目录中的所有内容。</strong></p><h2 id="12-异常"><a href="#12-异常" class="headerlink" title="12.异常"></a>12.异常</h2><p>程序中的错误通常分为 语法错误 、 运行错误 和 逻辑错误 。</p><p>语法 错误是由于程序中使用了不符合 语法规则 的信息而导致的 ，这类错误比较 容易 修改，因为编译器或解释器会指出错误的位置和性质</p><p>运行错误则不容易修改，因为其中的错误是 不可预料的，或者可以预料但无法避免 的，  例如：内存 空间不够、数组下标越界、文件打开失败等</p><p>逻辑错误 主要表现在程序运行后，得到的结果与设想的结果不一致，通常出现逻辑错误的程序都能正常运行系统 不会给出提示信息，所有很难发现。</p><p>良好的程序应该对用户的不当操作做出提示，能识别多种情况下的程序运行状况，并选择适当 的应对 策略 </p><p>在程序中，对各种可预见的异常情况进行处理称为异常处理（exception handling）</p><p>处理程序异常的方法有很多，最简单和最直接的办法是在发现异常时，由Python 系统进行 默认的异常处理 </p><p>如果 异常对象未被处理或者捕捉，程序就会用所谓的 回溯（Traceback ） 终止</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521194005.png"  style="zoom:50%;" /><p>标准错误信息包括两个部分：错误类型（如NameError ）和错误说明（如name ‘A’ is not defined ），两者用冒号分隔</p><p> Python 系统还追溯错误发生的位置，并显示有关<br>信息</p><h3 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521194142.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521194153.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521194218.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521195131.png"  style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521195150.png"  style="zoom:67%;" /><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    xxx<span class="token keyword">except</span> 异常类型<span class="token number">1</span><span class="token punctuation">[</span><span class="token keyword">as</span> 错误描述<span class="token punctuation">]</span><span class="token punctuation">:</span>    xxx<span class="token keyword">except</span> 异常类型<span class="token number">2</span><span class="token punctuation">[</span><span class="token keyword">as</span> 错误描述<span class="token punctuation">]</span><span class="token punctuation">:</span>    xx<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">except</span><span class="token punctuation">:</span>    默认异常处理语句块<span class="token keyword">else</span><span class="token punctuation">:</span>    语句块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521200428.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521200444.png"  style="zoom:50%;" /><p>当发生异常时，直接跳转到except，try中没执行完的语句会被跳过嗷！</p><p>可以嵌套。</p><p><strong>finally 子句是指无论是否发生异常都将执行相应的</strong><br><strong>语句块 。</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521200807.png"  style="zoom:50%;" /><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>在编写程序时，在程序调试阶段往往需要判断程序执行过程中变量的值，根据变量的值来分析程序的执行情况 </p><p>可以 使用print() 函数打印输出结果，也可以通过断点跟踪调试查看变量，但使用断言更加灵活高效 。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521201018.png"  style="zoom:50%;" /><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">assert</span> b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'除数不可为0'</span>c <span class="token operator">=</span> a<span class="token operator">/</span>b<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>Lenovo@LAPTOP<span class="token operator">-</span>08D3H5DC MINGW64 <span class="token operator">~</span><span class="token operator">/</span>Desktop<span class="token operator">/</span>env$ D<span class="token punctuation">:</span><span class="token operator">/</span>Anaconda3<span class="token operator">/</span>envs<span class="token operator">/</span>TF2<span class="token operator">/</span>python<span class="token punctuation">.</span>exe c<span class="token punctuation">:</span><span class="token operator">/</span>Users<span class="token operator">/</span>Lenovo<span class="token operator">/</span>Desktop<span class="token operator">/</span>env<span class="token operator">/</span>one<span class="token punctuation">.</span>py<span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"c:/Users/Lenovo/Desktop/env/one.py"</span><span class="token punctuation">,</span> line <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">assert</span> b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'除数不可为0'</span>AssertionError<span class="token punctuation">:</span> 除数不可为<span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> AssertionError 异常可以被捕获，并像使用在try-except 语句中的任何其他异常处理，但如果不处理，它们将终止程序并产生回溯</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521201713.png"  style="zoom:50%;" /><h3 id="主动引发异常与自定义类"><a href="#主动引发异常与自定义类" class="headerlink" title="主动引发异常与自定义类"></a>主动引发异常与自定义类</h3><p>前面的异常类都是由Python 库中提供的，产生的异常也都是由Python 解释器引发的</p><p>  在程序设计 过程中，有时需要在编写的程序中主动引发异常，还可能需要定义表示特定程序错误的异常类。</p><p>  在Python 中，要想自行引发异常，最简单的形式就是输入关键字raise ，后跟要引发的异常的名称 </p><p>异常 名称标识出具体的类，Python 异常处理是这些类的对象 。 raise 语句还可指定对异常对象进行初始化的参数  ，<strong>执行raise 语句时，Python 会创建指定的异常类的一个对象</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521201958.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521202026.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210521202332.png"  style="zoom:50%;" /><p>处理学生成绩时，成绩不能为负数。利用前面创建的NumberError 异常类，处理出现负数成绩的异常 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;白嫖的python课件总结&quot;&gt;&lt;a href=&quot;#白嫖的python课件总结&quot; class=&quot;headerlink&quot; title=&quot;白嫖的python课件总结&quot;&gt;&lt;/a&gt;白嫖的python课件总结&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;ps：&lt;/p&gt;
&lt;p&gt;这份</summary>
      
    
    
    
    <category term="python" scheme="https://darren-dong.com/categories/python/"/>
    
    
    <category term="python" scheme="https://darren-dong.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>数据科学手册（前半完结）</title>
    <link href="https://darren-dong.com/2021/05/17/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%89%8B%E5%86%8C/"/>
    <id>https://darren-dong.com/2021/05/17/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%89%8B%E5%86%8C/</id>
    <published>2021-05-17T09:28:04.000Z</published>
    <updated>2021-09-12T08:55:38.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言和环境"><a href="#前言和环境" class="headerlink" title="前言和环境"></a>前言和环境</h1><p>跨学科是数据科学的关键</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210510110540.png" alt="公认的学科交叉图" style="zoom: 33%;" /><h2 id="ipython"><a href="#ipython" class="headerlink" title="ipython"></a>ipython</h2><p>？和？？    ？几乎适用任何对象包括魔法指令</p><p>有时候？？不能显示源代码，因为该对象不是用python实现的，此时等价于一个？</p><p>Tab补全，配合通配符 * 使用</p><p>一般带下划线的私有方法和特殊方法不会被默认显示，可以通过显式输入 _ 再tab来获取他们</p><p>甚至可以 import &lt;TAB&gt; 查看你能导入的包</p><p><a href="https://www.cnblogs.com/Pythonzrq/p/11346578.html#:~:text=2%E3%80%81pycharm%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%201%20%E3%80%81%E7%BC%96%E8%BE%91%EF%BC%88Editing%EF%BC%89%202%20%E3%80%81%E6%9F%A5%E6%89%BE%2F%E6%9B%BF%E6%8D%A2%20%28Search%2FReplace%29%203%20%E3%80%81%E8%BF%90%E8%A1%8C,History%209%20%E3%80%81%E6%A8%A1%E7%89%88%20%28Live%20Templates%29%2010%20%E3%80%81%E5%9F%BA%E6%9C%AC%20%28General%29"><strong>快捷键</strong></a></p><p>C + a/e </p><p>C + u/k 剪掉前面，后面</p><p>C + t 交换前两个字符，怪毙了</p><p>C + r对历史反向搜索，继续ctrl+r往前匹配下一个，找到后回车</p><p>C + l/c/d 清屏，中断当前python命令，退出ipython会话</p><p><strong>魔法指令</strong></p><p>ipython在普通python语法上的增强功能</p><p>行魔法 %</p><p>单元魔法 %%，用于处理多行输入比如%%timeit</p><pre class="line-numbers language-pytho" data-language="pytho"><code class="language-pytho">%quickref  快速参考卡%magic 探索所有魔术命令%debug从最后发生报错的底部进入交互式调试器  %pdb出现任意报错自动进入调试器%hist%paste   %cpaste 解决包含符号的多行输入&#x2F;复制问题%reset 清空所有变量&#x2F;名称  %xdel variable 删除变量和相关引用%page OBJECT  通过分页器更美观的打印一个对象%run   %prun statement  使用CProfile执行语句，报告输出%time 报告单个语句执行时间   %timeit 多次运行单语句，计算平均执行时间，用于估算代码最短执行时间%who  %who_ls  %whos  依次更加详细的展示变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://developer.51cto.com/art/202007/620863.htm">这个厉害</a></p><p>集成matplotlib:</p><ul><li>在ipython命令行中 %matplotlib</li><li>在jupyter中 %matplotlib inline</li></ul><p>In是一个列表，记录了历史命令</p><p><strong>Out是一个字典</strong>，将输入的索引对应起输出，很多命令没有输出（None），则不会被记录！</p><p><strong>Out[x] 的简写是_x</strong></p><p>print(_) 一二三条下划线对应倒数第几个历史输出，这个厉害，或者直接 _3</p><p><strong>但是如果输入的最后加上；就不会被添加到历史，也不会把输出显示出来</strong>，这样当其他引用被删除时，该空间可以被释放。</p><p><strong>shell</strong></p><p>很多教材说是用 ! 加shell指令，但是pycharm全是%呀</p><p>可以用赋值将任何shell命令的输出保存到一个python列表，这是一个长得像列表的特殊返回类型</p><p>在shell里面用{varname}来调用变量</p><p>很多shell的指令可以直接使用，比如%cd 可以直接cd</p><p><strong>调试</strong></p><p>%xmode Plain/Context/Verbose 异常模式，改变异常时的打印信息</p><p>plain只会输出函数和行号，context是默认，会显示出错行上下几行代码，verbose还会显示每一级的参数和出错位置的变量值，好方便</p><p>标准调试工具pdb 的Ipython增强版ipdb，ipython专用</p><p>还有个很方便的%debug魔法指令，在最近的异常点打开一个交互式调试指令符（是用了ipdb）</p><p>%pdb on 会在抛出异常时自动启动，pdb有 up down 等命令配合print来检查</p><p>有一些常用调试命令：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span> 显示路径h<span class="token punctuation">(</span><span class="token builtin">help</span><span class="token punctuation">)</span> 显示命令列表q<span class="token punctuation">(</span>uit<span class="token punctuation">)</span> 退出调试器和程序c<span class="token punctuation">(</span>ontinue<span class="token punctuation">)</span> 推出调试器，继续程序n<span class="token punctuation">(</span>ext<span class="token punctuation">)</span> 跳到程序下一步<span class="token operator">&lt;</span>enter<span class="token operator">></span> 重复前一个命令p<span class="token punctuation">(</span>rint<span class="token punctuation">)</span> 打印变量s<span class="token punctuation">(</span>tep<span class="token punctuation">)</span> 步入子进程r<span class="token punctuation">(</span>eturn<span class="token punctuation">)</span> 从子进程跳出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码的分析与计时</strong></p><p>“大约百分之97的时间，我们应该忘记微小的效率差别；过早优化是不被推荐的”</p><p>但是当代码跑起来后，提高运行效率是有用的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">%</span>time 对单个语句的执行时间进行计时<span class="token punctuation">(</span>适合不可重复的，或者时间较长的<span class="token punctuation">)</span><span class="token operator">%</span>timeit 对单个语句的重复执行进行计时，以获得更高的精确度<span class="token punctuation">(</span>但需要保证可重复性，别对排序这样干<span class="token punctuation">)</span>在进行相同操作时，timeit总是比time更快，因为timeit在底层采取了一些措施组织系统调用对计时过程的干扰，例如阻止清理未利用的python对象。👇需要安装line_profiler 和 memory_profiler 拓展python包含一个内置的代码分析器，可以通过魔法指令👇简单的调用<span class="token operator">%</span>prun 使用分析器运行代码，输出一个时间报告 <span class="token operator">+</span> 函数<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token operator">%</span>lprun 使用逐行分析器运行代码，逐行分析<span class="token operator">%</span>memit 测量单个语句的内存使用<span class="token operator">%</span>mprun 使用逐行的内存分析器运行代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>%%file 来写一个简单的模块文件</p><h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><p>将异构的各种数据都看成数组，第一步将这些数据转化成数值数组形式的可分析数据。</p><p>数据科学的绝对基础：有效存储数据，操作数值数组</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>标准的python实现是用C编写的，这意味着每一个python对象都是一个聪明的伪C结构体</p><p>比如python的整形变量其实是一个指针，它的结构体里包含了大量额外信息，所以可以自由，动态编码，但也会成为负担。</p><p>python<strong>列表</strong>实质：指向一个指针域，域里的每一个指针指向一个确切的对象</p><p>numpy牺牲了这一点，指向一块类似C的域，但是能更有效地存储和操作数据。</p><p>所以numpy要求数组必须包含同一类型的数据，不匹配则向上转换</p><h2 id="数组基础"><a href="#数组基础" class="headerlink" title="数组基础"></a>数组基础</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>手打l<span class="token punctuation">)</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token operator">/</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token operator">/</span>full<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>full<span class="token punctuation">(</span>size<span class="token punctuation">,</span>fulfiller<span class="token punctuation">)</span> <span class="token comment">#用fulfiller填充</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#左闭右开 默认int</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">#左闭右闭 默认float,找5个等间距点</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 0~1均匀分布</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 均值 方差 shape</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#左闭右开 区间[0,10)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">#n单位矩阵</span>np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span>shape<span class="token punctuation">)</span> <span class="token comment">#未初始化的数组，数组值是内存空间中的任意值</span>np<span class="token punctuation">.</span>mgrid<span class="token punctuation">(</span>坐标轴<span class="token number">1</span>（左开右闭）<span class="token punctuation">,</span>坐标轴<span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span>拉直  <span class="token punctuation">.</span>c_<span class="token punctuation">(</span><span class="token punctuation">)</span>组合 看另一个教程吧用来生成网格还有各种_alike<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dtype可以用字符串参数或者相关的Numpy对象来指定。</p><p>标准类型大概有bool_ int类 float类 complex类  可以查一查，还有更高级的数据类型指定P35</p><p>后面带一个下划线的代表默认的类型</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>ndim 维度  shape 形状（每个维度大小）   size 元素个数（数组大小）</p><p>dtype 数据类型   itemsize 每个元素的字节大小   nbytes  总字节大小</p><h3 id="索引切片"><a href="#索引切片" class="headerlink" title="索引切片"></a>索引切片</h3><p>与python类似，更改元素时自动发生类型变换</p><p>获取第一列x2[: , 0]</p><p>获取第一行x2[0 , :] #获取行时其实可以省略，直接x2[0]</p><p>抽取左上角的2x2数组，x2[:2，:2]</p><p><strong>切片返回的是视图</strong>，.copy() 才是复制，这意味着可以处理大型数据集的片段而不用花费额外的内存</p><h3 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h3><p>.reshape() 大小必须一致</p><p>或者在索引中使用newaxis 关键字，插入一个新维度，不过记得要加上前缀，即np.newaxis,比如原来有个是3（一行），后插变成（3，1）（一列）</p><p>x = x[np.newaxis,:] 在前面加了一个维度，反之则是在后面插入</p><h3 id="拼接和分裂"><a href="#拼接和分裂" class="headerlink" title="拼接和分裂"></a>拼接和分裂</h3><p><strong>np.concatenate</strong>(默认沿着第一个轴) #二维就是列，用axis  = 1 可以改成行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">grid <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span> concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>grid<span class="token punctuation">,</span>grid<span class="token punctuation">]</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前三维可以用<strong>np.vstack(垂直) np.hstack(水平) np.dstack(第三维)</strong> 来拼接</p><p>vertical horizontal deep</p><p>np.split(x, [3,5])#后面那个数组记录的是下一段首的索引位置，如果是3，那就在索引2（第3个元素）和3间断开，返回一个子元组</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> gridOut<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>x3 <span class="token operator">=</span> np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>grid<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x1Out<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x2Out<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#np.hsplit 和 np.vsplit 和 np.dsplit 差不多，记得后面那里要用索引列表</span>upper<span class="token punctuation">,</span>lower <span class="token operator">=</span> np<span class="token punctuation">.</span>vsplit<span class="token punctuation">(</span>grid<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#上下四行均分成两行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h2><p>Numpy高效的关键是采用 <strong>向量化</strong> 操作，通常用通用函数（ufunc）实现——提高了数组元素重复计算的效率</p><p>Python灵活的数据类型导致序列操作不能被编译成有效的机器码，所以循环操作超级慢</p><p>很多方案试图解决，比如Cpython，Cython，LLVM字节码，但是Cpython是最流行的</p><p>Cpython的主要瓶颈在于每次循环时必须做<strong>数据类型检查和函数的调度</strong>。</p><p><strong>Numpy为许多类型的操作提供了方便，静态，可编译程序的接口，被称为向量操作。这将被循环推送至Numpy下的编译层。</strong></p><p>只要看到python脚本有循环，就可以考虑能否用向量替代。</p><p>通用函数有两种形式，一元和二元。</p><p>python原生的算术运算符被重构了，相当于调用一些通用函数，比如 * 相当于 np.mulitiply</p><p><code> + - * /  //  **  %</code>都被重构了，还有布尔/位运算符</p><p>Numpy可以理解python内置的某些函数比如绝对值函数 abs(x)，对应的是np.absolute 或者别名np.abs，但这个numpy的处理复数时返回幅值。</p><p>三角函数：sin cos tan arcsin arccos acrtan  还有很多别的</p><p>指对数：exp exp2(2^)  power(底数，操作的数组x)       ||log  log2  log10</p><p>还有<strong>专门用来处理小量</strong>的：np.expm1(x)  == exp(x) - 1               np.log1p(x)  == log(1+x)   #在x很小时精度较高</p><p>还有很多双曲三角啊，比特位运算，比较运算，弧度角度转化等等等。可以查<a href="https://numpy.org/">文档</a></p><p>还有一个更专用的子模块scipy.special 里面有一堆牛逼函数比如伽马（广义阶乘）， 高斯积分啥的，可以搜索xxx function python</p><h3 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h3><p><strong>指定输出</strong></p><p>有一个out参数指定输出结果的存放位置，此时不创建临时数组而直接写入目标位置，对于较大的数据能有效节约内存，但是注意要提前创建好用来存放的nparray</p><p><strong>聚合</strong></p><p><strong>二元通用函数</strong>指的是对两个输入操作，它们有些非常有趣的聚合功能，可以直接在对象上计算，会对给定的元素和操作重复执行，直到得到单个结果，这是任何通用函数都有的方法</p><p>比如reduce(压缩)，任何通用函数都有，可以重复计算直到获得单个结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>add<span class="token punctuation">.</span><span class="token builtin">reduce</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>x <span class="token operator">==</span> <span class="token number">15</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果需要存储每次计算的中间结果，可以使用accumulate，项数不会变，但是除了第一项其他依次被处理</p><p>np.add.accumulate(x)     –array([1,3,6,10,15])</p><p><strong>外积</strong></p><p>任何输入函数都可以使用<strong>outer</strong>方法获得 两个不同输入数组 <strong>所有元素对</strong> 的函数运算结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">.</span>outer<span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多的通用函数信息可以在Numpy和SciPy的文档网站查到</p><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>在处理大量数据的时候第一步通常是计算相关概率的概括统计值，比如最常用的均值和方差。</p><p>Numpy又快速的内置聚合函数可用于数组，如下：</p><p>np.sum 和内置的sum都可以起作用，但是numpy的sum在编译码中运行，所以<strong>操作更快</strong>（1000倍），而且注意不要混淆，他们的参数有不同的意义，np.sum函数是知道数组的维度的</p><p>np.min  max啥的，还有一种更简洁的语法是数组对象直接调用这些方法: x.min()  x.sum()</p><p><strong>多维度聚合</strong></p><p>可以用axis指定处理的维度，但是要注意，这个指定的是数组将会被聚合（折叠）的维度，而不是要返回的维度，比如说axis = 0 意味着第一个轴（二维数组的列）将要被折叠。</p><p>numpy有很多内置的聚合函数，大多数聚合都有对NaN的安全处理策略，即计算的时候<strong>忽略所有缺失值</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span><span class="token builtin">sum</span>  np<span class="token punctuation">.</span>nansumnp<span class="token punctuation">.</span>prod np<span class="token punctuation">.</span>nanprod 积（product）np<span class="token punctuation">.</span>mean  平均值std  标准差 Standard deviationvar  方差  variance<span class="token builtin">min</span> <span class="token builtin">max</span>  最小最大argmin argmax 最小最大的索引median  中位数percentile  基于元素排序的统计值<span class="token punctuation">,</span>例子如下In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> xOut<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>percentile<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4.0</span>In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>percentile<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">5.0</span><span class="token builtin">any</span>  <span class="token builtin">all</span>  存在  任意为真 <span class="token comment">#无安全版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h2><p>可以理解为将低维数组拓展，拓展到匹配的维度，但是其实并没有发生这样的内存分配，只是便于理解。</p><p>规则如下：</p><ol><li>如果两个数组的维度不同，小维度数组<strong>的形状在最左边补1</strong></li><li>如果数组在任何一个维度上大小不相等，而且数组<strong>该维度为1</strong>，则会沿着该维度拓展到匹配另一个数组</li><li>如果数组在任何一个维度上大小不相等，而且并没有某个数组维度为1，那么引发异常。</li></ol><p>最值得注意的就是他补充一个维度是在左边补1而不是右边，如果希望右边补全，可以使用变形数组。</p><p>这些广播规则适用于<em><strong>任意二进制通用函数</strong></em></p><p><strong>实际应用</strong></p><p>数组的归一化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> X <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Xmean <span class="token operator">=</span> X<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#沿着第一个维度聚合</span>In <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> X_centered <span class="token operator">=</span> X <span class="token operator">-</span> XmeanIn <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> X_centered<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">8.88178420e-17</span><span class="token punctuation">,</span>  <span class="token number">0.00000000e+00</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.11022302e-17</span><span class="token punctuation">]</span><span class="token punctuation">)</span>妙啊<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>画一个二维函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">看不懂他的骚操作，可以翻一下书的P60页<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="比较，掩码，布尔"><a href="#比较，掩码，布尔" class="headerlink" title="比较，掩码，布尔"></a>比较，掩码，布尔</h2><p>当想<strong>基于某些准则</strong>来抽取，修改，技术或对一个数组中的值进行其他操作时，掩码就可以派上用场了，在Numpy中，布尔掩码是完成这类任务的最高效完成方式。</p><p>比较有六种运算符<code>== != &lt; &lt;= &gt; &gt;=</code> 两边可以是表达式，<strong>每次返回的结果是布尔数组</strong></p><p>利用复合表达式实现逐元素比较也是可行的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这些比较运算符也是<strong>借助通用函数</strong>来实现的，例如x &lt; 3 其实调用np.less(x,3) </p><h3 id="操作布尔数组"><a href="#操作布尔数组" class="headerlink" title="操作布尔数组"></a>操作布尔数组</h3><p>记录布尔数组中非零（其实就是True）的个数 np.count_nonzero(）</p><p>统计小于6的则np.count_nonzero(x&lt;6) </p><p>或者也可以 np.sum(x&lt;6) 都是返回为True的个数，sum的好处是可以沿着行或者列进行</p><p>np.any 和 np.all 快速检测全部 </p><p>需要提醒的是python有内置的sum，any，all函数，这些函数在numpy中有对应的版本，但是语法不同，如果在多维数组上混用这两个版本，会导致神奇的错误，请确保使用numpy版本</p><p><strong>布尔运算符</strong></p><p>逻辑运算符也被重载，可以实现对数组的逐位逻辑运算。有<code>&amp; | ^ ~</code></p><p>np.sum((inches &gt; 0.5) &amp; (inches &lt; 1))  注意用括号调整运算次序。表示inches在0.5到1间的数目</p><p>将布尔数组作为掩码</p><p>就是传说中的布尔矩阵作为索引呗，会得到一个一维数组</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">and</span> <span class="token keyword">or</span>  和  <span class="token operator">&amp;</span> <span class="token operator">|</span>  的区别<span class="token keyword">and</span> <span class="token operator">/</span> <span class="token keyword">or</span> 判断整个对象是真是假，而后两者是指每个对象中的比特位，依次化成二进制码进行操作而布尔矩阵可以被当成比特字符组成的，所以采用后者，而使用前者比较整个对象的时候会出错。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="花哨的索引"><a href="#花哨的索引" class="headerlink" title="花哨的索引"></a>花哨的索引</h2><p>花哨（fancy）的索引对多个维度也适用。</p><p><strong>花哨索引和前面的简单索引类似，但是传递的是索引数组，可以让我们快速获得并修改复杂的数组值的子数据集</strong></p><p>结果的形状与<strong>索引数组的形状</strong>一致，如果有广播，就是<strong>跟广播后的索引数组的形状</strong>一致,而不是被索引的数组</p><p>如果是普通的一维一维的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>row <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>col <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span>row<span class="token punctuation">,</span>col<span class="token punctuation">]</span>那就像坐标一样Out<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span>但如果b<span class="token punctuation">[</span>row<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span><span class="token punctuation">,</span>col<span class="token punctuation">]</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span>那就是广播，淦，当年为何困惑了我这么久，广播以后 索引数组的每一个位置其实都是一个坐标。。就这么简单<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配合切片，简单索引，布尔效果更好。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>从一个矩阵中选择行的子集！</p><p>可以用花哨索引来修改值，但是重复的索引会有一些诡异的事情发生</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> i <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>In <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> xOut<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#应该看成x[i] = x[i] + 1就会发现神奇索引导致的诡异地方，解决方法是at👇</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>at函数可以对给定的操作，给定的索引，给定的值进行就地操作。</p><p>比如np.add.at(x,i,1) x为被操作的矩阵，i为索引，1为操作数（+1）</p><h2 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h2><p>python有内置的sort和sorted但是太慢了</p><p>np.sort 是快速排序【N log N】,另外可以选择归并排序和堆排序。</p><p>np.sort(X) 不会修改原始数组，x.sort()这种python内置的方法会<strong>替代原始数组</strong></p><p>np.argsort(X)返回的是<strong>如果排序</strong> 好的索引值。</p><p>利用axis可以选择行列排序噢,<strong>这是将行和列当成独立数组，任何关系都将丢失！</strong></p><p><strong>部分排序：分隔</strong></p><p>np.partition(x,3) 将最小的3个和其他的分隔开，两组数是任意排序的</p><p>当用<strong>axis时也会破坏行和列的关系</strong>，np.argpartition返回索引</p><h2 id="结构化数据"><a href="#结构化数据" class="headerlink" title="结构化数据"></a>结构化数据</h2><p>P82 <strong>数据类型</strong></p><p>Numpy的结构化数组和记录数组。</p><p>他们为复合的，异构的数据提供了非常有效的存储。</p><p>其实就是把dtype当作一个结构嘛</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span>age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">]</span>weight <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">21.21</span><span class="token punctuation">,</span><span class="token number">4.43</span><span class="token punctuation">,</span><span class="token number">4334.65</span><span class="token punctuation">,</span><span class="token number">45.9</span><span class="token punctuation">]</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'names'</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token string">'weight'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token string">'format'</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'U10'</span><span class="token punctuation">,</span><span class="token string">'i4'</span><span class="token punctuation">,</span><span class="token string">'f8'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">#U10表示长度不超过10的字符串，</span>data<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">=</span>namedata<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token operator">=</span>agedata<span class="token punctuation">[</span><span class="token string">'weight'</span><span class="token punctuation">]</span><span class="token operator">=</span>weight这样可以用连续的内存存储异构的数据，反映了他们间的关系可以用date<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>查看是<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">21.21</span><span class="token punctuation">)</span>然后就有很多骚操作比如data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token comment">#获得年龄小于30的人的年龄</span>数值类型可以用python类型或者Numpy的dtype来指定<span class="token number">2</span><span class="token operator">&lt;</span> 和 <span class="token operator">></span> 分别表示低字节序 和 高字节序b 字节型i u 有、无符号整形f 浮点型c 复数浮点型S a 字符串U Unicode编码字符串V 原生数据<span class="token comment">#还有一种格式是元组列表</span>np<span class="token punctuation">.</span>dtype<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'U10'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token string">'&lt;i4'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'weight'</span><span class="token punctuation">,</span><span class="token string">'f8'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>这样就直接生成一个结构化数组结构化数组的dtype属性里，第n个反映了每个单元中第n个数据的索引和属性，比如data<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">55.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">85.8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'Cathy'</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">68.0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>data<span class="token punctuation">.</span>dtype<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'&lt;U10'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token string">'&lt;i4'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'weight'</span><span class="token punctuation">,</span><span class="token string">'&lt;f8'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>np.dtype([(&#39;id&#39;,&#39;i8&#39;),(&#39;mat&#39;,&#39;f8&#39;,(3,3))])这样就定义了一个id和3x3矩阵的结构</code>由于numpy中的dtype直接映射到C结构定义，包含数组内容的缓存可以直接在C程序里使用，如果想写一个python接口与一个遗留的C\Fortran接口交互，非常有用</p><p>如果需要使用结构化数组，更好是掌握pandas包。</p><h1 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h1><p>Pandas是在Numpy基础上建立的新程序库，提供了一种高效的DataFrame结构。</p><p>DataFrame本质上是一种<u>带行标签和列标签、支持相同类型数据和缺失值的</u>多维数组。</p><p>Pandas不仅为各种带标签的数据提供了便利的存储界面，还实现了许多强大的操作，这些操作对数据库框架和电子表格程序的用户来说非常熟悉</p><p>当我们需要处理更灵活的数据任务（为数据添加标签，处理缺失值），或者需要分组数据计算，Numpy就会显露出限制，而Pandas为“数据清理”（data munging）任务提供了捷径</p><h2 id="对象简介"><a href="#对象简介" class="headerlink" title="对象简介"></a>对象简介</h2><p>如果从底层视角观察pandas对象，可以看成是增强版的Numpy结构化数组，行列不再是简单的整数索引，还可以带上标签！要理解基本数据结构内部的细节！</p><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p>带索引数据的一维数组</p><p>可以用<strong>数组</strong>创建Series对象 data = pd.Series([0.25,0.5,0.75,1.0])</p><p>values属性返回Numpy数组的对象</p><p>index返回一个类型为pd.Index的类数组对象，后续介绍</p><p>name属性会作为dataframe的列标签</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span>Darren     <span class="token number">21</span>Jack       <span class="token number">37</span>Jessica    <span class="token number">56</span>Name<span class="token punctuation">:</span> one<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int32In <span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nameOut<span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'one'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Series比它模仿的一维Numpy数组更加通用，灵活！！</strong></p><p>本质差别在索引</p><p>Numpy数组用的是隐式定义的索引，Series是显式定义，索引完全可以是任意类型，不按顺序</p><p>pd.Series([2,2,22,],index = [‘a’,’c’,’d’])</p><p>字典将任意键映射到一组任意值，Series将类型键映射到一组类型值，</p><p>Pandas Series的类型信息使得她在某些操作上<u>比Python的字典更高效</u></p><p>可以用<strong>字典</strong>创建一个Series对象</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span>Out<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'dadaa'</span><span class="token punctuation">:</span> <span class="token number">1223</span><span class="token punctuation">,</span> <span class="token string">'tda'</span><span class="token punctuation">:</span> <span class="token number">12124</span><span class="token punctuation">,</span> <span class="token string">'dada'</span><span class="token punctuation">:</span> <span class="token number">341</span><span class="token punctuation">&#125;</span>dict2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>dict2Out<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dadaa     <span class="token number">1223</span>tda      <span class="token number">12124</span>dada       <span class="token number">341</span>dtype<span class="token punctuation">:</span> int64<span class="token comment">#用字典创建对象时，索引按照排序好的默认顺序排列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Series支持索引切片！</p><p>dict2[‘dadaa’:’dada’] 牛皮啊</p><p>在pd.Series(data,index = index)中，data若是标量，则会填充到每一项上</p><p>索引默认0-n整数序列，RangeIndex（start = 0, stop = n, step = 1）</p><p>data可以是列表，字典（index是默认的排序字典键,也就是先会按照默认方式排序一遍）</p><p>每种类型都可以通过<strong>显式指定索引筛选</strong>需要的结果：<strong>但是字典这样做只会保留显式定义的部分键值对！</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>a<span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>ValueError                                Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span><span class="token builtin">input</span><span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">5bed21d603af</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> a1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>a<span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Anaconda3\lib\site<span class="token operator">-</span>packages\pandas\core\series<span class="token punctuation">.</span>py <span class="token keyword">in</span> __init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> index<span class="token punctuation">,</span> dtype<span class="token punctuation">,</span> name<span class="token punctuation">,</span> copy<span class="token punctuation">,</span> fastpath<span class="token punctuation">)</span>    <span class="token number">348</span>                 <span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token number">349</span>                     <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">350</span>                         <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span>    <span class="token number">351</span>                             <span class="token string-interpolation"><span class="token string">f"Length of passed values is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">, "</span></span>    <span class="token number">352</span>                             <span class="token string-interpolation"><span class="token string">f"index implies </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">."</span></span>ValueError<span class="token punctuation">:</span> Length of passed values <span class="token keyword">is</span> <span class="token number">5</span><span class="token punctuation">,</span> index implies <span class="token number">3</span><span class="token punctuation">.</span>    <span class="token comment">#当列表的时候index和data长度需一致</span>In <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>b<span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a1Out<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span>a    <span class="token number">4</span>c    <span class="token number">7</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><p>和Series一样，它也既可以作为一个通用型Numpy数组，也可以看作特殊的Python字典</p><p>可以看成一种既有灵活行索引，又有灵活列名的<strong>二维数组</strong></p><p>可以看成有序排列的若干Series对象。这里的“排列”指的是它们拥有共同的索引</p><p>假设a，b是两个Series对象，而且拥有相同的索引，那么可以</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'column1'</span><span class="token punctuation">:</span>a<span class="token punctuation">,</span><span class="token string">'column2'</span><span class="token punctuation">:</span>b<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">#其中a和b为长度一样的Series对象</span>ccolumn1   column2index1      <span class="token number">32423</span>     <span class="token number">32423</span>index2      <span class="token number">2189</span>      <span class="token number">2198128</span>index       <span class="token number">312312</span>    <span class="token number">21312</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DataFrame的index属性和Series一样，返回Index对象（如果是默认生成的，则是RangeIndex）</p><p>还有个columns属性，也返回Index对象，不过是每列的标签</p><p>DataFrame可看成特殊的字典，每列映射一个Series数据，通过列索引c[‘column1’]可以得到该Series对象</p><hr><h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a><strong>创建</strong></h4><p>ps：创建字典</p><ol><li><p>使用dict() 函数创建一个空字典并给变量赋值</p></li><li><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210706160413.png"  style="zoom:50%;" /><p><strong>第二种方法应该是大规模处理中用的多的</strong></p></li><li><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210706160432.png"  style="zoom:50%;" /></li></ol><p>创建<strong>DataFrame</strong></p><p>（1）可以用单个Series对象</p><p>pd.DataFrame(populations,columns = [‘population’])</p><p>（2）可以用<strong>元素是字典的列表</strong>来创建,若是字典有一些键(作为列索引)不在，会用NaN补全</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span>i<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">&#125;</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>dataOut<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    a  b<span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0</span><span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">2</span><span class="token number">2</span>  <span class="token number">2</span>  <span class="token number">4</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      a  b    c<span class="token number">0</span>  <span class="token number">1.0</span>  <span class="token number">2</span>  NaN<span class="token number">1</span>  NaN  <span class="token number">3</span>  <span class="token number">4.0</span><span class="token comment">#这里的例子都是用默认Index</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）通过<strong>Series对象、列表字典</strong>创建</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'column1'</span><span class="token punctuation">:</span>a<span class="token punctuation">,</span><span class="token string">'column2'</span><span class="token punctuation">:</span>b<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>ccolumn1   column2index1      <span class="token number">32423</span>     <span class="token number">32423</span>index2      <span class="token number">2189</span>      <span class="token number">2198128</span>index       <span class="token number">312312</span>    <span class="token number">21312</span>如果值是列表，索引是默认的<span class="token number">0</span>，<span class="token number">1</span>，<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(4)通过Numpy二维数组创建。假如有二维数组，就可以创建一个可以指定行列索引值的DataFrame，如果不指定，那么行列都是默认索引  IndexRange</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span>         foo       bara  <span class="token number">0.855538</span>  <span class="token number">0.595667</span>b  <span class="token number">0.575162</span>  <span class="token number">0.149108</span>d  <span class="token number">0.034177</span>  <span class="token number">0.156297</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(5)通过Numpy结构化数组创建</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'i8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'f8'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> AOut<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'&lt;i8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'&lt;f8'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>A<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>   A    B<span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0.0</span><span class="token number">1</span>  <span class="token number">0</span>  <span class="token number">0.0</span><span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">0.0</span>可以发现子结构的名字被作为了列标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>可以看成一个<strong>不可变数组</strong>或<strong>有序集合</strong>，可以包含重复值。这两种观点体现了其一些功能</p><ol><li><p>不可变数组</p><p>Index很多操作都像数组，比如切片，还有许多与Numpy数组相似的属性，比如</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ind <span class="token operator">=</span> pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> indOut<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Int64Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ind<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Int64Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>ind<span class="token punctuation">.</span>size<span class="token punctuation">,</span>ind<span class="token punctuation">.</span>shape<span class="token punctuation">,</span>ind<span class="token punctuation">.</span>ndim<span class="token punctuation">,</span>ind<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token number">5</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token number">1</span> int64<span class="token comment">#这几个属性竟然还保留了</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最大的不同在于<strong>Index对象的索引是不可变的</strong>，ind[1]=0会报错，这使得索引共享更安全</p></li><li><p>有序集合</p><p>Index遵循python标准库的集合（set）数据结构的许多惯用法 &amp; | ^ ~</p><p>indA &amp; indB 也有indA.intersection(indB)</p></li></ol><h2 id="数据取值与选择"><a href="#数据取值与选择" class="headerlink" title="数据取值与选择"></a>数据取值与选择</h2><p>类推Numpy的各种花式操作</p><h3 id="Series-1"><a href="#Series-1" class="headerlink" title="Series"></a>Series</h3><p>两个类比：<strong>一维Numpy数组和Python标准字典</strong>，很多操作是一样的。</p><p><strong>看作字典</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.25</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.75</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0.</span>5In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'a'</span> <span class="token keyword">in</span> dataOut<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> TrueIn <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#这个失败了In [63]: ata.valuesOut[63]: array([0.25, 0.5 , 0.75, 1.  ])In [64]: ata.keysOut[64]: &lt;bound method Series.keys of a    0.25b    0.50c    0.75d    1.00dtype: float64>In [65]: ata.keys()Out[65]: Index(['a', 'b', 'c', 'd'], dtype='object')In [8]: data.items()Out[8]: &lt;zip at 0x201ee3bbcc0>In [9]: list(data.items())Out[9]: [('a', 0.25), ('b', 0.5), ('c', 0.75), ('d', 1.0)]In [10]: data['e'] = 1.25In [11]: dataOut[11]:a    0.25b    0.50c    0.75d    1.00e    1.25dtype: float64</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Series对象的可变性</strong>是一个非常方便的特性，pandas在底层已经为可能发生的<strong>内存布局和数据复制</strong>自动决策，用户不用担心。</p><p><strong>看作一维数组</strong></p><p>包括索引，掩码，花哨索引都有</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token string">'c'</span><span class="token punctuation">]</span> <span class="token comment">#显示索引包含最后一位Out[13]:a    0.25b    0.50c    0.75dtype: float64In [14]: data[0:2] #隐式索引不包含最后一位Out[14]:a    0.25b    0.50dtype: float64In [15]: data[(data>0.3) &amp; (data&lt;0.8)] #布尔索引yydsOut[15]:b    0.50c    0.75dtype: float64In [16]: data[['a','e']]#fancy indexOut[16]:a    0.25e    1.25dtype: float64</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="索引器"><a href="#索引器" class="headerlink" title="索引器"></a><strong>索引器</strong></h4><p>切片和取值的习惯用法经常混乱，如果Series选了<strong>显式整数索引</strong>，那么data[1]这样取值会使用显式索引，而data[1:3]这样的切片操作却会使用隐式索引！</p><p>所以Pandas准备了一些索引器（indexer）来作为取值的方法</p><p>它们不是Series对象的方法，而是暴露切片接口的<strong>属性</strong></p><p><strong>loc属性</strong></p><p>表示使用显式切片和取值，<strong>左闭右闭！！</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'a'</span>In <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">1</span>    a<span class="token number">3</span>    bdtype<span class="token punctuation">:</span> <span class="token builtin">object</span>    <span class="token comment">#不然的话默认是隐式的</span>In <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">3</span>    b<span class="token number">5</span>    cdtype<span class="token punctuation">:</span> <span class="token builtin">object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理，iloc 表示都是python形式的隐式索引，左闭右开</p><p>ix是前两者的混合，在Series对象中ix等价隐式，主要用于DataFrame。<strong>已经被弃用了哈哈哈</strong></p><p>Python的设计原则之一是“<strong>显式优于隐式</strong>”，loc和iloc让代码更容易维护。</p><h3 id="DataFrame-1"><a href="#DataFrame-1" class="headerlink" title="DataFrame"></a>DataFrame</h3><p>DataFrame有些方面像<strong>二维或结构化数组</strong>，有些方面又像一个<strong>共享索引的若干Series对象构成的字典</strong></p><p><strong>看作字典</strong></p><p>看作由若干Series对象组成的字典</p><p>比如 area 和 pop是索引一样的两个Series</p><p>data = pd.DataFrame({‘area’: area,’pop’: pop})来构建列索引为area和pop的数组</p><p>可以通过对列名进行字典形式取值，也可以用属性形式选择<strong>纯字符串列名</strong>的数据</p><p><code>data[&#39;area&#39;] is data.area True </code>都是选取同一个Series对象</p><p>但是如果<strong>列名不是纯字符串</strong>，或者<strong>列名与DataFrame的方法同名</strong>，那么就不能使用，比如pop方法</p><p>由此还要避免用data.pop = z 这种形式赋值，而要用 data[‘pop’] = z来赋值</p><p>和前面介绍的Series对象一样，还可以用字典形式的语法调整/增加对象，如果要增加一列可以这样：</p><p>data[‘c’] = data[‘a’]/data[‘b’] 顺便展示了两个Series对象算术运算的简便语法，(｡･∀･)ﾉﾞ嗨</p><hr><p><strong>看作二维数组</strong></p><p>可以看成是一个增强版的二维数组，用values属性按行查看数组数据(还记得Series是没有values属性的)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> xOut<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span>          one      twoDarren    <span class="token number">123</span>   <span class="token number">123313</span>Jack    <span class="token number">21212</span>  <span class="token number">2131132</span>In <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">.</span>TOut<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     Darren     Jackone     <span class="token number">123</span>    <span class="token number">21212</span>two  <span class="token number">123313</span>  <span class="token number">2131132</span>In <span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">.</span>valuesOut<span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>    <span class="token number">123</span><span class="token punctuation">,</span>  <span class="token number">123313</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">21212</span><span class="token punctuation">,</span> <span class="token number">2131132</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">.</span>itemsOut<span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>bound method DataFrame<span class="token punctuation">.</span>items of           one      twoDarren    <span class="token number">123</span>   <span class="token number">123313</span>Jack    <span class="token number">21212</span>  <span class="token number">2131132</span><span class="token operator">></span>In <span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">.</span>columns <span class="token comment">#注意复数哈哈哈哈</span>Out<span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">.</span>indexOut<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Darren'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">.</span>keysOut<span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>bound method NDFrame<span class="token punctuation">.</span>keys of           one      twoDarren    <span class="token number">123</span>   <span class="token number">123313</span>Jack    <span class="token number">21212</span>  <span class="token number">2131132</span><span class="token operator">></span><span class="token comment">#因为索引被用在了列上，我们取行的能力收到了限制，x['one']可以取出一列</span>x<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Darren      <span class="token number">123</span>Jack      <span class="token number">21212</span>Name<span class="token punctuation">:</span> one<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int32<span class="token comment">#但是取行得用values属性</span>x<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1213313</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>data.values，理解了”二维数组“这一点，就能引出很多骚操作：比如data.T转置</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#可以用索引器来帮助进行索引</span><span class="token comment">#loc 和 iloc 处理起来就像处理二维数组一样，而且行列标签会自动保存在结果中</span><span class="token comment">#ix的规则是，既可以使用隐式也可以使用显式，但是在遇到整数索引时，规则和之前的Series一样混乱</span><span class="token comment">#其他用于索引的功能全都可以用于这些索引器</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">,</span><span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Darren'</span><span class="token punctuation">,</span><span class="token string">'Jack'</span><span class="token punctuation">,</span><span class="token string">'Jessica'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dataOut<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span>          one  two  three  fourDarren    <span class="token number">21</span>   <span class="token number">34</span>     <span class="token number">12</span>    <span class="token number">45</span>Jack      <span class="token number">37</span>   <span class="token number">23</span>     <span class="token number">76</span>    <span class="token number">23</span>Jessica   <span class="token number">56</span>   <span class="token number">98</span>     <span class="token number">34</span>    <span class="token number">87</span>data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       threeJack     <span class="token number">76</span>data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'Darren'</span><span class="token punctuation">:</span><span class="token string">'Jack'</span><span class="token punctuation">,</span><span class="token string">'one'</span><span class="token punctuation">:</span><span class="token string">'three'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span>         one  two  threeDarren   <span class="token number">21</span>   <span class="token number">34</span>     <span class="token number">12</span>Jack     <span class="token number">37</span>   <span class="token number">23</span>     <span class="token number">76</span><span class="token comment">#任何用于处理Numpy形式的方法都可用于这些索引器比如掩码和花哨</span><span class="token comment">#结合使用来筛选一部分，先筛选行，再筛选列噢</span>In <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>data<span class="token punctuation">.</span>one<span class="token operator">></span><span class="token number">22</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span>         two  fourJack      <span class="token number">23</span>    <span class="token number">23</span>Jessica   <span class="token number">98</span>    <span class="token number">87</span><span class="token comment">#记住一定要加loc索引器，不然报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其他的取值方法</strong></p><p>有点奇怪但是很好用。对单个标签取值就是选择列，对<strong>多个标签</strong>用切片就选择行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">#隐式切片Out[21]:          one  two  three  fourJack      37   23     76    23Jessica   56   98     34    87data['Darren':'Jessica'] #显式切片Out[22]:          one  two  three  fourDarren    21   34     12    45Jack      37   23     76    23Jessica   56   98     34    87data['two']Out[23]: Darren     34Jack       23Jessica    98Name: two, dtype: int32#掩码操作起到筛选某些 行 的作用data[data.three>20]Out[24]:          one  two  three  fourJack      37   23     76    23Jessica   56   98     34    87# 这两种操作方法其实和Numpy数组的语法类似，虽然它们与Pandas的操作习惯不太一致，但是非常好用</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h2><p>Pandas继承了Numpy的功能，可以对元素进行快速运算</p><p>但是Pandas实现了一些高效的技巧：</p><ol><li>对于一元计算，通用函数在输出结果中<u>保留索引和列标签。</u></li><li>对于二元计算，Pandas在传递通用函数时会<strong>自动对齐索引</strong>进行计算</li></ol><p><strong>这意味着：保存数据内容  组合不同来源的数据  这两处在Numpy里容易出错的地方，成了Pandas杀手锏</strong></p><p>ps：补充一下伪随机数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span>这个设置的是全局随机数种子rng <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token comment">#设置单独的随机数种子arr = rng.randn(10) #这样生成的就是独立的seedpermutation(arr) # 返回一个序列的随机排列shuffle # 随机排列一个序列,直接更改原来的rand #从均匀分布[0,1)中抽取样本uniform #选定区间【】均匀分布randint #根据给定的从低到高（左闭右开，左边省略为0）的范围抽取随机一个整数，如果给一个元组，则在0-元组每一项之间取，输出一个列表randn #从均值0方差1的正态分布normal(x1,x2,(shape))#平均值，标准差，shapebinomial #从二项分布中抽取样本beta #从beta分布中抽取样本chisquare #从卡方分布中抽取样本uniform(x1,x2,(shape)) #从均匀分布中抽取样本gamma #从伽马分布中抽取样本</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="索引对齐"><a href="#索引对齐" class="headerlink" title="索引对齐"></a>索引对齐</h3><p><strong>当在两个Series或DataFrame对象上进行二元计算时，Pandas会在计算过程中对齐两个对象的索引，在处理不完整的数据时，这一点非常方便</strong></p><p>结果数组的索引是两个输入数组索引的<strong>并集</strong>，缺失位置填充NaN，这是通过python内置集合运算规则实现的</p><p>我们也可以通过a.index | b.index 来获得这个新索引</p><p>两个对象的行列顺序可以是不一样的，结果的索引会<strong>自动排序</strong></p><p>当然也能自行设置缺失值，A.add(B,fill_value = 0) 这样会相加A和B并用0来填充</p><p>对于DataFrame其实大同小异：(下面有一些骚操作)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span> rng <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">:</span> A <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>rng<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'AB'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">:</span> B <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>rng<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'BAC'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span> AOut<span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    A   B<span class="token number">0</span>   <span class="token number">6</span>  <span class="token number">19</span><span class="token number">1</span>  <span class="token number">14</span>  <span class="token number">10</span>In <span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> BOut<span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span>   B  A  C<span class="token number">0</span>  <span class="token number">7</span>  <span class="token number">4</span>  <span class="token number">6</span><span class="token number">1</span>  <span class="token number">9</span>  <span class="token number">2</span>  <span class="token number">6</span><span class="token number">2</span>  <span class="token number">7</span>  <span class="token number">4</span>  <span class="token number">3</span>In <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span> A<span class="token operator">+</span>BOut<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      A     B   C<span class="token number">0</span>  <span class="token number">10.0</span>  <span class="token number">26.0</span> NaN<span class="token number">1</span>  <span class="token number">16.0</span>  <span class="token number">19.0</span> NaN<span class="token number">2</span>   NaN   NaN NaN<span class="token comment">#如果想要设置fill_value得用A.add(B,fill_value = x)</span>python运算符   映射  Pandas方法<span class="token operator">+</span>     add<span class="token operator">-</span>     sub<span class="token operator">*</span>     mul<span class="token operator">/</span>     div<span class="token operator">//</span>    floordiv<span class="token operator">%</span>     mod<span class="token operator">**</span>    <span class="token builtin">pow</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>DataFrame和Series的混合运算</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dfOut<span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span>   Q  R  S  T<span class="token number">0</span>  <span class="token number">7</span>  <span class="token number">7</span>  <span class="token number">2</span>  <span class="token number">5</span><span class="token number">1</span>  <span class="token number">4</span>  <span class="token number">1</span>  <span class="token number">7</span>  <span class="token number">5</span><span class="token number">2</span>  <span class="token number">1</span>  <span class="token number">4</span>  <span class="token number">0</span>  <span class="token number">9</span><span class="token comment">#df.iloc[0]选取的是第一列，有点类似广播，默认是按行计算！</span>In <span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df <span class="token operator">-</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span>   Q  R  S  T<span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">-</span><span class="token number">6</span>  <span class="token number">5</span>  <span class="token number">0</span><span class="token number">2</span> <span class="token operator">-</span><span class="token number">6</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">-</span><span class="token number">2</span>  <span class="token number">4</span><span class="token comment">#按列计算就得调一下轴</span>In <span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'R'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span>   Q  R  S  T<span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token operator">-</span><span class="token number">2</span><span class="token number">1</span>  <span class="token number">3</span>  <span class="token number">0</span>  <span class="token number">6</span>  <span class="token number">4</span><span class="token number">2</span> <span class="token operator">-</span><span class="token number">3</span>  <span class="token number">0</span> <span class="token operator">-</span><span class="token number">4</span>  <span class="token number">5</span><span class="token comment">#否则结果会很坑爹</span>In <span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df <span class="token operator">-</span> df<span class="token punctuation">[</span><span class="token string">'R'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    Q   R   S   T   <span class="token number">0</span>   <span class="token number">1</span>   <span class="token number">2</span><span class="token number">0</span> NaN NaN NaN NaN NaN NaN NaN<span class="token number">1</span> NaN NaN NaN NaN NaN NaN NaN<span class="token number">2</span> NaN NaN NaN NaN NaN NaN NaN<span class="token comment">#值得注意的是在二元运算中缺失的直接判定为NaN而不是不进行操作</span><span class="token comment">#还是得注意“按行操作”的含义。Series翻转成水平后的标签是否为dataframe的columns的子集</span>In <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">:</span> halfrowOut<span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">:</span>Q    <span class="token number">7</span>S    <span class="token number">2</span>Name<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int32In <span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df <span class="token operator">-</span> halfrowOut<span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     Q   R    S   T<span class="token number">0</span>  <span class="token number">0.0</span> NaN  <span class="token number">0.0</span> NaN<span class="token number">1</span> <span class="token operator">-</span><span class="token number">3.0</span> NaN  <span class="token number">5.0</span> NaN<span class="token number">2</span> <span class="token operator">-</span><span class="token number">6.0</span> NaN <span class="token operator">-</span><span class="token number">2.0</span> NaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理缺失值"><a href="#处理缺失值" class="headerlink" title="处理缺失值"></a>处理缺失值</h2><h3 id="缺失值"><a href="#缺失值" class="headerlink" title="缺失值"></a>缺失值</h3><p>缺失值的问题十分普遍，处理不同数据源缺失值的方法不同</p><p>本节介绍一些处理缺失值的通用规则，Pandas对缺失值的表现形式，并演示Pandas自带的几个处理缺失值的工具</p><p>本书涉及的缺失值主要有三种形式：<strong>null 、NaN、 NA</strong></p><p>不愧是作者，列举了他在创建pandas时对于这个问题的看法，最终他选择了<strong>用标签方法表示缺失值</strong></p><p>这包括两种python原有的缺失值：浮点数据的NaN值，还有None对象</p><p>当然，Numpy支持掩码数据，Pandas也集成了这个功能，但由于存储、维护的资源浪费，并不可取</p><hr><p>P106</p><p><strong>None</strong></p><p>这是一个Python单体对象，不能作为任何Numpy/Pandas数组类型的缺失值，只能用于’object’数组类型</p><p>即由python对象构成的数组，dtype = object 就是这个意思。</p><p>这样的类型对数据的任何操作最终都会在python层面完成，进行常见快速操作时会消耗更多资源。</p><p>同时，python没有定义整数与None之间的加减运算，Sum和min（）这些都会出错。</p><p><strong>NaN</strong></p><p>这是一种按照IEEE浮点数标准设计，在任何系统中都兼容的<strong>特殊浮点数</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span> vals1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> vals1Out<span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">object</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> vals2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> vals2<span class="token punctuation">.</span>dtypeOut<span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dtype<span class="token punctuation">(</span><span class="token string">'float64'</span><span class="token punctuation">)</span><span class="token comment">#Numpy会自动为这个数组选择一个原生浮点类型，这意味着与object不同，该数组会被编译成C代码从而实现快速操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而且NaN无论进行何种操作，结果都是NaN，跟病毒一样。</p><p>但还记得Numpy提供了一些特殊的累计函数来规避NaN，np.nansum(vals2) == 8</p><p><strong>NA</strong></p><p>Pandas把NaN和None看作是可以等价交换的</p><p>Pandas会将没有标签的数据类型自动转换为NA，规则见P109</p><table><thead><tr><th>类型</th><th>存在缺失值时转换</th><th>NA标签值</th></tr></thead><tbody><tr><td>float</td><td>无变化</td><td>np.nan</td></tr><tr><td>object</td><td>无变化</td><td>np.nan或None</td></tr><tr><td>integer</td><td>强制转换为float64</td><td>np.nan</td></tr><tr><td>boolean</td><td>强制转换为object</td><td>np.nan或None</td></tr></tbody></table><p>*Pandas中字符串类型的数据通常是用object类型存储的</p><h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><p><strong>发现缺失值</strong></p><p>isnull 和notnull 会返回布尔类型的掩码数组，以此可以直接用作索引</p><p><strong>剔除缺失值</strong></p><p>dropna </p><p>这两个操作在Series里没有什么问题</p><p>但在DataFrame中就需要注意，并没有办法单独剔除一个值，只能剔除缺失值所在整行或整列</p><p>dropna<strong>默认剔除整行</strong>（因为数据按行为一条），如果加参数df.fropna(axis = 1)或者axis = ‘columns’那就是整列，“1”有点诡异</p><p>可以用how或参数设置阈值，默认是how =’any’，可以是all(必须整行、列都是缺失值才剔除)</p><p>thresh参数可以设置非缺失值的最小数量，thresh = 3则正常数据&lt;3的行、列被剔除。</p><p><strong>填充缺失值</strong></p><p>fillna返回填充了缺失值后的数组副本</p><p>参数可以选择method = ‘ffill/bfill’ 用缺失值前/后的有效值来依次填充，也可以改axis来左右填充。</p><p>但是如果前面一直找不到有效值填充，那就还是缺失值。。。</p><h2 id="层级索引"><a href="#层级索引" class="headerlink" title="层级索引"></a>层级索引</h2><p>当我们遇到存储多维数据需求时，数据索引超过一两个键。</p><p>Pandas提供了Panel和Panel4D对象解决三维数据和四维数据。</p><p>这两种对象采用密集存储，在维度增加的情况下效率越来越低，作者更推荐层级索引</p><p>但更直观的形式是hierarchical indexing，层级索引，配合多个不同等级的以及索引一起用，将高维数组转换成类似一维和二维对象的形式。</p><p>P114有解释层级索引便利性的例子</p><h3 id="创建层级索引"><a href="#创建层级索引" class="headerlink" title="创建层级索引"></a>创建层级索引</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#最直接的方法是将index的参数设置为至少二维的索引数组</span>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'data1'</span><span class="token punctuation">,</span><span class="token string">'data2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dfOut<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        data1     data2a <span class="token number">1</span>  <span class="token number">0.290846</span>  <span class="token number">0.466652</span>  <span class="token number">2</span>  <span class="token number">0.245400</span>  <span class="token number">0.860682</span>b <span class="token number">1</span>  <span class="token number">0.697193</span>  <span class="token number">0.100121</span>  <span class="token number">2</span>  <span class="token number">0.028793</span>  <span class="token number">0.633941</span>    <span class="token comment">#输出按照index顺序来，但是如果重复就会自动少显示，所以要手动确认哪个在前合适。</span>In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>indexOut<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span>MultiIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">)</span><span class="token comment">#index的类型变为了MultiIndex</span><span class="token comment">#第二种方法是把元组作为键的字典传递给Pandas</span>In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">32432</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">2010</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">312312</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">3241332</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">2010</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">3243252</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">32434532</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token number">2010</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">3223432</span><span class="token punctuation">&#125;</span>In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span>a  <span class="token number">2000</span>       <span class="token number">32432</span>   <span class="token number">2010</span>      <span class="token number">312312</span>b  <span class="token number">2000</span>     <span class="token number">3241332</span>   <span class="token number">2010</span>     <span class="token number">3243252</span>c  <span class="token number">2000</span>    <span class="token number">32434532</span>   <span class="token number">2010</span>     <span class="token number">3223432</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>unstack可以把一个多级索引的Series转化为DataFrame，而stack相反（用level来选择处理的层数）不过注意，unstack和stack默认竟然是后面那层，可以用level = 0 来选第一层。</p><p>注意DataFrame是用于二维的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#显式创建MultiIndex也是很有用的#可以用不同等级的数组来创建In [17]: pd.MultiIndex.from_arrays([['a','a','b','b'],[1,2,1,2]])#可以用包含不同等级索引值的元组构成的列表来创建In [18]: pd.MultiIndex.from_tuples([('a',1),('a',2),('b',1),('b',2)])#可以用两个索引序列的笛卡尔积来创建（这个逻辑上妙一点）In [19]: pd.MultiIndex.from_product([['a','b'],[1,2]])#原有的levels和labels属性好像被删掉了？#可以加名字来方便管理In [29]: bOut[29]:a  2000       32432   2010      312312b  2000     3241332   2010     3243252c  2000    32434532   2010     3223432dtype: int64In [30]: b.index.names = ['owner','year']In [31]: bOut[31]:owner  yeara      2000       32432       2010      312312b      2000     3241332       2010     3243252c      2000    32434532       2010     3223432dtype: int64</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#多级列索引</span>In <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> index <span class="token operator">=</span> pd<span class="token punctuation">.</span>MultiIndex<span class="token punctuation">.</span>from_product<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2013</span><span class="token punctuation">,</span><span class="token number">2014</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">,</span><span class="token string">'visit_time'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> columns <span class="token operator">=</span> pd<span class="token punctuation">.</span>MultiIndex<span class="token punctuation">.</span>from_product<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token string">'Darren'</span><span class="token punctuation">,</span><span class="token string">'Jack'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'HR'</span><span class="token punctuation">,</span><span class="token string">'Temp'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">round</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#round是保留小数位，此处为1</span>In <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">.</span> <span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">.</span> <span class="token punctuation">,</span>  <span class="token number">2.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2.1</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span>  <span class="token number">1.6</span><span class="token punctuation">,</span>  <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.3</span><span class="token punctuation">,</span>  <span class="token number">0.6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span>  <span class="token number">2.4</span><span class="token punctuation">,</span>  <span class="token number">0.9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.1</span><span class="token punctuation">,</span>  <span class="token number">2.2</span><span class="token punctuation">,</span>  <span class="token number">0.1</span><span class="token punctuation">,</span>  <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*=</span><span class="token number">10</span>In <span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token operator">+=</span><span class="token number">37</span>In <span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">:</span> health_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span>index <span class="token operator">=</span> index<span class="token punctuation">,</span>columns <span class="token operator">=</span> columns<span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> health_dataOut<span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span>name              Bob       Darren        Jack<span class="token builtin">type</span>               HR  Temp     HR  Temp    HR  Tempyear visit_time<span class="token number">2013</span> <span class="token number">1</span>           <span class="token number">30.0</span>  <span class="token number">37.0</span>   <span class="token number">29.0</span>  <span class="token number">36.1</span>  <span class="token number">37.0</span>  <span class="token number">39.4</span>     <span class="token number">2</span>           <span class="token number">16.0</span>  <span class="token number">37.5</span>   <span class="token number">53.0</span>  <span class="token number">37.2</span>  <span class="token number">24.0</span>  <span class="token number">36.6</span><span class="token number">2014</span> <span class="token number">1</span>           <span class="token number">41.0</span>  <span class="token number">35.7</span>   <span class="token number">43.0</span>  <span class="token number">36.5</span>  <span class="token number">61.0</span>  <span class="token number">37.9</span>     <span class="token number">2</span>           <span class="token number">36.0</span>  <span class="token number">39.2</span>   <span class="token number">38.0</span>  <span class="token number">37.9</span>  <span class="token number">28.0</span>  <span class="token number">35.6</span>columns名字       多级columnsindex名字          内容多级index          内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多级索引取值、切片"><a href="#多级索引取值、切片" class="headerlink" title="多级索引取值、切片"></a>多级索引取值、切片</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Series</span>In <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> oneOut<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span>year  visit_time<span class="token number">2013</span>  <span class="token number">1</span>             <span class="token number">53.0</span>      <span class="token number">2</span>             <span class="token number">35.3</span><span class="token number">2014</span>  <span class="token number">1</span>             <span class="token number">34.0</span>      <span class="token number">2</span>             <span class="token number">36.9</span>dtype<span class="token punctuation">:</span> float64<span class="token comment">#可以通过指定所有级别的索引值来获取单个元素</span>In <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> one<span class="token punctuation">[</span><span class="token number">2013</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">53.0</span><span class="token comment">#也可以“局部取值”，取出来还是Series，不过貌似必须得从前到后</span>In <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> one<span class="token punctuation">[</span><span class="token number">2013</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span>visit_time<span class="token number">1</span>    <span class="token number">53.0</span><span class="token number">2</span>    <span class="token number">35.3</span>dtype<span class="token punctuation">:</span> float64<span class="token comment">#切片类似</span>In <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> one<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">2013</span><span class="token punctuation">:</span><span class="token number">2014</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span>year  visit_time<span class="token number">2013</span>  <span class="token number">1</span>             <span class="token number">53.0</span>      <span class="token number">2</span>             <span class="token number">35.3</span><span class="token number">2014</span>  <span class="token number">1</span>             <span class="token number">34.0</span>      <span class="token number">2</span>             <span class="token number">36.9</span>dtype<span class="token punctuation">:</span> float64<span class="token comment">#巧妙</span>In <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> one<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span>year<span class="token number">2013</span>    <span class="token number">35.3</span><span class="token number">2014</span>    <span class="token number">36.9</span>dtype<span class="token punctuation">:</span> float64<span class="token comment">#布尔和花哨的使用方法类似，并无太大变化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#DateFrame</span>单独取是列索引<span class="token punctuation">,</span>类似SeriesIn <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> health_dataOut<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span>name              Bob       Darren        Jack<span class="token builtin">type</span>               HR  Temp     HR  Temp    HR  Tempyear visit_time<span class="token number">2013</span> <span class="token number">1</span>           <span class="token number">53.0</span>  <span class="token number">35.3</span>   <span class="token number">34.0</span>  <span class="token number">36.9</span>  <span class="token number">37.0</span>  <span class="token number">37.0</span>     <span class="token number">2</span>           <span class="token number">20.0</span>  <span class="token number">35.8</span>   <span class="token number">47.0</span>  <span class="token number">37.2</span>  <span class="token number">42.0</span>  <span class="token number">37.0</span><span class="token number">2014</span> <span class="token number">1</span>           <span class="token number">36.0</span>  <span class="token number">36.3</span>   <span class="token number">44.0</span>  <span class="token number">37.7</span>  <span class="token number">35.0</span>  <span class="token number">37.4</span>     <span class="token number">2</span>           <span class="token number">28.0</span>  <span class="token number">37.4</span>   <span class="token number">32.0</span>  <span class="token number">33.7</span>  <span class="token number">40.0</span>  <span class="token number">38.0</span><span class="token comment">#对索引器来说，他们还是按照先行后列来操作，而且在loc和iloc中可以传递多个层级的索引元组，👇先取所有行，再对列进行层级索引，但在元组中使用切片会导致语法错误（不能确定范围），不是很方便</span>In <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> health_data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'Darren'</span><span class="token punctuation">,</span><span class="token string">'Temp'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span>year  visit_time<span class="token number">2013</span>  <span class="token number">1</span>             <span class="token number">36.9</span>      <span class="token number">2</span>             <span class="token number">37.2</span><span class="token number">2014</span>  <span class="token number">1</span>             <span class="token number">37.7</span>      <span class="token number">2</span>             <span class="token number">33.7</span>Name<span class="token punctuation">:</span> <span class="token punctuation">(</span>Darren<span class="token punctuation">,</span> Temp<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64 <span class="token comment">#更好的方法时使用IndexSlice对象而不是python自带的slice函数，这样可以在内部使用切片</span>In <span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span> health_data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>idx<span class="token punctuation">[</span><span class="token number">2013</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>idx<span class="token punctuation">[</span><span class="token string">'Darren'</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span>name    <span class="token builtin">type</span>Darren  HR      <span class="token number">47.0</span>        Temp    <span class="token number">37.2</span>Name<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">2013</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64<span class="token comment">#ps：不要忘记使用loc，不然会报错而且错误贼长</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多级索引行列转换"><a href="#多级索引行列转换" class="headerlink" title="多级索引行列转换"></a>多级索引行列转换</h3><p>局部切片和其他很多类似操作都要求<strong>MultiIndex的各级索引是有序</strong>的，否则大部分操作都会失败。</p><p>可以用data = data.sort_index() 或者<a href="https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.DataFrame.sort_index.html#pandas.DataFrame.sort_index">data.sortlevel</a>()来搞定</p><p>sort_index有个参数ascending  True代表升序</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> popOut<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span>California  <span class="token number">2000</span>    <span class="token number">3234234</span>            <span class="token number">2010</span>     324322NewYork     <span class="token number">2000</span>    <span class="token number">6434634</span>            <span class="token number">2010</span>      52364Texas       <span class="token number">2000</span>      <span class="token number">67573</span>            <span class="token number">2010</span>      43525dtype<span class="token punctuation">:</span> int32    <span class="token comment">#level设置转换的层数In [22]: stack = pop.unstack(level = 0)In [23]: stackOut[23]:      California  NewYork  Texas2000     3234234  6434634  675732010      324322    52364  43525In [24]: stack2 = pop.unstack(level = 1)In [25]: stack2Out[25]:               2000    2010California  3234234  324322NewYork     6434634   52364Texas         67573   43525In [26]: stack2.stack()Out[26]:California  2000    3234234            2010     324322NewYork     2000    6434634            2010      52364Texas       2000      67573            2010      43525dtype: int32</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在实践中处理数据集非常好用的方法：</p><p><strong>行列标签转换</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#reset_index可以生成一个DataFrame，之前的行索引将变成内容，行名变列名，可以指定name来设置原来内容的列名称</span>In <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pop<span class="token punctuation">.</span>index<span class="token punctuation">.</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">,</span><span class="token string">'year'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pop<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'population'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        state  year  population<span class="token number">0</span>  California  <span class="token number">2000</span>     <span class="token number">3234234</span><span class="token number">1</span>  California  <span class="token number">2010</span>      <span class="token number">324322</span><span class="token number">2</span>     NewYork  <span class="token number">2000</span>     <span class="token number">6434634</span><span class="token number">3</span>     NewYork  <span class="token number">2010</span>       <span class="token number">52364</span><span class="token number">4</span>       Texas  <span class="token number">2000</span>       <span class="token number">67573</span><span class="token number">5</span>       Texas  <span class="token number">2010</span>       <span class="token number">43525</span><span class="token comment">#反过来，也可以这样，将其中的几列变为行索引</span>In <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> pop<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'population'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">,</span><span class="token string">'year'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                 populationstate      yearCalifornia <span class="token number">2000</span>     <span class="token number">3234234</span>           <span class="token number">2010</span>      <span class="token number">324322</span>NewYork    <span class="token number">2000</span>     <span class="token number">6434634</span>           <span class="token number">2010</span>       <span class="token number">52364</span>Texas      <span class="token number">2000</span>       <span class="token number">67573</span>           <span class="token number">2010</span>       <span class="token number">43525</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多级索引数据累计"><a href="#多级索引数据累计" class="headerlink" title="多级索引数据累计"></a>多级索引数据累计</h3><p>数据累计方法，如mean()、sum()、max()之类的，其实就是结合level参数，level取的是index的名字，表明保留该列、行，其他合并，通过axis表明沿行、列</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> pop<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>level <span class="token operator">=</span> <span class="token string">'state'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> aOut<span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span>stateCalifornia    <span class="token number">1779278</span>NewYork       <span class="token number">3243499</span>Texas           <span class="token number">55549</span>dtype<span class="token punctuation">:</span> int32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="合并数据集"><a href="#合并数据集" class="headerlink" title="合并数据集"></a>合并数据集</h2><p>这是非常有趣的事情，既包括简单拼接，也包括处理重叠片段，pandas提供了高效的函数</p><p><strong>concat 和 append</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>x<span class="token punctuation">,</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>x<span class="token punctuation">,</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>AxisError                                 Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span><span class="token builtin">input</span><span class="token operator">-</span><span class="token number">77</span><span class="token operator">-</span>cdd90a57a401<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>x<span class="token punctuation">,</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>__array_function__ internals<span class="token operator">></span> <span class="token keyword">in</span> concatenate<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>AxisError<span class="token punctuation">:</span> axis <span class="token number">1</span> <span class="token keyword">is</span> out of bounds <span class="token keyword">for</span> array of dimension <span class="token number">1</span><span class="token comment">#对于一维数组的concatenate好像是个特例。</span><span class="token comment">#pd.concat与np.concatenate语法类似，参数更多，功能更强</span>DataFrame默认逐行合并<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>可以设置成axis <span class="token operator">=</span> <span class="token string">'col'</span><span class="token operator">/</span><span class="token number">1</span>差异：<span class="token number">1</span><span class="token punctuation">.</span> 索引重复，合并时保留哪怕是重复的索引   可以设置verify_integrity <span class="token operator">=</span> <span class="token boolean">True</span> 来引发异常   可以设置igonre_index <span class="token operator">=</span> <span class="token boolean">True</span> 会无视原有的索引，直接新建一个<span class="token number">0</span>，<span class="token number">1</span>，<span class="token number">2</span><span class="token punctuation">.</span>。。   可以设置keys <span class="token operator">=</span> <span class="token punctuation">[</span>xxxx<span class="token punctuation">]</span>，keys会作为数据源的索引，就是高一层的多级索引。<span class="token number">2</span><span class="token punctuation">.</span> 合并   join <span class="token operator">=</span> <span class="token string">'outer'</span>取并集（默认），会出现NAN<span class="token punctuation">,</span>   inner 取交集   join_axes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>xxx<span class="token punctuation">,</span>xx<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>直接确定结果使用的列名。append语法方便<span class="token punctuation">:</span>df1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>df2<span class="token punctuation">)</span>，和pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">)</span>效果一样但是不像原生的append可以直接更新原有对象，而是新建，所以效率不高，不如建立DF列表然后一次性concat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>merge(合并) and join(连接)</p><p>高性能的内存式数据连接是Pandas的卖点之一。</p><p><strong>关系代数</strong>是处理关系型数据的通用理论，绝大部分数据库的可用操作都以此为理论基础。</p><p>关系代数方法论的强大之处在于，它提出的若干简单操作规则经过组合就可以为任意数据集构建十分复杂的操作。Pandas 在 pd.merge() 函数与 Series 和 DataFrame 的 join() 方法里实现了这些基本操作规则。</p><h2 id="合并与链接"><a href="#合并与链接" class="headerlink" title="合并与链接"></a>合并与链接</h2><p>pd.merge() 函数实现了三种数据连接的类型：一对一、多对一和多对多。</p><p>一对一就是一对一呗。。merge至少要有一列是一样的</p><p>多对一连接是指，在需要连接的两个列中，有一列的值有重复。通过多对一连接获得的结果 DataFrame <strong>将会保留重复值</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210910143623978.png" alt="image-20210910143623978"></p><p>在结果 DataFrame 中多了一个“supervisor”列，里面有些值会因为输入数据的对应关系而有所重复</p><p>多对多连接是个有点儿复杂的概念，不过也可以理解。如果左右两个输入的共同列都包含重复值，那么合并的结果就是一种多对多连接。来看下面的例子，里面有一个 DataFrame 显示不同岗位人员的一种或多种能力。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210910143833746.png" alt="image-20210910143833746"></p><p>真实数据集往往没有那么干净、整洁，下面介绍merge的一些功能。</p><h3 id="数据合并参数"><a href="#数据合并参数" class="headerlink" title="数据合并参数"></a>数据合并参数</h3><p>on = ‘列名’  两边都有的</p><p>left_on =  ‘’   right_on =  ‘’  分别指定左右的<strong>共同列作为键进行合并</strong></p><p>获取的结果中会有一个多余的列，可以通过 DataFrame 的 drop() 方法将这列去掉：</p><p><code>pd.merge(df1, df3, left_on=&quot;employee&quot;, right_on=&quot;name&quot;).drop(&#39;name&#39;, axis=1)</code>（drop的1是列）</p><p>除了合并列，你也可以把索引作为键来合并</p><p>left_index 和 right_index = True</p><p>也可以混合使用，<code>print(pd.merge(df1a, df3, left_index=True, right_on=&#39;name&#39;))</code></p><p>当然，这些参数都适用于多个索引和 / 或多个列名，函数接口非常简单，<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html">点我</a></p><p>当一个值出现在一列，却没有出现在另一列时，就需要考虑<strong>集合操作规则</strong>了。</p><p>默认outer  还有inner  left   right  表示行保留哪一边输入列的值</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210910145946446.png" alt="image-20210910145946446"></p><p><strong>重复列名</strong></p><p>由于输出结果中有两个重复的列名(这一列<strong>没有作为合并的键</strong>，所以多了一列)，因此 pd.merge() 函数会自动为它们增加后缀 _x 或 _y </p><p>可以通过 suffixes 参数自定义后缀名：pd.merge(df8, df9, on=”name”, suffixes=[“_L”, “_R”])</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210911194551123.png" alt="image-20210911194551123"></p><p><strong>3.8的例子</strong>太秀了，好好看看</p><p>pd.any()它会检查每一列，然后用 列名  True/False 的格式一行一行打印出来</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210911194705665.png" alt="image-20210911194705665"></p><p>pd.unique() 返回独一无二的。。就是集合嘛</p><p>pd.read_csv(‘xxxx.csv’) 通过csv文件生成DataFrame</p><p>pd.head() 查看前五行，tail查看后五行</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210910152230379.png" alt="image-20210910152230379"></p><p>有点巧妙，行索引筛选哪些行的数据，列索引筛选state，然后unique一下，然后处理👇</p><p>merged.loc[merged[‘state/region’] == ‘PR’, ‘state’] = ‘Puerto Rico’<br>merged.loc[merged[‘state/region’] == ‘USA’, ‘state’] = ‘United States’</p><p>最巧妙的是随心所欲的操控数据，通过布尔索引和选出某列的某部分当新索引，完成神奇的工作。</p><p>pandas 中 inplace 参数 在很多函数 中 都会有，inplace = True：<strong>不创建新的对象，直接对原始对象进行修改；</strong></p><h2 id="累计与分组"><a href="#累计与分组" class="headerlink" title="累计与分组"></a>累计与分组</h2><p>在对较大的数据进行分析时，一项基本的工作就是有效的数据累计（summarization）：计算累计（aggregation）指标，如 sum() 、 mean() 、 median() 、 min() 和 max() </p><p>有一个非常方便的 describe() 方法可以计算每一列的若干常用统计值。让我们在行星数据上试验一下，首先丢弃有缺失值的行：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210910154410670.png" alt="image-20210910154410670"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210910154441931.png" alt="image-20210910154441931"></p><p>但若想深入理解数据，仅仅依靠累计函数是远远不够的。数据累计的下一级别是 groupby操作，它可以让你  <u>快速、有效地计算数据各子集的累计值</u>。</p><h3 id="GroupBy：分割、应用和组合"><a href="#GroupBy：分割、应用和组合" class="headerlink" title="GroupBy：分割、应用和组合"></a>GroupBy：分割、应用和组合</h3><p>简单的累计方法可以让我们对数据集有一个笼统的认识，但是我们经常还需要对某些标签或索引的<strong>局部</strong>进行累计分析</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210910154840571.png" alt="image-20210910154840571" style="zoom: 33%;" /><p>• 分割步骤将 DataFrame 按照指定的键分割成若干组。<br>• 应用步骤对每个组应用函数，通常是累计、转换或过滤函数。<br>• 组合步骤将每一组的结果合并成一个输出数组。</p><p>虽然我们也可以通过前面介绍的一系列的掩码、累计与合并操作来实现，但是意识到<strong>中间分割过程不需要显式地暴露出来</strong>这一点十分重要。而且 GroupBy （经常）只需要一行代码，就可以计算每组的和、均值、计数、最小值以及其他累计值。 GroupBy 的用处就是<strong>将这些步骤进行抽象</strong>：<u>在底层解决所有难题</u>，用户不需要知道在底层如何计算，只要<strong>把操作看成一个整体就够了</strong>。</p><p>延迟计算：</p><p>groupby的返回值是一个 DataFrameGroupBy 对象。你可以将它看成是一种特殊形式的 DataFrame ，里面隐藏着若干组数据，但是在没有应用累计函数之前不会计算。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dfOut<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  key  data<span class="token number">0</span>   A     <span class="token number">0</span><span class="token number">1</span>   B     <span class="token number">1</span><span class="token number">2</span>   C     <span class="token number">2</span><span class="token number">3</span>   A     <span class="token number">3</span><span class="token number">4</span>   B     <span class="token number">4</span><span class="token number">5</span>   C     <span class="token number">5</span>In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>pandas<span class="token punctuation">.</span>core<span class="token punctuation">.</span>groupby<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>DataFrameGroupBy <span class="token builtin">object</span> at <span class="token number">0x0000022CD3E6B088</span><span class="token operator">></span>In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     datakeyA       <span class="token number">3</span>B       <span class="token number">5</span>C       <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h4><ol><li><p>支持按列取值，取出的对象叫SeriesGroupBy，也支持延迟计算</p></li><li><p>支持按组迭代，返回的每一组都是 Series 或 DataFrame </p><p>👇method取出的是索引，group取出的是DataFrame或Series</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210910161139054.png" alt="image-20210910161139054"></p><ol start="3"><li>调用方法，让任何<strong>不由GroupBy对象直接实现的方法</strong>直接应用到每一组。👇这是因为Python类的魔力，继承。</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     datakeyA       <span class="token number">3</span>B       <span class="token number">5</span>C       <span class="token number">7</span>In <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#这个方法本来是pd的，但是直接用在pdGrouoby上了</span>Out<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     data    count mean      std  <span class="token builtin">min</span>   <span class="token number">25</span><span class="token operator">%</span>  <span class="token number">50</span><span class="token operator">%</span>   <span class="token number">75</span><span class="token operator">%</span>  <span class="token builtin">max</span>keyA     <span class="token number">2.0</span>  <span class="token number">1.5</span>  <span class="token number">2.12132</span>  <span class="token number">0.0</span>  <span class="token number">0.75</span>  <span class="token number">1.5</span>  <span class="token number">2.25</span>  <span class="token number">3.0</span>B     <span class="token number">2.0</span>  <span class="token number">2.5</span>  <span class="token number">2.12132</span>  <span class="token number">1.0</span>  <span class="token number">1.75</span>  <span class="token number">2.5</span>  <span class="token number">3.25</span>  <span class="token number">4.0</span>C     <span class="token number">2.0</span>  <span class="token number">3.5</span>  <span class="token number">2.12132</span>  <span class="token number">2.0</span>  <span class="token number">2.75</span>  <span class="token number">3.5</span>  <span class="token number">4.25</span>  <span class="token number">5.0</span><span class="token comment">#unstack()是将列索引转换为行索引（成列的转换为成行的？）</span><span class="token comment">#但是注意，默认是准换到靠近数据的那一层。</span><span class="token comment">#而且如果没有行索引了，会自动颠倒，就像下面这个一样。</span>In <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span>             keydata  count  A      <span class="token number">2.00000</span>             B      <span class="token number">2.00000</span>             C      <span class="token number">2.00000</span>      mean   A      <span class="token number">1.50000</span>             B      <span class="token number">2.50000</span>             C      <span class="token number">3.50000</span>      std    A      <span class="token number">2.12132</span>             B      <span class="token number">2.12132</span>             C      <span class="token number">2.12132</span>      <span class="token builtin">min</span>    A      <span class="token number">0.00000</span>             B      <span class="token number">1.00000</span>             C      <span class="token number">2.00000</span>      <span class="token number">25</span><span class="token operator">%</span>    A      <span class="token number">0.75000</span>             B      <span class="token number">1.75000</span>             C      <span class="token number">2.75000</span>      <span class="token number">50</span><span class="token operator">%</span>    A      <span class="token number">1.50000</span>             B      <span class="token number">2.50000</span>             C      <span class="token number">3.50000</span>      <span class="token number">75</span><span class="token operator">%</span>    A      <span class="token number">2.25000</span>             B      <span class="token number">3.25000</span>             C      <span class="token number">4.25000</span>      <span class="token builtin">max</span>    A      <span class="token number">3.00000</span>             B      <span class="token number">4.00000</span>             C      <span class="token number">5.00000</span>dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h4><p><strong>累计</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dfOut<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  key  data1  data2<span class="token number">0</span>   A      <span class="token number">0</span>      <span class="token number">3</span><span class="token number">1</span>   B      <span class="token number">1</span>      <span class="token number">9</span><span class="token number">2</span>   C      <span class="token number">2</span>      <span class="token number">8</span><span class="token number">3</span>   A      <span class="token number">3</span>      <span class="token number">8</span><span class="token number">4</span>   B      <span class="token number">4</span>      <span class="token number">5</span><span class="token number">5</span>   C      <span class="token number">5</span>      <span class="token number">4</span>In <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'min'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>median<span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    data1            data2      <span class="token builtin">min</span> median <span class="token builtin">max</span>   <span class="token builtin">min</span> median <span class="token builtin">max</span>keyA       <span class="token number">0</span>    <span class="token number">1.5</span>   <span class="token number">3</span>     <span class="token number">3</span>    <span class="token number">5.5</span>   <span class="token number">8</span>B       <span class="token number">1</span>    <span class="token number">2.5</span>   <span class="token number">4</span>     <span class="token number">5</span>    <span class="token number">7.0</span>   <span class="token number">9</span>C       <span class="token number">2</span>    <span class="token number">3.5</span>   <span class="token number">5</span>     <span class="token number">4</span>    <span class="token number">6.0</span>   <span class="token number">8</span><span class="token comment">#支持字符串、函数或函数列表</span><span class="token comment">#也可以通过python字典指定不同列需要的函数</span>In <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'data1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'min'</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>median<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">^</span>M    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> <span class="token string">'data2'</span><span class="token punctuation">:</span> <span class="token string">'max'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    data1        data2      <span class="token builtin">min</span> median   <span class="token builtin">max</span>keyA       <span class="token number">0</span>    <span class="token number">1.5</span>     <span class="token number">8</span>B       <span class="token number">1</span>    <span class="token number">2.5</span>     <span class="token number">9</span>C       <span class="token number">2</span>    <span class="token number">3.5</span>     <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>过滤</strong></p><p>过滤操作可以让你按照分组的属性丢弃若干数据。例如，我们可能只需要保留标准差超过某个阈值的组</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">filter_func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token string">'data2'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">4</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>filter_func<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>转换</strong></p><p>累计操作返回的是对组内全量数据缩减过的结果，而转换操作会返回一个新的全量数据。数据经过转换之后，其形状与原来的输入数据是一样的，而</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">-</span> x<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span>   data1  data2<span class="token number">0</span>   <span class="token operator">-</span><span class="token number">1.5</span>   <span class="token operator">-</span><span class="token number">2.5</span><span class="token number">1</span>   <span class="token operator">-</span><span class="token number">1.5</span>    <span class="token number">2.0</span><span class="token number">2</span>   <span class="token operator">-</span><span class="token number">1.5</span>    <span class="token number">2.0</span><span class="token number">3</span>    <span class="token number">1.5</span>    <span class="token number">2.5</span><span class="token number">4</span>    <span class="token number">1.5</span>   <span class="token operator">-</span><span class="token number">2.0</span><span class="token number">5</span>    <span class="token number">1.5</span>   <span class="token operator">-</span><span class="token number">2.0</span><span class="token comment">#注意key那个标签没了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>apply（）方法</strong></p><p> apply() 方法让你可以在每个组上应用任意方法。这个<strong>函数输入一个DataFrame</strong> ，<u>返回一个 Pandas 对象（ DataFrame 或 Series ）或一个标量（scalar，单个数值）</u>。组合操作会适应返回结果类型。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210911200326500.png" alt="image-20210911200326500"></p><h4 id="分组方法"><a href="#分组方法" class="headerlink" title="分组方法"></a>分组方法</h4><p>前面的简单例子一直在用列名分割 DataFrame 。这只是众多分组操作中的一种，下面将继续介绍更多的分组方法。</p><ol><li><p>将列表、数组、Series 或索引作为分组键（长度与 DataFrame 匹配）</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210911200714468.png" alt="image-20210911200714468"></p><p>这个就是用索引</p></li><li><p>用字典或 Series 将索引映射到分组名称</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2Out<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      data1  data2keyA        <span class="token number">0</span>      <span class="token number">5</span>B        <span class="token number">1</span>      <span class="token number">0</span>C        <span class="token number">2</span>      <span class="token number">3</span>A        <span class="token number">3</span>      <span class="token number">3</span>B        <span class="token number">4</span>      <span class="token number">7</span>C        <span class="token number">5</span>      <span class="token number">9</span>In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mappingOut<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token string">'vowel'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token string">'consonant'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token string">'consonant'</span><span class="token punctuation">&#125;</span>In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>mapping<span class="token punctuation">)</span><span class="token comment">#索引指代被操作的对象的分组依据。</span>Out<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> A        vowelB    consonantC    consonantdtype<span class="token punctuation">:</span> <span class="token builtin">object</span>    <span class="token comment">#这里的映射后后面的哪个aggfunc不太一样</span>In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>mapping<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            data1  data2consonant     <span class="token number">12</span>     <span class="token number">19</span>vowel          <span class="token number">3</span>      <span class="token number">8</span>In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>mapping<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            data1  data2consonant     <span class="token number">12</span>     <span class="token number">19</span>vowel          <span class="token number">3</span>      <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>任意 Python 函数。你可以将任意 Python 函数传入 groupby ，函数映射到索引，然后新的分组输出</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210911201638120.png" alt="image-20210911201638120"></p><p>我才发现，str list这些原来是顶层对象，也有一般实例的方法，比如list.append是存在的。</p></li><li><p>此外，任意之前有效的键都可以组合起来进行分组，从而返回一个<strong>多级索引</strong>的分组结果</p><p>而且好像是按列表順序組合多級索引的。</p><p>mapping = {‘A’: ‘vowel’, ‘B’: ‘consonant’, ‘C’: ‘consonant’}</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210911202123221.png" alt="image-20210911202123221"></p><p>pd.astype(str) #强制转换数据类型。</p></li></ol><h3 id="数据透视表"><a href="#数据透视表" class="headerlink" title="数据透视表"></a>数据透视表</h3><p>我们已经介绍过 GroupBy 抽象类是如何探索数据集内部的关联性的了。</p><p>数据透视表（pivot table）是一种类似的操作方法，常见于 Excel 与类似的表格应用中。</p><p>数据透视表更像是一种多维的 GroupBy 累计操作。也就是说，虽然你也可以分割 - 应用 - 组合，但是分割与组合不是发生在一维索引上，而是在二维网格上（行列同时分组）。</p><p>import seaborn as sns<br>titanic = sns.load_dataset(‘titanic’)    #翻墙可以下到</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#关于显示的设定</span><span class="token comment"># 显示所有列</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.max_columns'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.max_columns'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">#最多显示5列</span><span class="token comment"># 显示所有行</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.max_rows'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.max_rows'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">#最多显示10行</span><span class="token comment">#显示小数位数</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.float_format'</span><span class="token punctuation">,</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'%.2f'</span><span class="token operator">%</span>x<span class="token punctuation">)</span> <span class="token comment">#两位</span><span class="token comment">#显示宽度</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.width'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#这是以前的做法，不过注意，分组的时候是不是列表也会有影响。</span>titanic<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'sex'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'survived'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sexfemale    <span class="token number">0.742038</span>male      <span class="token number">0.188908</span>Name<span class="token punctuation">:</span> survived<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64        titanic<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'sex'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'survived'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span>         survivedsex             female  <span class="token number">0.742038</span>male    <span class="token number">0.188908</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然这样就可以更清晰地观察乘客性别、船舱等级对其是否生还的影响，但是代码看上去有点 <strong>复杂</strong>。尽管这个管道命令的每一步都是前面介绍过的，但是要理解这个长长的语句可不是那么容易的事，这个适合就到数据透视表出场的时候了。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">titanic<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'survived'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token string">'mean'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#还是强调一点就是unstack他首先解压的是最后面的那一列，也就是这里的‘class’</span>Out<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">class</span>      <span class="token class-name">First</span>    Second     Thirdsex                                 female  <span class="token number">0.968085</span>  <span class="token number">0.921053</span>  <span class="token number">0.500000</span>male    <span class="token number">0.368852</span>  <span class="token number">0.157407</span>  <span class="token number">0.135447</span><span class="token comment">#对比一下</span>titanic<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span><span class="token string">'survived'</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token string">'sex'</span><span class="token punctuation">,</span>columns <span class="token operator">=</span> <span class="token string">'class'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">class</span>      <span class="token class-name">First</span>    Second     Thirdsex                                 female  <span class="token number">0.968085</span>  <span class="token number">0.921053</span>  <span class="token number">0.500000</span>male    <span class="token number">0.368852</span>  <span class="token number">0.157407</span>  <span class="token number">0.135447</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这行代码可读性更强，而且取得的结果也一样。</p><p><strong>多级数据透视表</strong></p><p>这里面有一个cut函数，可以将数据分段并用相应的数据段来替代，不过左开右闭。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">age <span class="token operator">=</span> pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>titanic<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ageOut<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token punctuation">(</span><span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">80.0</span><span class="token punctuation">]</span><span class="token number">1</span>      <span class="token punctuation">(</span><span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">80.0</span><span class="token punctuation">]</span><span class="token number">2</span>      <span class="token punctuation">(</span><span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">80.0</span><span class="token punctuation">]</span><span class="token number">3</span>      <span class="token punctuation">(</span><span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">80.0</span><span class="token punctuation">]</span><span class="token number">4</span>      <span class="token punctuation">(</span><span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">80.0</span><span class="token punctuation">]</span>           <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token number">886</span>    <span class="token punctuation">(</span><span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">80.0</span><span class="token punctuation">]</span><span class="token number">887</span>    <span class="token punctuation">(</span><span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">80.0</span><span class="token punctuation">]</span><span class="token number">888</span>             NaN<span class="token number">889</span>    <span class="token punctuation">(</span><span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">80.0</span><span class="token punctuation">]</span><span class="token number">890</span>    <span class="token punctuation">(</span><span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">80.0</span><span class="token punctuation">]</span>Name<span class="token punctuation">:</span> age<span class="token punctuation">,</span> Length<span class="token punctuation">:</span> <span class="token number">891</span><span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> categoryCategories <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> interval<span class="token punctuation">[</span>int64<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">]</span>                                             <span class="token comment">#然后就可以</span>titanic<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span><span class="token string">'survived'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">,</span> age<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">class</span>               <span class="token class-name">First</span>    Second     Thirdsex    age                                   female <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span>   <span class="token number">0.909091</span>  <span class="token number">1.000000</span>  <span class="token number">0.511628</span>       <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span>  <span class="token number">0.972973</span>  <span class="token number">0.900000</span>  <span class="token number">0.423729</span>male   <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span>   <span class="token number">0.800000</span>  <span class="token number">0.600000</span>  <span class="token number">0.215686</span>       <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span>  <span class="token number">0.375000</span>  <span class="token number">0.071429</span>  <span class="token number">0.133663</span><span class="token comment">#这里可以猜出来，第一个选的是数据，第二个是索引，第三个就是列。</span><span class="token comment">#但是这里自动求了个平均（后面讲）</span>        <span class="token comment">#这里又引出另一个分箱函数，按照分位数（默认等于2）来进行分箱</span>fare <span class="token operator">=</span> pd<span class="token punctuation">.</span>qcut<span class="token punctuation">(</span>titanic<span class="token punctuation">[</span><span class="token string">'fare'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>fareOut<span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>       <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.001</span><span class="token punctuation">,</span> <span class="token number">14.454</span><span class="token punctuation">]</span><span class="token number">1</span>      <span class="token punctuation">(</span><span class="token number">14.454</span><span class="token punctuation">,</span> <span class="token number">512.329</span><span class="token punctuation">]</span><span class="token number">2</span>       <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.001</span><span class="token punctuation">,</span> <span class="token number">14.454</span><span class="token punctuation">]</span><span class="token number">3</span>      <span class="token punctuation">(</span><span class="token number">14.454</span><span class="token punctuation">,</span> <span class="token number">512.329</span><span class="token punctuation">]</span><span class="token number">4</span>       <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.001</span><span class="token punctuation">,</span> <span class="token number">14.454</span><span class="token punctuation">]</span>             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token number">886</span>     <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.001</span><span class="token punctuation">,</span> <span class="token number">14.454</span><span class="token punctuation">]</span><span class="token number">887</span>    <span class="token punctuation">(</span><span class="token number">14.454</span><span class="token punctuation">,</span> <span class="token number">512.329</span><span class="token punctuation">]</span><span class="token number">888</span>    <span class="token punctuation">(</span><span class="token number">14.454</span><span class="token punctuation">,</span> <span class="token number">512.329</span><span class="token punctuation">]</span><span class="token number">889</span>    <span class="token punctuation">(</span><span class="token number">14.454</span><span class="token punctuation">,</span> <span class="token number">512.329</span><span class="token punctuation">]</span><span class="token number">890</span>     <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.001</span><span class="token punctuation">,</span> <span class="token number">14.454</span><span class="token punctuation">]</span>Name<span class="token punctuation">:</span> fare<span class="token punctuation">,</span> Length<span class="token punctuation">:</span> <span class="token number">891</span><span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> categoryCategories <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> interval<span class="token punctuation">[</span>float64<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.001</span><span class="token punctuation">,</span> <span class="token number">14.454</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">14.454</span><span class="token punctuation">,</span> <span class="token number">512.329</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#感觉这个函数比前面那个groupby清楚啊                                            </span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.max_columns'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>titanic<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span><span class="token string">'survived'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">,</span> age<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fare<span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">:</span> fare            <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.001</span><span class="token punctuation">,</span> <span class="token number">14.454</span><span class="token punctuation">]</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token number">14.454</span><span class="token punctuation">,</span> <span class="token number">512.329</span><span class="token punctuation">]</span>          <span class="token keyword">class</span>                      <span class="token class-name">First</span>    Second  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            Second     Thirdsex    age                                  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                            female <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span>               NaN  <span class="token number">1.000000</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>          <span class="token number">1.000000</span>  <span class="token number">0.318182</span>       <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span>              NaN  <span class="token number">0.880000</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>          <span class="token number">0.914286</span>  <span class="token number">0.391304</span>male   <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span>               NaN  <span class="token number">0.000000</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>          <span class="token number">0.818182</span>  <span class="token number">0.178571</span>       <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span>              <span class="token number">0.0</span>  <span class="token number">0.098039</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>          <span class="token number">0.030303</span>  <span class="token number">0.192308</span><span class="token punctuation">[</span><span class="token number">4</span> rows x <span class="token number">6</span> columns<span class="token punctuation">]</span><span class="token comment">#结果是一个四位索引。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其他的一些选项</strong></p><p> <strong>fill_value 和 dropna</strong> 这两个参数用于处理缺失值，用法很简单，我们将在后面的示例中演示其用法。</p><p><strong>aggfunc</strong> 参数用于设置累计函数类型，默认值是均值（ mean ），可以用一些常见的字符串（ ‘sum’ 、 ‘mean’ 、 ‘count’ 、 ‘min’ 、 ‘max’ 等）表示，也可以用标准的累计函数（ np.sum() 、 min() 、 sum() 等）表示。</p><p>也可以用字典为不同的列指定不同的累计函数，函数列表。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210911224133020.png" alt="image-20210911224133020"></p><p>这个函数和groupby的分组不太一样。但是思想类似。</p><p>不过上面的是以索引形式，这个是更高level的columns。</p><p>这里忽略了一个参数 values 。当我们为 aggfunc 指定映射关系的时候，待透视的数值就已经确定了。</p><p><strong>margins</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210911224450628.png" alt="image-20210911224450628"></p><p> margin 的标签可以通过 margins_name 参数进行自定义，默认值是 “<strong>All</strong>“ 。</p><p>3.10.4 <strong>美国人口</strong></p><p>使用%matplotlib后，可以直接在生成的pivot_table后加.plot()来生成图表！！</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210911235307984.png" alt="image-20210911235307984"></p><p>到时候回来再看看吧。。</p><h2 id="向量化字符串操作"><a href="#向量化字符串操作" class="headerlink" title="向量化字符串操作"></a>向量化字符串操作</h2><p>使用 Python 的一个优势就是<strong>字符串处理起来比较容易</strong>。在此基础上创建的 Pandas 同样提供了一系列 向量化字符串操作（vectorized string operation），它们都是在处理（清洗）现实工作中的数据时不可或缺的功能</p><p>假如数据中出现了缺失值，那么很多时候就会引起异常</p><p>Pandas 为包含字符串的 Series 和 Index 对象提供的 <strong>str 属性</strong> 堪称两全其美的方法，它既<br>可以满足向量化字符串操作的需求，又可以<strong>正确地处理缺失值</strong>。例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">namesOut<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>    peter<span class="token number">1</span>     Paul<span class="token number">2</span>     <span class="token boolean">None</span><span class="token number">3</span>     MARY<span class="token number">4</span>    gUIDOdtype<span class="token punctuation">:</span> <span class="token builtin">object</span>    names<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>    Peter<span class="token number">1</span>     Paul<span class="token number">2</span>     <span class="token boolean">None</span><span class="token number">3</span>     Mary<span class="token number">4</span>    Guidodtype<span class="token punctuation">:</span> <span class="token builtin">object</span><span class="token comment">#None这个缺失值被跳过了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><p>包括了python，re模块，和自带的方法</p><p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20210912004551786.png" alt="image-20210912004551786"></p><p>但是有些方法返回数值，比如len</p><p>有些方法返回布尔值，比如startwith</p><p>还有些方法返回列表或其他复合值</p><p>在接下来的内容中，我们将进一步学习这类由列表元素构成的 Series <strong>（series-of-lists）</strong>对象。</p><p><strong>正则化方法</strong></p><p>更好的是，str同样支持一些<strong>正则化方法</strong>，采用re模块的语法，太方便了</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210912102710571.png" alt="image-20210912102710571"></p><p>里面<strong>参数就填正则化式子（字符串）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210912102822647.png" alt="image-20210912102822647"></p><p><strong>其他字符串方法</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210912103033522.png" alt="image-20210912103033522"></p><p><strong>取值</strong>、<strong>切片</strong></p><p>slice取的是字符，比如df.str.slice(0,3)取的是前三个字符。等价于df.str[0:3]</p><p>df.str.get(i) 与 df.str[i] 的按索引取值效果类似</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">get<span class="token punctuation">(</span><span class="token punctuation">)</span> 与 <span class="token builtin">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 操作还可以在 split<span class="token punctuation">(</span><span class="token punctuation">)</span> 操作之后使用。例如，要获取每个姓名的姓（last name），可以结合使用 split<span class="token punctuation">(</span><span class="token punctuation">)</span> 与 get<span class="token punctuation">(</span><span class="token punctuation">)</span> ：monteOut<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>    Graham Chapman<span class="token number">1</span>       John Cleese<span class="token number">2</span>     Terry Gilliam<span class="token number">3</span>         Eric Idle<span class="token number">4</span>       Terry Jones<span class="token number">5</span>     Michael Palindtype<span class="token punctuation">:</span> <span class="token builtin">object</span>    monte<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>    Chapman<span class="token number">1</span>     Cleese<span class="token number">2</span>    Gilliam<span class="token number">3</span>       Idle<span class="token number">4</span>      Jones<span class="token number">5</span>      Palindtype<span class="token punctuation">:</span> <span class="token builtin">object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>指标变量</strong></p><p>另一个需要多花点儿时间解释的是 get_dummies() 方法。当你的数据有一列包含了若干已被编码的指标（coded indicator）时，这个方法就能派上用场了。(转换成独热码)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">假设有一个包含了某种编码信息的数据集，如 A<span class="token operator">=</span> 出生在美国、B<span class="token operator">=</span> 出生在英国、C<span class="token operator">=</span> 喜欢奶酪、D<span class="token operator">=</span> 喜欢午餐肉：full_monteOut<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span>              name   info<span class="token number">0</span>  Graham Chapman  B<span class="token operator">|</span>C<span class="token operator">|</span>D<span class="token number">1</span>     John Cleese    B<span class="token operator">|</span>D<span class="token number">2</span>   Terry Gilliam    A<span class="token operator">|</span>C<span class="token number">3</span>       Eric Idle    B<span class="token operator">|</span>D<span class="token number">4</span>     Terry Jones    B<span class="token operator">|</span>C<span class="token number">5</span>   Michael Palin  B<span class="token operator">|</span>C<span class="token operator">|</span>Dfull_monte<span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span> <span class="token comment">#选择分隔符</span>Out<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    A  B  C  D<span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">1</span><span class="token number">1</span>  <span class="token number">0</span>  <span class="token number">1</span>  <span class="token number">0</span>  <span class="token number">1</span><span class="token number">2</span>  <span class="token number">1</span>  <span class="token number">0</span>  <span class="token number">1</span>  <span class="token number">0</span><span class="token number">3</span>  <span class="token number">0</span>  <span class="token number">1</span>  <span class="token number">0</span>  <span class="token number">1</span><span class="token number">4</span>  <span class="token number">0</span>  <span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">0</span><span class="token number">5</span>  <span class="token number">0</span>  <span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.11.3<strong>案例</strong></p><p>recipe的每个元素的结构：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210912105340844.png" alt="image-20210912105340844"></p><p><code>recipes.ingredients.str.len().describe()</code>  看看菜单食材的名字长度</p><p><code> recipes.name[np.argmax(recipes.ingredients.str.len())]</code>看看这个拥有最长食材列表的究竟是哪道菜</p><p>``recipes.description.str.contains(‘[Bb]reakfast’).sum()` 看看哪些食谱是早餐。</p><p>#以后再看吧，太难了</p><h2 id="处理时间序列"><a href="#处理时间序列" class="headerlink" title="处理时间序列"></a>处理时间序列</h2><p> Pandas 最初是为金融模型而创建的，因此它拥有一些功能非常强大的日期、时间、带时间索引数据的处理工具</p><ul><li><p>时间戳表示某个具体的时间点（例如 2015 年 7 月 4 日上午 7 点）。</p></li><li><p>时间间隔与周期表示<strong>开始时间点与结束时间点之间的时间长度</strong>，例如 2015 年（指的是<br>2015 年 1 月 1 日至 2015 年 12 月 31 日这段时间间隔）。</p><p>周期通常是指一种特殊形式的时间间隔，<strong>每个间隔长度相同</strong>，彼此之间不会重叠（例如，以 24 小时为周期构成每一天）。</p></li><li><p>时间增量（time delta）或持续时间（duration）表示精确的时间长度（例如，某程序运行持续时间 22.56 秒）</p></li></ul><h3 id="python原生工具"><a href="#python原生工具" class="headerlink" title="python原生工具"></a>python原生工具</h3><p>在开始介绍 Pandas 的时间序列工具之前，我们先简单介绍一下 <strong>Python</strong> 处理日期与时间数据的工具。</p><p>尽管 Pandas 提供的时间序列工具更适合用来处理数据科学问题，但是了解 Pandas 与 Python 标准库以及第三方库中的其他时间序列工具之间的关联性将大有裨益。</p><ol><li><strong>datatime 和 dateutil</strong></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimedatetime<span class="token punctuation">(</span>year<span class="token operator">=</span><span class="token number">2015</span><span class="token punctuation">,</span> month<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> day<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>datetime<span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#可以利用dateutil对字符串格式的日期进行正确解析</span><span class="token keyword">from</span> dateutil <span class="token keyword">import</span> parserdate <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">"4th of July, 2015"</span><span class="token punctuation">)</span>dateOut<span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> Python 的 datetime 文档（<a href="https://docs.python.org/3/library/datetime.html%EF%BC%89">https://docs.python.org/3/library/datetime.html）</a></p><p> dateutil 的其他日期功能可以通过在线文档（<a href="http://labix.org/python-dateutil%EF%BC%89%E5%AD%A6%E4%B9%A0">http://labix.org/python-dateutil）学习</a></p><p> pytz （<a href="http://pytz.sourceforge.net/%EF%BC%89%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%B7%A5%E5%85%B7%E8%A7%A3%E5%86%B3%E4%BA%86%E7%BB%9D%E5%A4%A7%E5%A4%9A%E6%95%B0%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE%E9%83%BD%E4%BC%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%9A%BE%E9%A2%98%EF%BC%9A**%E6%97%B6%E5%8C%BA">http://pytz.sourceforge.net/），这个工具解决了绝大多数时间序列数据都会遇到的难题：**时区</a>**</p><p>datetime 和 dateutil 模块在灵活性与易用性方面都表现出色，数量大时，速度就会比较慢。</p><ol start="2"><li><strong>基于NumPy的datetime64类型（Numerical Python）</strong></li></ol><p>datetime64 类型将日期编码为 <strong>64 位整数</strong>，这样可以让日期数组非常紧凑（节省内存）。<br>datetime64 需要<strong>在设置日期时确定具体的输入类型</strong>。</p><p>因为 NumPy 的 datetime64 数组内元素的类型是统一的，所以这种数组的运算速度会比Python 的 datetime 对象的运算速度快很多（向量化计算）</p><p>NumPy 的 datetime64 文档（<a href="http://docs.scipy.org/doc/numpy/reference/arrays.datetime.html%EF%BC%89%E6%80%BB%E7%BB%93%E4%BA%86%E6%89%80%E6%9C%89%E6%94%AF%E6%8C%81%E7%9B%B8%E5%AF%B9%E4%B8%8E%E7%BB%9D%E5%AF%B9%E6%97%B6%E9%97%B4%E8%B7%A8%E5%BA%A6%E7%9A%84%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%A5%E6%9C%9F%E5%8D%95%E4%BD%8D%E6%A0%BC%E5%BC%8F%E4%BB%A3%E7%A0%81">http://docs.scipy.org/doc/numpy/reference/arrays.datetime.html）总结了所有支持相对与绝对时间跨度的时间与日期单位格式代码</a></p><p>datetime64内的位数是固定的，追求的精度越高，能表示的<strong>精度越高，能表示的范围就越小</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210912114638942.png" alt="image-20210912114638942"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210912114650874.png" alt="image-20210912114650874"></p><p>一般工作中用的就是ns，因为用它来表示时间范围精度可以满足绝大部分需求。</p><p>虽然 datetime64 弥补了 Python 原生的 datetime 类型的不足，但它缺少了许多 datetime （尤其是 dateutil ）原本具备的便捷方法与函数</p><ol start="3"><li>Pandas的日期与时间工具：<strong>理想与现实的最佳解决方案</strong></li></ol><p>Pandas 所有关于日期与时间的处理方法全部都是通过 <strong>Timestamp 对象</strong>实现的。</p><p>它利用numpy.datetime64 的<strong>有效存储和向量化接口</strong>将 datetime 和 dateutil 的<strong>易用性</strong>有机结合起来。</p><p>Pandas 通过一组 Timestamp 对象就可以创建一个可以作为 Series 或 DataFrame 索引的DatetimeIndex，既有向量化的高效，又可以灵活的处理数据。</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>Pandas 时间序列工具非常适合用来处理带时间戳的索引数据，支持切片，取值等。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">index <span class="token operator">=</span> pd<span class="token punctuation">.</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2014-07-04'</span><span class="token punctuation">,</span> <span class="token string">'2014-08-04'</span><span class="token punctuation">,</span><span class="token string">'2015-07-04'</span><span class="token punctuation">,</span> <span class="token string">'2015-08-04'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span>index<span class="token punctuation">)</span>dataOut<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2014</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">04</span>    <span class="token number">0</span><span class="token number">2014</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">04</span>    <span class="token number">1</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">04</span>    <span class="token number">2</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">04</span>    <span class="token number">3</span>dtype<span class="token punctuation">:</span> int64data<span class="token punctuation">[</span><span class="token string">'2014-07-04'</span><span class="token punctuation">:</span><span class="token string">'2015-07-04'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2014</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">04</span>    <span class="token number">0</span><span class="token number">2014</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">04</span>    <span class="token number">1</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">04</span>    <span class="token number">2</span>dtype<span class="token punctuation">:</span> int64data<span class="token punctuation">[</span><span class="token string">'2015'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2015</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">04</span>    <span class="token number">2</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">04</span>    <span class="token number">3</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间戳数据—— Timestamp 类型。本质上是Python 的原生 datetime 类型的替代品。对应的索引数据结构是 DatetimeIndex 。</li><li>时间周期数据—— Period 类型。将固定频率的时间间隔进行编码。对应的索引数据结构是 PeriodIndex 。</li><li>时间增量或持续时间—— Timedelta 类型代替 Python原生 datetime.timedelta 类型的高性能数据结构。对应的索引数据结构是 TimedeltaIndex 。</li></ul><p><strong>以上都基于np.datetime64类型</strong></p><p>最基础的日期 / 时间对象是 Timestamp 和 DatetimeIndex 。这两种对象可以直接使用</p><p> pd.to_datetime() 函数，它可以解析许多日期与时间格式,传递一个日期会返回一个Timestamp 类型，传递一个时间序列会返回一个 DatetimeIndex 类型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimedates <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token punctuation">[</span>datetime<span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'4th of July, 2015'</span><span class="token punctuation">,</span><span class="token string">'2015-Jul-6'</span><span class="token punctuation">,</span> <span class="token string">'07-07-2015'</span><span class="token punctuation">,</span> <span class="token string">'20150708'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#这个厉害</span>datesOut<span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2015-07-03'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-04'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-06'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-07'</span><span class="token punctuation">,</span>               <span class="token string">'2015-07-08'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment"># 用带分秒的康康</span>dates <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token punctuation">[</span>datetime<span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'4th of July, 2015'</span><span class="token punctuation">,</span><span class="token string">'2015-Jul-6'</span><span class="token punctuation">,</span> <span class="token string">'07-07-2015'</span><span class="token punctuation">,</span> <span class="token string">'20150708'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>datesOut<span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2015-07-03 18:30:00'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-04 00:00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2015-07-06 00:00:00'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-07 00:00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2015-07-08 00:00:00'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>dates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Timestamp<span class="token punctuation">(</span><span class="token string">'2015-07-03 18:30:00'</span><span class="token punctuation">)</span><span class="token comment">#单个就是TimeStamp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> DatetimeIndex 类型都可以通过 to_period() 方法和一个频率代码转换成 PeriodIndex类型。下面用 ‘D’ 将数据转换成单日的时间序列</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dates<span class="token punctuation">.</span>to_period<span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">:</span> PeriodIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2015-07-03'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-04'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-06'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-07'</span><span class="token punctuation">,</span>             <span class="token string">'2015-07-08'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            dtype<span class="token operator">=</span><span class="token string">'period[D]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token comment">#我的小时和秒都没了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当用一个日期减去另一个日期时，返回的结果是 TimedeltaIndex 类型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dates <span class="token operator">-</span> dates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span><span class="token punctuation">:</span> TimedeltaIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'0 days 00:00:00'</span><span class="token punctuation">,</span> <span class="token string">'0 days 05:30:00'</span><span class="token punctuation">,</span> <span class="token string">'2 days 05:30:00'</span><span class="token punctuation">,</span>                <span class="token string">'3 days 05:30:00'</span><span class="token punctuation">,</span> <span class="token string">'4 days 05:30:00'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               dtype<span class="token operator">=</span><span class="token string">'timedelta64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="间隔和频率"><a href="#间隔和频率" class="headerlink" title="间隔和频率"></a>间隔和频率</h3><p>为了能更简便地创建有规律的时间序列，Pandas 提供了一些方法： pd.date_range() 可以处理时间戳、 pd.period_range() 可以处理周期、 pd.timedelta_range() 可以处理时间间隔。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">'2015-07-03'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-10'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2015-07-03'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-04'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-05'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-06'</span><span class="token punctuation">,</span>               <span class="token string">'2015-07-07'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-08'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-09'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-10'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token comment">#左闭右闭，默认freq是‘D’</span>pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">'2015-07-03'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2015-07-03'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-04'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-05'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-06'</span><span class="token punctuation">,</span>               <span class="token string">'2015-07-07'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-08'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-09'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-10'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token comment">#第二种方法</span>pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">'2015-07-03'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'H'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2015-07-03 00:00:00'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-03 01:00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2015-07-03 02:00:00'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-03 03:00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2015-07-03 04:00:00'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-03 05:00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2015-07-03 06:00:00'</span><span class="token punctuation">,</span> <span class="token string">'2015-07-03 07:00:00'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'H'</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>period_range<span class="token punctuation">(</span><span class="token string">'2015-07'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'M'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">:</span> PeriodIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2015-07'</span><span class="token punctuation">,</span> <span class="token string">'2015-08'</span><span class="token punctuation">,</span> <span class="token string">'2015-09'</span><span class="token punctuation">,</span> <span class="token string">'2015-10'</span><span class="token punctuation">,</span> <span class="token string">'2015-11'</span><span class="token punctuation">,</span> <span class="token string">'2015-12'</span><span class="token punctuation">,</span>             <span class="token string">'2016-01'</span><span class="token punctuation">,</span> <span class="token string">'2016-02'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            dtype<span class="token operator">=</span><span class="token string">'period[M]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'M'</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>timedelta_range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'H'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">]</span><span class="token punctuation">:</span> TimedeltaIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'0 days 00:00:00'</span><span class="token punctuation">,</span> <span class="token string">'0 days 01:00:00'</span><span class="token punctuation">,</span> <span class="token string">'0 days 02:00:00'</span><span class="token punctuation">,</span>                <span class="token string">'0 days 03:00:00'</span><span class="token punctuation">,</span> <span class="token string">'0 days 04:00:00'</span><span class="token punctuation">,</span> <span class="token string">'0 days 05:00:00'</span><span class="token punctuation">,</span>                <span class="token string">'0 days 06:00:00'</span><span class="token punctuation">,</span> <span class="token string">'0 days 07:00:00'</span><span class="token punctuation">,</span> <span class="token string">'0 days 08:00:00'</span><span class="token punctuation">,</span>                <span class="token string">'0 days 09:00:00'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               dtype<span class="token operator">=</span><span class="token string">'timedelta64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'H'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>掌握 Pandas 频率代码是使用所有这些时间序列创建方法的必要条件。</p><p>Pandas 时间序列工具的基础是时间频率或偏移量（offset）代码。我们可以用这些代码设置任意需要的时间间隔。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210912132206207.png" alt="image-20210912132206207"></p><p>发现有一些是period，有一些是时间戳</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210912132256107.png" alt="image-20210912132256107"></p><p>在这些代码的基础上，还可以将频率组合起来创建的新的周期</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>timedelta_range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">"2H30T"</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">:</span> TimedeltaIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'0 days 00:00:00'</span><span class="token punctuation">,</span> <span class="token string">'0 days 02:30:00'</span><span class="token punctuation">,</span> <span class="token string">'0 days 05:00:00'</span><span class="token punctuation">,</span>                <span class="token string">'0 days 07:30:00'</span><span class="token punctuation">,</span> <span class="token string">'0 days 10:00:00'</span><span class="token punctuation">,</span> <span class="token string">'0 days 12:30:00'</span><span class="token punctuation">,</span>                <span class="token string">'0 days 15:00:00'</span><span class="token punctuation">,</span> <span class="token string">'0 days 17:30:00'</span><span class="token punctuation">,</span> <span class="token string">'0 days 20:00:00'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               dtype<span class="token operator">=</span><span class="token string">'timedelta64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'150T'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重新取样、迁移和窗口"><a href="#重新取样、迁移和窗口" class="headerlink" title="重新取样、迁移和窗口"></a>重新取样、迁移和窗口</h4><p>用日期和时间直观地组织与获取数据是 Pandas 时间序列工具最重要的功能之一。</p><p>Pandas不仅支持普通索引功能（合并数据时自动索引对齐、直观的数据切片和取值方法等），还专为时间序列提供了额外的操作。</p><p>由于 Pandas 最初是为金融数据模型服务的，因此可以用它非常方便地获取金融数据。例如， pandas-datareader 程序包知道如何从一些可用的数据源导入金融数据，包含 Yahoo 财经、Google 财经和其他数据源。</p><p><a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html">更多资料</a></p><ol><li>重新取样与频率转换</li></ol><p>处理时间序列数据时，经常需要按照新的频率（更高频率、更低频率）对数据进行重新取样。</p><p>你可以通过 resample() 方法解决这个问题，或者用更简单的 asfreq() 方法。</p><p> resample() 方法是以数据累计（data aggregation）为基础，而asfreq() 方法是以数据选择（data selection）为基础。</p><p>（由于下载数据出了问题，只能截图）原始数据👇</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210912145112857.png" alt="image-20210912145112857"></p><p>对于收盘价进行可视化结果👇</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210912145127584.png" alt="image-20210912145127584"></p><p><strong>向后取样，和向前取样大体相同。</strong></p><p>goog.resample(‘BA’).mean().plot(style=’:’)</p><p>goog.asfreq(‘BA’).plot(style=’–’);</p><p>重选频率（BA是每个年末）以后，如图，但是注意取样方式的差异，上一条是平均值，下一条是最后一个工作日。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210912145205838.png" alt="image-20210912145205838"></p><p>感觉没看懂，不管了，以后再查resample和asfreq吧，还要配合一些填充。</p><ol start="2"><li>时间迁移</li></ol><p>另一种常用的时间序列操作是对数据按时间进行迁移。Pandas 有两种解决这类问题的方法： shift() 和 tshift() 。简单来说， <strong>shift() 就是迁移数据，而 tshift() 就是迁移索引</strong>。两种方法都是按照频率代码进行迁移</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210912151509737.png" alt="image-20210912151509737"></p><p> shift(900) 将数据向前推进了 900 天，这样图形中的一段就消失了（最左侧就变成了缺失值），而 tshift(900) 方法是将时间索引值向前推进了 900 天。</p><ol start="3"><li>移动时间窗口</li></ol><p>移动统计值（rolling statistics）。这些指标可以通过 Series 和 DataFrame 的 rolling() 属性来实现，它会返回与 groupby 操作类似的结果（详情请参见 3.9 节）。移动视图（rolling view）使得许多累计操作成为可能。</p><p><strong>3.12.7 案例：美国西雅图自行车统计数据的可视化。</strong></p><h2 id="高性能Pandas-eval-、query"><a href="#高性能Pandas-eval-、query" class="headerlink" title="高性能Pandas:eval()、query()"></a>高性能Pandas:eval()、query()</h2><p>Python 数据科学生态环境的强大力量建立在 NumPy 与 Pandas 的基础之上，并通过直观的语法将基本操作转换成 C 语言：在 NumPy 里是向量化 / 广播运算，在 Pandas 里是分组型的运算。虽然这些抽象功能可以简洁高效地解决许多问题，但是它们经常需要<strong>创建临时中间对象，这样就会占用大量的计算时间与内存。</strong></p><p>Pandas 从 0.13 版开始（2014 年 1 月）就引入了实验性工具，让用户可以直接运行 C 语言速度的操作，不需要十分费力地配置中间数组。它们就是 eval() 和 query() 函数，都依赖于 Numexpr (<a href="https://github.com/pydata/numexpr">https://github.com/pydata/numexpr</a>) 程序包。</p><h3 id="设计动机：复合代数式"><a href="#设计动机：复合代数式" class="headerlink" title="设计动机：复合代数式"></a>设计动机：复合代数式</h3><p>在进行复合代数式运算时，例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">rng <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>x <span class="token operator">=</span> rng<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>y <span class="token operator">=</span> rng<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>mask <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token comment">#在进行这个运算的时候，由于Numpy会计算每一个代数子式，相当于</span>tmp1 <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span>tmp2 <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span>mask <span class="token operator">=</span> tmp1 <span class="token operator">&amp;</span> tmp2<span class="token comment">#每段中间过程都需要显式地分配内存。Numexpr 程序库可以让你在不为中间过程分配全部内</span><span class="token comment">#存的前提下，完成元素到元素的复合代数式运算。</span><span class="token keyword">import</span> numexprmask_numexpr <span class="token operator">=</span> numexpr<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">'(x > 0.5) &amp; (y &lt; 0.5)'</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>allclose<span class="token punctuation">(</span>mask<span class="token punctuation">,</span> mask_numexpr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>马上要介绍的 Pandas 的 eval() 和 query()工具其实也是<strong>基于 Numexpr 实现</strong>的。</p><h3 id="eval实现高性能运算"><a href="#eval实现高性能运算" class="headerlink" title="eval实现高性能运算"></a>eval实现高性能运算</h3><p>就我自己试验的结果，还不如不优化。。可能是pandas已经内置了更厉害的吧。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdnrows<span class="token punctuation">,</span> ncols <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">100</span>rng <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> df3<span class="token punctuation">,</span> df4 <span class="token operator">=</span> <span class="token punctuation">(</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>rng<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>nrows<span class="token punctuation">,</span> ncols<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>timeit df1 <span class="token operator">+</span> df2 <span class="token operator">+</span> df3 <span class="token operator">+</span> df4<span class="token number">100</span> ms ± <span class="token number">15.4</span> ms per loop <span class="token punctuation">(</span>mean ± std<span class="token punctuation">.</span> dev<span class="token punctuation">.</span> of <span class="token number">7</span> runs<span class="token punctuation">,</span> <span class="token number">10</span> loops each<span class="token punctuation">)</span><span class="token operator">%</span>timeit pd<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">'df1 + df2 + df3 + df4'</span><span class="token punctuation">)</span><span class="token number">99.2</span> ms ± <span class="token number">2.41</span> ms per loop <span class="token punctuation">(</span>mean ± std<span class="token punctuation">.</span> dev<span class="token punctuation">.</span> of <span class="token number">7</span> runs<span class="token punctuation">,</span> <span class="token number">10</span> loops each<span class="token punctuation">)</span><span class="token comment">#而且内存消耗更少</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>支持的运算</strong>：</p><ol><li><p>算术运算符</p><p> pd.eval() 支持所有的算术运算符</p><p>np.allclose()这个是用来确认两者相等的。</p></li><li><p>比较运算符</p><p>支持所有的比较运算符，包括链式代数式</p></li><li><p> 位运算符</p></li></ol><p>   另外，你还可以在布尔类型的代数式中使用 and 和 or 等字面值</p><p>   <code>result3 = pd.eval(&#39;(df1 &lt; 0.5) and (df2 &lt; 0.5) or (df3 &lt; df4)&#39;)</code></p><ol start="4"><li> 对象属性与索引</li></ol><p>   可以通过 obj.attr 语法获取对象属性，通过 obj[index] 语法获取对象索引</p>   <pre class="line-numbers language-python" data-language="python"><code class="language-python">result1 <span class="token operator">=</span> df2<span class="token punctuation">.</span>T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> df3<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>result2 <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">'df2.T[0] + df3.iloc[1]'</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>allclose<span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span>——<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li><p>目前 pd.eval() 还不支持函数调用、条件语句、循环以及更复杂的运算。如果你想要进行这些运算，可以借助 Numexpr 来实现。</p></li><li><p>用DataFrame.eval()实现列间计算。</p></li></ol><p>由于 pd.eval() 是 Pandas 的顶层函数，因此 DataFrame 有一个 eval() 方法可以做类似的运算。使用 eval() 方法的好处是可以借助列名称进行运算，示例如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>rng<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           A         B         C<span class="token number">0</span>  <span class="token number">0.375506</span>  <span class="token number">0.406939</span>  <span class="token number">0.069938</span><span class="token number">1</span>  <span class="token number">0.069087</span>  <span class="token number">0.235615</span>  <span class="token number">0.154374</span><span class="token number">2</span>  <span class="token number">0.677945</span>  <span class="token number">0.433839</span>  <span class="token number">0.652324</span><span class="token number">3</span>  <span class="token number">0.264038</span>  <span class="token number">0.808055</span>  <span class="token number">0.347197</span><span class="token number">4</span>  <span class="token number">0.589161</span>  <span class="token number">0.252418</span>  <span class="token number">0.557789</span>result1 <span class="token operator">=</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">+</span> df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>result2 <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"(df.A + df.B) / (df.C - 1)"</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>allclose<span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">True</span>        <span class="token comment"># 不知道为啥还是负优化。。。还是这个inplace的用法有价值</span>df<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">'D = (A + B) / C'</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           A         B         C          D<span class="token number">0</span>  <span class="token number">0.375506</span>  <span class="token number">0.406939</span>  <span class="token number">0.069938</span>  <span class="token number">11.187620</span><span class="token number">1</span>  <span class="token number">0.069087</span>  <span class="token number">0.235615</span>  <span class="token number">0.154374</span>   <span class="token number">1.973796</span><span class="token number">2</span>  <span class="token number">0.677945</span>  <span class="token number">0.433839</span>  <span class="token number">0.652324</span>   <span class="token number">1.704344</span><span class="token number">3</span>  <span class="token number">0.264038</span>  <span class="token number">0.808055</span>  <span class="token number">0.347197</span>   <span class="token number">3.087857</span><span class="token number">4</span>  <span class="token number">0.589161</span>  <span class="token number">0.252418</span>  <span class="token number">0.557789</span>   <span class="token number">1.508776</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DataFrame-query-方法"><a href="#DataFrame-query-方法" class="headerlink" title="DataFrame.query() 方法"></a>DataFrame.query() 方法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">result2 <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">'df[(df.A &lt; 0.5) &amp; (df.B &lt; 0.5)]'</span><span class="token punctuation">)</span><span class="token comment">#相当于</span>result2 <span class="token operator">=</span> df<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token string">'A &lt; 0.5 and B &lt; 0.5'</span><span class="token punctuation">)</span><span class="token comment">#除了计算性能更优之外，这种方法的语法也比掩码代数式语法更好理解。</span><span class="token comment">#需要注意的是，query() 方法也支持用 @ 符号引用局部变量，eval不支持！</span>Cmean <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>result1 <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>A <span class="token operator">&lt;</span> Cmean<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>df<span class="token punctuation">.</span>B <span class="token operator">&lt;</span> Cmean<span class="token punctuation">)</span><span class="token punctuation">]</span>result2 <span class="token operator">=</span> df<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token string">'A &lt; @Cmean and B &lt; @Cmean'</span><span class="token punctuation">)</span><span class="token comment">#什么叫反向优化啊草</span><span class="token operator">%</span>timeit result2 <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">'df[(df.A &lt; 0.5) &amp; (df.B &lt; 0.5)]'</span><span class="token punctuation">)</span><span class="token number">20.8</span> ms ± <span class="token number">943</span> µs per loop <span class="token punctuation">(</span>mean ± std<span class="token punctuation">.</span> dev<span class="token punctuation">.</span> of <span class="token number">7</span> runs<span class="token punctuation">,</span> <span class="token number">1</span> loop each<span class="token punctuation">)</span><span class="token operator">%</span>timeit  result2 <span class="token operator">=</span> df<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token string">'A &lt; 0.5 and B &lt; 0.5'</span><span class="token punctuation">)</span><span class="token number">1.37</span> ms ± <span class="token number">9.18</span> µs per loop <span class="token punctuation">(</span>mean ± std<span class="token punctuation">.</span> dev<span class="token punctuation">.</span> of <span class="token number">7</span> runs<span class="token punctuation">,</span> <span class="token number">1000</span> loops each<span class="token punctuation">)</span><span class="token operator">%</span>timeit  result2 <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>A <span class="token operator">&lt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>df<span class="token punctuation">.</span>B <span class="token operator">&lt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token number">520</span> µs ± <span class="token number">3.46</span> µs per loop <span class="token punctuation">(</span>mean ± std<span class="token punctuation">.</span> dev<span class="token punctuation">.</span> of <span class="token number">7</span> runs<span class="token punctuation">,</span> <span class="token number">1000</span> loops each<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在考虑要不要用这两个函数时，需要思考两个方面：计算时间和内存消耗，而<strong>内存消耗是更重要的影响因素。</strong></p><p>如果临时 DataFrame 的内存需求比你的系统内存还大（通常是几吉字节），那么最好还是使用 eval() 和 query() 代数式。</p><p>可以用<code>df.value.nbytes</code>大概估算一下</p><p>在实际工作中，我发现普通的计算方法与 eval /  query 计算方法在计算时间上的差异并非总是那么明显，普通方法在处理较小的数组时反而速度更快！ eval /  query 方法的优点主要是节省内存，有时语法也更加简洁。</p><p>尤其需要注意的是，可以通过设置不同的解析器和引擎来执行这些查询，相关细节请 参 考 Pandas 文 档 中“Enhancing Performance”（<a href="http://pandas.pydata.org/pandas-docs/dev/enhancingperf.html%EF%BC%89%E8%8A%82%E3%80%82">http://pandas.pydata.org/pandas-docs/dev/enhancingperf.html）节。</a></p><p>剩下的东西放在notebook跑吧！！！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>但因篇幅有限，仍有许多知识无法介绍到</p><p>如果你想学习更多的 Pandas 知识，推荐参考下面的资源。</p><p>《利用 Python 进行数据分析》</p><p>PyVideo 上关于 Pandas 的教学视频（<a href="http://pyvideo.org/tag/pandas/%EF%BC%89">http://pyvideo.org/tag/pandas/）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言和环境&quot;&gt;&lt;a href=&quot;#前言和环境&quot; class=&quot;headerlink&quot; title=&quot;前言和环境&quot;&gt;&lt;/a&gt;前言和环境&lt;/h1&gt;&lt;p&gt;跨学科是数据科学的关键&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Darr</summary>
      
    
    
    
    <category term="data" scheme="https://darren-dong.com/categories/data/"/>
    
    
    <category term="data-sience" scheme="https://darren-dong.com/tags/data-sience/"/>
    
  </entry>
  
  <entry>
    <title>复变函数和积分应用</title>
    <link href="https://darren-dong.com/2021/05/12/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0/"/>
    <id>https://darren-dong.com/2021/05/12/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0/</id>
    <published>2021-05-12T04:38:47.000Z</published>
    <updated>2021-08-09T07:25:19.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言和资源"><a href="#前言和资源" class="headerlink" title="前言和资源"></a>前言和资源</h1><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514130415.png"  style="zoom: 67%;" /><p>推荐一个宝藏up主  “乐乐老师的网络课堂”，是个狼灭</p><p>华中科技大学的慕课</p><h1 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h1><h2 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514130633.png"  style="zoom: 33%;" /><p><strong>实数域是复数域的一个真子集，实数是有序数，复数不是，因此复数不可比较</strong></p><p>*四则运算</p><p>z*z共轭 = z模长的平方</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514131813.png"  style="zoom:33%;" /><h3 id="极坐标形式"><a href="#极坐标形式" class="headerlink" title="极坐标形式"></a>极坐标形式</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514131923.png"  style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514132008.png"  style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514132027.png"  style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514132647.png"  style="zoom:33%;" /><p><strong>结合arctany/x的图会比较好理解，起到一个调整范围的作用。</strong></p><p>两个复数相等≠模和辐角分别相等，前不能推后，后可以推前，可能差了2npi，<strong>模和辐角主值相等则复数相等</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514143939.png"  style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514144025.png"  style="zoom:33%;" /><h3 id="乘幂与方根"><a href="#乘幂与方根" class="headerlink" title="乘幂与方根"></a>乘幂与方根</h3><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514144329.png"></p><p>由乘法直接看出</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514144805.png"  style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514144826.png"  style="zoom: 50%;" /><p>方根</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514145219.png"  style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514145319.png"  style="zoom:33%;" /><p><strong>单位根：</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514145634.png"  style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514130456.png"  style="zoom: 25%;" /><p>给一个例子：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514145958.png"  style="zoom: 33%;" /><h3 id="复数域扩充"><a href="#复数域扩充" class="headerlink" title="复数域扩充"></a>复数域扩充</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514150150.png"  style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514150310.png"  style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514150548.png"  style="zoom:33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514150705.png"  style="zoom:33%;" /><p>复球面</p><p>由古老的测地投影法（绘制世界地图），衍生出复球面</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514150941.png"  style="zoom: 33%;" /><p>这样全体复数都可以被球面的点表示，N点表示无穷远点，这称为黎曼球面</p><h3 id="平面点集补充"><a href="#平面点集补充" class="headerlink" title="平面点集补充"></a>平面点集补充</h3><p>复变函数的基础，邻域，去心邻域</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514151404.png"  style="zoom: 33%;" /><p>内点，开集，闭集，边界点以及边界，孤立点（孤立一定是边界），有界集，无界集，连通集</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514151735.png"  style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210514152143.png"  style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言和资源&quot;&gt;&lt;a href=&quot;#前言和资源&quot; class=&quot;headerlink&quot; title=&quot;前言和资源&quot;&gt;&lt;/a&gt;前言和资源&lt;/h1&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren</summary>
      
    
    
    
    <category term="math" scheme="https://darren-dong.com/categories/math/"/>
    
    
    <category term="复变" scheme="https://darren-dong.com/tags/%E5%A4%8D%E5%8F%98/"/>
    
  </entry>
  
  <entry>
    <title>利用python进行数据分析(暂废)</title>
    <link href="https://darren-dong.com/2021/05/01/%E5%88%A9%E7%94%A8python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <id>https://darren-dong.com/2021/05/01/%E5%88%A9%E7%94%A8python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</id>
    <published>2021-05-01T14:02:08.000Z</published>
    <updated>2021-09-08T03:14:17.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h3 id="ipython"><a href="#ipython" class="headerlink" title="ipython"></a>ipython</h3><p>Ctrl-D退出</p><p>tab自动补全神器</p><p>但是ipython默认隐藏了下划线开始的方法和属性，比如魔术方法，“私有”方法和属性，要先输入下划线才看得到</p><p>内省：变量名前后使用 ? 显示关于对象的概要信息（包括docstring）</p><p>??来显示函数的源代码</p><p>？的终极用途：搜索命名空间，比如np.*load*?</p><p>% file.py 运行文件中的代码，如果需要参数就加参数<strong>如果想让待运行的脚本使用ipython空间中有的变量，用%run -i filename.py</strong></p><p>%paste 和 %cpaste (–终止)黏贴代码</p><p>一些终端指令：ctrl-L清屏  C+U删除当前行  ….</p><h4 id="魔术命令"><a href="#魔术命令" class="headerlink" title="魔术命令"></a>魔术命令</h4><p>没有内建到python中去，调用示例:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">%</span>timeit np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>大部分魔术指令可以用?看到额外的选项</p><p>魔术函数在不冲突时可以不加百分号调用，%automagic 可以启用、禁用</p><p>一些魔术函数像python函数一样，输出可以赋给一个变量</p><p>a = %pwd</p><pre class="line-numbers language-pytho" data-language="pytho"><code class="language-pytho">%quickref  快速参考卡%magic 探索所有魔术命令%debug从最后发生报错的底部进入交互式调试器  %pdb出现任意报错自动进入调试器%hist%paste   %cpaste%reset 清空所有变量&#x2F;名称  %xdel variable 删除变量和相关引用%page OBJECT  通过分页器更美观的打印一个对象%run   %prun statement  使用CProfile执行语句，报告输出%time 报告单个语句执行时间   %timeit 多次运行单语句，计算平均执行时间，用于估算代码最短执行时间%who  %who_ls  %whos  依次更加详细的展示变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://developer.51cto.com/art/202007/620863.htm">这个厉害</a></p><h3 id="jupyter"><a href="#jupyter" class="headerlink" title="jupyter"></a>jupyter</h3><p>核心组件是 notebook 交互式的文档类型</p><p>python的jupyter内核使用ipython系统进行内部活动</p><p>集成matplotlib:</p><ul><li>在ipython命令行中 %matplotlib</li><li>在jupyter中 %matplotlib inline</li></ul><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><p>一切皆为对象，对象模型的一致性！！！</p><p>几乎所有的python对象都有内部函数，称为方法</p><p>python虽然没有显示声明类型，但却是<strong>强类型语言</strong>，比如’5’+5会报错，而不是像很多语言一样发生隐式转换</p><p>只有在特定，明显的情况下才会发生隐式转换比如float + int</p><p>tips: isinstance(a,(int,float))检查对象类型是否在右边的元组中</p><p>python。。。鸭子类型，不管具体类型，只要它拥有某个特殊的方法，就一定有某种属性</p><p>iter(x)检查可否迭代</p><p>if not isinstance(x,list) and isiterable(x):</p><p>​    x = list(x) 不是列表就转换为列表</p><p>None 是NoneType类型的唯一实例，如果函数没有显式返回值，那就返回None</p><p><strong>三元表达式</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">5</span><span class="token string">'a'</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">5</span> <span class="token keyword">else</span> <span class="token string">'b'</span><span class="token string">'a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span>date<span class="token punctuation">,</span>timedt <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token string">'2021,5,1,21,8,30'</span><span class="token punctuation">)</span>dt<span class="token punctuation">.</span>year<span class="token punctuation">,</span>month<span class="token punctuation">,</span>day<span class="token punctuation">,</span>hour<span class="token punctuation">,</span>minute<span class="token punctuation">,</span>seconddt<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token punctuation">)</span>输出前三个dt<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>输出后三个dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%x%x%x'</span><span class="token punctuation">)</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">'202151'</span><span class="token punctuation">,</span><span class="token string">"%Y%m%d"</span><span class="token punctuation">)</span><span class="token comment">#转换为datetime对象</span>datetime相减会产生datetime<span class="token punctuation">.</span>delta对象delta <span class="token operator">=</span> datetime2 <span class="token operator">-</span> datetime1delta <span class="token operator">==</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">7179</span><span class="token punctuation">)</span> <span class="token comment">#间隔99天,7179秒</span>timedelta和datetime可以做加减得到新的datetime<span class="token operator">%</span>y     两位数的年份表示（<span class="token number">00</span><span class="token operator">-</span><span class="token number">99</span>）<span class="token operator">*</span><span class="token operator">%</span>Y     四位数的年份表示（<span class="token number">000</span><span class="token operator">-</span><span class="token number">9999</span>）<span class="token operator">*</span><span class="token operator">%</span>m     月份（<span class="token number">01</span><span class="token operator">-</span><span class="token number">12</span>）<span class="token operator">*</span><span class="token operator">%</span>d     月内中的一天（<span class="token number">0</span><span class="token operator">-</span><span class="token number">31</span>）<span class="token operator">*</span><span class="token operator">%</span>H     <span class="token number">24</span>小时制小时数（<span class="token number">0</span><span class="token operator">-</span><span class="token number">23</span>）<span class="token operator">*</span><span class="token operator">%</span>I     <span class="token number">12</span>小时制小时数（<span class="token number">01</span><span class="token operator">-</span><span class="token number">12</span>）<span class="token operator">*</span><span class="token operator">%</span>M     分钟数（<span class="token number">00</span><span class="token operator">=</span><span class="token number">59</span>）<span class="token operator">*</span><span class="token operator">%</span>S     秒（<span class="token number">00</span><span class="token operator">-</span><span class="token number">59</span>）<span class="token operator">*</span><span class="token operator">%</span>a     本地简化星期名称<span class="token operator">*</span><span class="token operator">%</span>A     本地完整星期名称<span class="token operator">%</span>b     本地简化的月份名称<span class="token operator">%</span>B     本地完整的月份名称<span class="token operator">%</span>c     本地相应的日期表示和时间表示<span class="token operator">%</span>j     年内的一天（<span class="token number">001</span><span class="token operator">-</span><span class="token number">366</span>）<span class="token operator">%</span>p     本地A<span class="token punctuation">.</span>M<span class="token punctuation">.</span>或P<span class="token punctuation">.</span>M<span class="token punctuation">.</span>的等价符<span class="token operator">%</span>U     一年中的星期数（<span class="token number">00</span><span class="token operator">-</span><span class="token number">53</span>）星期天为星期的开始<span class="token operator">%</span>w     星期（<span class="token number">0</span><span class="token operator">-</span><span class="token number">6</span>），星期天为星期的开始<span class="token operator">%</span>W     一年中的星期数（<span class="token number">00</span><span class="token operator">-</span><span class="token number">53</span>）星期一为星期的开始<span class="token operator">%</span>x     本地相应的日期表示<span class="token operator">%</span>X     本地相应的时间表示<span class="token operator">%</span>Z     当前时区的名称<span class="token operator">%</span><span class="token operator">%</span>     <span class="token operator">%</span>号本身<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p><strong>tuple</strong></p><p>可以用tuple函数将任意序列或迭代器转换为元组，比如tuple(‘ab’)-&gt;(‘a’,’b’)</p><p>同样可以使用 + 来连接，可以使用 * 来组成大元组</p><p>嵌套元组拆包(为啥python不用临时变量的原因)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tup <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span> <span class="token operator">=</span> tup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>collections有很多封装好的数据结构，比如collections.deque</strong></p><p>他们适合不同的场景，拥有特定的操作和某些特性下的加速，比如deque是双端数列，头尾插入快</p><p>list的remove很方便，但是内存占用比较高，还有insert代价比append更高</p><p>与字典，集合相比，对列表使用in时非常缓慢</p><p>list.extent(元素)比起创建新列表再使用+来连接节省很多内存</p><p>bisect模块可用于排序好的序列(实现了二分搜索，已排序列表的插值)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> bisectc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>bisect<span class="token punctuation">.</span>bisect<span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">#5要插在哪</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">6</span>bisect<span class="token punctuation">.</span>insort<span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>序列函数enumerate,zip,sorted,reversed</p><p>zip取决于最短的那一项，enumerate,zip,reversed都返回生成器</p><p>字典的keys values items 返回的是迭代器！</p><p>a.update({xxxxxx})可以合并字典，如果冲突，则原来的被覆盖</p><p>由于字典本质是2-元组（含有两个元素的元组）的集合，字典可以接受一个2-元组为参数</p><p><code>dictionary = dict(zip(range(5),reversed(range(5))))</code></p><p>value = dict.get(key,default_value)，不加默认值就返回None，pop也可以，不过默认抛出异常</p><p>dict.setdefault(key, default=None)查找key，如果不存在就设置为default，可以用[]</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">by_letter <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>    letter <span class="token operator">=</span> word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    by_letter<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>letter<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span>    <span class="token comment">#设置首字母序列</span><span class="token comment">#也可以直接from collections import defaultdict</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.jianshu.com/p/bbd258f99fd3">defaultdict</a></p><p>字典的键必须是不可变，它们将被哈希化，用hash(x)检查能否哈希化</p><p>为了将列表作为键，可以转换为元组，元组只要内部元素可以哈希化，它自身就可以哈希化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>d<span class="token punctuation">[</span><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>d<span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span> <span class="token comment">#...真的有必要把元组作为键吗</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#集合操作</span>a<span class="token punctuation">.</span>add<span class="token punctuation">(</span>x<span class="token punctuation">)</span>a<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#清空</span>a<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>x<span class="token punctuation">)</span>a<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#移除任意元素，空的则抛出keyerror</span>a<span class="token operator">|</span>ba<span class="token operator">&amp;</span>ba<span class="token operator">-</span>ba<span class="token operator">^</span>b<span class="token comment">#这几个都可以 a x= b</span>a<span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>b<span class="token punctuation">)</span> a包含于b则返回turea<span class="token punctuation">.</span>issuperset<span class="token punctuation">(</span>b<span class="token punctuation">)</span> 如果a包含b返回truea<span class="token punctuation">.</span>isdisjoint<span class="token punctuation">(</span>b<span class="token punctuation">)</span> ab没有交集返回truea<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>用于赋值，免得指向同一个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字典，集合都有推导式！推导式和map功能有些重复</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#字典示范</span>dictionary <span class="token operator">=</span> <span class="token punctuation">&#123;</span>val<span class="token punctuation">:</span>index <span class="token keyword">for</span> index<span class="token punctuation">,</span>val <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>嵌套列表推导式的for顺序排列,要区别于列表推导式中的列表推导式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">some_tuples <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>flattend <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> <span class="token builtin">tuple</span> <span class="token keyword">in</span> some_tuples <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">tuple</span><span class="token punctuation">]</span>flattend <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">tuple</span><span class="token punctuation">]</span> <span class="token keyword">for</span> tup <span class="token keyword">in</span> some_tuples<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>global</p><p>返回多个值是以元组形式，甚至可以返回一个字典，啥都行</p><p>将函数作为参数传递，这种更函数化的编程有更强的复用性和通用性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">complex</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>ops<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> op <span class="token keyword">in</span> ops<span class="token punctuation">:</span>        op<span class="token punctuation">(</span>a<span class="token punctuation">)</span>operation <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">]</span><span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token string">'wocao'</span><span class="token punctuation">,</span>operation<span class="token punctuation">)</span>妙啊！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>lambda本身没有显式的__name__属性</p><p><strong>柯里化</strong></p><p>通过部分参数应用的方式从已有的函数里衍生出新的函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> partialadd five <span class="token operator">=</span> partial<span class="token punctuation">(</span>add_numbers<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成器表达式可以作为函数参数用于替代列表推导式</p><p><code>sum(x ** 2 for x in range(100))</code></p><p><strong>itertools</strong></p><p>适用于大多数数据算法的生成器集合</p><p>可以查一下手册，需要的时候</p><p>except(xx,xx)来结合多个异常</p><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">read<span class="token punctuation">(</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">)</span>seek<span class="token punctuation">(</span>pos<span class="token punctuation">)</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#随机三件套</span>readlines<span class="token punctuation">(</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">)</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>writelines<span class="token punctuation">(</span>strings<span class="token punctuation">)</span>closeflush <span class="token comment">#将内部I/O缓冲区内容刷新到硬盘</span>closed在文本模式下，f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">#读取了10个字符所需要的字节并解码</span>而在二进制模式下<span class="token punctuation">,</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">#读取了10个字节，并未解码，显示b'xxxx'</span>解码如果不完整，则会报错文本模式配合<span class="token builtin">open</span>的encoding参数读取不同编码类型<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">'xt'</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><p>数组和向量化计算</p><ul><li>高校多维数组，提供数组算术操作和灵活的广播(不同尺寸数组)</li><li>线性代数，随机数，傅里叶变换</li><li>提供非常易用的C API，使得调用<strong>底层语言</strong>变得极其简单</li><li>诸多外部库都基于Numpy，这是数值计算最重要的python库</li></ul><p>Numpy的方法比python方法快10-100倍，并且使用的内存也更少</p><p><strong>核心特征ndarry 快速，灵活的大型数据集容器，允许使用类似标量的操作语法在整块数据上进行数学计算</strong></p><p><strong>生成</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span>列表，元组，数组<span class="token punctuation">)</span>asarray<span class="token punctuation">(</span><span class="token punctuation">)</span>将输入转换为ndarray？？arrangeones<span class="token operator">/</span>zeros<span class="token operator">/</span>empty<span class="token operator">/</span>full<span class="token operator">+</span><span class="token operator">/</span>_likeeye<span class="token operator">/</span>identity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>dtype</strong></p><p>能和吉他系统数据灵活交互的原因</p><p>dtype和astype（new type）方法</p><p>转换时小数-&gt;整数截断，string转换为合适的，</p><p><strong>但在用numpy.string_作数据时，numpy会修正大小或删除输入而不发出警告</strong></p><p><strong>数组算术</strong></p><p>所谓向量化运算，逐元素操作。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>ndarray可以用”切片”赋值<code>b[1:4] = 5</code>把b的2-4号元素都赋值5</p><p><strong>ndarray的切片事原数组的视图，而不是复制！！！不然得多慢</strong>，要想复制得：arr[5:8].copy()</p><p>高维索引：可以arr2d[2][1]   也可以arr2d[2,1]</p><p>切片配合索引可以很好的进行切片，全选用单独 :</p><p><strong>布尔索引</strong></p><p>names是一个字符串ndarray</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">names <span class="token operator">==</span> <span class="token string">'Bob'</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token comment">#输出一个布尔值数组</span>可以将布尔数组当作数组的索引，但是其长度必须和数组轴索引长度一致，不一致时不会报错，要小心date <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>date<span class="token punctuation">[</span>date<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">#好厉害的功能</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>布尔索引也能配合切片使用</p><p>布尔索引总是生成数据的拷贝</p><p><code>~()表示对某个通用条件取反</code></p><p><strong>神奇索引</strong></p><p>真的很神奇。。使用整数数组进行数据索引（Numpy专用）</p><p>相当于是一维一维的选择数据，也可以把每个数组的对应位置组合起来看成索引</p><p>神奇索引的结果总是一维的，他也总是复制数据到新的数组中</p><p>假设arr是二维数组</p><p>arr[:,[2,1,0]] 相当于是把前三列倒过来再复制出来，很奇怪的用法</p><p>换轴：arr3d.transpose((1,0,2)) 换了轴的次序，有点抽象</p><p>arr.swapaxes(1,2)交换俩轴，返回视图而不是复制</p><h2 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h2><p>快速的逐元素数组函数</p><p><strong>一元</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">abs</span><span class="token operator">/</span>fabs  sqrtsquareexplog log10 log2 log1p<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#返回ln(1+x)</span>sign <span class="token comment">#返回符号值，正数1，0为0，负数-1</span>ceil floorrint <span class="token comment">#保留整数，保持dtype</span>modf <span class="token comment">#分别返回小数部分和整数部分</span>isnan <span class="token comment">#返回布尔数组</span>isfinite <span class="token comment">#既非inf又非NaN </span>isinfcos<span class="token punctuation">,</span>cosh<span class="token punctuation">,</span>sin<span class="token punctuation">,</span>sinh<span class="token punctuation">,</span>tan<span class="token punctuation">,</span>tanharc<span class="token operator">*</span><span class="token number">6</span>logical_not<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#按位取反</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>二元</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add subtract multiply divide<span class="token operator">/</span>floor_dividepower<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token comment">#每项依次xi ** yi</span>maximum<span class="token operator">/</span>minimum<span class="token operator">/</span>fmax<span class="token operator">/</span>fmin <span class="token comment">#后两个忽略NaN</span>mod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#模</span>copysign <span class="token comment">#将第一个数组的符号值改为第二个数组的符号值</span>greater<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>不如直接用操作符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数学和统计"><a href="#数学和统计" class="headerlink" title="数学和统计"></a>数学和统计</h2><p>用数组表达式完成多种数据操作任务，代替显式循环，称为向量化，速度会快很多</p><p>np.where(布尔数组，标量/向量，标量/向量)是向量界的三元表达式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">sum</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token punctuation">)</span>meanstd<span class="token punctuation">,</span>var 标准差<span class="token operator">/</span>方差 ，可以选择自由度调整<span class="token builtin">min</span> <span class="token builtin">max</span>argmin argmax 最小值和最大值的位置<span class="token comment">#axis可以省略，直接写维度</span>cumsum cumprod 累和 和 累积 有中间结果<span class="token comment">#</span>sort<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>布尔数组妙用</strong></p><p>arr = np.random.randn(100)</p><p>(arr&gt;0).sum()正值的个数</p><p>还有bools.any()检查是否至少一个true</p><p>bools.all()检查是否每个值都是True，里面可能放轴</p><p><strong>唯一值与其他集合逻辑</strong></p><p>有一些针对一维ndarray的基础集合操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">unique<span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token comment">#对唯一值排序</span>intersect1d<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>交集union1d<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>并集in1d<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>x项是否在y中，返回布尔数组setdiff1d<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>返回x<span class="token operator">-</span>ysetxor1d<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>返回x<span class="token operator">^</span>y 不共有的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>文件</strong></p><p>numpy可以将数据以文本/二进制文件形式存入硬盘或载入，pandas或其他来载入文本/表格更被人们推崇</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#默认后缀是.npy</span>arr <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'Iamfile'</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span>np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'Iamfile.npy'</span><span class="token punctuation">)</span><span class="token comment">#多个就是</span>np<span class="token punctuation">.</span>savez<span class="token punctuation">(</span><span class="token string">'Iammanyfile'</span><span class="token punctuation">,</span>a <span class="token operator">=</span> arr<span class="token punctuation">,</span> b <span class="token operator">=</span> arr<span class="token punctuation">)</span><span class="token comment">#load以后变成一个字典对象</span>arch <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'Iammanyfile.npy'</span><span class="token punctuation">)</span>arch<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">==</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#如果数据已经压缩好了，仍能存入压缩的文件</span>np<span class="token punctuation">.</span>savez_compressed<span class="token punctuation">(</span><span class="token string">'small.npz'</span><span class="token punctuation">,</span>a <span class="token operator">=</span> arr<span class="token punctuation">,</span> b <span class="token operator">=</span> arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>点乘</strong></p><p>a.dot(b)</p><p>np.dot(a,b)</p><p>a @ b</p><h3 id="linalg"><a href="#linalg" class="headerlink" title="linalg"></a>linalg</h3><p>顾名思义，numpy.linalg 拥有一个矩阵分解的标准函数集，以及其他常用函数比如求逆/行列式</p><p>这都是通过在MATLAB和R等其他语言使用的行业标准线性代数库实现的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> numpy<span class="token punctuation">.</span>linalg <span class="token keyword">import</span> inv<span class="token punctuation">,</span>qrdiag<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#返回方针的对角元一维数组，一维数组就准换为对角矩阵</span>dottrace <span class="token comment">#考考你“迹”</span>det eig <span class="token comment">#方阵特征值和特征向量</span>inv 逆矩阵pinv Moore<span class="token operator">-</span>Penrose伪逆qr QR分解svd 奇异值分解solve 求解x的线性系统Ax <span class="token operator">=</span> b，其中A是方阵lstsq 计算Ax <span class="token operator">=</span> b的最小二乘解<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="伪随机数生成"><a href="#伪随机数生成" class="headerlink" title="伪随机数生成"></a>伪随机数生成</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span>这个设置的是全局随机数种子rng <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>arr <span class="token operator">=</span> rng<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">#这样生成的就是独立的</span>seedpermutation<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment"># 返回一个序列的随机排列</span>shuffle <span class="token comment"># 随机排列一个序列,直接更改原来的</span>rand <span class="token comment">#从均匀分布[0,1)中抽取样本</span>randint <span class="token comment">#根据给定的从低到高的范围抽取随机一个整数</span>randn <span class="token comment">#从均值0方差1的正态分布</span>normal<span class="token punctuation">(</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#平均值，标准差，shape</span>binomial <span class="token comment">#从二项分布中抽取样本</span>beta <span class="token comment">#从beta分布中抽取样本</span>chisquare <span class="token comment">#从卡方分布中抽取样本</span>uniform<span class="token punctuation">(</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#从均匀分布中抽取样本</span>gamma <span class="token comment">#从伽马分布中抽取样本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>随机漫步</strong></p><h1 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h1><p>numpy像序列化好的矩阵，序列，pandas相当于是字典(有名称的数据)</p><p>numpy适合处理同质型的数值类数组数据</p><p>pandas用来处理表格型或异质性数据</p><h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><p>一维的数组型对象，包含一个值序列（类似numpy），和数据标签（索引 index）</p><p>默认索引0 - N-1 ，用values和index得到其值和索引</p><p>比numpy数组特殊的是可以用标签来索引：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">.</span>indexOut<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">.</span>valuesOut<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span>    In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d    <span class="token number">4</span>s    <span class="token number">7</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>可以考虑它是一个长度固定且有序的字典，在可以使用字典的上下文中Series都能用</strong></p><p>使用numpy的函数或按numpy风格的操作，比如布尔数组索引，数学函数，都能用，且保存索引值链接</p><p>还能把字典变成Series  pd.Series(dict)</p><p><code>obj3 = pd.Series(list1,[index = list])</code>如果list里没有，则被舍弃，如果list里有没对上的，就NaN</p><p>Pandas用 isnull 和 notnull检查数据，也返回类似布尔值Series的东东</p><p><strong>自动对齐索引是非常有用的</strong></p><p>Series对象自身和其索引都有name属性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'population'</span>In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">.</span>index<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'state'</span>In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2Out<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> stated    <span class="token number">4</span>s    <span class="token number">7</span>c   <span class="token operator">-</span><span class="token number">5</span>a    <span class="token number">3</span>Name<span class="token punctuation">:</span> population<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>索引可以通过按位置赋值的方式进行改变 obj.index = [new list]</p><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>表示矩阵的数据表,它包含已排序的列集合，每一列可以是不同的值类型（数值，字符串，布尔值等），DataFrame既有行索引，又有列索引</p><p>在DataFrame中数据被存储为一个以上的二维块。</p><p>可以利用分层索引在DataFrame中展现更高层次的维度。</p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>利用包含等长度列表或numpy数组的字典</p><p>在jupyter notebook里面dataframe对象会展示一个更好康的HTML表格</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>frame2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">,</span><span class="token string">'second'</span><span class="token punctuation">,</span><span class="token string">'third'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>colunmns指定列的顺序，索引指定索引。。如果columns里出现data没有的列，则填充缺失值NaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>frame2[‘a’] == frame2.a  这是一个Series对象，frame2.a只在a是有效变量名时可用，前者则总可用</p><p>也可以用这个更改一列👆，用列表/数组赋值时请确保长度匹配，</p><p>将Series付给一列时，索引会尝试匹配，空缺补缺失值，如果a（被赋值的列）不存在，会产生新列（<strong>此时不能用frame2.a的语法！！</strong>），可以用del关键词来删除dataframe的列</p><p>返回的Series对象索引继承dataframe的，而且name属性被设置成字典的索引</p><p>从DateFrame中选的列同样是数据的视图，拷贝得用.copy()</p><p>另一种常用的数据形式是包含字典的嵌套字典:</p><p>pandas会将字典的键作为列，将内部字典的键作为行索引，自动补全NaN</p><p>可以用Numpy语法转置 frame3.T</p><p>内部字典的键会被联合，排序，但是如果显式指明索引，键不会被排列</p><p>frame3.index.name 和 frame3.columns.name 也是可以设置的</p><p>如果列是不同的dtypes，那么values的dtype会自动选择适合所有列的类型</p><h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><p>reindex([]) 创建一个符合新索引的新对象</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'yellow'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3Out<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>      blue<span class="token number">2</span>    yellow<span class="token number">4</span>     greendtype<span class="token punctuation">:</span> <span class="token builtin">object</span>In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token string">'ffill'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>      blue<span class="token number">1</span>      blue<span class="token number">2</span>    yellow<span class="token number">3</span>    yellow<span class="token number">4</span>     green<span class="token number">5</span>     greendtype<span class="token punctuation">:</span> <span class="token builtin">object</span><span class="token comment">#ffill会将值向前传递</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">reindex方法的参数index <span class="token comment">#作为默认参数，可以省略</span>columns <span class="token operator">=</span> xx <span class="token comment">#此关键字用于重建列的索引</span>ps<span class="token punctuation">:</span>可以用frame<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span>行索引<span class="token punctuation">]</span>，<span class="token punctuation">[</span>列索引<span class="token punctuation">]</span><span class="token punctuation">]</span>method <span class="token comment">#ffill前向，bfiil后向填充</span>fill_value <span class="token comment">#选择缺失时使用的替代值</span>limit <span class="token comment">#前后填充时，填充的最大元素数量</span>tolerance <span class="token comment">#前后填充时，填充的最大绝对数字距离</span>copy <span class="token comment">#True时总是复制底层数据，False在索引相同时不复制数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除</strong></p><p>data.drop([xxx])删除索引，默认是轴9</p><p>data.drop([xxx],axis = 1) #也可以写axis = ‘columns’ 只删除一个的就不用列表</p><p>像drop这类函数会修改Series或DataFrame的尺寸或形状，直接操作原对象，不返回新对象</p><h3 id="索引对象"><a href="#索引对象" class="headerlink" title="索引对象"></a>索引对象</h3><p>不可变的，用obj.index拿出来，构造Series和DataFrame时，内部产生索引对象</p><p>可以用pd.Index([list])显式生成</p><p>它具备集合的特征，比如使用 in方法</p><p>但是它可以包含重复标签，根据重复标签筛选会选取所有匹配的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">append<span class="token punctuation">(</span><span class="token punctuation">)</span>differenceintersectionunionisindelete<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">#删除位置i的索引并产生新的索引</span>drop<span class="token punctuation">(</span><span class="token string">'xx'</span><span class="token punctuation">)</span><span class="token comment">#删除xx索引并产生新的索引,可以传递列表来删除多个</span>insert<span class="token punctuation">(</span>i<span class="token punctuation">)</span>is_monotonic <span class="token comment">#是否递增</span>is_unique <span class="token comment">#是否唯一</span>unique <span class="token comment">#得到索引的唯一值序列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Series</strong> 既可以使用obj[2:4]这样传统的顺序，也可以使用obj[[‘b’,’c’]]用索引里截取的列表来</p><p><strong>甚至可以obj[‘b’:’c’] 而且这个是包含尾部的</strong>，series只有一列，这些都是选择行</p><p><strong>对dataFrame可以直接用obj[‘two’]来索引某一列或用一个列表来选择！这是列选择语法</strong></p><p><strong>但是切片语法obj[2:4]时选择行的（这才是特殊的），传入单个/列表只能选择列！！！</strong></p><p><strong>loc和iloc选择(更准确，更无歧义)</strong></p><p>date.loc [[],[]] 前者选择行，后者选择列，必须是索引名</p><p>date.iloc [ xxx ]就只能用数字索引</p><p>当用列表时形式和原来相仿，当选了某一个行时，会发生转置</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourOHIO        <span class="token number">0</span>    <span class="token number">1</span>      <span class="token number">2</span>     <span class="token number">3</span>COLORADO    <span class="token number">4</span>    <span class="token number">5</span>      <span class="token number">6</span>     <span class="token number">7</span>UTAH        <span class="token number">8</span>    <span class="token number">9</span>     <span class="token number">10</span>    <span class="token number">11</span>NEWYORK    <span class="token number">12</span>   <span class="token number">13</span>     <span class="token number">14</span>    <span class="token number">15</span>In <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'OHIO'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> one      <span class="token number">0</span>three    <span class="token number">2</span>Name<span class="token punctuation">:</span> OHIO<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int32        In <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> three    <span class="token number">2</span>two      <span class="token number">1</span>Name<span class="token punctuation">:</span> OHIO<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两种方法是可以使用切片的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span>val<span class="token punctuation">]</span> 选择单列或列序列，特殊是数字切片选择行df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val<span class="token punctuation">]</span> 选择行df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>val<span class="token punctuation">]</span> 选择列df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val1<span class="token punctuation">,</span>val2<span class="token punctuation">]</span>选择某部分df<span class="token punctuation">.</span>iloc同理df<span class="token punctuation">.</span>ai<span class="token punctuation">[</span>label_i<span class="token punctuation">,</span>label_j<span class="token punctuation">]</span>根据索引选择单个标量df<span class="token punctuation">.</span>iat<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span>根据位置选择单个标量get_value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ps:当对标签使用切片时是包含尾部的，比如loc里面和series的标签切片，即使有时候标签就是数字</strong></p><h3 id="算数和数据对齐"><a href="#算数和数据对齐" class="headerlink" title="算数和数据对齐"></a>算数和数据对齐</h3><p>相加对象时，当索引对不同，返回结果的索引将时索引对的并集，没有交叠的部分全都变成NaN</p><p>灵活算术方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">,</span>raddsub<span class="token punctuation">,</span>rsubdiv<span class="token punctuation">,</span>rdivfloordiv<span class="token punctuation">,</span>rfloordivmul<span class="token punctuation">,</span>rmul<span class="token builtin">pow</span><span class="token punctuation">,</span>rpow参数fill_value设定了以后有必要会保留两边的，带r的都是参数翻转<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>DataFrame和Series间的操作</strong></p><p>类似不同维度数组间的操作类似</p><p>当arr(np数组)减去一行时，减法依次在每一行进行了操作，这就是所谓的广播机制</p><p>二DataFrame和Series之间的操作是类似的，Series的索引和DataFrame的列进行匹配，然后广播到各行</p><p>如果索引值不在DataFrame的列中，也不在Series的索引中，对象会重建索引并进行联合。补NaN</p><p>如果想在行上匹配，列上广播，必须得用算术方法，然后指定参数axis = ‘index’或axis = 0</p><p>Numpy的通用函数们可以直接使用到pandas对象进行逐元素操作</p><p>DataFrame的apply方法可以将函数应用到一列或一行上，默认是对每一列调用一次，</p><p>用axis = ‘columns’ 或 1来对行调用，索引仍保留对应的，但大部分常用的功能都已经实现了</p><p>applymap就是对每个元素使用！</p><p>先到这吧</p><h2 id="文件-1"><a href="#文件-1" class="headerlink" title="文件"></a>文件</h2><p>有一大坨，我挑了几个</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">read_csv 从文件，url，文件型对象读取分隔好的数据，逗号是默认分隔符read_table从文件，url，文件型对象读取分隔好的数据，制表符是默认分隔符read_fwf 从特定宽度格式的文件中读取数据（无分隔符）read_excelread_htmlread_json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于现实世界的数据非常混乱，随着时间推移，一些数据加载函数的可选参数变得非常复杂，pandas的在线文档中有大量实例展示，可以借鉴</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">一些参数pathsep<span class="token operator">/</span>delimiter 分隔符，可以是正则表达式header 用作列名的行号index_col 用作行索引的列好<span class="token operator">/</span>列名names 列名列表，必须header <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h1><p>如果不是用了%matplot notebook/inline，就得用plt.</p><p>最终目标可能是构建网络交互式可视化</p><p>matplotlib用来制作静态或动态的可视化文件，生成出版级质量图表（一般二维）</p><p>matplotlib支持所有操作系统上的各种GUI后端，还可以导出为常见的矢量和光栅图形格式！</p><p>现在有了一些matplotlib数据可视化的附加工具包，（调用matplotlib进行底层绘图）比如seaborn</p><p><strong>尽管seaborn等库和pandas内建的绘图函数可以处理大部分绘图的普通细节，但是要更好的定制，必须得学习一些maplotlib的API</strong></p><p><strong>导入惯例</strong></p><p>import matplotlib.pyplot as plt</p><p>首先在jupyter notebook 来一句 %matplotlib notebook(Ipython则是%matplotlib)</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>这些图位于图片（Figure）对象中，可以使用plt.figure()生成一个新的图片</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210504114242.png" alt="image-20210503162615865"></p><p>Jupyter好像优化了，不仅可以提前显示，而且在后续单元格执行时不会重置图表</p><p>当再绘图时，会在最后一个子图上画画</p><p>fig.add_subplot返回的是Axes Subplot对象，可以调用这些对象绘图</p><p>可以去matplotlib官方文档找完整的图形类型</p><p>使用子图网格创建图片时非常常见的任务，所以有一个方法plt.subplots(size)，返回包含了已生成的子图对象的Numpy数组</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210504114253.png" alt="image-20210503171947679"></p><p>牛批啊，fig是一个尺寸对象Figure，axes则是返回的numpy数组</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210504114249.png" alt="image-20210503172248820"></p><p>有几个参数，sharex(True/all  False/None) sharey</p><p>subplot_kw：可选的，字典类型。包含传递给用于创建子图的调用add_subplot的关键字参数。</p><p>gridspec_kw：可选的，字典类型。包含传递给用于创建子图网格的GridSpec构造函数的关键字参数。</p><p>**fig_kw：所有传递给matplotlib.pyplot.figure调用的额外关键字参数。</p><p>比如plt.subplots(2,2,figsize = (8,6)最后一项传入figure对象</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><a href="https://blog.csdn.net/htuhxf/article/details/82863630">https://blog.csdn.net/htuhxf/article/details/82863630</a></p><p><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html">https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html</a></p><p>可以用图对象的subplots_adjust方法，或者当作顶层函数用，调整间距</p><p>fig.subplots_adjust(left,bottom,right,top,wspace,hspace)</p><p>很多配置字符串可以合到一起，也可以分开来使得表达清晰</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'ko--'</span><span class="token punctuation">)</span>等价于ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>color <span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">,</span>linestyle <span class="token operator">=</span> <span class="token string">'dashed'</span><span class="token punctuation">,</span>marker <span class="token operator">=</span> <span class="token string">'o'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>大多数图表修饰工作有两种主要的方式：<strong>程序性的pyplot接口或更多面向对象的原生matplotlib API</strong></p><p>pyplot接口设计为交互式使用，包含xlim,xticks,xticklabels方法，他们在没有函数参数时返回当前参数值，在传入参数时设置参数值，<strong>他们默认在当前活动或最新创建的AxeSubplot上生效</strong>。他们分别对应于子图的两个方法，比如xlim对应于ax.get_lim和ax.set_lim，<strong>后者更为显式，单独操作子图</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#实例</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ticks <span class="token operator">=</span> ax<span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">750</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#设置刻度</span>labels <span class="token operator">=</span> ax<span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">,</span><span class="token string">'four'</span><span class="token punctuation">,</span><span class="token string">'five'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rotation <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span>fontsize <span class="token operator">=</span> <span class="token string">'small'</span><span class="token punctuation">)</span><span class="token comment">#设置标签</span>ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'My first matplotlib plot'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Stages'</span><span class="token punctuation">)</span><span class="token comment">#也可以这样设置</span>props<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">'title'</span><span class="token punctuation">:</span> <span class="token string">'My first matplotlib plot'</span><span class="token punctuation">,</span>    <span class="token string">'xlabel'</span><span class="token punctuation">:</span><span class="token string">'Stages'</span><span class="token punctuation">&#125;</span>ax<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token operator">**</span>props<span class="token punctuation">)</span><span class="token comment">#通用的一种方法</span><span class="token keyword">print</span><span class="token punctuation">(</span>ticks<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210504114302.png" alt="image-20210503194818033"></p><p><strong>添加图例</strong></p><p>最简单的式在添加图表的时候ax.plot(加一个参数label = ‘xx’)</p><p>再执行ax.lengend(loc =’xx’)或者plt.legend就能自动生成图例，best会找到最合适的位置</p><p>好文章：</p><p><a href="https://zhuanlan.zhihu.com/p/110656183">一，折线图调整</a></p><p><a href="https://zhuanlan.zhihu.com/p/110902615">二，坐标轴</a></p><p><a href="https://zhuanlan.zhihu.com/p/110976210">三，挪动坐标轴</a></p><p><a href="https://zhuanlan.zhihu.com/p/111108841">四，设置label</a></p><p><a href="https://zhuanlan.zhihu.com/p/111331057">五，散点图</a></p><p><a href="https://zhuanlan.zhihu.com/p/113657235">六，柱状图</a></p><p><strong>注释与子图加工</strong></p><p>text,arrow,annote方法可以添加注释和文本</p><p>比如：ax.text(x,y,’Hello world!’,family = ‘monospace’,fontsize = 10)</p><p>matplotlib含有表示多种常见图形的对象，这些对象的引用时patched。</p><p>全集位于matplotlib.patched中，少部分比如Rectangle和Circle可以在matplotlib.pyplot中找到</p><p>这个暂时用不到。。先略过吧</p><h3 id="保存到文件"><a href="#保存到文件" class="headerlink" title="保存到文件"></a>保存到文件</h3><p>使用plt.savefig将活动图片保存到文件，等价于图片对象的savefig实例方法</p><p>plt.savefig( ‘  xxx . svg’)文件类型会从文件拓展名自动推断</p><p>其他的参数/选项：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fname <span class="token comment">#默认参数，是一个路径+文件型对象名</span>dpi <span class="token comment">#每英寸点数的分辨率，默认100</span>facecolor<span class="token punctuation">,</span>edgecolor <span class="token comment">#图形背景的颜色，默认是'w'就是白色</span><span class="token builtin">format</span> <span class="token comment">#文件格式，比如'png','pdf',svg,ps,eps啥的，好像时可以覆盖</span>bbox_inched <span class="token comment">#要保存的图片范围，如果是'tight'，将会去掉图片周围空白的部分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>matplotlib配置</strong></p><p>几乎所有的默认行为都可以通过广泛的全局参数来定制，者通过plt.rc来实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#第一个参数时要自定义的组件,比如'figure',axes,xtick,ytick,grid,legend</span>然后其他的就可以自定义了<span class="token punctuation">,</span>比如：font_options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'family'</span> <span class="token punctuation">:</span> <span class="token string">'monospace'</span><span class="token punctuation">,</span>    <span class="token string">'weight'</span> <span class="token punctuation">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>    <span class="token string">'size'</span> <span class="token punctuation">:</span> <span class="token string">'5'</span><span class="token punctuation">&#125;</span>plt<span class="token punctuation">.</span>rc<span class="token punctuation">(</span><span class="token string">'font'</span><span class="token punctuation">,</span> <span class="token operator">**</span>font_options<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用pandas和seaborn绘图"><a href="#使用pandas和seaborn绘图" class="headerlink" title="使用pandas和seaborn绘图"></a>使用pandas和seaborn绘图</h2><p>pandas有很多内建的方法简化dataframe和series对象生成可视化的过程，另一个库时seaborn</p><p>导入seaborn会修改默认的matplot配色方案和绘图央视</p><p>Series.plot的参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">label ax 选用的子图对象，默认是当前活动的stylealphakind 默认<span class="token string">'line'</span>logy <span class="token comment">#在y上使用对数缩放</span>use_index 使用对象索引刻度标签（默认x，水平图则是y）rotxticksyticksxlimylimgrid <span class="token comment">#展示轴网格，默认打开</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DataFrame的plot参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">subplots <span class="token comment">#将每一列绘制在独立的子图中</span>sharex<span class="token operator">/</span>sharey <span class="token comment">#当独立子图时可以设置的</span>figsize 生成图片尺寸的元组title 标题字符串legend 添加子图图例，默认是<span class="token boolean">True</span>sort_columns 按字母顺序绘制各列，默认为<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>折线图</strong></p><p>会把Series索引默认当作x轴</p><p>DataFrame默认划到一起去，可以设置</p><p>注意到DataFrame的列名称(column.name)成为了图例标题</p><p><strong>柱状图</strong></p><p>plot.bar() 竖直 plot.barh()水平柱状图,同样索引默认当作x轴、y轴</p><p>注意到DataFrame的列名称(column.name)成为了图例标题</p><p>stackedd = True 参数可以让DataFrame每一行的值叠在一起</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210504114307.png" alt="image-20210503205130179"></p><p><strong>直方图和密度图</strong></p><p>hist和density</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h1&gt;&lt;h3 id=&quot;ipython&quot;&gt;&lt;a href=&quot;#ipython&quot; class=&quot;headerlink&quot; title=&quot;ipy</summary>
      
    
    
    
    <category term="date" scheme="https://darren-dong.com/categories/date/"/>
    
    
  </entry>
  
  <entry>
    <title>tensorflow-note</title>
    <link href="https://darren-dong.com/2021/04/26/tensorflow-note/"/>
    <id>https://darren-dong.com/2021/04/26/tensorflow-note/</id>
    <published>2021-04-26T14:02:08.000Z</published>
    <updated>2021-09-06T11:56:45.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本课程结构：</p><ol><li>神经网络计算：搭建第一个神经网络模型</li><li>神经网络优化：学习率、激活函数、损失函数、正则化、自写优化器</li><li>神经网络八股：搭建八股“六步法”</li><li>网络八股扩展：八股拓展：自制数据集、数据增强、断点续训、参数提取、可视化、给图识物</li><li>卷积神经网络：用CNN和一些工具实现图像识别</li><li>循环神经网络：用RNN和一些工具实现股票预测</li></ol><hr><p>每一章的思维框架借鉴了<a href="https://blog.csdn.net/weixin_42186072/article/details/106669979">大佬的博客</a>，学完一章可以看这里</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155209.png" alt="课程概览" style="zoom: 67%;" /><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155220.png" alt="引入"></p><h2 id="鸢尾花"><a href="#鸢尾花" class="headerlink" title="鸢尾花"></a>鸢尾花</h2><p>专家系统是理性的。（if case。）</p><p>但是有些花农直接可以看出种类，因为他们见了太多，而且经验越丰富，识别准确率越高</p><p>这是一种感性的直觉，是这门课介绍的神经网络方法</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/20210426223114.png" style="zoom:33%;" /><hr><p>具体实现</p><p>MP模型，每个输入特征乘以线上的权重，再通过一个非线性函数输出，简化是去掉非线性函数</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426224043.png" style="zoom:33%;" /><p>每个输出节点都链接了所有的输入关系，称为全连接网络</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426224129.png" style="zoom:33%;" /><h2 id="TF2"><a href="#TF2" class="headerlink" title="TF2"></a>TF2</h2><p>把numpy格式转换为tensor格式</p><p>创建形式和numpy非常类似！</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155247.png" alt="创建"></p><hr><p>tensorflow中一切皆为张量，包括输出的常数结果也是一个shape = ()的tensor类型张量</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155255.png" alt="函数"></p><p>其中tf.argmax可以直接接受numpy数组类型的参数</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426234353.png" style="zoom:33%;" /><h2 id="鸢尾花2"><a href="#鸢尾花2" class="headerlink" title="鸢尾花2"></a>鸢尾花2</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210426235530.png" style="zoom: 33%;" /><p>class1 P45 <strong>非常重要</strong>，建议全文背诵hhh</p><h1 id="参数知识"><a href="#参数知识" class="headerlink" title="参数知识"></a>参数知识</h1><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155310.png" alt="第二章" style="zoom:50%;" /><p>先介绍一些函数：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427095155.png" style="zoom:25%;" /><p>记住这个是逐个比较</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427095313.png" style="zoom:25%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427095925.png" style="zoom: 25%;" /><hr><p><strong>复杂度</strong></p><p>输入层不算层数</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427132521.png" style="zoom:25%;" /><p><strong>学习率</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427132837.png" style="zoom:25%;" /><p>只是增加了一些代码</p><hr><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a><strong>激活函数</strong></h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427191332.png" style="zoom:25%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427191556.png" style="zoom:25%;" /><p>因为反向传播从输出层向输入层逐层求导，每一层的导数都落在0-0.25，多了以后趋于0，称为<strong>梯度消失</strong>，无法更新参数。所以sigmoid函数如今用的很少了</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427191737.png" style="zoom:25%;" /><p>通过调整初始化来避免“神经元死亡（一直是0）”，可以设置更小的学习率，减少参数分布的巨大变化，来👆</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427192342.png" style="zoom:25%;" /><p>初学者的建议：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427192420.png" style="zoom:25%;" /><p>对零均值化的解释：</p><p><a href="https://blog.csdn.net/wtrnash/article/details/87893725">https://blog.csdn.net/wtrnash/article/details/87893725</a></p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427194702.png" style="zoom:25%;" /><p>loss_mse = tf.reduce.mean(tf.square(y_-y))</p><p>P19随机数使用很秀。</p><p>有时候也要根据实际情况自定义损失函数。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427200949.png" style="zoom:25%;" /><p>交叉熵计算概率分布间的距离</p><p>tf.losses.categorical_crossentropy(y,y_)</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427201314.png"></p><p>这个虽然可以配合softmax使用，但是还有集成的👇</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427201845.png" style="zoom:25%;" /><p>如图，一换二不亏</p><h2 id="拟合"><a href="#拟合" class="headerlink" title="拟合"></a>拟合</h2><p>欠拟合是对现有数据集学习的不太彻底，拟合效果不好</p><p>过拟合是对现有数据拟合的太好，却对新数据难以处理</p><p>ps：</p><p>在机器学习的<a href="https://baike.baidu.com/item/%E4%B8%8A%E4%B8%8B%E6%96%87">上下文</a>中，超参数是在开始学习过程之前设置值的参数。 相反，其他参数的值通过训练得出。</p><p>超参数：</p><ul><li>定义关于模型的更高层次的概念，如复杂性或学习能力。</li><li>不能直接从标准模型培训过程中的数据中学习，需要预先定义。</li><li>可以通过设置不同的值，训练不同的模型和选择更好的测试值来决定</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427202855.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427203023.png"></p><p>P29有最优化代码</p><p>把区分0和1的分界线0.5标出颜色</p><h2 id="优化器（跳）"><a href="#优化器（跳）" class="headerlink" title="优化器（跳）"></a>优化器（跳）</h2><p>神经网络参数优化器</p><p><strong>不同的优化器，实质上只是定义了一阶动量和二阶动量的公式。</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212011.png" style="zoom:25%;" /><p>？？？？这个公式是什么鬼</p><p>gt是梯度，梯度下降优化器👇P32</p><p>我跑出来6.5s</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212319.png" style="zoom:25%;" /><p>我跑出来7.7s</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212651.png" style="zoom:25%;" /><p>这个公式,加了一个二阶动量，python实现如下👇P34</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212820.png" style="zoom:25%;" /><hr><p>P36 7.3s</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427212903.png" style="zoom:25%;" /><p>移动平均-&gt;指数滑动平均：</p><p>指数平滑法是在<a href="https://baike.baidu.com/item/%E7%A7%BB%E5%8A%A8%E5%B9%B3%E5%9D%87%E6%B3%95/10785547">移动平均法</a>基础上发展起来的，它具有移动平均法的优点，又可以减少运算过程中的数据储存量，同时还考虑了不同时期的数据所起的不同作用。采用指数平滑法的关键是确定α值。一般情况下，α值的大小，既和反映近期数据的能力有关，也和数据波动状况有关。通常不直接利用一次指数平滑法来预测，而是利用二次指数平滑法，求出平滑系数，建立起预测模型，再进行预测</p><p>P38 8.3s</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427213327.png" style="zoom:25%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427213358.png" style="zoom:25%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427213417.png" style="zoom:25%;" /><p>请注意：<strong>pycharm开的控制台越多越卡</strong>，所以之前的数据应该作废呜呜。。。还有以后跑之前记得把控制台全部关上。</p><h1 id="八股"><a href="#八股" class="headerlink" title="八股"></a>八股</h1><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155317.png" alt="第三章" style="zoom: 67%;" /><p>使用keras搭建</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210427213648.png" style="zoom:25%;" /><p>MNIST是著名的手写数字识别</p><p>Fashion是著名的着装图片识别。</p><h2 id="提纲"><a href="#提纲" class="headerlink" title="提纲"></a>提纲</h2><p>六步：</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155521.png" style="zoom: 50%;" /><p><strong>导入</strong></p><p><strong>设定训练、测试集</strong></p><p><strong>逐层搭建神经网络、前向传播</strong></p><p><strong>配置训练方法（优化器、损失函数、评测指标）</strong></p><p><strong>执行训练过程</strong></p><p><strong>打印网络结构和参数统计</strong></p><p>Sequential可以认为是个容器，封装了神经网络的结构</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155749.png" style="zoom: 33%;" /><p>卷积神经网络和循环神经网络，在第五讲和第六讲的时候再讲。</p><p>compile里的参数既可以填默认的字符串，亦可以写出具体函数然后细调参数</p><p>入门建议<strong>直接写名字</strong>，等掌握了再去官网查看函数的具体用法，调整超参数，细调函数参数</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428155802.png" style="zoom:33%;" /><p>注意from_logits判断是否经过了概率分布，如果没有进过概率分布，该参数就是true</p><p>后面经常使用sparse_categorical_accuracy</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428160240.png" style="zoom: 33%;" /><p>按照比例，还是按照输入特征分类。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428161322.png" style="zoom: 33%;" /><p>param = (输入+1)*输出    1是因为bia</p><p>鸢尾花复现在class3里的p8</p><p>如果需要“跳连”，大概就是可以设置比较深层的神经网络p11</p><p>init函数设置各层，call函数调用各层进行前向传播</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428172612.png" style="zoom:25%;" /><p>其中区别如下👇，</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428172607.png" style="zoom:33%;" /><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><h3 id="MNIST"><a href="#MNIST" class="headerlink" title="MNIST"></a>MNIST</h3><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210428170337.png" style="zoom: 33%;" /><p>在class 3 里 p13 14 15</p><h3 id="FASHION"><a href="#FASHION" class="headerlink" title="FASHION"></a>FASHION</h3><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210906154804517.png" alt="image-20210906154804517"></p><h1 id="八股功能扩展"><a href="#八股功能扩展" class="headerlink" title="八股功能扩展"></a>八股功能扩展</h1><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20200610164333221.png" alt="第四章" style="zoom: 67%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本课程结构：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;神经网络计算：搭建第一个神经网络模型&lt;/li&gt;
&lt;li&gt;神经网络优化：学习率、激活函数、损失函数、正</summary>
      
    
    
    
    <category term="ML" scheme="https://darren-dong.com/categories/ML/"/>
    
    
    <category term="八股" scheme="https://darren-dong.com/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>hot key</title>
    <link href="https://darren-dong.com/2021/04/05/%E5%BF%AB%E6%8D%B7%E9%94%AE%E9%9A%8F%E8%AE%B0/"/>
    <id>https://darren-dong.com/2021/04/05/%E5%BF%AB%E6%8D%B7%E9%94%AE%E9%9A%8F%E8%AE%B0/</id>
    <published>2021-04-05T02:36:09.000Z</published>
    <updated>2021-08-01T15:45:24.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h1><p>Fn + 左右箭头快速抵达行头行尾</p><p>Fn + shift + 左右箭头快速选中整行</p><p>C + f 搜索</p><h2 id="触控板"><a href="#触控板" class="headerlink" title="触控板"></a>触控板</h2><p>单指：</p><p>轻点两下为拖拽，选择</p><p>双指：</p><p>轻击为右键，反方向为滑动</p><p>三指：</p><p>左右滑动选择窗口</p><p>向下，隐藏所有窗口</p><p>向上，依次打开，保留次序</p><p>四指：</p><p>向上：最近打开的文件</p><p>向下：复原</p><p>左右：切换桌面</p><h1 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h1><p>C + g  快速到达某一行</p><p>C + A + 上下  为上下行的该位置添加光标，如果为空，则尽量左移</p><p>S + A + 拖动鼠标 选中规则同上</p><p>C + c  +  C + v 快速复制一行</p><p>或者 S + A + 上下</p><hr><p>C + /  单行注释</p><p>C + S + /   多行注释（改的，原来是S + A + a）</p><p>C + ~  打开终端</p><p>C + d 快速选中相同的</p><p>C + f 搜索</p><p>C + h 替换（可以全部替换）</p><p>C + +/-  放大/缩小布局</p><p>Tab 到达下一个光标</p><p>自定义快捷键</p><p>有些快捷键，我们使用不习惯，其实我们可以自定义快捷键的。</p><p>比如js 的多行注释是 shift + alt  + a  ，我们想修改为 ctrl + shfit +  /   </p><p>设置方法：   管理按钮  —   键盘快捷方式  —  输入  shift + alt  + a  找到这个快捷键  —– 点击编辑按钮  —- 直接按下  ctrl + shift  +  /     —- 最后按下回车 修改完毕。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/070e4f32b7326196062f020bbc3a91b30c7e470c.gif" alt="img"></p><h1 id="pycharm"><a href="#pycharm" class="headerlink" title="pycharm"></a>pycharm</h1><p>C + R是搜索。。</p><p>ipython里终端 C + r是回溯</p><h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><p>C + S + j   开发者模式（谷歌），在火狐有些不同</p><p>C + h   历史记录</p><p>C + n  打开新窗口</p><p>C + S + n  新无痕窗口</p><p>C + 左键:打开新标签方式</p><h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><p>C + b 加粗</p><p>C + i  斜体</p><p>C + k 设为超链接</p><h1 id="Jupyter-Notebook"><a href="#Jupyter-Notebook" class="headerlink" title="Jupyter Notebook"></a>Jupyter Notebook</h1><p>A 创建新单元格above当前单元格</p><p>B 创建新单元格below当前单元格</p><p>在markdown 和 code之间进行转换</p><p>markdown -&gt; code Y</p><p>code -&gt; markdown M </p><p>L 是显示行号d</p><p>双击D 可以删除单元格，Z撤销删除</p><p>S 保存！</p><p>最强的是C + S + P</p><p>打开万能的控制栏</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;通用&quot;&gt;&lt;a href=&quot;#通用&quot; class=&quot;headerlink&quot; title=&quot;通用&quot;&gt;&lt;/a&gt;通用&lt;/h1&gt;&lt;p&gt;Fn + 左右箭头快速抵达行头行尾&lt;/p&gt;
&lt;p&gt;Fn + shift + 左右箭头快速选中整行&lt;/p&gt;
&lt;p&gt;C + f 搜索&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="basic" scheme="https://darren-dong.com/categories/basic/"/>
    
    
    <category term="hot key" scheme="https://darren-dong.com/tags/hot-key/"/>
    
  </entry>
  
  <entry>
    <title>黑马移动端</title>
    <link href="https://darren-dong.com/2021/04/04/%E9%BB%91%E9%A9%AC%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    <id>https://darren-dong.com/2021/04/04/%E9%BB%91%E9%A9%AC%E7%A7%BB%E5%8A%A8%E7%AB%AF/</id>
    <published>2021-04-04T01:14:19.000Z</published>
    <updated>2021-08-09T07:26:34.913Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="移动端基础"><a href="#移动端基础" class="headerlink" title="移动端基础"></a>移动端基础</h1><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404092048961.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404092110874.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404092902977.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404093501592.png"></p><h2 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404094158699.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404094215546.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404094229638.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404094241052.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404094749176.png"></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404094809333.png"  style="zoom:50%;" /><h2 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404095411161.png"></p><p>开发尺寸显示在开发者工具中，我们开发网页根据这个就好了</p><p><strong>开发尺寸 * 物理像素比 = 分辨率</strong>             所以一个px可能由多个（dpr）物理像素组成</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404095756776.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404100314630.png"></p><hr><p><strong>图片缩放使用的属性</strong>：</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404101151359.png"></p><p>cutterman插件可以直接切出多倍图</p><h2 id="开发选择"><a href="#开发选择" class="headerlink" title="开发选择"></a>开发选择</h2><p>单独设计和响应式</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404101658904.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404101754577.png"></p><p>肯定更喜欢单独。。。</p><h2 id="技术解决方案"><a href="#技术解决方案" class="headerlink" title="技术解决方案"></a>技术解决方案</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404101935867.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404102038130.png"></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404102428587.png"  style="zoom:50%;" /><p>重温一下。。。。。。。</p><p>传统的叫做box-sizing : content-box;</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404102542684.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404102815857.png"></p><p><strong>还有一些以后可以积累！！！</strong></p><h1 id="常见布局"><a href="#常见布局" class="headerlink" title="常见布局"></a>常见布局</h1><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404103152496.png"></p><p>所以需要提前了解想去的公司采用怎样的方案。。。</p><p>pink老师会依次介绍哟！(＾Ｕ＾)ノ~ＹＯ</p><h2 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404111307804.png"></p><p>流式布局主要看的是宽度，高度不管。。。高度好像都是px</p><p>但是拉伸的时候也会影响到内部内容，所以必须加以限制！</p><p>可以用max/min - width/height 来辅助实现</p><hr><h3 id="京东案例"><a href="#京东案例" class="headerlink" title="京东案例"></a>京东案例</h3><p>懒得做了。。。记笔记吧</p><p><strong>准备</strong></p><p>方案：单独制作页面</p><p>技术选型：流式布局</p><p>文件布局： css  images  upload  js  index.html</p><p>准备：设置视口标签，引入css移动端初始化，引入自己的css文件。。。</p><hr><p><strong>body</strong></p><p>因为竖直下来每个盒子基本都是百分百宽度</p><p>**所以可以直接给body一个宽度100%**，而子盒子都能继承</p><p>但是一味地放大缩小会拉伸的很丑！所以指定宽度限制！然后居中对齐</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404112849868.png"  style="zoom:50%;" /><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404112952388.png"  style="zoom:50%;" /><p><strong>顶栏展示</strong></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404114145471.png"  style="zoom:67%;" /><p><strong>京东做法</strong></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404114233468.png"  style="zoom:67%;" /><p>但是<strong>高度设置的是固定的45px</strong>，这个应该是总结和调试出来的</p><p><em>用一个ul代表这一长条，里面有4个小li，好像特别喜欢用列表</em></p><p><em>不过这样确实满足“语义化” 这是个顶栏列表，里面包含了若干元素</em></p><p>他那个小叉和图片竟然是<strong>固定尺寸</strong>的！记得verticle-align : center;</p><p>然后这个不用a，到时候用js来做跳转特效就好了。。。果然结构和功能也要分离</p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404115119107.png"></p><p>宽度改变时，中间变短，俩边不变的效果</p><p>直接先做好两边的，用绝对定位和固定尺寸分别固定到这个长条盒子的两侧</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404115442039.png"  style="zoom:50%;" /><p>然后中间放的是没有宽度（使其铺满）的标准流，然后指定左右margin，略大于两侧盒子的宽度即可</p><p>然后使其居中，通过加上边距，但这样会导致外边距合并，加overflow:hidden解决</p><hr><p><em>ps：在div里面有子元素div1时，若父元素div在没有设置overflow:hidden或者是border属性，则父元素div的margin-top的值为父元素div和子元素div1中的margin-top的最大值。</em></p><hr><p><strong>列表栏和登陆栏</strong>写法：</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404120242284.png"  style="zoom:67%;" /><hr><p><strong>search栏</strong>：</p><p><strong>子元素均采用定位效果实现</strong></p><p>京东图标后面的小竖线：<img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404120515491.png"></p><p>记得after和before是作为子元素，所以这里加个position:absolute定位</p><p>再调定位到合适的位置呗</p><hr><p>应该用一个盒子包起来，然后设置fixed属性！不过记得同样设置宽度的限制范围哦</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404130538927.png"  style="zoom: 80%;" /><hr><p><em><strong>小放大镜是二倍精灵图</strong></em></p><p>错误做法：亮出精灵图相应图标的位置，直接用那个位置，然后缩放</p><p>这样是错误的，因为缩放是对整个图片进行缩放的，所以坐标也会发生变化</p><p>应该把坐标换为原来的n分之一，然后把图片缩放,background-size:</p><hr><p>主体内容部分是导航栏以下的所有内容的一个大盒子</p><p>包含了焦点图和商品啊，分类啊巴拉巴拉的</p><p>这些展示图，更新频率高的，记得放在upload文件夹里而不是images里面哟</p><p>竟然是三张图片分别放在3个盒子。。。。我以为背景一张图片，三个透明盒子。。。</p><hr><p>ps：<em>可以改成bottom/top/middle来改掉图片和边框间的空白缝隙，或者改成块元素</em></p><p>在设置图片边框样式中，图片或者表单等行内元素，这样会造成一个问题，就是图片底侧以及图片与图片之间会有一个空白缝隙。<strong>原因是行内元素之间的回车符系统默认为一个空格，占据了一定宽度。</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/20181109094353277.png" alt="在这里插入图片描述"></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404131738535.png"  style="zoom:80%;" /><hr><p><strong>导航栏</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404132002023.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404132022862.png"  style="zoom:50%;" />超链接里面放了一个图片和一个文字描述罢了。。复制20次</p><p>还有一些字体要用rem处理等巴拉巴拉。。</p><h2 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404133310817.png"></p><hr><p><strong>布局原理</strong></p><p>pink说flex布局比浮动布局好</p><p>因为flex有与浮动类似的性质，而且更好，所以float  clear失效</p><p>因为flex自带垂直居中的方法，所以vertical-align熟悉失效</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404202621904.png"  style="zoom: 80%;" /><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404202720250.png"></p><hr><h3 id="父级属性"><a href="#父级属性" class="headerlink" title="*父级属性"></a>*父级属性</h3><p>display:flex</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404203058261.png"  style="zoom:80%;" /><hr><p><strong>flex-direction</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404203413186.png"></p><p>默认主轴是x轴（row）</p><hr><p><strong>justify-content</strong></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404203804127.png"  style="zoom: 67%;" /><p>注意space-around是每个盒子的两边的外边距都一样</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404203910838.png"  style="zoom:50%;" /><hr><p><strong>flex-wrap</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404204314797.png"></p><p>默认会自动缩小元素在排列方向的长度（水平则缩小宽度）</p><hr><p><strong>align-items</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404204924293.png"></p><p>stretch会拉到和父亲一个尺寸，当然隔着一个margin，如果设置了相应方向的尺寸，则失效</p><hr><p><strong>align-content</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404205130782.png"></p><p>为啥要搞出俩属性。。。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404205514687.png"></p><hr><p><strong>flex-flow</strong></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404205750060.png"  style="zoom:50%;" /><p>还有一些其他的属性，以后得补补</p><hr><h3 id="子项属性"><a href="#子项属性" class="headerlink" title="子项属性"></a>子项属性</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404205938407.png"></p><hr><h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a><strong>flex</strong></h4><p>默认是0，分配剩余空间，所以不加宽度再设为1就可以占满剩下的所有</p><p>卧槽牛逼啊，横的竖的组合起来不是无敌了！顶多加个啥边距</p><p>无敌何须多言？？？！！！</p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404211047059.png"></p><p>align-self属性不适用于块类型的盒模型和表格单元。如果任何 flexbox 元素的侧轴方向 margin 值设置为 auto，则会忽略 <code>align-self</code>。</p><p>这货的属性蛮多的。。不知道有啥用</p><hr><p><strong>order</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404211641830.png"></p><p>挺不错的欸，这个order</p><h3 id="携程网案例"><a href="#携程网案例" class="headerlink" title="携程网案例"></a>携程网案例</h3><p>仍然懒得做。。记笔记吧<img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404211730880.png"  style="zoom:50%;" /></p><p><strong>初始化</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404212240317.png"></p><p>overflow-x:hidden 不出现水平滚动条</p><p>还是技术选型。。。flex，好无聊，高度还是定死的，巧用flex一下就完了</p><p><strong>固定在上方的导航栏</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404213131595.png"></p><p>要兼容的话，在transform前加上一句-webkit-transform : translateX(-50%);</p><p>里面一个搜索框一个头像，给头像（右）加个宽度，搜索框不加宽度，用flex:1，tql吧！！</p><p>这边突然有个坑，CSS3模型，如果有边框，那么行高=高来垂直居中会偏下，必须行高=内容区域</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404232317142.png"  style="zoom:80%;" /><hr><h3 id="图-文字结构"><a href="#图-文字结构" class="headerlink" title="图+文字结构"></a><strong>图+文字结构</strong></h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404232725505.png"></p><p>上面一个span背景设成2倍精灵图，下面一个span里面写字，然后整个放进a里面</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210404232851846.png"></p><p><code>flex-direction: column</code></p><p><code>align-items : center</code></p><hr><h3 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405000418333.png"></p><p>好像支持不太好，注意格式哟</p><hr><p><strong>subnav</strong></p><p>卧槽，flex的指可以是百分比，按照父亲的给</p><p>虽然flex为主，但是也可以搭配其他的做</p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405001344268.png"></p><p>这边用了传统布局，h2标签是为了SEO优化。。。</p><p><strong>传统布局有时候一些盒子最好不用设置宽度，而是用内容+padding挤开</strong>，比如：</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405001902452.png"></p><h2 id="rem适配布局"><a href="#rem适配布局" class="headerlink" title="rem适配布局"></a>rem适配布局</h2><p>非常重要！<img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405002252282.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405003212779.png"></p><hr><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405003354284.png"  style="zoom:67%;" /><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405003444816.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405003529315.png"></p><p>screen….</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405092324456.png"  style="zoom:67%;" /><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405092639075.png"></p><hr><p>tips：</p><p><strong>如果判断最小值，应该从小到大写（pink推荐。。），如果判断最大值，应该从大到小写</strong></p><p><strong>min-width 和 max-width  是自带等于号的！</strong>and两边要留下空格。数字后必须跟单位</p><p>媒体查询并没有增加权重，所以如果特殊的是媒体查询的，要放在后面覆盖</p><p> <code>@media screen and (min-width:540px) and (max-width:969px)</code> 在540和970分界</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405093944821.png"></p><hr><p><strong>引入资源</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405094452887.png"></p><h3 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405113156180.png"></p><h4 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h4><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405113258345.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405113608309.png"></p><p><strong>但是注意页面元素的px值和页面一开始设置的px值是统一标准下的（美工图里的标准👇）</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405114113453.png"></p><hr><h4 id="苏宁案例"><a href="#苏宁案例" class="headerlink" title="苏宁案例"></a>苏宁案例</h4><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405114359486.png"></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405114524912.png"  style="zoom:67%;" /><p>别忘了写最常见的（默认大小，兜底）：</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405114745174.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405115111146.png"></p><p>这是引入样式的另一种思路，但其实都差不多感觉</p><hr><p><strong>body</strong></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405115339700.png"  style="zoom:50%;" /><p>因为没有手机是小于320px的，宽度直接设为<strong>你分的份数</strong>就好了</p><p>而在750px宽的设计图下，html大小可以直接给个变量50就好了</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405145326438.png"></p><hr><p>导航栏基本一样。。。再强调一下居中不是auto，fiex下要用left和transform</p><p><strong>虽然这里主体是用rem，但是哪个好用用哪个，不要局限死，这里明显flex好用嘛</strong></p><p>对于字体大小，美工一般会给可以直接看出大小的效果图。</p><p>不过这个搜索框的格式很怪</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405130326915.png"></p><p>图片最好是给装图片的框设置大小和方位巴拉巴拉</p><p>然后图片长宽 100%</p><hr><p>苏宁的导航栏不是用flex</p><p>是一堆a，（竟然没用ul和li）每个a里放一张图片和一个span</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405150455700.png"  style="zoom: 50%;" /><p>全都用rem来写，5个a的宽度刚好是一行的宽度</p><hr><h4 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h4><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405150949559.png"></p><p><strong>我就说嘛。那么高的精度，不管分几份好像都没关系</strong></p><p>初始化css叫normalize.css</p><p>cssrem修改默认html尺寸，按照设计图的样式来。</p><p><strong>flexible默认全屏。若要限制最大宽度</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 750px<span class="token punctuation">)</span></span><span class="token punctuation">&#123;</span>    <span class="token selector">html</span><span class="token punctuation">&#123;</span>        <span class="token property">font-size</span> <span class="token punctuation">:</span> 75px <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>rem + flexible + less 用的挺好的，再配上cssrem插件</p><p>flexible.js划分是按全屏幕的10等份，在移动端需要更改一下</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210406083616174.png"></p><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><p>一个网站，所有设备！！！</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405204535363.png"></p><p><strong>常见划分尺寸👇</strong>，并不是绝对！原来屏幕竟然是定死的！</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405204933124.png"></p><p>尺寸稍小是因为两侧流出空白比装不下好看</p><p>调整cssrem，在插件的设置栏可以调整默认一html单位的大小</p><hr><h4 id="条件注释"><a href="#条件注释" class="headerlink" title="条件注释"></a>条件注释</h4><p>由于浏览器版本的不同，对CSS里某些元素的解释也不一样，针对浏览器版本不同而选择不同CSS的代码，<br>其实我们还可以利用条件注释的方法来达到类似的目的，什么是条件注释，在此简单介绍一下，无非就是一些if判断啦，呵呵，但这些判断不是在脚本里执行的，而是直接在html代码里执行的，下面来介绍一下使用方法吧。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;!--[if XXX]>这里是正常的html代码&lt;![endif]–>这里XXX是一些特定的东东，在此列表几个出来，详细介绍各自的含义：&lt;!–[if IE]> / 如果浏览器是IE /&lt;!–[if IE 5]> / 如果浏览器是IE 5 的版本 /&lt;!–[if IE 6]> / 如果浏览器是IE 6 的版本 /&lt;!–[if IE 7]> / 如果浏览器是IE 7 的版本 /上面是几个常用的判断IE浏览器版本的语法，下面再来介绍一下相对比较少用的逻辑判断的参数：有几个参数：lte，lt，gte，gt及!各自的详细解释如下：lte：就是Less than or equal to的简写，也就是小于或等于的意思。lt ：就是Less than的简写，也就是小于的意思。gte：就是Greater than or equal to的简写，也就是大于或等于的意思。gt ：就是Greater than的简写，也就是大于的意思。<span class="token property">例句</span><span class="token punctuation">:</span>&lt;!--[if gt IE 5.5]> / 如果IE版本大于5.5 /&lt;!–[if lte IE 6]> / 如果IE版本小于等于6 /&lt;!–[if !IE]> / 如果浏览器不是IE /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="BootStrap"><a href="#BootStrap" class="headerlink" title="BootStrap"></a>BootStrap</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405210248567.png"></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405210651094.png"  style="zoom:50%;" /><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405210706832.png"></p><p><strong>3.xx偏向于移动端和响应式哟！！</strong></p><hr><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405211033985.png"  style="zoom: 67%;" /><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405211207765.png"></p><p>在中文文档找到“<strong>基础模板</strong>”，然后复制，但是基本和vscode一样，多了一个条件注释复制过来</p><p>然后引入css样式文件（内置了normalize.css）。。主要通过类来控制，默认border-box</p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405212232101.png"></p><p>得了解深一些才能自由diy</p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405212740845.png"></p><p>不用自己再手动写了。。。这到底是好是坏</p><hr><h3 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h3><p>与rem布局很相似，不过rem是划分屏幕，栅格是划分<strong>页面内容</strong>（container）</p><p>想要更好的使用，得了解这些封装的实质，比如分成12份最终是由百分比实现的</p><p>可以多用开发者工具查看网站的最终源码，多去查查文档</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405213028685.png"></p><p>卧槽。<strong>container可以有很多个，可以单独适用于某些行，挺棒的</strong></p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405213715077.png"></p><p><strong>行数</strong></p><p>行应始终位于容器中。</p><p>该行为列提供了一个居住的地方，理想情况下，列的总数为12。它还可以作为包装器使用，因为所有列都向左浮动，当浮动变得怪异时，其他行不会重叠。</p><p>行的每边也有15px的负边距。组成该行的div通常会被限制在容器的填充内部，而不是粉红色区域的边缘，但不能超出。15px的负边距将行压到容器顶部15px的填充上方，从而使行基本无效。此外，行确保您其中的所有div都显示在自己的行上，与上一行和下一行分开。</p><hr><p><strong>列</strong></p><p>列现在具有15px的填充。这种填充意味着列实际上接触行的边缘，由于行具有负边距，而容器具有正的填充，列本身就接触容器的边缘。但是，列上的填充将列内的任何内容推入所需的位置，并且在列之间提供了30px的装订线。切勿在行外使用列，否则将无法使用。</p><hr><p>如果份数相加小于12：</p><p>占不满整个屏幕，默认左对齐</p><p>如果分数相加大于12：</p><p>装不开的那些，超出的整体另起一行</p><p>通过给同一个盒子添加不同情况下的自定义类名来决定。卧槽，我悟了！</p><hr><p><strong>列嵌套</strong></p><p>跟flex一样开始套起来了</p><p>不要加margin值，因为分列他最后是变成百分比的宽度</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405214657467.png"></p><p>这个的边距是一开始栅格划分4个大盒子，每个大盒子里面嵌套一个小盒子搞的（又有默认15px内边距）。</p><hr><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405215012191.png"  style="zoom:67%;" /><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405215429060.png"></p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405215608395.png"></p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405220014929.png"></p><hr><h3 id="阿里百秀"><a href="#阿里百秀" class="headerlink" title="阿里百秀"></a>阿里百秀</h3><p>宏观布局</p><p>一个大container装下三大列</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405223837878.png"></p><p>然后放缩屏幕观察变化</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405224219100.png"></p><p>这个策略很重要！</p><hr><p>这个时候有个小问题，美工给的设计图是1280px，但默认最大宽度是1170px</p><p>所以就手动修改一下下</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405225000595.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405225308492.png"></p><p>有时候需要去掉padding，记得权重，而小心margin带来的影响</p><p><strong>字体图标组件，在boostrap选对应的类名加上去，实质是一个before元素</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405230516077.png"></p><p>高度不需要太在意，因为不同大小直接换布局，高度是定死的？？？</p><p>所以在响应式布局中，也有一些其实是不变的，或者说比起那种rem，它不变的地方很多</p><p>每个小的container都得分析四种或更多情况下的新布局哟</p><p>久违的清除浮动，可以直接加类 “ clearfix “来实现</p><p>卧槽，需要怎样的样式直接去中文文档里的排版里面查，它设定好了许多最通用的样式</p><p>然后如果需要改变一些文字样式，可以直接去辅助类 -&gt;上下文选择，，</p><p>然后他这些模块不是写死的，比如按钮的类可以加到span上，也有类似的外观</p><hr><p>完成了大屏幕的制作，现在针对小屏幕情况修饰一下</p><p>根据实际情况选择不同的处理方式，比如有个大图片，不要让它设置成宽度100%，而是设置居中</p><p>再小一点的时候就不合适，可以把图片隐藏，换成一个新元素（放了文字的盒子（平时隐藏，小显示））</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405233441558.png"></p><p>有两个贼方便的属性：visible-x和hidden-x</p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405233637111.png"></p><p>大屏幕竖直排列，小屏幕水平排列，很简单！别忘了媒体条件</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405233726919.png"></p><p>然后在其中再加上修饰，比如文字变小啊，</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405234026831.png"  style="zoom:50%;" />小小的修饰一下背景颜色嘿嘿</p><p>我们看样式的时候要切换到手机的尺寸检查，不然在pc端随意拖动宽度效果可能有些不一样</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405234244136.png"  style="zoom:50%;" /><p>小屏幕时把内边距记得也改小一点，不像👆</p><h2 id="总结！"><a href="#总结！" class="headerlink" title="总结！"></a>总结！</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405235002988.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405235128420.png"></p><p>感觉rem为主，配合flex确实很好，flex毕竟太规整了些，也可能是我现在接触不多</p><p>再见！55个小时，刚好2周学完，谢谢pink老师，带我入了前端的门！</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405235913519.png"></p><h1 id="Less基础"><a href="#Less基础" class="headerlink" title="Less基础"></a>Less基础</h1><p>怎么风评less 没有 sass好。。。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405095114785.png"></p><hr><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405095201588.png"></p><hr><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><blockquote><p>Less （Leaner Style Sheets 的缩写） 是一门向后兼容的 CSS 扩展语言。这里呈现的是 Less 的官方文档（中文版），包含了 Less 语言以及利用 JavaScript 开发的用于将 Less 样式转换成 CSS 样式的 Less.js 工具。</p></blockquote><p>因为 Less 和 CSS 非常像，因此很容易学习。而且 Less 仅对 CSS 语言增加了少许方便的扩展，这就是 Less 如此易学的原因之一。</p><ul><li><em>有关 Less 语言特性的详细文档，请参阅 <a href="https://less.bootcss.com/features/">Less 语言特性</a> 章节</em></li><li><em>有关 Less 内置函数的列表，请参阅 <a href="https://less.bootcss.com/functions/">Less 函数手册</a> 章节</em></li><li><em>有关详细的使用说明，请参阅 <a href="https://less.bootcss.com/usage/">Less.js 用法</a> 章节</em></li><li><em>有关第三方工具的详细信息，请参阅 <a href="https://less.bootcss.com/tools/">工具</a> 章节</em></li></ul><p>Less 到底为 CSS 添加了什么功能？以下就是这些新加功能的概览。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>无需多说，看代码一目了然：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@width<span class="token punctuation">:</span></span> 10px<span class="token punctuation">;</span><span class="token variable">@height<span class="token punctuation">:</span></span> <span class="token variable">@width</span> <span class="token operator">+</span> 10px<span class="token punctuation">;</span><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@width</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">@height</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><a href="https://less.bootcss.com/features/#variables-feature">了解关于变量的更多信息</a></strong></p><h2 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h2><p>混合（Mixin）是一种将一组属性从一个规则集包含（或混入）到另一个规则集的方法。假设我们定义了一个类（class）如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.bordered</span> <span class="token punctuation">&#123;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> dotted 1px black<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid 2px black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们希望在其它规则集中使用这些属性呢？没问题，我们只需像下面这样输入所需属性的类（class）名称即可，如下所示：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">#menu a</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #111<span class="token punctuation">;</span>  <span class="token mixin-usage function">.bordered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.post a</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token mixin-usage function">.bordered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>.bordered</code> 类所包含的属性就将同时出现在 <code>#menu a</code> 和 <code>.post a</code> 中了。（注意，你也可以使用 <code>#ids</code> 作为 mixin 使用。）</p><p><strong><a href="https://less.bootcss.com/features/#mixins-feature">了解关于混合（Mixin）的更多信息</a></strong></p><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>Less 提供了使用嵌套（nesting）代替层叠或与层叠结合使用的能力。假设我们有以下 CSS 代码：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#header .navigation</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#header .logo</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用 Less 语言我们可以这样书写代码：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token selector">.navigation</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.logo</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用 Less 书写的代码更加简洁，并且模仿了 HTML 的组织结构。</p><p>你还可以使用此方法将伪选择器（pseudo-selectors）与混合（mixins）一同使用。下面是一个<strong>经典的 clearfix 技巧</strong>，重写为一个混合（mixin） (<code>&amp;</code> 表示当前选择器的父级）(伪元素也要这样)：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.clearfix</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token selector">&amp;:after</span> <span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><a href="https://less.bootcss.com/features/#parent-selectors-feature">了解有关夫选择器的详细信息</a></strong></p><h3 id="规则嵌套和冒泡"><a href="#规则嵌套和冒泡" class="headerlink" title="@规则嵌套和冒泡"></a>@规则嵌套和冒泡</h3><p>@ 规则（例如 <code>@media</code> 或 <code>@supports</code>）可以与选择器以相同的方式进行嵌套。@ 规则会被放在前面，同一规则集中的<strong>其它元素的相对顺序</strong>保持不变。这叫做冒泡（bubbling）。</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.component</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token atrule">@media <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>    <span class="token atrule">@media  <span class="token punctuation">(</span>min-resolution<span class="token punctuation">:</span> 192dpi<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>      <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/img/retina2x.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token atrule">@media <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span> 1280px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.component</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.component</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-resolution</span><span class="token punctuation">:</span> 192dpi<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.component</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/img/retina2x.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1280px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.component</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>算术运算符 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 可以对任何数字、颜色或变量进行运算。如果可能的话，算术运算符在加、减或比较之前会进行<strong>单位换算</strong>。<strong>计算的结果以最左侧操作数的单位类型为准</strong>。如果<strong>单位换算无效或失去意义，则忽略单位</strong>，<strong>结果以第一个单位为准</strong>。若只有一个单位，以该单位为准<strong>无效</strong>的单位换算例如：px 到 cm 或 rad 到 % 的转换。</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token comment">// 所有操作数被转换成相同的单位</span><span class="token variable">@conversion-1<span class="token punctuation">:</span></span> 5cm <span class="token operator">+</span> 10mm<span class="token punctuation">;</span> <span class="token comment">// 结果是 6cm</span><span class="token variable">@conversion-2<span class="token punctuation">:</span></span> 2 <span class="token operator">-</span> 3cm <span class="token operator">-</span> 5mm<span class="token punctuation">;</span> <span class="token comment">// 结果是 -1.5cm</span><span class="token comment">// conversion is impossible</span><span class="token variable">@incompatible-units<span class="token punctuation">:</span></span> 2 <span class="token operator">+</span> 5px <span class="token operator">-</span> 3cm<span class="token punctuation">;</span> <span class="token comment">// 结果是 4px</span><span class="token comment">// example with variables</span><span class="token variable">@base<span class="token punctuation">:</span></span> 5%<span class="token punctuation">;</span><span class="token variable">@filler<span class="token punctuation">:</span></span> <span class="token variable">@base</span> <span class="token operator">*</span> 2<span class="token punctuation">;</span> <span class="token comment">// 结果是 10%</span><span class="token variable">@other<span class="token punctuation">:</span></span> <span class="token variable">@base</span> <span class="token operator">+</span> <span class="token variable">@filler</span><span class="token punctuation">;</span> <span class="token comment">// 结果是 15%</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>乘法和除法不作转换。因为这两种运算在大多数情况下都没有意义</strong>，一个长度乘以一个长度就得到一个区域，而 CSS 是不支持指定区域的。Less 将按数字的原样进行操作，并将为计算结果指定明确的单位类型。</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@base<span class="token punctuation">:</span></span> 2cm <span class="token operator">*</span> 3mm<span class="token punctuation">;</span> <span class="token comment">// 结果是 6cm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你还可以对<strong>颜色</strong>进行算术运算：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@color<span class="token punctuation">:</span></span> #224488 <span class="token operator">/</span> 2<span class="token punctuation">;</span> <span class="token comment">//结果是 #112244</span><span class="token property">background-color</span><span class="token punctuation">:</span> #112244 <span class="token operator">+</span> #111<span class="token punctuation">;</span> <span class="token comment">// 结果是 #223355</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>运算符两侧尽量有空格，<em>除法必须用括号括起来</em>！！！！</strong></p><p>不过，Less 提供的 <a href="https://less.bootcss.com/functions/#color-operations">色彩函数</a> 更有使用价值。</p><h3 id="calc-特例"><a href="#calc-特例" class="headerlink" title="calc() 特例"></a>calc() 特例</h3><p><em>Released <a href="https://github.com/less/less.js/blob/master/CHANGELOG.md">v3.0.0</a></em></p><p>为了与 CSS 保持兼容，**<code>calc()</code> 并不对数学表达式进行计算**，但是在嵌套函数中会计算变量和数学公式的值。</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@var<span class="token punctuation">:</span></span> 50vh<span class="token operator">/</span>2<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token variable">@var</span> <span class="token operator">-</span> 20px<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 结果是 calc(50% + (25vh - 20px))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>转义（Escaping）允许你使用<strong>任意字符串作为属性或变量值</strong>。任何 <code>~&quot;anything&quot;</code> 或 <code>~&#39;anything&#39;</code> 形式的内容都将按原样输出，除非 <a href="https://less.bootcss.com/features/#variables-feature-variable-interpolation">interpolation</a>。</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@min768<span class="token punctuation">:</span></span> ~<span class="token string">"(min-width: 768px)"</span><span class="token punctuation">;</span><span class="token selector">.element</span> <span class="token punctuation">&#123;</span>  <span class="token atrule">@media @min768</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.2rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token atrule">@media <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.element</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.2rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，从 Less 3.5 开始，可以简写为：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@min768<span class="token punctuation">:</span></span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token selector">.element</span> <span class="token punctuation">&#123;</span>  <span class="token atrule">@media @min768</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.2rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Less 3.5+ 版本中，许多以前需要“引号转义”的情况就不再需要了。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Less 内置了多种函数用于转换颜色、处理字符串、算术运算等。这些函数在<a href="https://less.bootcss.com/functions/">Less 函数手册</a>中有详细介绍。</p><p>函数的用法非常简单。下面这个例子将介绍如何利用 percentage 函数将 0.5 转换为 50%，将颜色饱和度增加 5%，以及颜色亮度降低 25% 并且色相值增加 8 等用法：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@base<span class="token punctuation">:</span></span> #f04615<span class="token punctuation">;</span><span class="token variable">@width<span class="token punctuation">:</span></span> 0.5<span class="token punctuation">;</span><span class="token selector">.class</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">percentage</span><span class="token punctuation">(</span><span class="token variable">@width</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns `50%`</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">saturate</span><span class="token punctuation">(</span><span class="token variable">@base</span><span class="token punctuation">,</span> 5%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">spin</span><span class="token punctuation">(</span><span class="token function">lighten</span><span class="token punctuation">(</span><span class="token variable">@base</span><span class="token punctuation">,</span> 25%<span class="token punctuation">)</span><span class="token punctuation">,</span> 8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><a href="https://less.bootcss.com/functions/">参见：函数手册</a></strong></p><h2 id="命名空间和访问符"><a href="#命名空间和访问符" class="headerlink" title="命名空间和访问符"></a>命名空间和访问符</h2><p>(不要和 <a href="http://www.w3.org/TR/css3-namespace/">CSS <code>@namespace</code></a> 或 <a href="http://www.w3.org/TR/css3-selectors/#typenmsp">namespace selectors</a> 混淆了)。</p><p>有时，出于组织结构或仅仅是为了提供一些封装的目的，你希望对混合（mixins）进行分组。你可以用 Less 更直观地实现这一需求。假设你希望将一些混合（mixins）和变量置于 <code>#bundle</code> 之下，为了以后方便重用或分发：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">#bundle()</span> <span class="token punctuation">&#123;</span>  <span class="token selector">.button</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid black<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>    <span class="token selector">&amp;:hover</span> <span class="token punctuation">&#123;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.tab</span> <span class="token punctuation">&#123;</span> ... <span class="token punctuation">&#125;</span>  <span class="token selector">.citation</span> <span class="token punctuation">&#123;</span> ... <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，如果我们希望把 <code>.button</code> 类混合到 <code>#header a</code> 中，我们可以这样做：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">#header a</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>  <span class="token mixin-usage function">#bundle.button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 还可以书写为 #bundle > .button 形式</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：如果不希望它们出现在输出的 CSS 中，例如 <code>#bundle .tab</code>，请将 <code>()</code> 附加到命名空间（例如 <code>#bundle()</code>）后面。</p><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>从 Less 3.5 版本开始，你还可以将<strong>混合（mixins）和规则集（rulesets）作为一组值的映射（map）</strong>使用。</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">#colors()</span> <span class="token punctuation">&#123;</span>  <span class="token property">primary</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token property">secondary</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.button</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #colors[primary]<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #colors[secondary]<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出符合预期：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.button</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><a href="https://less.bootcss.com/features/#maps-feature">参见： 映射（Maps）</a></strong></p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>Less 中的作用域（scope）与 CSS 中的作用域非常类似。首先在本地查找变量和混合（mixins），如果找不到，则从“父”级作用域继承。</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@var<span class="token punctuation">:</span></span> red<span class="token punctuation">;</span><span class="token selector">#page</span> <span class="token punctuation">&#123;</span>  <span class="token variable">@var<span class="token punctuation">:</span></span> white<span class="token punctuation">;</span>  <span class="token selector">#header</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@var</span><span class="token punctuation">;</span> <span class="token comment">// white</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与 CSS 自定义属性一样，混合（mixin）和变量的<strong>定义不必在引用之前事先定义</strong>。因此，下面的 Less 代码示例和上面的代码示例是相同的：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@var<span class="token punctuation">:</span></span> red<span class="token punctuation">;</span><span class="token selector">#page</span> <span class="token punctuation">&#123;</span>  <span class="token selector">#header</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@var</span><span class="token punctuation">;</span> <span class="token comment">// white</span>  <span class="token punctuation">&#125;</span>  <span class="token variable">@var<span class="token punctuation">:</span></span> white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><a href="https://less.bootcss.com/features/#variables-feature-lazy-loading">参见：懒加载</a></strong></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>块注释和行注释都可以使用：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token comment">/* 一个块注释 * style comment! */</span><span class="token variable">@var<span class="token punctuation">:</span></span> red<span class="token punctuation">;</span><span class="token comment">// 这一行被注释掉了！</span><span class="token variable">@var<span class="token punctuation">:</span></span> white<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>“导入”的工作方式和你预期的一样。你可以导入一个 <code>.less</code> 文件，此文件中的所有变量就可以全部使用了。如果导入的文件是 <code>.less</code> 扩展名，则可以将<strong>扩展名省略掉</strong>：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"library"</span><span class="token punctuation">;</span></span> // library.less<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"typo.css"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><a href="https://less.bootcss.com/features/#imports-feature">了解更多关于导入(Importing)的知识</a></strong></p><p>这里有个巨坑，如果用了导入，要连续保存才能显示</p><h2 id="进阶指南"><a href="#进阶指南" class="headerlink" title="进阶指南"></a><a href="https://less.bootcss.com/features/#mixins-feature">进阶指南</a></h2><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="蓝湖-慕客"><a href="#蓝湖-慕客" class="headerlink" title="蓝湖/慕客"></a>蓝湖/慕客</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405162122127.png"></p><p>蓝湖10人免费，慕客100人免费，直接注册账号，下载就自动装好了</p><p>卧槽，可以选择图层然后上传，选的图层会单独保留以供下载</p><p>可以直接查看一堆参数甚至代码，图片直接下好1，2，3倍，无敌啊</p><p>美工会分享项目给开发者</p><hr><h2 id="Swiper神器"><a href="#Swiper神器" class="headerlink" title="Swiper神器"></a>Swiper神器</h2><p>很有必要好好学一学</p><p>直接下载，最新那个，现在到6了（2021.4）解压解压</p><p>package -&gt; js/css  复制引入swiper.min.js 和 swiper.min.css</p><p>在swiper演示的那里选一个大概样式差不多的，后面可以自己调整</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405171415870.png"  style="zoom:67%;" /><p>进去后右键查看网页源代码嘿嘿，然后引入需要的文件</p><p>把HTML代码插入到需要的位置，再把CSS代码放到合适的位置，接下来开始定制！</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405171916821.png"></p><p>为了避免多个轮播图冲突，放在立即执行函数中</p><p>然后去查看API，描述了各组件的功能，少了东西可以去别的实例里面弄过来，（比如箭头啥的）这封装的挺好啊</p><p>然后去他的css或者html代码里面调那些东西。</p><p>我们可以通过查看API来选择我们需要的组件添加，也可以更改一下提供的css样式，毕竟他提供的子项都是盒子，但js逻辑是封装好的，只留下了几个API供调整</p><p>记得调一下swiperprivew，调一下显示的个数。。查手册yyds</p><hr><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>多轮播图冲突</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405195233991.png"></p><p>给上面html的container换类名或者加新的类名</p><p>然后给对应的js改类名</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210405195429469.png"></p><h2 id="提交网站到github"><a href="#提交网站到github" class="headerlink" title="提交网站到github"></a>提交网站到github</h2><p>首先建立与远程的链接</p><p>然后建立page。。。没了</p><p>或者直接用readme.md初始化，然后把文件拽进来。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;移动端基础&quot;&gt;&lt;a href=&quot;#移动端基础&quot; class=&quot;headerlink&quot; title=&quot;移动端基础&quot;&gt;&lt;/a&gt;移动端基础&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/darren-greenhand/</summary>
      
    
    
    
    <category term="web-front-end" scheme="https://darren-dong.com/categories/web-front-end/"/>
    
    
    <category term="html&amp;&amp;css入门" scheme="https://darren-dong.com/tags/html-css%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>黑马dom&amp;bom预习</title>
    <link href="https://darren-dong.com/2021/04/02/%E9%BB%91%E9%A9%ACdom&amp;bom/"/>
    <id>https://darren-dong.com/2021/04/02/%E9%BB%91%E9%A9%ACdom&amp;bom/</id>
    <published>2021-04-01T16:08:39.000Z</published>
    <updated>2021-08-09T07:25:42.419Z</updated>
    
    <content type="html"><![CDATA[<p>为了应付俩招新而学学黑马</p><p>结果学着学着忘记原先目的了。。。</p><p>既然都记了这么多了</p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330093612480.png"  style="zoom:50%;" /><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330093644248.png"  style="zoom:50%;" /><p><strong>构造函数首字母大写</strong></p><p>this！</p><p>!(<a href="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330213907799.png">https://gitee.com/darren-greenhand//picture/raw/master/image-20210330213907799.png</a>)</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330214012724.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330225348643.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330225823667.png"></p><p>其实函数也能遍历到，但是很少用</p><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><p>对象分：自定义，内置，浏览器对象</p><p>前俩是ES里的，浏览器对象是JS独有的</p><p>内置对象就是JS自带的，提供了最常用的和最基本的功能</p><p>可以查询MDN文档</p><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330231721351.png"></p><p>Math.random()返回一个随机小数 0&lt;= x &lt; 1</p><p>MDN提供了以此为基础的得到各种随机数的方法</p><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p>元素是标签</p><p>节点：所有内容，标签，属性，。。。</p><p>DOM把所有内容看作对象</p><p>因为文档页面从上往下加载，所以script</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330233811008.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330234121849.png"></p><p>如果没有</p><p>小心不要把伪数组当初对象哟</p><p>document.querySelector 返回指定选择器的第一个元素对象</p><p>document.querySelectorAll</p><p>获取<strong>body</strong>直接document.body，HTML 是documentElement</p><h2 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h2><p>事件是可以被JS侦测到的行为</p><p>是一种触发–响应机制</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330235606717.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330235841646.png"></p><h2 id="改变内容"><a href="#改变内容" class="headerlink" title="改变内容"></a>改变内容</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210330235939513.png"></p><p>innerHTML是W3C推荐的</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210331000356033.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210331001227962.png"></p><p>所以标签的属性在DOM中被当作属性</p><p>记得表单里显示的内容是value属性</p><h2 id="修改样式"><a href="#修改样式" class="headerlink" title="修改样式"></a>修改样式</h2><p><strong>行内样式（优先级最高）</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210331084125584.png"></p><p>循环精灵图</p><p>onfocus</p><p>onblur</p><p>提前准备好另一个类，然后修改类名</p><p>element.className = “change”</p><p>这会覆盖原先的类名</p><p>不想覆盖则 .class<strong>Name</strong> += “ new”</p><h3 id="排他思想"><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h3><p>先清除其他所有，再给自己设置</p><p>onmouseovr          onmouseout</p><h2 id="获得属性"><a href="#获得属性" class="headerlink" title="获得属性"></a>获得属性</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210331234557420.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210331234830475.png"></p><p>.removeAttribute(‘index’)</p><p>display none/block</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210331235859797.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401000324162.png"></p><p><strong>自定义属性</strong>（在页面而不是服务器存储并使用数据）</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401000808430.png"></p><p>ie11以上才有dataset，一般使用getAttribute</p><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><h3 id="获得节点"><a href="#获得节点" class="headerlink" title="获得节点"></a>获得节点</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401001133305.png"></p><p>dir方法用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>f1<span class="token operator">:</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> f2<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// Object &#123;f1: "foo", f2: "bar"&#125;</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>f1<span class="token operator">:</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> f2<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// Object</span><span class="token comment">//   f1: "foo"</span><span class="token comment">//   f2: "bar"</span><span class="token comment">//   __proto__: Object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码显示dir方法的输出结果，比log方法更易读，信息也更丰富。</p><p>该方法对于输出DOM对象非常有用，因为会显示DOM对象的所有属性。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401001628811.png"></p><p><strong>父子关系</strong></p><p>node.parentNode(离元素最近的父级节点，找不到返回null)</p><p>.node.childNodes()集合(包含元素节点和文本节点等等)，用nodetype加以筛选</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401103705538.png"></p><p>非官方但是被广泛支持<strong>：.children</strong>(集合)</p><p>.firstChild    .lastChild   这个会返回（元素节点或文本节点，超坑的是换行也是一个文本节点！）</p><p>兼容性问题👇IE9</p><p>.firstElementChild</p><p>.lastElementChild</p><p>兄弟节点用的很少</p><p>实际开发写法还是用ol.children[0]和ol.children[ol.children.length-1]或者自己知道数量</p><p>.node.nextSibling </p><p>.node.previousSibling</p><p>这俩也会看到文本节点</p><p>兼容性问题👇IE9</p><p>.node.nextElementSibling</p><p>node.previousElementSibling</p><h3 id="创建添加节点"><a href="#创建添加节点" class="headerlink" title="创建添加节点"></a>创建添加节点</h3><p>document.createElement(‘li’)</p><p>node.appendChild(child) node 父级  child子级</p><p>这是后面追加元素</p><p>node.insertBefore()</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401152243420.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401155757774.png"></p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>node.removeChild() 删的必须是子元素，</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401153308442.png"></p><h3 id="复制添加节点"><a href="#复制添加节点" class="headerlink" title="复制添加节点"></a>复制添加节点</h3><p>new = node.cloneNode()</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401154336923.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401160340035.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401160426412.png"></p><h1 id="事件高级"><a href="#事件高级" class="headerlink" title="事件高级"></a>事件高级</h1><h2 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401162928938.png"></p><h2 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401164058073.png"></p><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401164303889.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401165042532.png"></p><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401165508731.png"></p><p>兼容性问题 e = <strong>e||window.event</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401165948856.png"></p><p>event有个类似this的属性 currentTarget,没啥鬼用</p><p><strong>兼容性问题处理👇</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401170039029.png"></p><p><strong>阻止默认行为</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401170434080.png"></p><p>或者直接return false; 谁都能用但是return后的代码不执行，而且只用于传统的注册方式</p><p>直接preventDefault吧，</p><p><strong>阻止冒泡</strong></p><p>event.stopPropagation(); 兼容性问题。。</p><p>event.cancelBubble;老版本</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401172331089.png"></p><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401172602216.png"></p><p>配合e.target就很牛逼</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401172819901.png"></p><h2 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h2><h3 id="禁止右键和选中文字"><a href="#禁止右键和选中文字" class="headerlink" title="禁止右键和选中文字"></a>禁止右键和选中文字</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401193332860.png"></p><p>然而做得好的网站也不知道用什么方法防住了偷取内容。。</p><h3 id="鼠标事件对象"><a href="#鼠标事件对象" class="headerlink" title="鼠标事件对象"></a>鼠标事件对象</h3><p>MouseEvent</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401194638742.png"></p><p>mousemove 鼠标移动1px就会触发</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401195727163.png"></p><p>记得css修改img为position: absolute</p><h3 id="键盘数据对象"><a href="#键盘数据对象" class="headerlink" title="键盘数据对象"></a>键盘数据对象</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401200249491.png"></p><p>如果一直按着，down和press会一直输出。。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401200749931.png"></p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401202950239.png"   /><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401205111068.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401205237508.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401205457047.png"></p><p>所以不要声明名叫name的全局变量</p><h2 id="常见事件"><a href="#常见事件" class="headerlink" title="常见事件"></a>常见事件</h2><p><strong>窗口加载</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401205732846.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401205907695.png"></p><p><strong>调整窗口大小</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401210145839.png"></p><p>只要大小像素变化就会触发resize</p><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a><em><strong>定时器</strong></em></h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401210627622.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401210647133.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401210753231.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401211057397.png"></p><p>拯救男主角  clearTimeout(timerID)</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401211607592.png"></p><p><strong>倒计时！</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401212252996.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401212543518.png"></p><h2 id="JS执行队列"><a href="#JS执行队列" class="headerlink" title="JS执行队列"></a>JS执行队列</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401213938731.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401214513695.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401214628030.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401215019237.png"></p><p>如定时器3秒，就是3秒后吧事件放到任务队列中</p><h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401215151934.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401215422449.png"></p><p>传递参数</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401220658628.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401220733210.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401220946122.png"></p><h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p>navigator.userAgent对象存储了用户使用的浏览器的信息</p><h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401221612109.png"></p><h1 id="网页特效"><a href="#网页特效" class="headerlink" title="网页特效"></a>网页特效</h1><h2 id="offset系列"><a href="#offset系列" class="headerlink" title="offset系列"></a>offset系列</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401221901011.png"></p><p>在用后面俩的时候记得加上 + ‘px’</p><p>没有带定位的父亲则以一直网上找直到。。body</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401222324755.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401222559804.png"></p><h3 id="拖动模态框"><a href="#拖动模态框" class="headerlink" title="拖动模态框"></a>拖动模态框</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401230220830.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401230651020.png"></p><h3 id="电商放大图"><a href="#电商放大图" class="headerlink" title="电商放大图"></a>电商放大图</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401231203726.png"></p><p>大图片是一个图片，overflow:hidden</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401231551677.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401231934835.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401232233398.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401232246907.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401233200379.png"></p><h2 id="client系列"><a href="#client系列" class="headerlink" title="client系列"></a>client系列</h2><p>可视区</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401233316513.png"></p><h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><p>无需调用，立马自己执行的函数，第二个小括号可以看成是调用函数</p><p>最大的作用是独立创建了个作用域</p><ol><li><p>(function () {} )  ()</p><p>如 (function (a.b) {console.log(a+b); } )  (1,2)  //传参</p></li><li><p>(function () {} () )</p></li></ol><p>很多flexble核心源码是有关这个的</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401234824479.png"></p><h2 id="Scroll系列"><a href="#Scroll系列" class="headerlink" title="Scroll系列"></a>Scroll系列</h2><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401235104065.png"></p><p>onscroll事件，滚动事件</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401235720069.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210401235854824.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210402000122850.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20210402000256076.png"></p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20210402000309513.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;为了应付俩招新而学学黑马&lt;/p&gt;
&lt;p&gt;结果学着学着忘记原先目的了。。。&lt;/p&gt;
&lt;p&gt;既然都记了这么多了&lt;/p&gt;
&lt;h1 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h1&gt;&lt;img src=&quot;ht</summary>
      
    
    
    
    <category term="web-front-end" scheme="https://darren-dong.com/categories/web-front-end/"/>
    
    
    <category term="DOM" scheme="https://darren-dong.com/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>黑马html&amp;css</title>
    <link href="https://darren-dong.com/2021/03/20/%E9%BB%91%E9%A9%AChtml&amp;css/"/>
    <id>https://darren-dong.com/2021/03/20/%E9%BB%91%E9%A9%AChtml&amp;css/</id>
    <published>2021-03-20T13:42:25.000Z</published>
    <updated>2021-08-09T07:26:12.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h1><p>本教程缺失一些不常用的知识，以后见到了再学</p><h2 id="html标签（上）"><a href="#html标签（上）" class="headerlink" title="html标签（上）"></a>html标签（上）</h2><p>浏览器内核</p><p>（又称渲染引擎）负责读取网页内容，整理信息，计算网页的显示方式并显示页面</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210320214750898.png"></p><p>Web标准</p><p>由W3C规定，规定了不同浏览器解析出的效果基本一样，</p><p>三大部分：结构（整理），表现（外观样式），行为（交互）</p><p>标准提出的最佳体验方案：结构，样式，行为分离！！！！！</p><p>可以简单理解为分别对应H C J</p><p>语义：strong  em   del  ins</p><p>图像标签：src  alt  title width height border</p><p>超链接：href（#空连接   指向文件可以下载 视频） target(_self _blank)   </p><p>锚点链接：href（#id）</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210320222646217.png"></p><p>记得加分号</p><h2 id="html标签（下）"><a href="#html标签（下）" class="headerlink" title="html标签（下）"></a>html标签（下）</h2><p>表格：展示数据，而不是布局页面！</p><p>table : tr : th/td</p><p>table属性：align  border  cellpadding(内容与边框)  cellspacing(单元格间的缝隙) w h</p><p>thead  tbody语义化  （thead是区域，th是表头单元格）</p><p>合并单元格：rowspan（行）colspan（列）这里作为属性colspan=”2”占据两个行/列</p><p>也可以使用colgroup和col巴拉巴拉</p><p>列表：用来布局！无序，有序，自定义</p><p>ul只准放 li，但li里可以放任意    ol同上</p><p>自定义列表常用于对术语或名词进行解释或描述</p><p>dl（不能放别的） dt（名词）dd（用来说明的小弟） 但是dt和dd是兄弟关系！</p><p>表单：收集用户信息，主要交互之一</p><p>分为表单域，表单控件（表单元素），提示信息</p><p>表单域：包含表单元素的区域，把范围内的表单信息提交给服务器</p><p>form  action：指定接受并处理表单数据的服务器程序的url</p><p>method get/post这是REST规范吗？</p><p>name 表单域名称</p><p>表单控件：</p><ol><li><p>input：输入表单元素</p><p>单标签，必选属性type=“”</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210320231453362.png"></p><p>提示直接写在input标签前面:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>      男 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span><span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 女 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>免费注册(显示的内容)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>重新设置(显示的内容)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--回到默认--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>name: input元素的名称  单/复选框通过该属性合并</p><p>value：input属性的值，输入前默认值（不是提示语），按钮的value是送到后台的数据</p><p>placeholder：设置提示词，一输入就消失</p><p>name和value主要给后台人员使用</p><p>checked：针对单/复选框，设置成默认勾选checked</p><p>maxlength：正整数</p></li><li><p>select：下拉表单元素,至少包含一对option</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>山东<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    ............<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-->可以在option中定义selected=“selected”来选为默认选中项&lt;--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>textarea：文本域元素（大量输入文字，多行文本输入）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>    今日反馈：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        哇哦（这就是默认文本）    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--</span><span class="token punctuation">></span></span>一般cols和rows没人用，都是用CSS来搞！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>label：搭配input使用，绑定一个表单元素，点击lable里的文本时，浏览器自动聚焦到相应表单元素</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lable</span> <span class="token attr-name">for</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 用户名 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lable</span><span class="token punctuation">></span></span>lable><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>学会查阅文档！</p><h2 id="CSS1"><a href="#CSS1" class="headerlink" title="CSS1"></a>CSS1</h2><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210328202816143.png"  style="zoom: 33%;" /><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210328202925727.png"  style="zoom:33%;" /><p>代码风格：展开（一行一属性）虽然不区分大小写（除了字符串）单尽量小写</p><p>冒号和值之间空格，选择器和 { 间加个空格</p><h3 id="字体："><a href="#字体：" class="headerlink" title="字体："></a>字体：</h3><p>font-family：“宋体”可以，但由于兼容性不好，最好用英文写</p><p>font-family:  “Microsoft Yahei”,…..依次向后检索，用逗号分隔，但是多个单词组成的最好引号包起来</p><p>尽量使用系统默认自带字体，一般给body指定好看的</p><p>font-size：px像素，谷歌默认16px，<em><strong>标题标签比较特殊，需要单独指定文件大小，即使是子标签</strong></em></p><p>font-weight：好多属性。。更提倡使用数字</p><p>font-style：normal italic </p><p>复合属性：font</p><p>style weight <strong>size</strong>/line-height <strong>family</strong> 但是必须有size和family？</p><p><strong>此处这个line-height可以不加单位，如1.5  则继承的子元素默认行高为当前字体大小的1.5倍</strong></p><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>color: 关键词 十六进制 rgba</p><p>text-align</p><p>text-decoration: underline none  overline line-through</p><p>text-indent 首行缩进</p><p>line-height （行高）= 上+下+字高</p><h3 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h3><p>前身为Zen coding，用来缩写提高html/css速度，vscode集成该语法</p><p>html骨架：</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210321093355251.png"></p><ol start="8"><li>[]可以填充自己需要的属性，值无空格就不用引号</li><li>$$$连用则是001，002.。。</li><li>$后面加@-3*5表示逆序，终点为3，一共五次</li><li>为空格是Emmet停止缩写解析的<em>停止符号</em>，不要用来增加可读性</li><li>  :+值！</li></ol><p>css标签：</p><p>每个单词第一个字母+值（可不加单位，用默认）直接tab</p><p>tac  -&gt; text-align: center;</p><p>lh26 -&gt; line-height: 26px;</p><p>这种链接伪类先后顺序被称为 <em>LVHA 顺序</em>：<code>:link</code> — <code>:visited</code> — <code>:hover</code> — <code>:active</code>。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Selectors/Pseudo-classes_and_pseudo-elements#%E4%BC%AA%E7%B1%BB">参考列表</a></p><p>常用<code>*:hover</code></p><p>:focus，选择获得光标的元素，可用于表单</p><h3 id="CSS元素显示"><a href="#CSS元素显示" class="headerlink" title="CSS元素显示"></a>CSS元素显示</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210321113400485.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210321113748159.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210321113952029.png"></p><p>display</p><p>垂直居中：行高等于盒子高度就可以，line-height = height</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>background-color(默认transparent) 单用一个rgba（0，0，0，0.3）;调整背景颜色透明度，而不影响别的</p><p>background-image(便于控制位置)</p><p>background-repeat:repeat,no-repeat,repeat-x/y</p><p>background-position: 方位词(tcblcr) length(具体/百分比)x和y(默认center)</p><p>background-attachment:fixed(固定在视口),scroll(默认，固定在页面),local(固定在元素)</p><p>简写：无顺序要求，有约定顺序：</p><p>颜色  图片地址  平铺   滚动  位置</p><p>opacity: 影响全部！</p><h3 id="CSS三特性"><a href="#CSS三特性" class="headerlink" title="CSS三特性"></a>CSS三特性</h3><p>层叠性：同级后覆盖前</p><p><em><strong>简写的后面覆盖前面，并不会选择不冲突的覆盖，而是全部覆盖！！！！！</strong></em></p><p>继承性：子元素可以继承父元素的部分样式（text-,font-,line-这些开头的可以继承，以及color）</p><p>优先级：</p><p>一个选择器的优先级可以说是由四个部分相加 (分量)，可以认为是个十百千 — 四位数的四个位数：</p><ol><li><p><strong>千位</strong>： 如果声明在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes#attr-style"><code>style</code></a> 的属性（内联样式）则该位得一分。这样的声明没有选择器，所以它得分总是1000。</p></li><li><p><strong>百位</strong>： 选择器中包含ID选择器则该位得一分。</p></li><li><p><strong>十位</strong>： 选择器中包含类选择器、属性选择器或者伪类则该位得一分。</p></li><li><p><strong>个位</strong>：选择器中包含元素、伪元素选择器则该位得一分。</p></li></ol><p><strong>注</strong>: 通用选择器 (<code>*</code>)，组合符 (<code>+</code>, <code>&gt;</code>, <code>~</code>, ‘ ‘)，和否定伪类 (<code>:not</code>) 不会影响优先级。</p><p><strong>警告:</strong> 在进行计算时不允许进行进位，例如，20 个类选择器仅仅意味着 20 个十位，而不能视为 两个百位，也就是说，无论多少个类选择器的权重叠加，都不会超过一个 ID 选择器。</p><p>有一个特殊的 CSS 可以用来覆盖所有上面所有优先级计算，不过需要很小心的使用 — <code>!important</code>。</p><p>这是个属性值！！用于修改特定属性的值， 能够覆盖普通规则的层叠。</p><p>继承也不会影响优先级，有些浏览器给予默认样式的如a{}相当于个位，所以比继承高</p><p>后代选择器权重叠加</p><h2 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h2><h3 id="盒子"><a href="#盒子" class="headerlink" title="盒子"></a>盒子</h3><p>边框:</p><p>border-width  粗细</p><p>border-style 样式</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210321190451586.png"></p><p>border-color 颜色</p><p>简写：border: width style color  决定顺序，非强制</p><p>也可以border-tlrb：。。。</p><p>border-collapse collapse 合并相邻的边框  separate独立（重合会都显示（如加粗））</p><p>padding-left….. </p><p>直接padding就是那种：</p><p><em><strong>1个：全部   2个：上下 左右  3个：上  左右  下  4个：上右下左</strong></em></p><p>加padding会撑大盒子，而content内容不会变</p><p><em><strong>如果width没指定，则padding会压缩content，但只要指定，即使width=100%也会撑大，高度也一样</strong></em></p><p>块级元素子元素原本就和父元素一样宽，上面那条规则适用</p><p>margin-top。。。</p><p>margin简写同上。。。。</p><p>两个嵌套关系（父子）块元素在top有外边距，保留大的作为父元素的外边距，（塌陷）</p><p><strong>补充外边距合并及其解决方案</strong>：<a href="https://blog.csdn.net/songyi160/article/details/87891222">https://blog.csdn.net/songyi160/article/details/87891222</a></p><p>浮动盒子不会有该问题!!!!</p><p>解决方法：</p><ol><li>父元素加上边框</li><li>父元素加上内边距</li><li>父元素加overflow：hidden</li></ol><p>块级盒子水平居中：</p><ol><li>必须设定一个width</li><li>设定左右外边距为auto就行，一般是 margin: 0 auto;</li></ol><p>行内/行内块水平居中：</p><ul><li>给父元素text-align:center</li></ul><p>浏览器有默认内外边距，而且有时候不一样，清除：</p><p>在最第一行用*{margin:0 ; padding: 0}</p><p>行内元素尽量只设置左右，上下没效果</p><p>ps</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210321204859160.png"></p><p>css3新盒子属性</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">CSS</a> 属性 <strong><code>border-radius</code></strong> 允许你设置元素的外边框圆角。当使用一个半径时确定一个圆形，当使用两个半径时确定一个椭圆。这个(椭)圆与边框的交集形成圆角效果。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/border-radius-sh.png" alt="Images of CSS3 rounded corners: no rounding, rounding w/ an arc of circle, rounding w/ an arc of ellipse"></p><p>1个值:全部  2个：左上右下  右上左下  3个：左上  右上左下   右下    4个：左上开始顺时针</p><p>百分比是相对于宽度和高度的，高度一半就变成操场哈哈</p><p>也可以俩值 a/b或是分别指定椭圆的长轴和短轴</p><p>也可以分开：border-top-left-radius:</p><p>盒子阴影(box-shadow)</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210321214655930.png"></p><p><em><strong>但只准写inset不能写outset！！影子不占空间</strong></em></p><p>其中blur代表模糊程度</p><p>spread代表对模糊范围的等密度放缩</p><p>文字阴影：（text-shadow）</p><p>h-shadow  v-shadow   blur   color</p><p>css三种传统布局方式</p><ul><li>普通流/标准流/文档流（标签按规定好的默认方式排列，块/行内这些规则）（最基本）</li><li>浮动</li><li>定位</li></ul><p>实际开发中，一个页面基本包含了这三种布局方式（移动端有新的）</p><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p>一个准则：块级元素纵向选标准流，横向用浮动</p><p>float属性用于创建浮动框，将其移动到一边，直到左/右边缘触及 <strong>包含块</strong> 或 <strong>另一个浮动框</strong> 的边缘</p><p>float : none（默认）  left   right</p><p>三个主要特性：</p><ol><li>浮动元素会脱离标准流（脱标），不再占用原来的位置</li><li>浮动元素会一行内显示，不会有缝隙（可用margin），并且元素顶部对齐</li><li>浮动元素会具有Inline-block元素的特性</li></ol><p><em><strong>浮动元素经常和标准流父级搭配使用！</strong></em>，先用标准流父级划分大模块，实现纵向布局</p><p>浮动只会影响浮动盒子后面的标准流，不会影响前面的标准流！！！！</p><p><em><strong>清除浮动：</strong></em></p><p>若父盒子没指定高度，子元素浮动时高度则没高度了，</p><p>clear： left  right  both（几乎只用both）策略是：闭合浮动</p><p>四方法：</p><ol><li><p>额外标签法（隔墙法），W3C推荐</p><p><strong>在后面添加一个新标签（必须是<em>块级元素</em>），并且添加clear属性</strong></p><p>其实是这个空的块级标签左右不能有浮动，所以它把父级撑开了罢了</p><p>多了无意义标签，结构化较差</p></li><li><p>父级添加overflow属性：hidden/auto/scroll</p><p> <strong>overflow</strong> 定义当一个元素的内容太大而无法适应 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">块级格式化上下文</a> 时候该做什么。它是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow-x"><code>overflow-x</code></a> 和<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow-y"><code>overflow-y</code></a>的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Shorthand_properties">简写属性 </a>。（这只是把溢出隐藏了，不推荐）</p></li><li><p>父级添加：：after伪元素（结构简单，比较常用，上流）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix::after</span><span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> <span class="token comment">/*必须*/</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">&#125;</span><span class="token selector">.clearfix</span><span class="token punctuation">&#123;</span>    *<span class="token property">zoom</span><span class="token punctuation">:</span>1 <span class="token comment">/*使兼容IE6.7*/</span><span class="token punctuation">&#125;</span>然后给盒子加上clearfix类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>父级添加双伪元素(代码更简介，腾讯用)</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix::before .clear:after</span><span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.clearfix::after</span><span class="token punctuation">&#123;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.clearfix</span><span class="token punctuation">&#123;</span>    *<span class="token property">zoom</span><span class="token punctuation">:</span>1 &lt;!--使兼容IE6.7--><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="BFC"><a href="#BFC" class="headerlink" title="*BFC"></a>*BFC</h3><p><a href="https://blog.csdn.net/sinat_36422236/article/details/88763187">https://blog.csdn.net/sinat_36422236/article/details/88763187</a></p><h3 id="PS切图"><a href="#PS切图" class="headerlink" title="PS切图"></a>PS切图</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210321235346203.png"></p><p>图层切图</p><p>找到PSD其中的图片，快速导出为PNG</p><p>按住shift选择多个，-&gt;图层菜单-&gt;合并图层（Ctrl+E），导出（合并完不能分开/。。）</p><p>切片切图</p><p>（长按裁剪工具选择切片）切片工具选择区域-&gt;文件-&gt;导出选中的切片（存储为web所用格式JPEG好）</p><p>透明格式是拉到最底，把背景去掉（显示为黑白网格），导出为png或gif格式的</p><p>PS插件切图</p><p>Cutterman是插件，自动将需要的图层输出</p><p>用辅助线帮忙，左边拉俩线，再用选框工具量！</p><h3 id="小项目"><a href="#小项目" class="headerlink" title="小项目"></a>小项目</h3><p>css属性建议书写顺序</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210322130017462.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210322205425707.png"></p><p>当好多一排里的元素都有margin-right然后装不下时，可以让父元素大一点，这样最边上的元素能装下，而margin看不见所yi没关系</p><h3 id="favicon-ico图标"><a href="#favicon-ico图标" class="headerlink" title="favicon.ico图标"></a>favicon.ico图标</h3><ol><li>制作，先制作png图片，可以用<a href="http://www.bitbug.net/">比特虫</a>啥的转为ico文件</li><li>放到根目录的某处</li><li>然后引入<code>&lt;link rel=&quot;shortcut icon&quot; href=&quot;url&quot;?&gt;</code></li></ol><h3 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h3><p><strong>TDK</strong>三大标签</p><p>虽然有专门的SEO人员，但是前端也要做好一些工作</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325220057276.png"></p><ol><li><p>title </p><p>不可替代的第一个超重要标签</p><p>建议：网站名（产品名）-网站介绍（尽量不要超过30个汉字）</p><p>如：京东(JD.COM)综合网购首选-正品低价-品质保证-配送及时-轻松购物</p></li><li><p>description</p><p><em><strong>简要说明网站主要是做什么的</strong></em> 一般由SEO准备这些内容，前端复制就好了</p></li><li><p>keywords</p><p>是搜索引擎重要的标准，最好限制为6-8的关键词，中间用<strong>英文逗号</strong>隔开，展示<strong>最重要的</strong>产品或功能</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325220548104.png"></p></li></ol><p><strong>logo优化</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325235111811.png"></p><p><strong>所以这个a应该和logo块一样大，要改成block，h1可以不用设置</strong></p><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p>浮动可以让多个块级盒子横向排列</p><p>定位则是可以让盒子自由的在某个盒子内移动位置或固定屏幕中的某个位置，而且可以压住其他盒子。</p><h4 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h4><p>*定位组成</p><p>定位：即把盒子定在某个位置</p><p>定位=定位模式+边偏移</p><p>定位模式(position)： </p><p>static(静态)  relative(相对)   absolute(绝对)   fixed(固定)</p><p>边偏移：定位的盒子移动到最终位置，有top bottom left right四个属性</p><p>静态定位(static):</p><p>默认定位方式，按照标准流特性摆放，他没有边偏移。</p><p>静态定位在布局时很少用到</p><p>相对定位(relative)：</p><p>元素移动位置时相对它原来的位置来说的。参考点是自己原来的位置！</p><p>它走了以后它的位置仍会保留，并未脱离标准流。</p><p><strong>它最典型的应用是作为绝对定位的父元素</strong></p><p>绝对定位(absolute):</p><p>元素移动位置时，以父元素为基准</p><ul><li><p>如果没有祖先元素，<strong>或祖先元素没有定位</strong>，则以浏览器为准定位（Document文档）</p></li><li><p>如果祖先有定位（相对，绝对，固定定位），则以最近一级的有定位祖先元素为参考点移动位置</p></li><li><p>绝对定位会脱标，不占有原来的位置，覆盖下面的任何盒子（甚至浮动）</p></li></ul><p>子绝父相是通常，当然不是绝对的，只是用的多</p><p>固定定位(fixed)：</p><ul><li>以<strong>浏览器的可视窗口</strong>作为基准！</li><li>跟父元素没有任何关系</li><li>不随滚动条滚动</li><li>固定定位不再占有原先的位置，可看为特殊的移动定位</li></ul><p>固定定位小技巧：固定在版心右侧位置</p><ol><li>让固定定位的盒子left：50%  走到浏览器可视区（版心的一半）</li><li>让固定定位的盒子margin-left：版心宽度的一般距离+一点点空隙</li></ol><p>粘性定位 (sticky):</p><p>粘性定位可以被认为是相对定位和固定定位的混和，特点：</p><ul><li>以浏览器的可视窗口为参照点移动元素（固定定位特点）</li><li>占有原先的位置（相对定位特点）</li><li><strong>必须添加tlrb中的一个才有效</strong></li></ul><p>跟页面滚动搭配，兼容性一般般，IE不支持，去尼玛的破IE</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210323090921464.png"></p><h4 id="叠放次序"><a href="#叠放次序" class="headerlink" title="叠放次序"></a>叠放次序</h4><p>用z-index来控制前后次序</p><p>z-index: ..</p><ul><li>数值可以是正负整数/0（无单位），默认auto（当前级别为0），数值越大，盒子越靠上</li><li>如果属性值相同，则按照书写顺序层叠</li><li>只有定位的盒子才有z-index属性</li></ul><h4 id="定位拓展"><a href="#定位拓展" class="headerlink" title="定位拓展"></a>定位拓展</h4><ol><li><p>绝对定位的盒子居中</p><p>不能再用margin：0 auto</p><p><code>left:50%        margin-left: - 1/2*self-width</code></p><p>垂直类似</p></li><li><p>特殊的特性</p><ul><li>行内元素添加绝对/固定定位，<strong>可以直接设置高度和宽度</strong></li><li>块级元素添加绝对/固定定位，如果不给宽度或高度，默认大小是内容大小</li><li>浮动元素/绝对/固定定位都不会触发外边距合并的问题</li></ul></li><li><p>浮动的元素不会压住下面标准流的文字（最初浮动产生的目的就是做文本环绕效果）</p><p>但是绝对定位/固定定位会压住所有内容</p><p><strong>如果一个盒子既有left属性又有right属性，两者不是重叠，会默认left，同理，默认top</strong></p></li></ol><p>用并集选择器减少代码重复</p><p>再单独增加特殊的，或用类思想</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210323095911579.png"></p><h4 id="元素显示-隐藏"><a href="#元素显示-隐藏" class="headerlink" title="元素显示/隐藏"></a>元素显示/隐藏</h4><ol><li><p>display 显示隐藏</p><p><strong>none隐藏对象</strong>    两者对立   block还有显示元素的意思</p><p>隐藏后，不再占有原来的位置！</p></li><li><p>visibility 显示隐藏<br>默认inherit  visible  hidden  collapse(不常用)</p><p>仍保留原来的位置！</p></li><li><p>overflow 溢出显示隐藏</p><p>hidden  scroll(一直滚动)   visible  auto(需要时滚动)</p></li></ol><h2 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h2><h4 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h4><p>Sprites</p><p>为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度。</p><p><strong>核心原理</strong>：将网页中的一些<strong>小背景图</strong>像整合到一张大图中，这样服务器只需要请求一次就好了</p><ol><li>精灵技术主要针对于背景图片使用，其他图片可能更换频率高，不适合使用</li><li>这个大图片也成为sprites精灵图/雪碧图</li><li>主要通过background-position来显示部分。。</li><li>就是要盒子和移动距离刚好合适。。真麻烦</li><li>用ps的框选，打开窗口里的信息，查看x和y坐标，则位置就是-x,-y巴拉巴拉</li></ol><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210323214406626.png"></p><h4 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h4><p>iconfont</p><p>为前端工程师提供一种方便高效的图标使用方式，展示的是图标，本质属于字体</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210323214740389.png"></p><p><em><strong>icomoon的使用方法</strong></em></p><ol><li><p>选好，（编辑）下载成一个压缩包并解压</p><p>将fonts文件夹放到html文件根目录，4个字体文件是为了兼容所有噢！</p></li><li><p>在CSS样式中全局声明字体，打开icomoon文件夹，复制“style.css”里的代码到css里，</p><p>复制到<code>font-display:block</code>为止，记得更改到fonts的路径</p></li><li><p>在icomoon的demo.html文件查看对应代码最右边的小方框，粘贴就好了,也可以（\+编码）</p><p>在对应的标签加入样式里的<code>font-family:&#39;icomoon&#39;;</code> 其他文字属性仍然可用</p></li><li><p>追加，若原账户则默认存储，未保存则import icons，把selection.json文件上传，再继续挑选，仍然生成，这样会生成新的文件，替换原来的文件就好了</p></li></ol><p><em><strong>阿里的symbol引用</strong></em></p><p>确实挺好用的吧，先打开demo.html文件，复制生产的js和css代码，然后将类改成它提供的就好了，只是注意要改一下文件路径！</p><h4 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h4><p>如果一个盒子没有大小，只有边框，且颜色不同，则可以发现边框竟然是4个三角形</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210324084613633.png"></p><p>所以如果三个边框透明，只留下一个边框就可以做出一个三角形，大小取决于边框尺寸</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> xxpx solid transparent<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token comment">/*这行是兼容性*/</span>    <span class="token property">border-left-color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>底边是border尺寸*2，要完全出去就是移动这么多</p><h3 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h3><h4 id="一些技巧"><a href="#一些技巧" class="headerlink" title="一些技巧"></a>一些技巧</h4><p><strong>鼠标样式</strong></p><p>cursor : default  pointer  move  text  not-allowed</p><p>**input{outline : none}**不会出现默认的蓝色框</p><p>同样可以用于文本域等其他出现了该现象的元素们</p><p><strong>文本域原本右下角可以拉大，取消</strong>：</p><p>textarea{resieze: none;}</p><p><strong>textarea如果俩标签分行写输入时会有一个padding？</strong></p><p><strong>vertical-align</strong>（块级元素没有）</p><p>文本域也是行内块，也可以用</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210324090646156.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210324090857405.png"></p><p>图片默认是与文字基线对齐</p><p><strong>可以改成bottom/top/middle来改掉图片和边框间的空白缝隙，或者改成块元素</strong></p><p><strong>单行文字溢出省略号表示</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*1.先强制一行内显示文本，默认(normal自动换行)*/</span><span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span><span class="token comment">/*2.超出部分隐藏*/</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token comment">/*3.修改文本溢出样式*/</span><span class="token property">text-overflow</span> <span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>多行文字溢出省略号表示</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css">有较大兼容性问题，适合于webKit浏览器或移动端<span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token comment">/*弹性伸缩盒子显示*/</span><span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span><span class="token comment">/*限制在一个块元素内显示的文本行数*/</span><span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span>2<span class="token punctuation">;</span><span class="token comment">/*设置或检索伸缩盒对象的子元素排列方式*/</span><span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span>vertical<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>建议后台人员来做这个效果</strong>，<strong>操作更简单</strong></p><h4 id="常见布局技巧"><a href="#常见布局技巧" class="headerlink" title="常见布局技巧"></a><strong>常见布局技巧</strong></h4><ol><li><p>margin负值运用</p><p>原本浮动的盒子会发生边框加粗，可以用margin的负值使其重合</p><p>但是hover时会发生边框覆盖属性，可以在hover里面改成相对定位，<strong>压住其他标准流和浮动</strong>，但如果其他li都设置了定位，就用z-index来提高层级</p></li><li><p>文字围绕浮动元素</p><p>大盒子里放一个小浮动盒子，文字会被挤到一边就好了</p></li><li><p>行内块的巧妙运用</p><p>就是一排盒子嘛。。。</p></li><li><p>css三角强化</p><p>自由决定各方向边框的尺寸，如果缺少某底边，那左右两边会被截成一半，就这样构造出各种三角形，有些可以直接去掉，尺寸变为0，有些必须存在以辅助构建三角形，把颜色改成透明,格式：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">border-color</span><span class="token punctuation">:</span>transparent red transparent transparent<span class="token comment">/*右边红*/</span><span class="token property">border-style</span><span class="token punctuation">:</span>solid  border-width 100px 50px 0 0<span class="token punctuation">;</span><span class="token comment">/*高100，宽50*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="CSS初始化"><a href="#CSS初始化" class="headerlink" title="CSS初始化"></a>CSS初始化</h4><p>不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对HTML文本呈现的差异，照顾浏览器的兼容，我们需要对CSS初始化 CSSreset</p><p><strong>每个网页都必须首先进行CSS reset</strong></p><p>把字体如“宋体”转化成Unicode编码就不会有兼容性问题</p><p>如黑体\93d1\4f53</p><p>宋体\5b8b\4f53</p><p>微软雅黑\5FAE\8F6F\96C5\9ED1</p></li></ol><h2 id="HTML5新增"><a href="#HTML5新增" class="headerlink" title="HTML5新增"></a>HTML5新增</h2><p>针对以前的不足，增加了新的标签，表单，表单属性。。</p><p>新特性大多存在兼容性问题，但是时代在发展</p><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325130724672.png"></p><ul><li>都是块级元素</li><li>针对搜索引擎，都可以在页面中多次使用</li><li>在IE9中要把这些转化为块级元素</li><li>移动端更喜欢使用这些标签</li></ul><h3 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h3><p>video</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325131250427.png"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>video/ogg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    您的浏览器不支持video标签    <span class="token comment">&lt;!--依次向下检索，最后显示文字，处理兼容性问题--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">属性</th><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/tags/att-video-autoplay.html">autoplay</a></td><td align="left">autoplay</td><td align="left">如果出现该属性，则视频在就绪后马上播放。(谷歌要加muted)</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-video-controls.html">controls</a></td><td align="left">controls</td><td align="left">如果出现该属性，则向用户显示控件，比如播放按钮。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-video-height.html">height</a></td><td align="left"><em>pixels</em></td><td align="left">设置视频播放器的高度。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-video-loop.html">loop</a></td><td align="left">loop</td><td align="left">如果出现该属性，则当媒介文件完成播放后再次开始播放。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-video-muted.html">muted</a></td><td align="left">muted</td><td align="left">如果出现该属性，视频的音频输出为静音。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-video-poster.html">poster</a></td><td align="left"><em>URL</em></td><td align="left">规定视频正在下载时显示的图像，直到用户点击播放按钮。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-video-preload.html">preload</a></td><td align="left">auto metadata none</td><td align="left">如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-video-src.html">src</a></td><td align="left"><em>URL</em></td><td align="left">要播放的视频的 URL。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-video-width.html">width</a></td><td align="left"><em>pixels</em></td><td align="left">设置视频播放器的宽度。</td></tr></tbody></table><p>真正开发不用controls，用js自己搞控件</p><p>兼容性写法同上</p><p>音频Audio</p><p>除了width，height，poster都有，而且谷歌也把音频自动播放禁了</p><h3 id="新input"><a href="#新input" class="headerlink" title="新input"></a>新input</h3><p><strong>都必须放在form域里噢</strong></p><p>type =email url date time month week number显示用户输入类型</p><p>当输入不正确时，会自动提示不正确，尤其在手机端优化的很好</p><p>tel 手机号码</p><p>search搜索框</p><p>color生成一个颜色选择表单</p><p>新表单属性</p><ol><li><p>requried   required   必须输入</p></li><li><p>placeholder   显示文字   </p><p><strong>可以调样式<code>input::placeholder</code>可以选中placeholder</strong></p><p>但是它的边距其实也是文本的边距，直接调input内边距就好了</p></li><li><p>autofocus   autofocus   自动聚焦</p></li><li><p>autocomplete  on（默认）/off  显示历史填写，必须加上name同时成功提交过，一般改成off</p></li><li><p>multiple   multiple  可以多选文件</p></li></ol><h2 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h2><p>都有兼容性问题，ie9+才才支持</p><p>移动端支持优于pc端</p><p>不断改进中</p><p>应用相对广泛</p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>新增了属性选择器，结构伪类，伪元素。。</p><p>我直接把另一个汇总复制过来吧</p><p>当你使用选择器列表时，如果任何一个选择器无效 (存在语法错误)，那么整条规则都会被忽略。</p><p>但是在被组合起来以后，整个规则都会失效，无论是<code>h1</code>还是这个class都不会被样式化。</p><p>这组选择器包含了伪类，用来样式化一个元素的特定状态。</p><p>它还可以包含了伪元素，选择一个元素的某个部分而不是元素自己。</p><table><thead><tr><th align="left">选择器</th><th align="left">示例</th><th align="left">学习CSS的教程</th></tr></thead><tbody><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Type_selectors">类型选择器</a></td><td align="left"><code>h1 &#123; &#125;</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/user:chrisdavidmills/CSS_Learn/CSS_Selectors/Type_Class_and_ID_Selectors#Type_selectors">类型选择器</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Universal_selectors">通配选择器</a></td><td align="left"><code>* &#123; &#125;</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/user:chrisdavidmills/CSS_Learn/CSS_Selectors/Type_Class_and_ID_Selectors#The_universal_selector">通配选择器</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Class_selectors">类选择器</a></td><td align="left"><code>.box &#123; &#125;</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/user:chrisdavidmills/CSS_Learn/CSS_Selectors/Type_Class_and_ID_Selectors#Class_selectors">类选择器</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/ID_selectors">ID选择器</a></td><td align="left"><code>#unique &#123; &#125;</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/user:chrisdavidmills/CSS_Learn/CSS_Selectors/Type_Class_and_ID_Selectors#ID_Selectors">ID选择器</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors">标签属性选择器</a></td><td align="left"><code>a[title] &#123; &#125;</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Attribute_selectors">标签属性选择器</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes">伪类选择器</a></td><td align="left"><code>p:first-child &#123; &#125;</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Pseuso-classes_and_Pseudo-elements#What_is_a_pseudo-class">伪类</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements">伪元素选择器</a></td><td align="left"><code>p::first-line &#123; &#125;</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Pseuso-classes_and_Pseudo-elements#What_is_a_pseudo-element">伪元素</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Descendant_combinator">后代选择器</a></td><td align="left"><code>article p</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Combinators#Descendant_Selector">后代运算符</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Child_combinator">子代选择器</a></td><td align="left"><code>article &gt; p</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Combinators#Child_combinator">子代选择器</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Adjacent_sibling_combinator">相邻兄弟选择器</a></td><td align="left"><code>h1 + p</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Combinators#Adjacent_sibling">相邻兄弟</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/General_sibling_combinator">通用兄弟选择器</a></td><td align="left"><code>h1 ~ p</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Combinators#General_sibling">通用兄弟</a></td></tr></tbody></table><p>a+b  -  b必须紧跟a后且同级，插入br都不行</p><p>a ~b - 选择！后面的！所有兄弟</p><p>将所有类连成一串代表匹配包含所有这些类的元素</p><p>.a.b.c{}匹配同时含有a,b,c类的标签</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>a b<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>此处li拥有a和b类<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 属性</p><table><thead><tr><th align="left">选择器</th><th align="left">示例</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>[*attr*]</code></td><td align="left"><code>a[title]</code></td><td align="left">匹配带有一个名为<em>attr</em>的属性的元素——方括号里的值。</td></tr><tr><td align="left"><code>[*attr*=*value*]</code></td><td align="left"><code>a[href=&quot;https://example.com&quot;]</code></td><td align="left">匹配带有一个名为<em>attr</em>的属性的元素，其值正为<em>value</em>——引号中的字符串。</td></tr><tr><td align="left"><code>[*attr*~=*value*]</code></td><td align="left"><code>p[class~=&quot;special&quot;]</code></td><td align="left">匹配带有一个名为<em>attr</em>的属性的元素 ，其值正为<em>value</em>，或者匹配带有一个<em>attr</em>属性的元素，其值有一个或者更多，至少有一个和<em>value</em>匹配。注意，在一列中的好几个值，是用空格隔开的。</td></tr><tr><td align="left">`[<em>attr</em></td><td align="left">=<em>value</em>]`</td><td align="left">`div[lang</td></tr></tbody></table><p>子字符串匹配选择器（类似正则）</p><table><thead><tr><th align="left">选择器</th><th align="left">示例</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>[*attr*^=*value*]</code></td><td align="left"><code>li[class^=&quot;box-&quot;]</code></td><td align="left">匹配带有一个名为<em>attr</em>的属性的元素，其值开头为<em>value</em>子字符串。</td></tr><tr><td align="left"><code>[*attr*$=*value*]</code></td><td align="left"><code>li[class$=&quot;-box&quot;]</code></td><td align="left">匹配带有一个名为<em>attr</em>的属性的元素，其值结尾为<em>value</em>子字符串</td></tr><tr><td align="left"><code>[*attr**=*value*]</code></td><td align="left"><code>li[class*=&quot;box&quot;]</code></td><td align="left">匹配带有一个名为<em>attr</em>的属性的元素，其值的字符串中的任何地方，至少出现了一次<em>value</em>子字符串。</td></tr></tbody></table><p>如果你想在大小写不敏感的情况下，匹配属性值的话，你可以在闭合括号之前，使用<code>i</code>值。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">li[class^="a" i]</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>结构伪类：</strong></p><p><strong>:first-child     last-child    nth-child（n）</strong></p><p><strong>:first-of-type   last-of-child   nth-of-child(n)</strong></p><p>n可为数字，关键字（odd/even）或公式（不是从0开始！）</p><p>如果真的写一个n则<strong>从0开始</strong>自增查找，依次添加css格式，依次可以衍生其他公式</p><p>5n，选择5的倍数    n+5,从第五个开始选    -n+5前五个</p><p>nth-child   和   nth-of-type区别</p><p>nth-child是先看序号，再看是否满足标签，会给所有的盒子部分种类先排个序</p><p>nth-of-type则是先看标签，再给这些标签排序号</p><p>还有<strong>用户行为伪类（结构伪类）</strong>，有时叫做<strong>动态伪类</strong></p><p><strong>伪元素原则器</strong></p><p>通过css创建新标签元素，不需要HTML标签，从而简化HTML结构</p><p>以类似方式表现，不过表现得是像你往标记文本中加入全新的HTML元素一样，而不是向现有的元素上应用类。伪元素开头为双冒号<code>::</code>。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325171240102.png"></p><p><em><strong>是在父元素的里面创建的</strong></em>，content=””，这样啥都不加就不会有子，但一定要有</p><p><strong>备注：</strong>一些早期的伪元素曾使用单冒号的语法，所以你可能会在代码或者示例中看到。现代的浏览器为了保持后向兼容，支持早期的带有单双冒号语法的伪元素。</p><p><em><strong>遮罩层的顺序竟然是.tudou:hover::before{}，。。。</strong></em></p><p>div:hover .class 是鼠标经过div时里面的class类子元素变化</p><h3 id="过渡"><a href="#过渡" class="headerlink" title="*过渡"></a>*过渡</h3><p>CSS3颠覆性的特征之一，可以在不使用Flash动画或JavaScript的情况下，当元素从一种样式变换为另一种样式时为元素添加效果</p><p>ie9以下版本不支持但不会影响页面布局</p><p>如果想要多个属性，使用逗号分隔</p><p>transition: 属性 时间 运动曲线 何时开始,具体如下：</p><p>transition-property -duration -timing-function -delay</p><ol><li><p>属性：宽度高度背景颜色内外边距，若全部就写all</p></li><li><p>时间：单位是 秒（必须写单位）</p></li><li><p>运动曲线：</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">linear</td><td align="left">规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。</td></tr><tr><td align="left">ease</td><td align="left">规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。(默认是ease)</td></tr><tr><td align="left">ease-in</td><td align="left">规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。</td></tr><tr><td align="left">ease-out</td><td align="left">规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。</td></tr><tr><td align="left">ease-in-out</td><td align="left">规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。</td></tr><tr><td align="left">cubic-bezier(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td><td align="left">在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。</td></tr></tbody></table></li><li><p>何时开始，必须有单位 秒，可以设置延迟触发时间，默认是0s（可以忽略）</p></li></ol><h3 id="其他新的"><a href="#其他新的" class="headerlink" title="其他新的"></a>其他新的</h3><h4 id="新盒子"><a href="#新盒子" class="headerlink" title="新盒子"></a>新盒子</h4><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210325174427516.png"></p><h4 id="图片模糊（滤镜）"><a href="#图片模糊（滤镜）" class="headerlink" title="图片模糊（滤镜）"></a>图片模糊（滤镜）</h4><p>filter属性有很多提供给UI人员的值</p><p>filter:blur(15px)数值越大图像越模糊,0则不模糊，blur是个函数噢</p><p>calc函数让开发者在声明值时执行一些计算(+ - * / )</p><p>比如：calc(100%-30px)</p><p>还增加了一些动画 2D 3D等特性</p><p>ps：肝了一天案例，在另一篇博文里</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210326211235526.png"></p><p>我的网站地址：<a href="http://darrenisme.usa3v.vip/">http://darrenisme.usa3v.vip/</a></p><h1 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h1><h2 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h2><p><strong>transform 位移，旋转，缩放，不过是二维的哟</strong></p><p><strong>配合transition牛逼极了</strong></p><p><strong>translate(x,y</strong>) 在x，y轴上移动的位置</p><p>或translateX(n)           translateY(n)</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403113752031.png"></p><p>所以水平垂直居中就可以:</p><p>position: absolute  left:50%   top:50%</p><p>transform : translate(-50%, -50%)</p><p><strong>rotate</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403114931593.png"></p><p>可以用边框旋转来弄出三角哈哈哈哈</p><p><strong>旋转中心点</strong></p><p>transform-origin : x,y</p><p>可以是百分比，像素值，关键词tblrc</p><p>案例：</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403125024006.png"  style="zoom:33%;" /><p>overflow:hidden  默认转90  hover时转上来</p><p><strong>scale</strong></p><p>transform:scale(x,y);</p><p>里面的参数是不跟参数的数字，表示倍数</p><h3 id="综合写法"><a href="#综合写法" class="headerlink" title="综合写法"></a>综合写法</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403130305541.png"></p><p>注意顺序，如果先旋转后位移，则位移是按照旋转瞬间的角度位移的</p><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>animation 颠覆性 </p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403130558562.png"  style="zoom:50%;" /><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403130710410.png"  style="zoom:50%;" /><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403130745131.png"></p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20210403130917882.png"  style="zoom:50%;" /><p>duration 单位是秒 s  或毫秒ms</p><h3 id="属性一览"><a href="#属性一览" class="headerlink" title="属性一览"></a>属性一览</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403131802217.png"></p><p><strong>animation - play -state  应该是paused</strong></p><p><strong>经常与hover 配合使用 就可以鼠标放上去就停止，鼠标离开继续走</strong></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403132727955.png"></p><p>注意时间如果有俩 必然先是持续时间 后是何时开始</p><p>steps可以做出诡异的效果👇</p><p>可以用那种做出那种连续动画的效果，准备好不同动作的图片就好了</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403150156949.png"></p><h3 id="热点图案例"><a href="#热点图案例" class="headerlink" title="热点图案例"></a>热点图案例</h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403132930592.png"></p><p>大致结构（1个城市）</p><p>city相对定位到小圆点除</p><p>先放1个小圆点，再放几圈波纹</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403143518688.png"  style="zoom:50%;" /><p>css波纹</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403143925973.png"  style="zoom:50%;" /><p>动画效果</p><p>pink用的是 0%- 70%长宽变大，透明度不变，70 -100 长宽变大 ，透明度变为0，scale会导致阴影本身也变大</p><p>然后选择匀速，无限循环  小心权重问题</p><p>然后单独给后面几个加上delay  注意间隔相等。比如一共1.2秒 3个波纹 则第二个0.4 第三个0.8</p><p>元素可以添加多个动画，用逗号分隔</p><h2 id="3D！！！"><a href="#3D！！！" class="headerlink" title="3D！！！"></a>3D！！！</h2><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403173429153.png"   /><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403173546861.png"  style="zoom:50%;" /><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403174500115.png"></p><h3 id="透视原理图"><a href="#透视原理图" class="headerlink" title="透视原理图"></a><strong>透视原理图</strong></h3><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403175448612.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403175954749.png"></p><p>这个沿着。。其实是以。。为轴</p><p>方向正负可以用左手。。大拇指指向某轴正方向，。。。</p><p>rotate3d(x,y,z,deg) 其中xyz表示旋转轴矢量</p><p>这个3d旋转也可以使用 transform-origin: 但是z轴属性必须用&lt;length&gt;,没有关键字</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403191246272.png"></p><p>盒子选择案例：</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403193245498.png"  style="zoom:50%;" /><p>他这种做法比较好，比起更改甚么旋转轴来说</p><p>还有一个属性perspective-origin  可以更改视角，而不是简单的就是沿着z轴看过去</p><h3 id="旋转木马"><a href="#旋转木马" class="headerlink" title="旋转木马"></a>旋转木马</h3><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403200440564.png"  style="zoom:50%;" /><p>代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">body</span> <span class="token punctuation">&#123;</span>            <span class="token property">perspective</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">section</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 185px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 500px auto<span class="token punctuation">;</span>            <span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-3d<span class="token punctuation">;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> rotate 4s infinite linear<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>1.jpg<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">section:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>            <span class="token property">animation-play-state</span><span class="token punctuation">:</span> paused<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@keyframes</span> rotate</span> <span class="token punctuation">&#123;</span>            <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">section div</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>example.jpg<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid blue<span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">section div:nth-child(1)</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">//这里是先转了个角度，然后轴也跟着变化了，Z轴表示各个图正对的，直接走就好了        section div:nth-child(2)</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>60deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">section div:nth-child(3)</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>120deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">section div:nth-child(4)</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">section div:nth-child(5)</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>240deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">section div:nth-child(6)</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>300deg<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>500px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403204706921.png"></p><p>浏览器私有前缀</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210403204317033.png"></p><p>因为制定HTML和CSS标准的组织W3C动作是很慢的。<br>通常，有w3c组织成员提出一个新属性，比如说圆角border-radius，大家都觉得好，但w3c制定标准，要走很复杂的程序，审查等。而浏览器商市场推广时间紧，如果一个属性已经够成熟了，就会在浏览器中加入支持。<br>为避免日后w3c公布标准时有所变更，加入一个私有前缀，比如-webkit-border-radius，通过这种方式来提前支持新属性。<br>等到日后w3c公布了标准，border-radius的标准写法确立之后，再让新版的浏览器支持border-radius这种写法。</p><p>移动端见另一篇博文~~~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一阶段&quot;&gt;&lt;a href=&quot;#第一阶段&quot; class=&quot;headerlink&quot; title=&quot;第一阶段&quot;&gt;&lt;/a&gt;第一阶段&lt;/h1&gt;&lt;p&gt;本教程缺失一些不常用的知识，以后见到了再学&lt;/p&gt;
&lt;h2 id=&quot;html标签（上）&quot;&gt;&lt;a href=&quot;#html标签（</summary>
      
    
    
    
    <category term="web-front-end" scheme="https://darren-dong.com/categories/web-front-end/"/>
    
    
    <category term="html&amp;css" scheme="https://darren-dong.com/tags/html-css/"/>
    
  </entry>
  
  <entry>
    <title>Javascript理论</title>
    <link href="https://darren-dong.com/2021/03/18/Javascript/"/>
    <id>https://darren-dong.com/2021/03/18/Javascript/</id>
    <published>2021-03-18T12:57:35.000Z</published>
    <updated>2021-08-09T07:21:38.281Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210327151203222.png"  style="zoom:50%;" /><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210327151652147.png"  style="zoom:50%;" /><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210327153158993.png"></p><p>第一门课主要学习JS语法，但是最好还是之后看一下JS红宝书</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210327153407994.png"></p><h2 id="1-简史"><a href="#1-简史" class="headerlink" title="1.简史"></a>1.简史</h2><p>这是我去先看了看红宝书第一章</p><p>JS被用于处理表单内容，但让网景公司成为了老大，微软眼红并仿写出了JScript，这是一个基于JS的实现，但由于两者不统一，最后1997年Ecma（欧洲计算机制造商协会）的TC39委员会制定出标准，花费数月时间出台了传说中的ECMA-262,也就是ECMAScript伪语言，<strong>此后，各浏览器以此作为实现的依据，但是他们的实现仍有偏好性</strong></p><p>虽然JS和ECMAScript基本是同义词，但是完整的JS实现应包含：</p><ol><li>核心  ECMAScript</li><li>文档对象模型  DOM</li><li>浏览器对象模型  BOM</li></ol><p>ECMAScript连输入输出都没有，他只是一个基准</p><p><strong>Web浏览器是其实现的一种宿主环境（node.js也是一种），提供ECMAScript的基准实现和与环境自身交互必须的拓展！</strong></p><p>拓展，比如DOM，使用ECMAScript核心类型和语法，提供特定于环境的额外功能，</p><p>ESMAScript描述了这门语言的：<strong>语法，类型，语句，关键字，保留字，操作符，全局对象</strong></p><p>现在都到ES12了。。。。</p><p>ECMAScript的符合性具备极大的自由度，给了实现开发者很大的权限！</p><p><strong>好多东西没写，一定要到时候好好看看红宝书，太棒了！</strong></p><h2 id="2-Html中的JS"><a href="#2-Html中的JS" class="headerlink" title="2.Html中的JS"></a>2.Html中的JS</h2><p>看不懂。。等以后</p><h2 id="3-语言基础"><a href="#3-语言基础" class="headerlink" title="3.语言基础"></a>3.语言基础</h2><p>我还是结合着看吧，红宝书全，但是视频有实战经验。</p><h3 id="嵌入HTML"><a href="#嵌入HTML" class="headerlink" title="嵌入HTML"></a>嵌入HTML</h3><p>主要方法是&lt;script&gt;方法，后来被正式加入到HTML规范，他有8个属性，没几个看得懂</p><p>但是defer这个属性使得script不用放在body前（兼容性不好，而且有时候可能出现顺序错乱，最好是只有一个这样的脚本，<strong>更好还是放在body的最后。。。</strong>），src允许使用外部js文件，integrity防止你在引用其他网站js文件时接受到恶意内容，async有很多限制，不推荐使用。。。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210327163947742.png" alt="image-20210327163947742"></p><p>从上到下解释，浏览器解析行内脚本的方式决定了即使字符串出现&lt;/script&gt;也会结束！</p><p>浏览器按照script出现的顺序解释他们，除了defer和async属性。</p><p>引用外部时，script标签之间绝对不能写代码</p><p>还有一些比如“文档模式”啥的鬼东西，看不懂。。。</p><p>&lt;noscript&gt;元素用于优雅降级，先用于那些金庸JS的浏览器，在浏览器不支持脚本或者支持被关闭时，将会渲染在noscript标签中的内容，否则则会被忽视掉，</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>单行注释//   对应快捷键 ctrl + /</p><p>多行注释和c语言一样，是/* <em>/ ,对应快捷键*<em>ctrl+shift+/</em></em>  改了以后</p><p>左下角设置可以直接更改快捷方式</p><p><strong>Js标识符可使用 字母  数字   下划线   美元符号   但是开头不能是数字，惯例是驼峰大小写！</strong></p><p>严格模式</p><p>所有浏览器都支持严格模式，会在遇到不规范写法时抛出错误</p><p>在整个脚本或者某个具体函数开头加上 <code>“use strict”;</code> 来开启</p><p>分号不是必须，但是有助于防止很多问题，也有利于压缩代码，提升性能等</p><p>和C一样，也用{}标识一个代码块</p><p>if类语句和C一样在多条时，必须要代码块，但好习惯是一句也要加代码块</p><p>很多关键字都在各个语言见过，没见过的有</p><p>catch   delete   extends   finally   instanceof   super   throw </p><p>还有一些未来的保留字</p><p>enum  implements  interface  let  package  protected  await</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>ECMAScript变量松散，可以存储任何类型数据，ES6之后才可以用let  const ，var啥时都能用</p><p>基本使用无二，不知道为啥说不推荐改变变量存储的类型，但是完全有效</p><p>在函数内部var会创建局部变量，但是省略var可以创建一个全局变量！</p><p>但是这种做法不被推荐，甚至在严格模式下会抛出ReferenceError</p><p>*<strong>var声明提升！</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    语句<span class="token number">1</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>实际上被ECMAScript理解为<span class="token keyword">var</span> age<span class="token punctuation">;</span>语句<span class="token number">1</span><span class="token punctuation">;</span>age <span class="token operator">=</span> <span class="token number">26</span>这使得变量可以后声明，也使得变量可以重复声明<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>var的作用域是函数作用域，if块中声明的var可在外面调用</p><p>let声明的范围是块作用域，而且<strong>不允许冗余声明</strong>（<strong>SyntaxError</strong>）</p><p>但是由于JS引擎会记录变量声明的标识符和所在的块作用域，可以嵌套使用相同的标签</p><p><strong>冗余报错会发生在同时使用var和let时，两个关键字声明的变量是相同的，只是指出变量在相关作用域如何存在。</strong></p><h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><p>只要块级作用域内存在<code>let</code>命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  tmp <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span>  <span class="token keyword">let</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，存在全局变量<code>tmp</code>，但是块级作用域内<code>let</code>又声明了一个局部变量<code>tmp</code>，导致后者绑定这个块级作用域，所以在<code>let</code>声明变量前，对<code>tmp</code>赋值会报错。</p><p>ES6 明确规定，如果区块中存在<code>let</code>和<code>const</code>命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p><p>总之，在代码块内，使用<code>let</code>命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。</p><p>这甚至会导致typeof出错，</p><p><strong>与var关键字不同，let在全局作用域中声明的变量不会成为window对象的属性？不懂。。</strong></p><p>const声明时必须同时初始化，而且不能修改，限制只适用于它指向的变量的引用，跟python一样</p><p>对for-of  for-in循环中的不会修改的变量特别有意义</p><h4 id="风格和最佳实践！"><a href="#风格和最佳实践！" class="headerlink" title="风格和最佳实践！"></a>风格和最佳实践！</h4><ol><li>不使用var</li><li>const优先，let次之</li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>对象的转换：<em><strong>如果操作数是对象，则这个对象将先使用valueOf()转换成原始值，如果结果还不是原始值，则再使用toString()方法转换；</strong></em></p><p>6种原始(简单)数据类型：Undefined Null Boolean Number String Symbol(ES6)</p><p>1种复杂数据类型：Object，这是一种无序名值对的集合</p><p>ES中不能定义自己的数据类型，但这些类型很灵活，一种能当多种数据类型用</p><p>typeof <strong>操作符，它不是函数</strong>，返回数据类型，也可以判断函数（返回’function’）</p><p>虽然函数也被ES认为是对象，但它们有特殊的属性，因此被typeof独立区分</p><h4 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h4><p>只有一个值undefined, var/let声明对象但未初始化就会赋予undefined</p><p>他理论上永远不用与显式赋值，只是为了<em><strong>区别空对象指针null和未初始化指针</strong></em></p><p><strong>但由于未声明的变量typeof也会返回undefined，所以最好还是在声明时就初始化</strong></p><p>这是一个假值，但是也有很多其他的假值，所以不要依靠真假判断是否是undefined</p><h4 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h4><p>只有一个值null，<strong>逻辑上讲，null值表示一个空对象指针，</strong>所以typeof null返回object</p><p>null 有属于自己的类型 Null，而不属于Object类型，typeof 之所以会判定为 Object 类型，是因为JavaScript 数据类型在底层都是以二进制的形式表示的，二进制的前三位为 0 会被 typeof 判断为对象类型，而 null 的二进制位恰好都是 0 ，因此，null 被误判断为 Object 类型。</p><p>声明时如果暂时不用赋值，最好赋一个null</p><p>undefined是由null值派生的，所以表面相等(null == undifined)</p><p>这是一个假值，但是也有很多其他的假值，所以不要依靠真假判断是否是null</p><h4 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h4><p>俩值，true  false，但是此处的布尔值不同于数值，所以不再是等于 1 和 0（哈哈，特意提醒）</p><p>所有类型的值都有相应布尔值的等价形式，通过Boolean（）转型函数转换</p><table><thead><tr><th>数据类型</th><th>true值</th><th>false值</th></tr></thead><tbody><tr><td>Boolean</td><td>true</td><td>false</td></tr><tr><td>String</td><td>非空字符串</td><td>“”</td></tr><tr><td>Number</td><td>非零值（<strong>包括无穷</strong>）</td><td>0  NaN</td></tr><tr><td>Object</td><td>任意对象</td><td>null</td></tr><tr><td>Undefined</td><td></td><td>undefined</td></tr></tbody></table><p>非常重要，因为if等流控制语句会自动执行该转换</p><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><p>整数</p><p>八进制和十六进制规则和C一样，但是八进制如果写错了直接忽略0当成十进制，数学操作中都当成十进制</p><p><strong>严格模式不能使用八进制前缀0，要用0o</strong></p><p>由于JS保存数值的方式，会存在正零，负零，是等价的</p><p>浮点数</p><p>存储空间是整数两倍，所以JS会尽可能把它们变成整数，如果小数点后为0，<strong>直接给你改成整数</strong>(如21.0)</p><p>ES会将小数点后至少6个0的浮点数转换为科学计数法</p><p>浮点数精确度高达17位小数，但是也存在如C般很小的偏差问题，因此不要用 == 对待浮点数</p><p>这是IEEE 754数值标准导致的。。</p><p>最小值Number.MIN_VALUE  5e-324  再小 -Infinity（Number.NEGATIVE_INFINITY）</p><p>最大值Number.Max_VALUE 1.79………………e+308, 再大 Infinity（Number.POSITIVE_INFINITY）</p><p>0作分子返回NaN（not a number） 作分母返回正负Infinity</p><p>NaN有一些诡异的属性：</p><ol><li>任何涉及NaN的操作始终返回NaN(如NaN/10)</li><li>NaN不等于包括自己在内的任何值！</li></ol><p>数值转换：</p><p>Number()   parseInt()   parseFloat()</p><p>Number的转换规则和一元加操作符一样，值得注意的是：</p><p>null返回0，undefined返回null。空字符串返回0</p><p>字符串包含有效的16进制，会转化成对应的<strong>十进制值。</strong></p><p>如果字符串包含正常情况外的词，返回NaN。</p><p>对于对象：先调用valueof（）方法，再按照正常规则转换，如果结果是NaN，则先调用toString，再按字符串规则转换。</p><p>所以必须用于十分标准的字符串才能得到合适输出，所以一般优先采用下面俩方法</p><p>parseInt规则：</p><p>跳过空白，开始检索，第一个不是数值，加减号，返回NaN,否则开始检索至结束或非法。</p><p>未加第二个参数则检索0x开头，0开头，最好加上，可以省略前缀</p><p>parseInt(“10100101”, 2),表示按<strong>二进制解析！</strong></p><p>parseFloat类似，但忽略开头的0，只用于十进制，若结果为整数，会返回整数</p><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>可用单，双，没有语法意义。。。pink推荐使用单引号</p><p>转义字符（字符字面量）（算一个字符）基本无二，\xnn ASCII   \unnnn  nnnn表示Unicode字符</p><p>字符串是不可变的！任何更改都导致原字符串销毁</p><p>toString方法可用于数值，布尔值，对象，字符串值（返回副本），</p><p><strong>null/undefined没有,调用则返回本身的字符串null-&gt;”null”</strong></p><p>在对待数值时可以指定显示的进制 </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token string">"1010"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>模板字面量</strong></p><p>通过<strong>反引号定义（但是这里书写用单引号。。不然变成代码块我靠）</strong>，保留内部的空白结构</p><p>技术上讲，模板字面量不是字符串而是一种特殊的JS句法表达式，只不过求之后得到的是字符串</p><p><strong>字符串插值</strong></p><p>模板字面量求值时立刻转换成字符串实例，任何插入的变量也会从它们最接近的作用域中提取</p><p>‘${}’来进行调用，可以变量，会将表达式用toString转化成字符串，可以调用函数和方法，可以插入自己以前的值</p><p>value = ‘${value}abc’  附加abc</p><p><strong>标签函数</strong></p><p>用来自定义插值行为，直接把定义的函数放在模板字面量前即可</p><p>function xxx(){}</p><p>let a = xxx’….’</p><p>注意传进去的第一个参量是[“”,”+”,]这种，其中所有的$被换成空字符串，符号保留，经常采用“剩余操作符”收集不确定的参数</p><p>原始字符串则调用了默认的String.raw标签函数,也可通过string(某字符串变量).raw来取得原始内容</p><h4 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h4><p>ES6新增，符号是原始值，符号实例唯一，不可变</p><p>用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险</p><p>符号需要使用Symbol（）函数初始化，</p><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><p>JS对象实质是一组数据和功能的集合，通过new+对象类型的名称来创建</p><p>可以通过创建Object实例来创建对象，再添加属性和方法</p><p>每个对象内置了一大堆方法，<strong>p56</strong></p><p>valueof方法将对象转换为原始值。你很少需要自己调用<code>valueOf</code>方法；当遇到要预期的原始值的对象时，JavaScript会自动调用它。如果对象没有原始值，则<code>valueOf</code>将返回对象本身。JavaScript的许多内置对象都重写了该函数，以实现更适合自身的功能需要。因此，不同类型对象的valueOf()方法的返回值和返回值类型均可能不同。此外你也可以自己写valueof来覆盖</p><table><thead><tr><th align="left"><strong>对象</strong></th><th align="left"><strong>返回值</strong></th></tr></thead><tbody><tr><td align="left">Array</td><td align="left">返回数组对象本身。</td></tr><tr><td align="left">Boolean</td><td align="left">布尔值。</td></tr><tr><td align="left">Date</td><td align="left">存储的时间是从 1970 年 1 月 1 日午夜开始计的毫秒数 UTC。</td></tr><tr><td align="left">Function</td><td align="left">函数本身。</td></tr><tr><td align="left">Number</td><td align="left">数字值。</td></tr><tr><td align="left">Object</td><td align="left">对象本身。这是默认情况。</td></tr><tr><td align="left">String</td><td align="left">字符串值。</td></tr><tr><td align="left"></td><td align="left">Math 和 Error 对象没有 valueOf 方法。</td></tr></tbody></table><p>你可以在自己的代码中使用<code>valueOf</code>将内置对象转换为原始值。 创建自定义对象时，可以覆盖<code>Object.prototype.valueOf()</code>来调用自定义方法，而不是默认<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object"><code>Object</code></a>方法。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">MyNumberType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">valueOf</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> customPrimitiveValue<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p>ES中的操作符可用于各种类型的值，在处理对象时会调用valueOf和toString来处理（C++重构吗）</p><p>因为数据类型有限，不会出现重构等问题，因此符号的所有规则都可以列出来！</p><h4 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h4><p>++  – 和C差不多，可用于任意值，应用后均变为数值类型</p><p>字符串非法则NaN,false和true变成0和1，对象先调用valueof（）方法，再按照正常规则转换，如果结果是NaN，则先调用toString，再按字符串规则转换。</p><p>+ and  - 会对非数值进行Number（）转换，</p><h4 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h4><p>虽然实际64位，但位操作时仅应用32位，第32位<strong>0正1负</strong>，无符号数就大一倍。</p><p>正值前31位正常，负值则是补码。（这里称二补数）</p><p><strong>但特殊值NaN和Infinity在位操作中被当成0</strong></p><p>C有的这里都有！右移使用符号位来填补空位，无符号右移<code>&gt;&gt;&gt;</code>则用0来填补！</p><h4 id="布尔操作符"><a href="#布尔操作符" class="headerlink" title="布尔操作符"></a>布尔操作符</h4><p>非操作符 ！ 无论对什么数据类型，先转换成布尔值，然后取反</p><p>！！ 相当于调用Boolean（）</p><p>&amp;&amp;逻辑与可以用于任何类型的操作数，不限于布尔，同样具有短路特性，如果操作数不全为布尔，则逻辑与并不一定返回布尔值：</p><ul><li>如果第一个操作数是对象，返回第二个操作数</li><li>如果两个操作数都是对象，返回第二个操作数</li><li>如果第二个操作数为对象，只有第一个操作数为true时才会返回该对象</li><li>只要出现null/NaN,undefined,就返回相应的</li></ul><p>||逻辑或，也会短路，如果操作数不全为布尔，则同样：</p><ul><li>如果第一个操作数是对象，返回第一个操作数</li><li>如果第一个操作数求值为false，则返回第二个操作数</li><li>如果第两个操作数是对象，返回第一个操作数</li><li>如果俩都为null/NaN,undefined,就返回相应的</li></ul><h4 id="乘性运算符"><a href="#乘性运算符" class="headerlink" title="乘性运算符"></a>乘性运算符</h4><p>*  也会在处理非数值自动调用Number（）</p><p>特性：</p><ul><li>任意操作数NaN返回NaN</li><li>Infinity * 0  -&gt;NaN</li><li>Infinity相乘，或乘有限数，返回+-Infinity</li></ul><p>/   特性:</p><ul><li>有NaN,返回NaN</li><li>无限除无限返回NaN</li><li>无限除有限（包括0）返回对应无穷</li><li>0 / 0 返回NaN</li><li>有限值 / 0 返回正负无穷</li></ul><p>% ：</p><ul><li>无限除任何 NaN</li><li>有限除 0 NaN</li><li>有限除无限  有限</li><li>0除 非0  0</li></ul><h4 id="指数操作符"><a href="#指数操作符" class="headerlink" title="指数操作符"></a>指数操作符</h4><p>**  和  **==</p><h4 id="加性操作符"><a href="#加性操作符" class="headerlink" title="加性操作符"></a>加性操作符</h4><p>+   注意：</p><ul><li>有NaN 返回NaN</li><li>无穷+负无穷  返回NaN</li><li>0相加，都是-0返回-0，否则返回+0</li><li>俩字符串则拼接</li><li>不然就转换成字符串，如果有undefined和null，变为”undefined”然后再拼接</li></ul><p>-  注意：</p><ul><li>同类无穷相减（其实就是难以判断正负的时候）为NaN</li><li>无穷相减，可判断正负则返回对应无穷</li><li>0相减，同号得正0，异号得-0</li><li>会转化成数值而不是字符串，对象也是和以前一样的处理</li></ul><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>还是四个，只返回布尔值</p><ul><li>出现数值，全转为数值比较</li><li>都是字符串则逐个比较（大写字母比小写字母顺序小）</li><li>对象先调用valueof（）方法，再按照正常规则转换，如果没有valueof操作符，则调用toString，再按字符串规则转换。</li><li>布尔被转化为0和1</li><li><strong>只要出现NaN，结果就为false</strong></li><li>null和undefined好像也是</li></ul><p>1、大于运算符</p><p>　　　　大于运算符的操作数可能是任意类型，然而，只有数字和字符串才能真正执行比较操作，因此那些不是数字和字符串的操作数都将进行类型转换。规则如下：</p><p>　　　　如果操作数是对象，则这个对象将先使用valueOf()转换成原始值，如果结果还不是原始值，则再使用toString()方法转换；</p><p>　　　　 在对象转换为原始值之后，如果两个操作数都是字符串，则按照字母表的顺序对两个字符串进行比较，这里提到的字母表顺序是指组成这个字符串的16位unicode字符的索引顺序；</p><p>　　　　 在对象转换为原始值之后，如果至少有一个操作数不是字符串，则两个操作数都转换成数字进行比较。</p><p>　　　　需要注意的是Javascript字符串是一个由16位整数值组成的序列，字符串的比较也只是两个字符串中的字符的数值比较，由unicode定义的字符编码和任何特定语言或者本地语言字符集中的传统字符编码顺序不尽相同。字符串比较是区分大小写的，所以一般首先会将字符串通过String.toLowerCase()或者是String.toUpperCase()做大小写的转换。</p><p>　　　　2、大于等于运算符</p><p>　　　　大于等于运算符并不依赖于大于或等于运算符的比较规则，而是遵循小于运算符的比较规则，结果取反</p><p>　　　　3、小于等于运算符</p><p>　　　　小于等于运算符(&lt;=)并不依赖于小于或等于运算符的比较规则，而是遵循大于运算符的比较规则，结果取反。</p><p>　　　　4、小于运算符</p><p>　　　　小于运算符(&lt;)用于比较两个操作数，如果第一个操作数小于第二个操作数，则小于运算符的计算结果为true，否则为false。</p><hr><p>所以要考虑到底是不满足条件，还是出现了NaN</p><p>大写字母的排序在小写字母前面，所以偏小</p><p>按照规则，null和undifined</p><h4 id="相等操作符"><a href="#相等操作符" class="headerlink" title="相等操作符"></a>相等操作符</h4><p>两组，等于和不等于 == ，  全等和不全等 ===</p><p>第一组进行强转再判断：</p><ul><li>布尔-&gt;数值</li><li>字符串比数值，字符串-&gt;数值</li><li>对象，用valueof对象再比较</li><li>null ==  undefined</li><li>null   undefined不能转化为其他类型的值再比较，因此不等于false，因为false-&gt;0</li><li>有NaN就返回false，不相等返回true</li></ul><p>全等不转换！null !== undefined  因为数据类型不同</p><p>条件运算符 () ?  :</p><p>赋值运算符 &gt;&gt;&gt;=</p><p>逗号运算符</p><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>也称流控制语句</p><p>if中自动调用Boolean，也有do-while，while，swtich(break规则一样的)</p><p><strong>for - in</strong>是一种严格的迭代语句，用于枚举对象中的<strong>非符号键属性</strong>（如window对象的属性）</p><p>for(const property in expression) {statement;}</p><p>这里的const不是必须的，但是为了确保局部变量不被修改，推荐使用const</p><p>ES中的对象属性是无序的，for-in不能保证返回的顺序，甚至因浏览器而异</p><p>如果迭代的变量是null / undefiend 则不执行循环体</p><p><strong>for-of</strong> 是一种严格的迭代语句，用于遍历<strong>可迭代对象的元素</strong>(如数组项)</p><p>for(const property of expression) {statement;}若尝试迭代的变量不支持迭代则抛出错误</p><p><strong>标签语句</strong></p><p>在语句前可以通过标签语句加标签，常用于嵌套循环中</p><p>break和continue + 标签可以生效后跳到label位置</p><p><strong>with语句</strong>将代码作用域设置为特定的变量</p><p>严格模式下不允许使用with</p><p>with(location){………}</p><p>在with语句内部，每个变量首先被认为是局部变量，如果不是，就搜索location对象，看他是否有一个同名属性，使得话，该变量就被求值为location对象的同名属性</p><p>swtich特性：</p><p>可以用于所有数据类型，case后面不加括号，可以加表达式！</p><p>甚至可以swtich(true)然后case里面放一堆判别式，<em><strong>不过case判断是全等！</strong></em></p><p>与多if相比，switch效率高，适合情况较多且比较确定，多if适合范围判断，情况较少</p><p>函数</p><h2 id="4-变量，作用域-内存"><a href="#4-变量，作用域-内存" class="headerlink" title="4.变量，作用域/内存"></a>4.变量，作用域/内存</h2><p>变量可存储两种类型的数据：原始值，引用值（由多个值构成的对象）</p><p>分别采用按值访问和按引用访问,<strong>很多语言中字符串是使用对象访问的,因此被认为是引用类型,但是ES不是</strong></p><p>引用值可以随意添加,修改和删除属性和方法</p><p>原始值不能有属性,但是添加时不会报错,但试图引用会返回undefined.</p><p>复制的时候,原始值是复制,引用值是引用原来内存里的变量,而不是创建副本</p><p><strong>但是所有函数的参数都是按值传递的</strong>,只不过引用值传进去的时候传的是一个指向（类似指针），所以在里面修改外面也能体现，但仍然是按值传递。</p><p>typeof能区分是否是对象,但是它却不能区分对象的具体类型，对引用值意义不大</p><p>instanceof对给定引用类型的对象十分有用,比如 person instanceof Object  变量person是Object吗?</p><p>所以该操作符检测任何引用值和Object构造函数都会返回true,但是检测原始值则始终返回false</p><h4 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h4><p>变量或者函数的上下文决定了可以访问的数据和行为.全局，函数，块级</p><p><strong>每个上下文都有一个关联的变量对象</strong>，虽然代码无法访问，但是后台处理数据可能用到</p><p>全局上下文是最外层的，根据实现的宿主，可能对象不一样，在<strong>浏览器中全局上下文是window对象</strong></p><p><strong>所有通过var方法定义的全局变量和函数都会成为对象的属性和方法</strong></p><p>上下文在其所有代码执行完成后会销毁，包括所有定义在它上面的变量和函数，全局上下文则在应用程序退出前才会销毁，比如关闭网页或者退出浏览器，函数参数被视为当前上下文的变量</p><p>上下文的代码在执行的时候，会创建变量对象的一个作用域链，从当前上下文往外直到全局上下文</p><p>自己理解下吧。。。</p><p><a href="https://knightyun.github.io/2019/09/02/js-hoisting#:~:text=%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%20%E6%98%AF%20JavaScript,%E7%9A%84%E4%B8%80%E7%A7%8D%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6%EF%BC%8C%E5%A4%A7%E8%87%B4%E5%B0%B1%E6%98%AF%E5%AD%97%E9%9D%A2%E6%84%8F%E6%80%9D%EF%BC%8C%E5%B0%86%E5%A3%B0%E6%98%8E%E7%9A%84%E5%8F%98%E9%87%8F%E6%8F%90%E5%89%8D%EF%BC%8C%E4%BD%86%E5%B9%B6%E4%B8%8D%E6%98%AF%E6%8C%87%E5%9C%A8%E7%BC%96%E8%AF%91%E6%97%B6%E6%94%B9%E5%8F%98%E8%AF%AD%E5%8F%A5%E7%9A%84%E9%A1%BA%E5%BA%8F%EF%BC%8C%E8%80%8C%E6%98%AF%E5%B0%86%E5%8F%98%E9%87%8F%20%E6%8F%90%E5%89%8D%20%E6%94%BE%E5%85%A5%E5%86%85%E5%AD%98%E4%B8%AD%EF%BC%8C%E4%BE%9B%E5%90%8E%E7%BB%AD%E6%93%8D%E4%BD%9C%EF%BC%8C%E4%B8%8B%E9%9D%A2%E9%80%9A%E8%BF%87%E5%AE%9E%E4%BE%8B%E8%BF%9B%E8%A1%8C%E5%88%86%E6%9E%90%EF%BC%9B">变量提升</a></p><p>个人理解，声明被提升到最前面，而赋值仍留在原地</p><p><strong>作用域增强？</strong></p><p>通常有两种情况：</p><ul><li>with(location)的location对象会被添加到作用域链的前端。</li><li>try/catch 回创建一个新的变量对象，该对象包含即将抛出的错误的声明。</li></ul><p><strong>执行上下文的生命周期</strong></p><p>执行上下文的生命周期包括三个阶段：<strong>创建阶段 → 执行阶段 → 回收阶段</strong>，本文重点介绍创建阶段。</p><ol><li>创建阶段</li></ol><p>当函数被调用，但未执行任何其内部代码之前，会做以下三件事：</p><ul><li>创建变量对象：首先初始化函数的参数 arguments，提升函数声明和变量声明。下文会详细说明。</li><li>创建作用域链（Scope Chain）：在执行期上下文的创建阶段，作用域链是在变量对象之后创建的。作用域链本身包含变量对象。作用域链用于解析变量。当被要求解析变量时，JavaScript 始终从代码嵌套的最内层开始，如果最内层没有找到变量，就会跳转到上一层父作用域中查找，直到找到该变量。</li><li>确定 this 指向：包括多种情况，下文会详细说明</li></ul><p>在一段 JS 脚本执行之前，要先解析代码（所以说 JS 是解释执行的脚本语言），解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来。变量先暂时赋值为 undefined，函数则先声明好可使用。这一步做完了，然后再开始正式执行程序。</p><p>另外，一个函数在执行之前，也会创建一个函数执行上下文环境，跟全局上下文差不多，不过 函数执行上下文中会多出 this arguments 和函数的参数。</p><ol start="2"><li>执行阶段</li></ol><p>执行变量赋值、代码执行</p><ol start="3"><li>回收阶段</li></ol><p>执行上下文出栈等待虚拟机回收执行上下文</p><h4 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h4><p>和之前一样，赋值为const的对象变量不能被重新赋值为引用值，但对象的键却不受限制</p><p>要想对象不能修改，可以 const variable = Object.freeze({})</p><p>这样会“静默失败”，即不提示出错，但是调用则返回undefined</p><p>应该尽可能使用const，除非确实需要一个将来会重新赋值的变量，以从根本上保证提前发现重新赋值导致的bug，由const声明的实例可被JS运行编译器替换成实际的值，而不会通过查询表进行变量查找，谷歌V8就是这种优化</p><p><strong>标识符查找</strong></p><p>使用块级作用域不会改变搜索流程，但会添加额外的层次</p><h4 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h4><p>垃圾回收有可能明显拖慢渲染的速度和帧速度</p><p>JS使用垃圾回收，即执行环境负责在代码执行时管理内存</p><p>周期性执行垃圾回收程序以处理不再使用的变量并释放其内存（<strong>近似且不完美</strong>）</p><p>历史上两种主要的标记策略：</p><ol><li><p>标记清理（常用）</p><p>运行时首先标记内存中存储的所有变量，然后将所有上下文中的变量以及被上下文的变量引用的变量的标记清理掉，在此之后再被加上标记或存在标记就会被清理，标记的实现并不重要，关键是打标记的策略</p></li><li><p>引用标记</p><p>记录每个值被引用的次数，当次数为0时清除，但可能导致循环引用，神之间接导致DOM,BOM由JS实现</p></li></ol><p>这对性能影响很大，如今IE7以后更新了回收的策略，极大提升了浏览器中JS性能</p><p>某些浏览器可以（不推荐）主动触发垃圾回收</p><h4 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h4><p>由于系统给浏览器分配内存远少于桌面应用（移动浏览器更少）所以有必要限制内存</p><p>这会影响变量分配，也影响调用栈以及能够同时在一个线程中执行的语句数量</p><p>最佳策略是只保存必要的数据再运行期间，如果数据不在必要，把它设置为null，解除引用，在垃圾回收时清理</p><p>局部变量在离开上下文时会自动解除引用，<strong>全局变量和对象要手动解除，设为null</strong></p><ol><li><p>尽量使用let和const</p></li><li><p>利用隐藏类</p><p>V8在将代码编译为实际的机器码时会利用“隐藏类”，共享隐藏类效果会更好</p><p><strong>最好的方法是在构造函数中一次性声明所有属性，把不再需要的属性设置为null</strong></p><p><strong>避免先创建再单独给实例创建或删除属性</strong></p></li><li><p>内存泄漏</p><p>可能有函数内部全局变量，定时器调用，闭包。。</p></li><li><p>静态分配和对象池（优化的极端形式，不太常见）</p><p>压榨浏览器，一个关键问题是如何减少浏览器回收垃圾的次数，可以间接触发回收条件。浏览器决定何时运行垃圾回收程序的一个标准就是对象更替的速度，如果有很多对象一下被初始化，马上又超出作用域，那么就会被浏览器用更激进的方式回收。</p><p><strong>如果函数会初始化变量，而马上又失去引用，则会被“盯上”，一个方案是函数调用已存在的对象，给他赋值</strong></p><p>那在哪里新建第一个已存在的对象才不会被盯上呢？一个策略是对象池：</p><p>在初始化的某一刻创建一个对象池，用来管理一组可回收的对象，其他代码可以向这里请求对象，更改或使用，然后返还它。这样垃圾回收检测就不会发现有对象更替，也就不会那么频繁地运行。</p></li></ol><h2 id="5-基本引用类型"><a href="#5-基本引用类型" class="headerlink" title="5.基本引用类型"></a>5.基本引用类型</h2><p>JS没有类，虽然是面向对象，但缺少某些基本结构比如类和接口，<strong>引用类型是把数据和功能组织到一起的结构</strong>，也被称<strong>对象定义</strong>，它们描述了自己的对象应有的属性和方法。</p><p>引用值（或对象）是某个特定引用类型的实例，新对象通过new操作符后+一个构造函数来创建。</p><p><em>构造函数是用来创建新对象的函数，负责创建一个只有默认属性和方法的简单对象</em></p><p>函数也是一种引用，但是内容好多，放在第十章</p><h1 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="2-3文档模式"><a href="#2-3文档模式" class="headerlink" title="2.3文档模式"></a>2.3文档模式</h3><h3 id="3-32-条件-amp-for声明"><a href="#3-32-条件-amp-for声明" class="headerlink" title="3.32 条件&amp;for声明"></a>3.32 条件&amp;for声明</h3><h3 id="Symbol类型"><a href="#Symbol类型" class="headerlink" title="Symbol类型"></a>Symbol类型</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;img src=&quot;https://gitee.com/darren-greenhand//picture/raw/master/image-20210327151203222.png&quot;  style=&quot;zoom:50%;&quot; /&gt;

&lt;img src=&quot;</summary>
      
    
    
    
    <category term="web-front-end" scheme="https://darren-dong.com/categories/web-front-end/"/>
    
    
    <category term="javascript" scheme="https://darren-dong.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>introduction-to-Network（已完结）</title>
    <link href="https://darren-dong.com/2021/03/14/introduction-to-Networks/"/>
    <id>https://darren-dong.com/2021/03/14/introduction-to-Networks/</id>
    <published>2021-03-14T08:10:41.000Z</published>
    <updated>2021-09-08T03:15:16.020Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>因为我发现学这个课老是断断续续的，每次捡起来超级麻烦，所以趁这次来个大复习，把一些该有的知识点直接记下来好了</p><h1 id="当今网络"><a href="#当今网络" class="headerlink" title="当今网络"></a>当今网络</h1><h2 id="网络组件"><a href="#网络组件" class="headerlink" title="网络组件"></a>网络组件</h2><p>术语“主机”特指网络上为通信目的而分配了一个数字的设备。这个数字用来标识特定网络中的主机。这个数字称为互联网协议 (IP) 地址。IP 地址标识主机和主机所连接的网络。</p><p>服务器是装有特殊软件，可以为网络上其他终端设备提供信息（例如电子邮件或网页）的计算机。每项服务都需要单独的服务器软件。例如，服务器必须安装 Web 服务器软件才能为网络提供 Web 服务。安装有服务器软件的计算机可以同时向多个不同客户端提供服务。</p><p>客户端和服务器软件通常运行在单独的服务器上，但一台计算机也可以同时兼任两个角色。在小企业和家庭中，许多计算机在网络中既是服务器又是客户端。这种网络称为对等网络。</p><ol><li>终端设备是指通过网络传输的消息的<strong>来源或目的地</strong>。</li><li>中间设备可以将单个终端连接到网络中。它们可以将多个独立的网络连接起来，形成互联网络。这些中间设备提供连接并确保数据在网络中传输。</li><li>现代网络主要使用三种介质来连接设备：</li></ol><ul><li><strong>金属线电缆</strong> - 数据被编码为电脉冲</li><li><strong>玻璃或塑料光纤（光缆）</strong> - 数据被编码为光脉冲</li><li><strong>无线传输</strong> - 数据是通过调制特定频率的电磁波进行编码的。</li></ul><p>常见表示方法：</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314161643916.png"></p><p>除了这些表示之外，还使用专门的术语来描述这些设备和介质是如何相互连接的:</p><ul><li><strong>网络接口卡 (NIC)</strong> - 将设备从物理上连接到网络。</li><li><strong>物理端口</strong>（physical port） - 网络设备上的接口或插口，介质通过它连接到终端设备或其他网络设备。</li><li><strong>接口</strong>（interface） - <strong>网络设备上连接到独立网络的专用端口</strong>。由于路由器连接了不同的网络，路由器上的端口称为网络接口。</li></ul><p>但是port和interface经常混用</p><p>几个类型：</p><p>内部网，外联网，Intranets and Extranets</p><p>LAN WAN通常提供 LAN 之间的较慢链路。</p><p>互联网不属于任何个人或团体。要确保通过这种多元化基础设施有效通信，需要采用统一的公认技术和标准，也需要众多网络管理机构相互协作。为了维护互联网协议和进程的结构和标准化，人们建立了许多组织。</p><h2 id="常用连接技术"><a href="#常用连接技术" class="headerlink" title="常用连接技术"></a>常用连接技术</h2><p>家庭和小型办公室</p><ul><li><strong>有线电视</strong> （<strong>Cable</strong>）- 通常由有线电视服务提供商提供，互联网数据信号在输送有线电视信号的同一电缆上进行传输。它提供了高带宽、高可用性和始终在线的互联网连接。</li><li><strong>DSL</strong> - 数字用户线也可提供高带宽、高可用性和始终在线的互联网连接。DSL 通过电话线路运行。通常小型办公室和家庭办公室用户会选择使用非对称 DSL (ADSL)，这种方式的特点是下载速度高于上传速度。</li><li><strong>蜂窝网</strong>（<strong>Cellular</strong>） - 蜂窝网互联网接入使用手机网络进行连接。只要您能收到蜂窝网信号，就能获得蜂窝网互联网接入。性能会受手机功能和手机基站的限制。</li><li><strong>卫星</strong>（<strong>Satellite</strong>） - 对于根本没有互联网连接的地方来说，获得卫星互联网访问非常有用。卫星天线要求有到卫星的清晰视线。</li><li><strong>拨号电话</strong>（<strong>Dial-up Telephone</strong>） - 使用电话线和调制解调器，费用相对较低。拨号调制解调器连接提供的低带宽不足以用于大型数据传输，但对旅行过程中的移动访问非常有用。</li></ul><p>企业</p><ul><li><strong>专用租用线路</strong>（<strong>Dedicated Leased Line</strong> ） - 租用线路是服务提供商网络内连接地理位置分散的办公室的保留电路，提供个人语音和/或数据网络。电路按月或按年租用。</li><li><strong>城域以太网</strong>（<strong>Metro Ethernet</strong>） -有时被称为以太网 WAN. 在本模块中，我们把它称为城域以太网。城域以太网将 LAN 访问技术扩展到 WAN 中。以太网是一种 LAN 技术，您将在后面的模块中学习。</li><li><strong>DSL</strong>（<strong>Business DSL</strong>） - 企业 DSL 提供各种格式。一种常见的选择是对称数字用户线路 (SDSL)，它类似于 DSL 的普通用户版本，但是提供相同的上传和下载速度。</li><li><strong>卫星</strong> – 当有线解决方案不可用时，卫星服务可以提供连接。</li></ul><p>今天，独立的数据、电话和视频网络融合在了一起。与专用网络不同，融合网络能够通过相同的网络基础设施，在许多不同类型的设备之间传输数据、语音和视频。此网络基础设施采用一组相同的规则、协议和实施标准。融合数据网络在一个网络中传送多种服务。</p><h2 id="可靠网络"><a href="#可靠网络" class="headerlink" title="可靠网络"></a>可靠网络</h2><p>容错能力-提供冗余的多条路径</p><p>可拓展性-设计人员可以遵循广为接受的标准和协议</p><p>服务质量 (QoS)-通过各种协议和优先级</p><p>网络安全-设备安全，网络安全：</p><ul><li><p><strong>机密性</strong> - 数据机密性意味着只有预定和授权收件人可以访问并读取数据。</p></li><li><p><strong>完整性</strong> - 数据完整性表示保证信息在从源到目的地的传输过程中不会被更改。</p></li><li><p><strong>可用性</strong> - 数据可用性表示保证授权用户及时可靠地访问数据服务。</p></li><li><p><strong>病毒、蠕虫和特洛伊木马</strong> <strong>Viruses, worms, and Trojan horses</strong>- 这些包括在用户设备上运行的恶意软件或代码。</p></li><li><p><strong>间谍软件和广告软件</strong> <strong>Spyware and adware</strong>-这些是安装在用户设备上的软件类型。这些软件会秘密收集有关用户的信息。</p></li><li><p><strong>零日攻击（也称零小时攻击）****Zero-day attacks</strong> - 在出现漏洞的第一天发起的攻击。</p></li><li><p><strong>威胁发起者攻击</strong> <strong>Threat actor attacks</strong>-恶意人员攻击用户设备或网络资源。</p></li><li><p><strong>拒绝服务攻击</strong> <strong>Denial of service attacks</strong>- 使网络设备上的应用和进程减缓或崩溃的攻击。</p></li><li><p><strong>数据拦截和盗窃****Data interception and theft</strong> - 通过公司网络捕获私人信息的攻击。</p></li><li><p><strong>身份盗窃****Identity theft</strong> - 窃取用户的登录凭证来访问私人数据的攻击。</p></li></ul><h2 id="一些趋势"><a href="#一些趋势" class="headerlink" title="一些趋势"></a>一些趋势</h2><p>BYOD 意味着设备由任何使用者在任意地点使用。</p><p>云计算</p><p>智能家庭技术（物联网）</p><p>电力网：</p><p>使用标准电源适配器，只要有电源插座，设备就可以连接到 LAN。无需安装数据线，也几乎不需要额外的电力。通过使用供电的同一线路，电力线网络通过按一定频率发送数据来发送信息。</p><p>当无线接入点无法到达家里的所有设备时，电力线网络特别有用。电力线网络不会取代数据网络中的专用布线。但是，当有线数据网络或无线通信不可行时，电力线网络可以备用。</p><p>无线互联网服务提供商 (WISP) 是使用类似家庭无线局域网 (WLAN) 的无线技术</p><h1 id="配置交换机-终端"><a href="#配置交换机-终端" class="headerlink" title="配置交换机/终端"></a>配置交换机/终端</h1><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314163007230.png"></p><h2 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h2><p>默认情况下，交换机将转发流量，无需配置即可工作。连接到同一新交换机的两个已配置了的主机能够进行通信。</p><p>无论新交换机的默认特性如何，都应配置并保护所有交换机。</p><table><thead><tr><th align="left"><strong>方法</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><strong>控制台 (Console)</strong></td><td align="left">这是一种物理管理端口，可通过该端口对思科设备进行带外访问。带外访问是指通过仅用于设备维护的专用管理通道进行访问。使用控制台端口的优势在于，<strong>即使没有配置任何网络服务，也可以访问设备</strong>，例如执行初始配置时。控制台连接需要运行终端仿真软件的计算机和用于连接设备的特殊控制台电缆。</td></tr><tr><td align="left"><strong>安全外壳(SSH)</strong></td><td align="left">SSH 是一种带内且被推荐的方法，它使用虚拟接口<strong>通过网络远程建立安全的 CLI连接</strong>。不同于控制台连接，SSH 连接需要设备上具有有效的网络服务，<strong>包括配置了地址的有效接口</strong>。大部分思科 IOS 版本配备了 SSH 服务器和 SSH 客户端，可用于与其他设备建立 SSH 会话。</td></tr><tr><td align="left"><strong>Telnet</strong></td><td align="left">Telnet 使用虚拟接口通过网络远程建立 CLI 会话，这种带内方法并不安全。与 SSH 不同，Telnet 不提供安全的加密连接，只能在实验室环境中使用。用户身份验证、密码和命令通过网络以明文形式发送。最好的做法是使用 SSH 而不是 Telnet。思科 IOS 包括 Telnet 服务器和 Telnet 客户端。</td></tr></tbody></table><p><strong>注意:</strong> 某些设备，比如路由器，还可以支持传统辅助端口，这种辅助端口可使用调制解调器通过电话连接远程建立 CLI 会话。类似于控制台连接，AUX 端口也是带外连接，且不需要配置或提供网络服务。</p><h2 id="配置模式"><a href="#配置模式" class="headerlink" title="配置模式"></a>配置模式</h2><p>作为一项安全功能，思科 IOS 软件将管理访问分为以下两种命令模式：</p><ul><li><strong>用户 EXEC 模式</strong>（user） - 该模式功能有限，但可用于有效执行基本操作。它只允许有限数量的基本监控命令，不允许执行任何可能改变设备配置的命令。用户 EXEC 模式由采用 &gt; 符号结尾的 CLI 提示符标识。</li><li><strong>特权 EXEC 模式</strong>（privileged） - 要执行配置命令，网络管理员必须访问特权 EXEC 模式。较<strong>高级别的配置模式，比如全局配置模式，只能通过特权 EXEC 模式访问</strong>。特权 EXEC 模式由采用# 符号结尾的提示符标识。</li></ul><p>要配置设备，用户必须进入全局配置模式。</p><p>在全局配置模式下， CLI 配置所做的更改将影响整个设备的运行。全局配置模式由在设备名称之后加(config)#结尾的提示符标识，比如Switch(config)#。</p><p>访问全局配置模式之后才能访问其他具体的配置模式。在全局配置模式下，用户可以进入不同的子配置模式。其中的每种模式可以用于配置 IOS 设备的特定部分或特定功能。两个常见的子配置模式包括：</p><ul><li><strong>线路配置模式</strong> - 用于配置<strong>控制台</strong>、SSH、Telnet 或 AUX 访问。</li><li><strong>接口配置模式</strong> - 用于配置交换机端口或路由器网络接口。</li></ul><p>当使用 CLI 时，每种模式由该模式独有的命令提示符来标识。默认情况下，每个提示符都以设备名称开头。命令提示符中设备名称后的部分用于表明模式。</p><p>例如，线路配置模式的默认提示符是 <strong>Switch(config-line)#</strong> </p><p>默认的接口配置模式提示符是 **Switch(config-if)#**。interface</p><ul><li><strong>startup-config(启动配置文件)</strong> -存储在 NVRAM 中的配置文件。它包含在启动时或重启时用到的所有命令。当设备断电后，其中的内容不会消失。</li><li><strong>running-config(运行配置文件)</strong> -存储在随机存取存储器（RAM）中。它反映了当前的配置。修改运行配置会立即影响思科设备的运行。RAM 是易失性存储器。如果设备断电或重新启动，则它会丢失所有内容。</li></ul><h1 id="学习命令"><a href="#学习命令" class="headerlink" title="学习命令"></a>学习命令</h1><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314163957083.png"></p><table><thead><tr><th align="left"><strong>约定</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><strong>粗体</strong></td><td align="left">粗体文本表示您需要原样输入的命令和关键字， 如显示的那样。</td></tr><tr><td align="left"><em>斜体</em></td><td align="left">斜体文本指示由您提供值的参数。</td></tr><tr><td align="left"><strong>[<strong>x</strong>]</strong></td><td align="left">方括号表示可选元素（关键字或参数）。</td></tr><tr><td align="left"><strong>{<strong>x</strong>}</strong></td><td align="left">大括号表示必需元素（关键字或参数）。</td></tr><tr><td align="left">**[**x **{**y <strong>|</strong> z <strong>}]</strong></td><td align="left">方括号中的大括号和垂直线表示 可选元素中的必填选项。空格用于清楚地描述 命令的各个部分。</td></tr></tbody></table><p>enable / disable</p><p>configure terminal / exit  (子配置—&gt;上一级)</p><p>end / Ctrl+Z (任何子配置-&gt;特权)</p><p>子配置模式间可以随意转换：</p><p><strong>line console 0</strong></p><p><strong>interface FastEthernet 0/1</strong></p><p><strong>line vty 0 15</strong> 两个数字说明是0-15一起设置</p><p>（注意全是小写，草）</p><p><em><strong>用户模式只能查看配置，且只能查看部分配置，不能配置交换机；特权模式只能查看配置，且只能查看部分配置，不能配置交换机；全局模式可以修改配置，且对全局生效，但是默认不能查看；而端口模式所做的配置都是针对接口所设定的。</strong></em></p><h3 id="用户特权"><a href="#用户特权" class="headerlink" title="用户特权"></a>用户特权</h3><p>show running-config/startup-config</p><p><strong>copy running-config startup-config</strong>。</p><p>reload 清除未保存的running-config  但在一段很短的时间内设备将会离线，导致网络中断。</p><p>erase start 删除启动设置，之后需重新加载设备来恢复出厂</p><p>show + 子模式 仅查看子模式的信息</p><p>show arp 交换机等设备显示MAC地址信息</p><p>show mac address-table 查看mac地址表</p><p>clear mac address-table dynamic 清除mac地址表</p><p><strong>show ip arp</strong> 查看arp表</p><p>show ipv6 neighbors 检查路由器是否发现了邻居</p><p>clear ipv6 neighbors</p><p>show flash 查看闪存</p><p>show ip(ipv6) interface brief 检查接口的正确数量和标识</p><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">show ip                                              interface brief<br />show ipv6 interface brief</td><td align="left">所有接口的输出显示,它们的IP地址和 当前的状态已配置和连接的接口的 状态和协议均会显示“up”; 显示任何其他内容都可能表示配置或 布线出现了问题。</td></tr><tr><td align="left">show ip route<br />show ipv6 route</td><td align="left">显示存储在 RAM 中的 IP 路由表的内容。也可以检验连接性</td></tr><tr><td align="left">show interfaces</td><td align="left">显示设备上所有接口的统计信息。然而,这个命令将只显示 IPv4 编址信息。</td></tr><tr><td align="left">show ip interface(后面可以加特定的线路)</td><td align="left">显示路由器上所有接口的 IPv4 统计信息。</td></tr><tr><td align="left">show ipv6 interface</td><td align="left">显示路由器上所有接口的 IPv6 统计信息。</td></tr></tbody></table><h3 id="全局指令"><a href="#全局指令" class="headerlink" title="全局指令"></a>全局指令</h3><p>hostname name 主机名字仅使用字母、数字和破折号</p><p>no hostname 清空主机名字</p><p>enable secret (password)  保护特权访问</p><p><strong>service password-encryption</strong>（全局配置指令+加密所有）</p><p>security passwords min-length 8 指定密码的最小长度为8</p><p>login block-for 120 attempts 3 within 60  在 60 秒内有 3 次登录尝试失败时阻止vty登录尝试 120 秒。</p><p>**banner motd #<strong>当日消息</strong>#**（其实#可以换别的，向访问设备的人展示）</p><p>ip default-gateway 设置默认网关</p><p>ip route （远程网址+子网掩码）（下一跳路由器的IP地址）配置静态路由表</p><p> no ip directed-broadcasts 关闭定向广播</p><p> <strong>ipv6 unicast-routing</strong>  启用ipv6路由</p><h3 id="子模式"><a href="#子模式" class="headerlink" title="子模式"></a>子模式</h3><p>password ….  特定线路设置密码，如控制台</p><p>login 启用登录，不启用就根本进不去</p><p>mdix auto 启用Auto-MDIX，可以忽视另一端的设备类型使用铜缆（接口配置指令）</p><p>transport input {ssh | telnet}或者俩都加上  保护远程Telnet | SSH访问</p><p>ip address a b 192.168.1.20 255.255.255.0设置ipv4地址和子网掩码</p><p>(GUA)ipv6 address 地址/前缀长度，e.g.  ipv6 address 2001:db8:acad:10::1/64</p><p>(LLA)ipv6 address 链路本地地址 link-local</p><p>no shutdown 启用虚拟接口</p><p>description xxx 设置说明，比如第三方连接和联系信息（&lt;=240字符）</p><p>no ip domain-lookup 禁用DNS解析(特权模式)</p><p>description description-text 设置接口说明</p><p><strong>ip default-gateway</strong> ip-address为交换机配置默认网关</p><p>ipv6 unicast-routing 启用 IPv6 路由</p><p>exec-timeout 分 秒    在x分x秒后自动断开非活动用户</p><h3 id="主机端"><a href="#主机端" class="headerlink" title="主机端"></a>主机端</h3><p>ipconfig （/all）</p><p>arp -a 显示所有arp表</p><p>arp -d 清除 ARP 表</p><p>ping … 测试链接，一般要两遍，第一遍是自动配置arp所以一般失败</p><p><strong>route print</strong>或命<strong>netstat -r</strong>令可以显示主机路由表（windows主机），会列出</p><ul><li><strong>接口列表</strong> - 列出主机上的介质访问控制 (MAC) 地址和每个网络接口的已分配接口编号，包括以太网、 Wi-Fi 和蓝牙适配器。</li><li><strong>IPv4 路由表</strong> - 列出所有已知的 IPv4 路由，包括直接连接、本地网络和本地默认路由。</li><li><strong>IPv6 路由表</strong> - 列出所有已知的 IPv6 路由，包括直接连接、本地网络和本地默认路由。</li></ul><p><strong>netstat</strong>可列出正在使用的协议、本地地址和端口号、外部地址和端口号以及连接的状态。</p><p>默认情况下，<strong>netstat</strong>命令会试图将 IP 地址解析为域名，将端口号解析为公认应用程序。使用**-n**选项能够以数字形式显示 IP 地址和端口号</p><p><strong>nslookup</strong> 程序手动查询域名服务器，来解析给定的主机名。</p><p>该实用程序也可以用于检修域名解析故障，以及验证域名服务器的当前状态。</p><h2 id="好多缩写"><a href="#好多缩写" class="headerlink" title="好多缩写"></a>好多缩写</h2><p>interface  = int</p><p>FastEthernet = f</p><p>running-config = run</p><p>startup-config = start</p><p>address == add</p><h2 id="热键"><a href="#热键" class="headerlink" title="热键"></a>热键</h2><p>？：</p><p>直接输入则显示当前模式可用</p><p>指令输入一般会显示补全可能</p><p>缺参数可以显示参数</p><p>主要Ctrl+A/E</p><p>c+s+6</p><p>c+r返回被打扰的命令行</p><table><thead><tr><th align="left"><strong>键盘输入</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><strong>Tab</strong></td><td align="left">补全部分输入的命令项。</td></tr><tr><td align="left"><strong>Backspace</strong></td><td align="left">删除光标左边的字符。</td></tr><tr><td align="left"><strong>Ctrl-D</strong></td><td align="left">删除光标所在的字符。</td></tr><tr><td align="left"><strong>Ctrl-K</strong></td><td align="left">删除从光标到命令行尾的所有字符。</td></tr><tr><td align="left"><strong>Esc D</strong></td><td align="left">删除从光标到词尾的所有字符。</td></tr><tr><td align="left"><strong>Ctrl+U</strong> 或 <strong>Ctrl+X</strong></td><td align="left">删除从光标到命令行首的 所有字符。</td></tr><tr><td align="left"><strong>Ctrl-W</strong></td><td align="left">删除光标左边的单词。</td></tr><tr><td align="left"><strong>Ctrl-A</strong></td><td align="left">将光标移至行首。</td></tr><tr><td align="left"><strong>向左箭头</strong> 或 <strong>Ctrl+B</strong></td><td align="left">将光标左移一个字符。</td></tr><tr><td align="left"><strong>Esc B</strong></td><td align="left">将光标向后左移一个单词。</td></tr><tr><td align="left"><strong>Esc F</strong></td><td align="left">将光标向前右移一个单词。</td></tr><tr><td align="left"><strong>向右箭头</strong> 或 <strong>Ctrl+F</strong></td><td align="left">将光标右移一个字符。</td></tr><tr><td align="left"><strong>Ctrl-E</strong></td><td align="left">将光标移至命令行尾。</td></tr><tr><td align="left"><strong>向上箭头</strong> 或 <strong>Ctrl+P</strong></td><td align="left">调出历史记录缓冲区中的命令， 从最近输入的命令开始。</td></tr><tr><td align="left"><strong>Ctrl+R</strong> 或 <strong>Ctrl+I</strong> 或 <strong>Ctrl+L</strong></td><td align="left">收到控制台消息后重新显示系统提示符和 命令行。</td></tr></tbody></table><p><strong>注意</strong>: 虽然 <strong>Delete</strong> 键通常用于删除提示符右侧的字符，但 IOS 命令结构无法识别 Delete 键。</p><p>当命令输出产生的文本超过终端窗口中可以显示的文本时，IOS 将显示一个 <strong>“–More–”</strong> 提示。下表描述了显示此提示时可以使用的键盘输入。</p><table><thead><tr><th align="left"><strong>键盘输入</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><strong>回车</strong> 键</td><td align="left">显示下一行。</td></tr><tr><td align="left"><strong>空格</strong>键</td><td align="left">显示下一屏。</td></tr><tr><td align="left">任何其他按键</td><td align="left">结束显示字符串，返回特权模式。</td></tr></tbody></table><p>此表列出了用于退出操作的命令。</p><table><thead><tr><th align="left"><strong>键盘输入</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><strong>Ctrl-C</strong></td><td align="left">处于任何配置模式下时，用于结束该配置模式并返回 特权模式。处于设置模式下时，用于中止并返回命令 提示符。</td></tr><tr><td align="left"><strong>Ctrl-Z</strong></td><td align="left">处于任何配置模式下时，用于结束该配置模式并返回 特权模式。</td></tr><tr><td align="left"><strong>Ctrl-Shift-6</strong></td><td align="left">通用中断序列用于中止 DNS lookup、traceroutes、 pings等</td></tr></tbody></table><h1 id="协议和模型"><a href="#协议和模型" class="headerlink" title="协议和模型"></a>协议和模型</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>常用的计算机协议包含以下要求：</p><ul><li><p>消息编码-将信息转换成可传输和解码的</p><p>编码是将信息转换为另一种广为接受的形式的过程</p></li><li><p>消息格式和封装（encapsulation）-</p><p>当消息从源发送到目的地时，必须使用特定的格式或结构。取决于消息类型和传递信道</p></li><li><p>消息大小</p></li><li><p>消息时序（timing）</p><ul><li><strong>流量控制（flow control）-</strong> 这是管理数据传输速率的过程。流量控制定义了可以发送多少信息以及传递信息的速率。例如，如果一个人讲话太快，对方就难以听清和理解。</li><li><strong>响应超时</strong>(responce timeout) -如果一个人提问之后在合理的时间内没有得到回答，就会认为没有获得回答并作出相应的反应。此人可能会重复这个问题，也可能继续谈话。网络上的主机会使用网络协议来指定等待响应的时长，以及在响应超时的情况下执行什么操作。</li><li><strong>访问方法</strong> -这决定人们可以发送消息的时间。如果两个人同时讲话，就会发生信息冲突，两个人必须作出让步，重新开始的动画演示。同样，当设备想要在无线局域网上传输时，有必要使用 WLAN 网络接口卡 (NIC) 来确定无线介质是否可用。</li></ul></li><li><p>消息传输方式</p></li></ul><p>网络协议定义了用于设备之间交换消息的通用格式和规则集。协议由软件、硬件或两者中的终端设备和中间设备实现。每个网络协议都有自己的功能、格式和通信规则。</p><p>该表列出了在一个或多个网络上通信所需的各种协议类型。</p><table><thead><tr><th align="left"><strong>协议类型</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><strong>网络通信协议</strong></td><td align="left">这类协议使两个或多个设备能够在一个或多个 网络上通信。以太网技术家族涉及多种协议， 例如IP，传输控制协议（TCP）， 超文本传输协议（HTTP）等。</td></tr><tr><td align="left"><strong>网络安全协议</strong></td><td align="left">这类协议保护数据以提供身份验证、数据完整性和 数据加密。安全协议的示例包括安全外壳协议 (SSH)、安全套接字层协议 (SSL) 和传输层安全协议 (TLS)。</td></tr><tr><td align="left"><strong>路由（routing）协议</strong></td><td align="left">这类协议使路由器能够交换路由信息，比较路径 信息，然后选择到达目标网络的 最佳路径。路由协议的示例包括开放最短路径优先协议 (OSPF)和边界网关协议 (BGP)。</td></tr><tr><td align="left"><strong>服务发现协议。</strong></td><td align="left">这类协议用于设备或服务的自动检测。 服务发现协议的示例包括发现用于IP地址分配 服务的动态主机配置协议（DHCP）， 和用于执行域名到IP地址转换的 域名系统（DNS）。</td></tr></tbody></table><p>协议的功能包括：<strong>编制、可靠性、流量控制、排序、差错检验、应用接口。</strong></p><p>在许多情况下，协议必须能够与其他协议配合使用，以便让在线体验为您提供网络通信所需的一切。协议簇旨在相互无缝协作。</p><p>执行某种通信功能所需的一组内在相关协议称为协议簇。</p><p>要形象地表现协议簇中的协议如何互动，最佳方法之一就是将这种互动看成一个堆栈。协议栈展示了协议簇中的单个协议是如何实施的。<strong>协议显示为分层结构，每种上层服务都依赖于其余下层协议所定义的功能。协议栈的下层负责通过网络传输数据和向上层提供服务，而上层则负责处理发送的消息内容。</strong></p><p>当年多种协议簇，只剩下TCP/IP（互联网协议簇）和一点点OSI（开放系统互连协议）</p><h2 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="*TCP/IP"></a>*TCP/IP</h2><p>免费 且 标准，图中只是较为常用的一些协议。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314171619114.png"></p><p>在一项工作中，每一层都有某个或多个协议参与。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314173907739.png"></p><table><thead><tr><th><strong>4 - 应用层</strong></th><th>向用户提供数据，以及编码和对话控制。</th></tr></thead><tbody><tr><td><strong>3 - 传输层</strong></td><td>支持各种设备之间通过不同网络通信。</td></tr><tr><td><strong>2 - 互联网层</strong></td><td>确定通过网络的最佳路径。</td></tr><tr><td><strong>1 - 网络接入层</strong></td><td>控制组成网络的硬件设备和介质。</td></tr></tbody></table><p>OSI 5/6/7层供应用程序开发者参考</p><p>而底层通常使用OSI的1/2层</p><p>#应用层#(Applicaton Layer)</p><pre class="line-numbers language-none"><code class="language-none">域名系统DNS - 域名系统(Domain Name System)。将域名（例如 cisco.com）转换为 IP 地址。主机配置DHCPv4 - IPv4动态主机配置协议(Dynamic Host Configuration Protocol for IPv4)。DHCPv4 服务器在启动时动态地将 IPv4 编址信息分配给 DHCPv4 客户端，并允许在不再需要时重新使用这些地址。DHCPv6 - IPv6动态主机配置协议。DHCPv6类似于DHCPv4。SLAAC -无状态地址自动配置(Stateless Address Autoconfiguration)。一种允许设备在不使用DHCPv6服务器的情况下获得其IPv6编址信息的方法。邮件SMTP -简单邮件传输协议(Simple Mail Transfer Protocol)。使客户端能够将邮件发送到邮件服务器，并使服务器能够将邮件发送到其他服务器。POP3 -邮局协议第 3 版(Post Office Protocol version 3)。使客户端能够从邮件服务器检索电子邮件并将电子邮件下载到客户端本地邮件应用程序。IMAP -互联网消息访问协议(Internet Message Access Protocol)。使客户端能够访问存储在邮件服务器上的电子邮件，并在服务器上维护电子邮件。文件传输FTP - 文件传输协议(File Transfer Protocol)。它设置规则，使得一台主机上的用户能够通过网络访问另一台主机或向其传输文件。FTP是一种可靠、面向连接且进行确认的文件传输协议。SFTP - SSH文件传输协议(SSH...)。作为安全外壳 (SSH)协议的扩展，SFTP可用于建立安全的文件传输会话，在该会话中对文件传输进行加密。SSH 是一种安全远程登录的方法，通常用于访问设备的命令行。TFTP -简单文件传输协议(Trivial...)。这是一个简单的，无连接的文件传输协议，使用尽最大努力、无需确认的文件传输方式。它使用的开销比FTP少。Web和Web服务HTTP(Hybertext Transfer Protocol) -超文本传输协议。这是有关在万维网上交换文本、图形图像、音频、视频以及其他多媒体文件的一组规则集。HTTPS -安全 HTTP(HTTP Secure)。这是一种安全的HTTP形式，它对在万维网上交换的数据进行加密。REST -具象状态传输协议(Representational State Transfer)。它使用应用程序编程接口 (API) 和 HTTP 请求创建 Web 应用程序的 Web 服务。前后端交接！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#传输层#(Transport layer)</p><pre class="line-numbers language-none"><code class="language-none">面向连接TCP -传输控制协议(Transmission Control Protocol)。它使运行在不同主机上的进程之间能够进行可靠的通信，并提供可靠的、需要确认的传输，以确保传输成功。无连接UDP -用户数据报协议(User Datagram Protocol)。它允许一台主机上运行的进程向另一台主机上运行的进程发送数据包。但是，UDP不会确认数据报传输是否成功。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#互联网层#(Internet Layer)</p><pre class="line-numbers language-none"><code class="language-none">Internet 协议IPv4 -互联网协议第 4 版(Internet Protocol version 4)。它接收来自传输层的消息段，将消息打包成数据包，并为通过网络进行端到端传递的数据包进行地址分配。IPv4 使用 32 位地址。IPv6 - 互联网协议第 6 版。与 IPv4 类似，但使用 128 位地址。NAT -网络地址转换(Network Address Translation)。将私有网络 IPv4 地址转换为全球唯一的公有 IPv4 地址。消息传送ICMPv4 - IPv4 互联网控制消息协议(Internet Control Message Protocol for IPv4)。目的主机针对数据包传输中出现的错误，向源主机提供反馈。ICMPv6 -用于 IPv6 的ICMP。与 ICMPv4 类似的功能，但用于 IPv6 数据包。ICMPv6 ND -IPv6 邻居发现(IPv6 Neighbor Discovery)。包括用于地址解析和重复地址检测的四个协议消息。路由协议OSPF -开放最短路径优先协议(Open Shortest Path First)。它使用基于区域的分层设计的链路状态路由协议。OSPF是一种开放式标准内部路由协议。EIGRP — 增强型内部网关路由协议(Enhanced Interior Gateway Routing Protocol)这是一种思科开发的开放标准路由协议，使用基于带宽、延迟、负载和可靠性的复合度量。BGP -边界网关协议(Border Gateway Protocol)。这是一种开放标准的外部网关路由协议，用于互联网服务提供商(ISP)之间。BGP 还通常用于 ISP 与其大型私有客户端之间来交换路由信息。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#网络接入层#(Network Access Layer)</p><pre class="line-numbers language-none"><code class="language-none">地址解析ARP -地址解析协议(Address Resolution Protocol)。提供 IPv4 地址与硬件地址之间的动态地址映射。注意：您可能会看到其他文档声明 ARP 在互联网层（OSI 第 3 层）运行。但是，在本课程中，我们声明 ARP 在网络接入层（OSI 第 2 层）运行，因为它的主要目的是发现目标的 MAC 地址。MAC 地址是第 2 层地址。数据链路协议Ethernet -为网络接入层的布线和信令标准定义规则。WLAN -无线局域网(Wirelee Local Area Network)。定义 2.4 GHz 和 5 GHz 无线电频率的无线信号规则。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left"><strong>OSI 模型层</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><strong>7 - 应用层</strong></td><td align="left">应用层包含用于进程间通信 的协议。</td></tr><tr><td align="left"><strong>6 - 表示层</strong></td><td align="left">表示层用常用方式表示数据 在应用层服务之间的传输。</td></tr><tr><td align="left"><strong>5 - 会话层</strong></td><td align="left">会话层向表示层提供服务，组织对话并 管理数据交换。</td></tr><tr><td align="left"><strong>4 - 传输层</strong></td><td align="left">传输层定义服务以对数据进行分段，传输和 重组，以进行终端设备之间的单独 通信。</td></tr><tr><td align="left"><strong>3 - 网络层</strong></td><td align="left">网络层为所标识的终端设备之间通过网络 交换独立的数据的片段提供服务。</td></tr><tr><td align="left"><strong>2 - 数据链路层</strong></td><td align="left">数据链路层协议描述了设备之间通过 公共介质交换数据帧的方法。</td></tr><tr><td align="left"><strong>1 - 物理层</strong></td><td align="left">物理层协议描述了机械的、电气的、功能的 和程序化的方法，以激活，维护和解除物理连接， 实现与网络设备之间的位 设备。</td></tr></tbody></table><h2 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h2><p>理论上来说，可以将一次通信的内容（如音乐视频或有很多很大的附件的电子邮件）作为一大块连续的高容量比特流，通过网络从源发送到目的地。但是，这会给其他需要使用相同通信通道或链路的设备带来问题。这种大型数据流会导致严重的延迟。而且，一旦互联网络基础架构中的任何链路在传输期间出现故障，那么整个消息都会丢失，必须全部重传。</p><p>所以，更好的办法是先将数据划分为更小、更易于管理的片段，然后再通过网络发送。分段是将数据流划分成更小的单元，以便在通过网络传输的过程。</p><p>好处：</p><ul><li><strong>提高速度</strong> - 由于将大数据流分段成为数据包，因此可以在不独占通信链路的情况下，通过网络发送大量数据。这允许许多不同的会话在称为多路复用的网络上交错。</li><li><strong>提高效率</strong> - 如果单个数据段由于网络故障或网络拥塞而无法到达其目的地，则只需要重新传输该段，而不需要重新发送整个数据流。</li></ul><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314174259989.png"></p><p>PDU协议数据单元</p><p>Data 数据 </p><p>Segment 段  Datagram 报</p><p>Packet 包</p><p>Frame 帧</p><p>Bits 位</p><p>这个图一开始忽略掉了，各层关注的地址</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210801171105.png"></p><p>IP 地址包含两部分：</p><ul><li>网络部分(IPv4)或前缀(IPv6) – 地址最左边的部分，表示 IP 地址是哪个网络的成员。同一网络中所有设备的地址都有相同的网络部分。</li><li>主机部分(IPv4)或接口ID(IPv6) - 地址的其余部分，用于识别网络上的特定设备。这部分对于网络中的每个设备或接口都是唯一的。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210801171401.png"></p><p>具体mac和ip的方式等后面吧。</p><h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><p>网络接口卡 (NIC) 将设备连接到网络。以太网网卡用于有线连接、，而无线局域网（WLAN）网卡用于无线连接。最终用户设备可能包括一种或两种类型的网卡。</p><p>在连接网络时，所有物理连接的<strong>性能水平并不是相等</strong>的。</p><p>OSI 物理层通过网络介质传输构成数据链路层帧的比特（位）。该层从数据链路层接收完整的帧，并将这些帧编码为一系列信号，传输到本地介质上。帧由经过编码的比特（位）构成，这些位可以被终端设备或中间设备接收。</p><h2 id="物理层特征"><a href="#物理层特征" class="headerlink" title="物理层特征"></a>物理层特征</h2><p>由以下组织定义和管理：</p><ul><li>国际标准化组织 (ISO)</li><li>电信工业协会/电子工业协会 (TIA/EIA)</li><li>国际电信联盟 (ITU)</li><li>美国国家标准学会 (ANSI)</li><li>电气电子工程师协会 (IEEE)</li><li>国家级电信管理局包括美国联邦通信委员会 (FCC) 和欧洲电信标准协会 (ETSI)。</li></ul><p>除了这些组织之外，通常还有地方性布线标准组织，例如 CSA（加拿大标准协会）、CENELEC（欧洲电工标准化委员会）和 JSA/JIS（日本标准协会），开发本地规范。（放在这里谨表敬意，绝对不记！！）</p><p>物理层标准管理三个功能区：</p><ul><li>物理组件 - 电子硬件设备、介质和其他连接器，组件均按照物理层的相关标准进行规定路由器上的各种端口和接口也属于物理组件，根据标准使用特定连接器和引脚。</li><li>编码 - 将数据位流转换为预先定义“代码”的方法，这些代码就是位的编组，用于提供一种可预测模式，以便发送者和接收者均能识别。换句话说，编码是用于表示数字信息的方法或模式。（比如曼切斯特）</li><li>信令 - 表示位的方法称为信令方法，在介质上生成代表“1”和“0”的电信号、光信号或无线信号，而哪种类型的信号代表“0”。这可以简单到只是改变电信号或光脉冲的级别。长脉冲可能代表 1，而短脉冲可能代表 0。</li></ul><p>信令是方式，是编码的基础，编码是抽象的逻辑，借由信令这个媒介加以实现（我猜的）</p><h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><p>不同的物理介质所支持的位传输速率不同。数据传输的讨论通常都会提及带宽。带宽是介质承载数据的能力。数字带宽可以测量在给定时间内从一个位置流向另一个位置的数据量。</p><p><strong>延迟</strong></p><p>延迟是指数据从一个给定点传送到另一给定点所用的时间，包括时延。</p><p>在拥有多个网段的网际网络或网络中，吞吐量不能超过从源到目的地之间路径的最低链路。纵使这些网段全部或多数具备高速带宽，它也只使用那段低速率路径的吞吐量，这就会造成整个网络的吞吐量瓶颈。</p><p><strong>吞吐量</strong></p><p>吞吐量是给定时段内通过介质传输的位的量度。</p><p>由于各种因素的影响，吞吐量经常与物理层实施中指定的带宽不符。吞吐量通常低于带宽。影响吞吐量的因素</p><ul><li>流量大小</li><li>流量类型</li><li>从源通往目的地的过程中遇到的网络设备数量所造成的延时。</li></ul><p><strong>实际吞吐量</strong></p><p>用于评估可用数据传输的第三个测量标准称为实际吞吐量。实际吞吐量是在给定时间段内传输的有用数据的衡量标准。实际吞吐量就是吞吐量<strong>减去建立会话、确认、封装和重传所产生的流量开销</strong>。实际吞吐量总是低于吞吐量，而吞吐量通常低于带宽。</p><h2 id="介质"><a href="#介质" class="headerlink" title="介质"></a>介质</h2><h3 id="铜缆"><a href="#铜缆" class="headerlink" title="铜缆"></a>铜缆</h3><p>有三种不同类型的铜缆布线，每一种都用于特定的情况。</p><p>价格低廉、易于安装、对电流的电阻低。但是，铜介质受到距离和信号干扰的限制。</p><p>信号传输的距离越远，信号下降就越多。这称为信号衰减。</p><ul><li><em><strong>电磁干扰 (EMI) 或射频干扰 (RFI)</strong></em> - EMI 和 RFI 干扰信号会扭曲和损坏通过铜介质承载的数据信号。EMI 和 RFI 的潜在来源包括无线电波和电磁设备（如荧光灯或电动机）。</li><li><em><strong>串扰</strong></em> - 串扰是一根电线中信号的电场或磁场对邻近电线中的信号造成的干扰。在电话线上，串扰会由相邻电路中另一语音会话的接听部分引起。具体而言，当电流流经电线时，会在电线周围产生一个较小的环形磁场，而相邻电线可能接收到该磁场。</li></ul><p>为了应对 EMI 和 RFI 的负面影响，某些类型的铜缆会用金属屏蔽套包裹，并要求适当的接地连接。</p><p>为了应对串扰的负面影响，某些类型的铜缆将相反电路线对绞合在一起以有效消除串扰。（物理学hh）</p><p>使用以下建议也可以限制电子噪音对铜缆的影响：</p><ul><li>选择的电缆类型或类别要适合特定的网络环境。</li><li>设计电缆基础设施时应规避建筑结构中已知和潜在的干扰源。</li><li>使用包括正确处理和端接电缆的布线技术。</li></ul><p><strong>UTP非屏蔽双绞线 Unshielded twisted-pair</strong> </p><p>最常用的网络介质。通过 RJ-45 连接器端接的 UTP 布线用于<strong>网络主机与中间网络设备的互连</strong>，例如交换机和路由器。四对用颜色标记的电线组成</p><p>&lt;img src=”<a href="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210801172405.png&quot;">https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210801172405.png&quot;</a> “ style=”zoom:50%;” /&gt;</p><p><strong>STP屏蔽双绞线 Shielded twisted-pair</strong></p><p>比 UTP 布线提供更好的噪声防护。但是，与 UTP 电缆相比，STP 电缆更加昂贵而且不易安装。和 UTP 相同，STP 也使用 RJ-45 连接器。为了充分利用屏蔽的优势，STP 电缆使用特殊屏蔽 STP 数据连接器进行端接。如果电缆接地不正确，屏蔽就相当于一个天线，会接听多余信号。</p><p>多了金属编制和金属箔</p><p>&lt;img src=”<a href="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210801172356.png&quot;">https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210801172356.png&quot;</a> “ style=”zoom:50%;” /&gt;</p><p><strong>Coaxial cable</strong></p><p>同轴电缆，或简称同轴，由于它的两根导线共享同一个中轴而得名</p><p>同轴电缆使用许多不同类型的连接器</p><p>&lt;img src=”<a href="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314182735686.png&quot;">https://gitee.com/darren-greenhand//picture/raw/master/image-20210314182735686.png&quot;</a> “ style=”zoom:67%;” /&gt;</p><p>虽然 UTP 电缆在现代以太网安装中最终取代了同轴电缆，但在以下情形中仍采用同轴电缆设计：</p><ul><li><strong>无线安装</strong> - 用同轴电缆将<strong>天线连接到无线设备</strong>。同轴电缆可传送天线和无线电设备之间的射频 (RF) 能量。</li><li><strong>有线电视互联网安装</strong> - 有线电视服务提供商为其客户提供互联网连接，他们会使用光缆替换同轴电缆和支撑放大元件部分。但是，<strong>客户所在地的布线</strong> 仍采用同轴电缆。</li></ul><h3 id="UTP布线"><a href="#UTP布线" class="headerlink" title="UTP布线"></a>UTP布线</h3><p>UTP 布线遵循由 TIA/EIA 共同制定的标准。具体而言，TIA/EIA-568 规定了 LAN 安装的商业布线标准，它是 LAN 布线环境中最常用的标准。定义的一些要素如下：</p><ul><li>电缆类型</li><li>电缆长度</li><li>连接器</li><li>电缆端接</li><li>测试电缆的方法</li></ul><p>IEEE 按照它的性能对 UTP 布线划分等级。电缆分类的依据是它们承载更高速率带宽的能力。例如，5类电缆通常用于 100BASE-TX 快速以太网安装。其他类别包括增强型 5类电缆、6类电缆 和 6a 类电缆。</p><p>为了支持更高的数据传输速率，人们设计和构造了更高类别的电缆。随着新的千兆位以太网技术的开发和运用，如今已经很少采用 5e 类电缆，新建筑安装推荐使用 6 类电缆。</p><p>-3 类电缆最初用于语音线路的语音通信，但后来用于数据传输。 -5 类和5e 类电缆用于数据传输。5类电缆支持 100Mbps，5e 类电缆支持 1000 Mbps -6类电缆在每对线之间增加了一个分隔器以支持更高的速度。 6类电缆支持高达 10 Gbps。 -7类电缆也支持 10 Gbps。 -8类电缆支持 40 Gbps。</p><p>UTP 电缆的端头通常为 RJ-45 连接器。TIA/EIA-568 标准描述为以太网电缆进行引脚分配（引出线）的电线颜色标记。</p><p>&lt;img src=”<a href="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314200028243.png&quot;">https://gitee.com/darren-greenhand//picture/raw/master/image-20210314200028243.png&quot;</a> “ style=”zoom:50%;” /&gt;</p><hr><p>&lt;img src=”<a href="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314200013783.png&quot;">https://gitee.com/darren-greenhand//picture/raw/master/image-20210314200013783.png&quot;</a> “ style=”zoom:50%;” /&gt;</p><p>直通和交通</p><ul><li><strong>以太网直通电缆</strong> -最常见的网络电缆类型。它通常用于主机到交换机和交换机到路由器的互连。</li><li><strong>以太网交叉电缆</strong> -用于互连相似设备的电缆。例如，交换机到交换机、主机到主机或路由器到路由器的连接。但是，由于网卡使用介质相关接口交叉（auto-MDIX）来自动检测电缆类型并进行内部连接，因此现在已将交叉电缆视为传统电缆。</li><li>但是<strong>主机链接路由器竟然也是用交叉线！</strong></li></ul><p><strong>注意</strong>: 另一种类型的电缆是思科专有的全反电缆。它用于连接路由器或交换机的<strong>控制台端口</strong>。</p><p>在设备间错误使用交叉电缆或直通电缆不会损坏设备，但也无法连通设备并进行通信</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314200350348.png"></p><table><thead><tr><th align="left">电缆类型</th><th align="left">标准</th><th align="left">应用</th></tr></thead><tbody><tr><td align="left">以太网直通线</td><td align="left">两端均为 T568A 或两端均为 T568B</td><td align="left">将网络主机连接到交换机或集线器之类的网络设备</td></tr><tr><td align="left">以太网交叉线</td><td align="left">一端为 T568A，另一端为 T568B</td><td align="left">连接两个网络主机或连接两台网络中间设备 （交换机到交换机或路由器到路由器）</td></tr><tr><td align="left">全反电缆</td><td align="left">思科专有</td><td align="left">使用适配器连接工作站串行端口与路由器 控制台端口。</td></tr></tbody></table><h3 id="光纤"><a href="#光纤" class="headerlink" title="光纤"></a>光纤</h3><ul><li>单模光纤 (SMF) Single-mode fiber</li><li>多模光纤 (MMF) Mulitimode fiber</li></ul><p>单模光纤包含一个极小的芯，使用昂贵的激光技术来发送单束光，如图所示。单模光纤在跨越数百公里的长距离传输情况下很受欢迎，例如应用于长途电话和有线电视中的光纤。</p><p>多模光纤包含一个稍大的芯，使用 LED 发射器发送光脉冲。具体而言，LED 发出的光从不同角度进入多模光纤，t有多条光路，普遍用于 LAN 中，因为它们可以由低成本的 LED 提供支持。它可以通过长达 550 米的链路提供高达 10 Gb/s 的带宽。</p><p>多模和单模光纤之间的<strong>主要区别之一就是色散的数量</strong>。色散是指光脉冲在时间上的分布。色散增加意味着信号强度损失增加。多模光纤具有比单模光纤更大的色散。这就是为什么多模光纤在信号丢失之前只能传播 500 米。</p><ul><li><strong>企业网络</strong> - 用于主干布线和基础设施设备互连。</li><li><strong>光纤到户 (FTTH)</strong> - 用于为家庭和小型企业提供不间断宽带服务。</li><li><strong>长距离传输网络</strong> - 由服务提供商用于连接国家/地区与城市。</li><li><strong>水下有线网络</strong> - 用于提供可靠高速、高容量的网络解决方案，使其在深度与横跨海洋的距离相当的严酷海下环境中仍能生存。在互联网上搜索“海底电缆电信地理地图”，以在线查看各种地图。</li></ul><p>连接器：</p><p>直通式ST Straight-tip</p><p>用户连接器SC Subscriber Connector</p><p>朗讯连接器LC单工 Lucent Connector Simplex Connectors</p><p>双工多模LC连接器 Duplex Multimode</p><p>直到最近，光还只能在光纤上沿一个方向传播。因此，<strong>需要两根光纤来支持全双工操作</strong>。因此，光纤跳线是将两根光纤线缆捆绑在一起，并通过一对标准的单光纤接头端接。有些光纤连接器可以在单个连接器上同时传送和接收光纤，称为双工连接器，其实就是连接了俩线</p><p>需要使用光纤接插线（即光纤跳线）互连基础设施设备。人们使用不同颜色来区分单模和多模接插线。黄色表皮的是单模光缆，橙色（或浅绿色）的是多模光缆。</p><p>有SC-SC多模  LC-LC 单模 ST-LC多模 SC-ST单模 。。。</p><h3 id="无线"><a href="#无线" class="headerlink" title="无线"></a>无线</h3><p>无线介质使用无线电或微波频率来承载代表数据通信二进制数字的电磁信号。</p><p>以下是无线网络的一些局限性:</p><ul><li><strong>覆盖面积</strong> - 无线数据通信技术非常适合开放环境。但是，在楼宇和建筑物中使用的某些建筑材料以及当地地形将会限制它的有效覆盖。</li><li><strong>干扰</strong> - 无线电易受干扰，可能会受到家庭无绳电话、某些类型的荧光灯、微波炉和其他无线通信装置等常见设备的干扰。</li><li><strong>安全性</strong> - 无线通信覆盖无需进行介质的物理接线。因此，未获得网络访问授权的设备和用户可以访问传输。所以网络安全是无线网络管理的重要组成部分。</li><li><strong>共享介质</strong> - WLAN 以半双工模式运行，意味着一台设备一次只能发送或接收。无线介质由所有无线用户共享。许多用户同时访问WLAN会导致每个用户的带宽减少。</li></ul><p>标准规定了：</p><ul><li>数据到无线电信号编码</li></ul><ul><li>传输频率和功率</li><li>信号接收和解码要求</li><li>天线的设计和施工</li></ul><p>这些是无线标准：</p><ul><li><strong>Wi-Fi (IEEE 802.11)</strong> - 无线 LAN (WLAN) 技术，通常称为 Wi-Fi。WLAN 使用一种称为“载波侦听多路访问/冲突避免 (CSMA/CA)”的争用协议。无线 NIC 在传输数据之前必须先侦听，以确定无线信道是否空闲。如果其他无线设备正在传输，则 NIC 必须等待信道空闲。Wi-Fi 是 Wi-Fi 联盟的标记。Wi-Fi 与基于 IEEE 802.11 标准的认证 WLAN 设备结合使用。</li><li><strong>蓝牙 (IEEE 802.15)</strong> - 这是一个无线个人局域网 (WPAN) 标准，通常称为 “蓝牙”。它采用设备配对过程进行通信，距离为 1 到 100 米。</li><li><strong>WiMAX (IEEE 802:16)</strong> - 通常称为微波接入全球互通 (WiMAX)，这个无线标准采用点到多点拓扑结构，提供无线带宽接入。</li><li><strong>Zigbee (IEEE 802.15.4)</strong> - Zigbee是一种用于低数据速率、低功耗通信的规范。它适用于需要短距离、低数据速率和长电池寿命的应用。Zigbee 通常用于工业和物联网 (IoT) 环境，如无线照明开关和医疗设备数据采集。</li></ul><p>WLAN 要求具备下列网络设备：</p><ul><li><strong>无线接入点 (AP) Wireless Access Point</strong> - 集中用户的无线信号，并连接到现有基于铜介质的网络基础设施，如以太网。如图所示，家庭和小型企业无线路由器将路由器、交换机和接入点的功能整合到了一起。</li><li><strong>无线网卡适配器Wireless NIC adapters</strong> - 能够为每台网络主机提供无线通信</li></ul><p>以太网网卡用于有线连接，而 WLAN（无线局域网）网卡用于无线连接。</p><h1 id="地址plus"><a href="#地址plus" class="headerlink" title="地址plus"></a>地址plus</h1><p>IPV4每一个地址包含一串 32 位字符串，并分为四个部分，每个部分称为二进制八位组。每一个二进制八位组包含 8 位（或 1 个字节），用句点分隔。</p><p>&lt;img src=”<a href="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210801173248.png&quot;">https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210801173248.png&quot;</a> “ style=”zoom:50%;” /&gt;</p><p>IPv4 地址通常表达为点分十进制记法</p><p>&lt;img src=”<a href="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210801173306.png&quot;">https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210801173306.png&quot;</a> “ style=”zoom:50%;” /&gt;</p><p>&lt;img src=”<a href="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210801173439.png&quot;">https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210801173439.png&quot;</a> “ style=”zoom:80%;” /&gt;</p><p>十六进制数制系统在网络中用于表示以太网 MAC 地址和 IP V6 地址。</p><p>IPv6地址长度为128位，每 4 位以一个十六进制数字表示，共 8个十六进制数（或者说32 个十六进制值）。IPv6 地址不区分大小写，可用大写或小写书写。首选格式为<code> x:x:x:x:x:x:x:x</code>，</p><p>每个“x”称为一个十六进制数，包括四个十六进制值</p><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p>与 TCP/IP 的上层协议不同，数据链路层协议通常不是由征求意见 (RFC) 文档定义的。互联网工程任务组 (IETF) 虽然维护着 TCP/IP 协议簇上层的工作协议和服务，但它没有定义TCP/IP模型的网络接入层的功能和操作。</p><p>OSI模型的数据链路层(第2层)为物理网络<strong>准备网络数据</strong>。数据链路层<strong>负责网络接口卡 (NIC) 到网络接口卡的通信</strong>。数据链路层执行以下操作：</p><ul><li>允许上层访问介质。上层协议完全不知道用于转发数据的介质类型。</li><li>接受数据，通常是第 3 层数据包（即 IPv4 或 IPv6），并将它们封装到第 2 层帧中。</li><li>控制数据在介质上的放置和接收方式，</li><li>通过网络介质在终端之间交换帧。</li><li>接收封装的数据，通常是第 3 层数据包，并将它们定向到适当的上层协议。</li><li>执行错误检测并拒绝任何损坏的帧。</li></ul><p>如果没有数据链路层，则网络层协议（如 IP）必须提供连接到传输路径中可能存在的各种类型介质所需的连接。此外，每当开发出一种新的网络技术或介质时，IP 必须做出相应调整。而这些交给数据链路层来考虑，IP只需考虑更加抽象的架构</p><h2 id="IEEE-802-LAN-MAN"><a href="#IEEE-802-LAN-MAN" class="headerlink" title="IEEE 802 LAN/MAN"></a>IEEE 802 LAN/MAN</h2><p>IEEE 802 LAN/MAN 标准专用于以太网局域网、无线局域网 (WLAN)、无线个人区域网 (WPAN) 和其他类型的局域网和城域网。IEEE 802 LAN/MAN 数据链路层由以下两个子层组成：</p><ul><li><strong>逻辑链路控制 (LLC)</strong> - 这个 IEEE 802.2 子层在上层的网络软件与下层的设备硬件之间进行通信。<strong>它放入帧中的信息用于确定帧所使用的网络层协议</strong>。此信息<strong>允许多个第 3 层协议（如 IPv4 和 IPv6）使用相同的网络接口和介质。</strong>不必让每个协议自己研究这些</li><li><strong>介质访问控制 (MAC)</strong> - 在硬件上实现这个子层（IEEE 802.3、802.11 或 802.15）。它负责数据<strong>封装和介质访问控制。它提供数据链路层寻址，并与各种物理层技术集成。</strong></li></ul><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314205917487.png"></p><p>LLC 子层获取网络协议数据（通常是 IPv4 或 IPv6数据包）并加入第2层控制信息，帮助将数据包传送到目的节点。 </p><p>MAC子层控制<strong>网卡</strong>和负责在有线或无线LAN/MAN介质上发送和接收数据的<strong>其他硬件</strong>。</p><p>MAC 子层提供数据封装：</p><ul><li><strong>帧定界</strong> - 在成帧过程中提供重要的定界符，用来标识帧中的字段。这些定界符位可以在发送节点与接收节点之间提供同步。</li><li><strong>编址</strong> - 提供源和目的编址，用于在同一共享介质上的设备之间传输第 2 层帧。</li><li><strong>错误检测</strong> - 包含一个帧尾，用于检测传输错误。</li></ul><p>MAC 子层还提供介质访问控制，允许多个设备通过共享（半双工）介质进行通信。全双工通信不需要访问控制。</p><h2 id="介质访问"><a href="#介质访问" class="headerlink" title="介质访问"></a>介质访问</h2><p>在数据包从本地主机传送到远程主机的过程中，其遇到的各种网络环境可能具有不同的特性。例如，以太网 LAN 通常由许多争用网络介质访问的主机组成。MAC 子层解决了这个问题。对于串行链路，访问方法可能只包括两个设备之间的直接连接，通常是两个路由器。因此，它们不需要 IEEE 802 MAC 子层所使用的技术。</p><p>路由器接口将数据包封装到适当的帧中。使用合适的介质访问控制方法来访问每个链路。在任意指定的网络层数据包交换过程中，可能存在多次数据链路层和介质的转换。</p><p>在路径上的每一跳，路由器都执行以下第 2 层功能：</p><ol><li>从介质接受帧</li><li>解封帧</li><li>将数据包重新封装到新帧中</li><li>从适合该物理网络网段的介质转发新帧</li></ol><h2 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h2><ul><li><strong>物理拓扑</strong> - 标识物理连接，以及终端设备和中间设备（即，路由器、交换机和无线接入点）如何互连。这个拓扑还可能包括特定的设备位置，如房间号和设备机架上的位置。物理拓扑通常是点对点拓扑或星型拓扑。</li><li><strong>逻辑拓扑</strong> - 是指网络将帧从一个节点传输到另一节点的方法。此拓扑使用<strong>设备接口和<em>第 3 层</em> IP 寻址方案识别虚拟连接。</strong></li></ul><p>在控制对介质的数据访问时，数据链路层“看见”的是网络的逻辑拓扑。正是逻辑拓扑在影响网络成帧和介质访问控制的类型。</p><p><strong>WAN拓扑</strong></p><p><strong>点对点</strong>：在这种布局中，两个节点无需与其他主机共享介质。此外，当使用串行通信协议，如点对点协议(PPP)时，节点无需判定收到的帧是指向它还是指向另一节点。因此，逻辑数据链路协议将非常简单，因为介质中的所有帧都只去往或来自这两个节点。节点将帧放置到一端的介质上，然后点对点线路另一端的节点从介质取走帧。<br><strong>在网络中使用物理设备并不会影响逻辑拓扑</strong></p><p><strong>中心辐射</strong>：这是星型拓扑的 WAN 版本，在该拓扑中一个中心站点使用点对点链路互连分支机构站点。如果不经过中心站点，分支站点就不能与其他分支站点交换数据。</p><p><strong>网状</strong>：该拓扑可用性高，但要求每个终端系统都与其他各个系统互连。因此管理成本和物理成本都会非常高。每条链路实质上是另一节点的点对点链路。</p><p>混合拓扑（任意拓扑的变体和组合）</p><p><strong>LAN拓扑</strong></p><p>在多路访问局域网中，终端设备（即节点）使用星型或扩展星型拓扑相互连接，如图所示。在这种类型的拓扑中，终端设备连接到一个中央中间设备，在本例中是一个以太网交换机。扩展星型（<strong>扩展星型</strong>）通过连接多个以太网交换机来扩展此拓扑。星型和扩展星型拓扑安装简单、扩展性好（易于添加和删除终端设备），而且故障排除容易。早期的星型拓扑使用以太网集线器互连终端设备。</p><p><strong>传统LAN拓扑</strong></p><p>早期的以太网和传统令牌环局域网技术包括另外两种拓扑结构:</p><ul><li><strong>总线</strong> - 所有终端系统都相互连接，并在两端以某种形式端接。终端设备互连时不需要基础设施设备（例如交换机）。传统的以太网络中会使用采用同轴电缆的总线拓扑，因为它价格低廉而且安装简易。</li><li><strong>环</strong> - 终端系统与其各自的邻居相连，形成一个环状。与总线拓扑不同，环拓扑不需要端接。传统的光纤分布式数据接口 (FDDI) 和令牌环网络使用环拓扑。</li></ul><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314211820357.png"></p><p><strong>半双工</strong></p><p>两台设备都可以通过该介质发送和接收，但无法同时执行这两个操作。WLAN和带有以太网集线器的传统总线拓扑使用半双工模式。</p><p><strong>全双工</strong></p><p>两台设备都可以在共享介质上同时发送和接收，现代Ethernet</p><p>双工不匹配会导致效率严重下降！重要错误</p><h3 id="访问控制方法"><a href="#访问控制方法" class="headerlink" title="访问控制方法"></a>访问控制方法</h3><p><em><strong>如今，以太网网络以全双工方式运行，不需要访问方法。</strong></em></p><p>多路访问网络是指可能有两个或多个终端设备同时试图访问网络的网络。</p><p>以太网 LAN 和 WLAN 都是多路访问网络的示例</p><p>对于共享介质，有两种基本的访问控制方法：</p><ul><li>基于竞争的访问</li><li>受控访问</li></ul><p><strong>受控访问</strong></p><p>在基于控制的多路访问网络中，每个节点都有自己的时间来使用介质。这种确定性的传统网络类型<strong>效率很低</strong>，因为设备必须等到轮到自己才能访问介质。使用受控访问的多路访问网络的示例包括：</p><ul><li>传统令牌环</li><li>传统ARCNET</li></ul><p><strong>基于竞争的访问</strong></p><p>在基于竞争的多路访问网络中，所有节点都工作在半双工方式，争夺介质的使用。然而，一次只有一台设备能够发送。因此，当多台设备同时传输时，会使用一个处理过程。基于竞争的访问方法示例如下：</p><ul><li>在<strong>传统总线拓扑/使用集线器的以太网局域网</strong>上使用载波侦听多路访问/冲突<strong>检测</strong>(CSMA/CD)</li><li>在<strong>无线局域网</strong>上使用载波侦听多路访问/冲突<strong>避免</strong>(CSMA/CA)</li></ul><p><em>基于竞争的系统在介质使用率高的情况下都无法很好地扩展。</em></p><p><strong>CSMA/CD</strong></p><p>如果两台设备同时传输，则会发生冲突。对于传统以太网局域网，两台设备将会检测到网络上的冲突。这就是 CSMA/CD 的冲突检测 (CD) 部分。网卡通过比较传输的数据与接收的数据，或通过识别介质中的信号振幅是否高于正常状况来实现。两台设备发送的数据会损坏且需重新发送。</p><p>集线器例子：</p><p>在某主机给集线器发了个帧后，所有主机都会接受这个帧，此时抑制这些主机发送，都接受到后只有拥有 PC3 的目的数据链路地址的设备才会复制该帧</p><p>它还提供了一种回退重传算法。</p><p><strong>CSMA/CA</strong></p><p>在无线环境中，设备可能无法检测到冲突。CMSA/CA 不检测冲突，但会通过在传输之前等待来尝试避免冲突。每台设备发送时都会包含传输所需的持续时间。所有其他无线设备都会收到此信息，知道介质将有久不可用。</p><h2 id="帧"><a href="#帧" class="headerlink" title="帧"></a>帧</h2><p>附加到帧的信息由正在使用的协议决定。</p><p>数据链路协议负责同一网络中的网卡间通信。虽然有许多描述数据链路层帧的不同数据链路层协议，但每种帧均有三个基本组成部分：</p><ul><li>帧头</li><li>数据</li><li>帧尾</li></ul><p>没有一种帧结构能满足通过所有类型介质的全部数据传输需求。根据环境的不同，帧中所需的控制信息量也相应变化，以匹配介质和逻辑拓扑的访问控制需求。例如，WLAN帧必须包含避免冲突的过程，因此与以太网帧相比需要额外的控制信息。在脆弱的环境下，需要更多控制才能确保送达。<strong>由于所需控制信息较多，因此帧头和帧尾字段都较大。（一个特征）</strong></p><p>&lt;img src=”<a href="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314213324158.png&quot;">https://gitee.com/darren-greenhand//picture/raw/master/image-20210314213324158.png&quot;</a> “ style=”zoom:67%;” /&gt;</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314213352540.png"></p><p><em>发送节点会创建帧内容的逻辑摘要，称为循环冗余校验 cyclic redundancy check (CRC) 值。此值将放入帧校验序列 (FCS) 字段 frame check sequence中以代表帧内容。在以太网尾部，FCS 为接收节点提供一种方法，用于确定帧是否出现传输错误。</em></p><p>在 TCP/IP 网络中，所有 OSI 第 2 层协议都与 OSI 第 3 层的 IP 一起使用。但是，所用的第 2 层协议取决于逻辑拓扑和物理介质。</p><p>&lt;img src=”<a href="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210801220318.png&quot;">https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210801220318.png&quot;</a> “ style=”zoom:67%;” /&gt;</p><p>每个协议执行指定第 2 层逻辑拓扑的介质访问控制。这意味着在执行这些协议时，有很多种不同的网络设备都可以充当运行在数据链路层上的节点。这些设备包括计算机上的网卡以及路由器和第 2 层交换机上的接口。</p><p>用于特定网络拓扑的第 2 层协议取决于实施该拓扑的技术。所使用的技术取决于网络规模（根据主机数量和地理范围判断）以及通过网络提供的服务。</p><p>带宽差异常会导致 LAN 和 WAN 使用不同的协议。</p><p>数据链路层协议包括：</p><ul><li>以太网</li><li>802.11 无线</li><li>点对点协议 (PPP)</li><li>高级数据链路控制 (HDLC) High-Level Data Link Control</li><li>帧中继 Frame Relay</li></ul><p>分别适合不同的设备和介质之间传递</p><h1 id="以太网交换"><a href="#以太网交换" class="headerlink" title="以太网交换"></a>以太网交换</h1><p>以太网和无线局域网是当前使用最广泛的两种LAN技术。以太网支持高达 100 Gbps 的带宽，这就是其受欢迎的原因。另一种是无线局域网（WLAN），它使用有线通信，包括双绞线、光纤链路和同轴电缆。</p><p>以太网在数据链路层和物理层运行，是 IEEE 802.2 和 802.3 标准中定义的一系列网络技术。（无线是802.11）</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314214332628.png"></p><p>以太网也使用802 LAN/MAN协议的俩子层</p><ul><li><strong>LLC 子层</strong> - 此 IEEE 802.2 子层在上层的网络软件与下层的设备硬件之间进行通信。<strong>它放入帧中的信息</strong>用于确定帧所使用的<strong>网络层协议</strong>。此信息允许多个第 3 层协议（如 IPv4 和 IPv6）使用相同的网络接口和介质。</li><li><strong>MAC 子层</strong> - 此子层（例如 IEEE 802.3、802.11 或 802.15）在硬件中实现，负责数据封装和介质访问控制。它提供数据链路层寻址，并与各种物理层技术集成。</li></ul><h2 id="MAC子层"><a href="#MAC子层" class="headerlink" title="MAC子层"></a>MAC子层</h2><p>MAC 子层负责数据封装和访问介质。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314214654631.png"></p><p><strong>数据封装</strong></p><p>IEEE 802.3 数据封装包括以下内容：</p><ul><li><strong>以太网帧</strong> - 这是以太网帧的内部结构。</li><li><strong>以太网寻址</strong> - 以太网帧中包含源和目的MAC 地址，用于将该以太网帧从以太网网卡传送到<strong>同一LAN</strong>上的以太网网卡。</li><li><strong>以太网错误检测</strong> - 以太网帧中包含用于错误检测的帧校验序列 (FCS) 帧尾。</li></ul><p>它也负责使用CSMA/CD and CSMA/CA技术</p><h3 id="以太网帧字段"><a href="#以太网帧字段" class="headerlink" title="以太网帧字段"></a>以太网帧字段</h3><p>以太网帧大小的最小值为 64 个字节，最大值为 1518 个字节。这包括从“目的 MAC 地址”字段到“帧校验序列 (FCS)”字段的所有字节。<strong>在描述帧的大小时，不包含“前导码”字段</strong>。</p><p>任何长度小于 <strong>64</strong> 个字节的帧都被接收站点视为“冲突碎片”或“残帧”而自动丢弃。超过 <strong>1500</strong> 个字节的数据帧被视为“巨帧”或“小型巨型帧”。</p><p>如果发送的帧小于最小值或者大于最大值，接收设备将会丢弃该帧。帧之所以被丢弃，可能是因为冲突或其他多余信号。它们被视为无效。大多数快速以太网和千兆以太网交换机和网卡通常都支持巨帧。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314214944369.png"></p><table><thead><tr><th align="left">字段</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">前导码和帧首定界符字段                            .</td><td align="left">前导码（Preamble）（7 字节）和帧首定界符(Start Frame Delimiter)（SFD），也称为 帧首（1 字节），该字段用于发送设备 与接收设备之间的同步。帧开头的八个字节 用于引起接收节点的注意。基本上，前几个字节的 作用是告诉接收方准备接收新帧。</td></tr><tr><td align="left">目的 MAC 地址字段</td><td align="left">该 6 字节字段是预期接收方的标识符。读者应该还记得， 此地址被第2层用来协助设备 确定帧是否发送到目的地。帧中的地址将会与设备中的 MAC 地址进行比对。如果匹配， 设备就接受该帧。可以是单播、组播或广播 地址。</td></tr><tr><td align="left">源 MAC 地址字段</td><td align="left">该 6 字节字段标识发出帧的网卡 或接口。</td></tr><tr><td align="left">类型/长度</td><td align="left">该字段包含两个字节，<strong>标识封装于以太网帧中的 上层协议</strong>。常见值为十六进制，0x800 用于 IPv4， 0x86DD 用于 IPv6，0x806 用于 ARP。 <strong>注意</strong>：您也可能会看到此字段称为 EtherType、类型或长度。</td></tr><tr><td align="left">数据字段</td><td align="left">该字段（46-1500 字节）包含来自 较高层的封装数据，一般是第3层PDU。最常见是IPv4 数据包。所有帧至少必须有 64 个字节。<strong>如果封装的是小数据包， 则使用填充位将帧增大到最小值</strong>。</td></tr><tr><td align="left">帧校验序列字段</td><td align="left">“帧校验序列 (Frame Check Sequence)(FCS)”字段（4 个字节）用于检测帧中 的错误。它使用循环冗余校验 (CRC)。发送设备 在帧的 FCS 字段中包含 CRC 的结果。接收设备 接收帧并生成 CRC 以查找 错误。如果计算匹配，就不会发生错误。计算 不匹配则表明数据已经改变。因此， 帧会被丢弃。数据的变化可能是 由于代表比特位的电信号受到干扰所致。</td></tr></tbody></table><h3 id="MAC-地址"><a href="#MAC-地址" class="headerlink" title="MAC 地址"></a>MAC 地址</h3><p>在<strong>以太网</strong>中，每台网络设备都连接到同一个共享介质。MAC 地址用于标识本地网段上的物理源和目的设备。MAC 编址为 OSI 模型的数据链路层提供了设备识别方法。</p><p>以太网 MAC 地址是使用 <strong>12个十六进制数字</strong>表示的 48 位地址，因为一个字节等于 8 位，我们也可以说 一个MAC 地址长度为 6 个字节。</p><p>所有 MAC 地址对于以太网设备或以太网接口必须是<strong>唯一</strong>的。<br>为了确保这一点，所有销售以太网设备的供应商必须向 IEEE 注册才能获得唯一的 6个十六进制（即 24 位或 3 字节）代码，称为组织唯一标识符 (OUI)。（Organization unique identifier）</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210801221759.png"></p><p>当供应商为设备或以太网接口分配 MAC 地址时，供应商必须执行以下操作：</p><ul><li>使用其分配的 OUI 作为前 6 个十六进制数字。</li><li>为后 6 个十六进制数字分配唯一值。</li></ul><p>OUI查询网址：<a href="http://standards-oui.ieee.org/oui/oui.txt">http://standards-oui.ieee.org/oui/oui.txt</a></p><p>供应商有责任确保其设备不被分配相同的 MAC 地址。但是，由于制造过程中出现的错误、某些虚拟机部署方式中的错误或使用多种软件工具之一进行的修改，可能存在重复的 MAC 地址。若出现以上任一情况，必须在新网卡或软件中修改 MAC 地址。</p><p>MAC 地址通常称为烧录地址(Built-in Address) (BIA)，因为传统上该地址被烧录到网卡的只读存储器（ROM）中。这意味着该地址会永久编码到 ROM 芯片中。</p><p><strong>注意</strong>: 在现代 PC 操作系统和网卡中，可以在软件中更改MAC 地址。当试图访问基于 BIA 进行过滤的网络时，这一点非常有用。因此，根据 MAC 地址来过滤或控制流量就不再安全了。</p><p>当计算机启动时，网卡将 MAC 地址从 ROM 复制到 RAM 中</p><p>收到以太网帧时，网卡会查看帧中的目的 MAC 地址是否与设备 RAM 中存储的物理 MAC 地址匹配。如果不匹配，设备就会丢弃帧。如果与帧中的目的 MAC 匹配，则网卡会将帧向上传送到 OSI 层进行解封处理。</p><p><em><strong>单播，广播，组播MAC地址</strong></em></p><p>在以太网中，第 2 层单播、组播和广播通信会使用不同的 MAC 地址。</p><p>以太网<strong>单播</strong> MAC 地址是帧从一台发送设备去往一台目的设备时使用的唯一地址</p><p>源主机用来确定目的IPv4地址所对应的目的 MAC 地址的流程称为**地址解析协议 (ARP)<strong>。源主机用来确定目的IPv6地址所对应的目的 MAC 地址的流程称为</strong>邻居发现 (ND)**。（参看TCP/IP）</p><p>以太网<strong>广播</strong>帧由以太网LAN上的每个设备接收和处理。以太网广播的功能如下：</p><ul><li>它有一个十六进制（在二进制中是 48 个 1）FF-FF-FF-FF-FF-FF的<strong>目的 MAC</strong> 地址。</li><li>它向除输入端口以外的所有以太网交换机端口泛洪。</li><li><strong>路由器不会转发该帧</strong>。</li></ul><p>IPv4 的 DHCP 是使用以太网和 IPv4 广播地址的一个协议示例。</p><p>以太网组播帧由属于同一组多播组的以太网LAN上的一组设备接收和处理。以太网组播的功能如下：</p><ul><li>当封装数据为IPv4组播包时，目的MAC地址为<strong>01-00-5E</strong>;<br>当封装数据为IPv6组播包时，目的MAC地址为<strong>33-33</strong>。</li><li>当封装的数据不是IP时，还有其他预留的组播目的MAC地址，<br>如生成树协议Spanning Tree Protocol(STP)和链路层发现协议Link Layer Discovery Protocol(LLDP)。</li><li>除非交换机被配置为用于组播窥探multicast snooping，否则它将向除传入端口之外的所有以太网交换机端口泛洪flooded out。</li><li>它不会由路由器转发，除非路由器配置为路由组播数据包。</li></ul><p>如果封装的数据是一个IP组播包，则属于组播组的设备都分配有该组播组IP地址。IPv4 组播地址（目的IP）的范围为 224.0.0.0 到 239.255.255.255。IPv6 组播地址的范围以 ff00::/8 开头。由于组播地址代表一组地址（有时称为主机组），因此只能用作数据包的目的地址。源地址始终应为单播地址。</p><h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><p>现在就该讨论交换机如何使用这些地址将帧转发(或丢弃)到网络上的其他设备。如果交换机只是转发出它接收到的每一帧到所有端口，您的网络将会非常拥挤，以至于它可能会完全停止工作。</p><p>第 2 层以太网交换机使用 MAC 地址做出转发决策。它完全忽视帧的数据部分的协议，交换机<strong>仅根据第 2 层以太网 MAC 地址做出转发决策</strong>。这才实现了真正的分工和可复用</p><p>一个以太网交换机检查它的<strong>MAC地址表</strong>，为<strong>每个帧</strong>做出一个<strong>转发决策</strong>，不像传统的以太网集线器，向除了传入端口以外的所有端口重复发出比特位。</p><p><strong>注意</strong>: MAC 地址表有时也称为内容可寻址内存Content-addressable-memory (<strong>CAM</strong>) 表。虽然 CAM 表这一术语相当常见，但在本课程中，我们将称其为 MAC 地址表。</p><p><strong>交换机学习</strong></p><p>进入交换机的每个帧被检查，以确定其中是否有可被学习的新信息。它是通过<u>检查帧的源 MAC 地址和帧进入交换机的端口号来完成这一步的</u>。如果源 MAC 地址在该网络不存在（就是来自另一局域网），会将其和传入端口号一并添加到表中。如果源 MAC 地址已存在表中，则交换机会更新该条目的刷新计时器。默认情况下，大多数以太网交换机将条目在表中保留 5 分钟。</p><p><strong>注意</strong>: 如果源 MAC 地址已经保存在表中，但是对应的是不同的端口，那么交换机会将其视为一个新的条目。使用相同的 MAC 地址和最新的端口号来<strong>替换</strong>该条目。</p><p><strong>转发Forward</strong></p><p>如果目的 MAC 地址为单播地址，该交换机会看帧中的目的 MAC 地址与 MAC 地址表中的条目是否匹配。如果表中存在该目的MAC地址，交换机会从指定端口转发帧。如果表中不存在该目的MAC地址，交换机会从除传入端口外的所有端口转发帧。这称为<strong>未知单播</strong>。</p><p><strong>注意</strong>: 如果目的 MAC 地址为广播或组播，该帧<strong>也将被泛洪</strong>到除传入端口外的所有端口。</p><p>如果一台设备的 IP 地址在远程网络上，则不能将以太网帧直接发送到目的设备。而是将以太网帧发送到默认网关（路由器）的 MAC 地址。</p><h3 id="交换机速率-转发方法"><a href="#交换机速率-转发方法" class="headerlink" title="交换机速率/转发方法"></a>交换机速率/转发方法</h3><p>对于思科交换机，实际上有两种帧转发的方法，根据具体情况，有充分的理由使用其中一种来代替另一种。</p><p>在过去，交换机使用下面的两种转发方法之一来进行网络端口间的数据交换：</p><ul><li><strong>存储转发交换</strong> - 这个帧转发的方法接收整个帧并计算CRC。CRC 根据帧中的比特位为 1 的位数量，使用数学公式来确定收到的帧是否有错。如果 CRC 有效，则交换机查找目的地址，目的地址决定了转发接口。帧然后从正确的端口转发出去。</li></ul><p>ps：<em>发送节点会创建帧内容的逻辑摘要，称为循环冗余校验 cyclic redundancy check (CRC) 值。此值将放入帧校验序列 (FCS) 字段 frame check sequence中以代表帧内容。在以太网尾部，FCS 为接收节点提供一种方法，用于确定帧是否出现传输错误。</em></p><ul><li><strong>直通交换</strong> - 这种帧转发的方法在收到整个帧之前即转发帧。在可以转发帧之前，至少必须读取帧的目的地址。</li></ul><p><strong>存储转发交换</strong>的一大优点是，它可以在传播帧之前确定帧是否有错误。当在帧中检测到错误时，交换机丢弃该帧。丢弃有错的帧可减少损坏的数据所耗用的带宽量。存储转发交换对于融合网络中的服务质量 (QoS) 分析是必需的，在融合网络中，<strong>必须对帧进行分类以划分流量优先级</strong>。如 IP 语音数据流的优先级需要高于 Web 浏览流量。</p><p><strong>直通交换</strong>中，交换机在收到数据时立即处理数据，即使传输尚未完成。交换机只缓冲帧的一部分，缓冲的量仅足以读取目的 MAC 地址，以便确定转发数据时应使用的端口。目的 MAC 地址位于帧中前导码后面的前 6 个字节。交换机在其交换表中查找目的 MAC 地址，确定转发端口，然后通过指定的交换机端口将帧转发到其目的地。交换机对该帧<strong>不执行任何错误检查。</strong></p><ul><li><strong>快速转发交换 -</strong> 快速转发交换提供最低程度的延时。快速转发交换在读取目的地址之后立即转发数据包。由于快速转发交换在收到整个数据包之前就开始转发，因此有时候中继数据包时会出错。这种情况并不经常发生，而且 <strong>目的网络适配器在收到含错数据包时会将其丢弃</strong>。在快速转发模式下，延时是指从收到第一个位到传出第一个位之间的时间差。快速转发交换是典型的直通交换方法。<strong>Fast-forward switching</strong></li><li><strong>免分片交换 -</strong> 在免分片交换中，交换机在转发之前存储帧的前 64 个字节，原因是，大部分网络错误和冲突都发生在前 64 个字节。免分片交换在转发帧之前对帧的前 64 个字节执行小错误检查以确保没有发生过冲突，并且尝试通过这种方法来增强快速转发交换功能。免分片交换是存储转发交换的高延时和高完整性与快速转发交换的<strong>低延时和弱完整性之间的折衷</strong>。<strong>Fragment-free switching</strong></li></ul><p>某些交换机可配置为按端口执行直通交换，当达到用户定义的错误阈值时，这些端口自动切换为存储转发。当错误率低于该阈值时，端口自动恢复到直通切换。（智能化）</p><h3 id="缓冲办法"><a href="#缓冲办法" class="headerlink" title="缓冲办法"></a>缓冲办法</h3><p>以太网交换机在转发帧之前，可以使用<strong>缓冲技术</strong>存储帧。当目的端口由于拥塞而繁忙时，也可以使用缓冲。交换机将帧存储起来，直到可以传输。</p><p>有两种内存缓冲方法：</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>基于端口的内存</strong></td><td align="left">帧存储在链接到特定传入端口和传出 端口的队列中。<br />只有当队列前面的所有帧都成功传输后， 才会将帧传输到传出端口。<br />由于目地端口繁忙， 单个帧可能会造成内存中所有帧的传输延迟。<br />即使其他帧可以传送到开放的目的端口， 这种延迟仍然会发生。</td></tr><tr><td align="left"><strong>共享内存</strong></td><td align="left">将所有帧存储到由所有交换端口共享的公共内存缓冲区中， 并且动态分配一个端口所需的 缓冲区内存量。<br />缓冲区中的帧动态地链接到目的端口， 允许在一个端口上接收数据包，然后 在另一个端口上发送，而无需移动到另一个队列。</td></tr></tbody></table><p>而且<strong>共享内存缓冲也意味着存储较大帧的能力，丢弃的帧可能较少</strong>。这对于<strong>非对称交换</strong>非常重要，因为它允许在不同端口上使用<strong>不同的数据速率</strong>，比如将服务器连接到 10 Gbps 的交换机端口，而pc连接到 1 Gbps 的端口。</p><p>交换机上<u>最基本的两个设置</u>是带宽(有时称为“速率”)和每个交换机端口的双工设置。交换机端口和连接的设备（例如计算机或另一台交换机）的双工设置和带宽设置必须匹配。</p><p><strong>自动协商</strong>是大多数以太网交换机和网卡的一项可选功能。它使两个设备自动协商最佳速率和双工性能。如果两台设备具有最高常见带宽的功能，则会选择全双工。</p><p><strong>注意</strong>: 大多数思科交换机和以太网网卡默认采用自动协商功能，以提高速率和实现双工。千兆以太网端口仅以全双工模式运行。</p><p>当链路上的一个或两个端口被重置时，会发生双工不匹配，自动协调过程并不会使链路上的两个端口的配置相同。<u>当用户重新配置链路的一端而忘记重新配置另一端时，也会出现这样的情况</u>。链路的两端均应都使用或都不使用自动协商。最佳实践是将两个以太网交换端口都配置为全双工。</p><h3 id="Auto-MDIX"><a href="#Auto-MDIX" class="headerlink" title="Auto-MDIX"></a>Auto-MDIX</h3><p><strong>注意</strong>: 路由器和主机之间的直连需要使用交叉线。</p><p>现在，大多数交换机设备都支持自动介质相关接口交叉 (auto-MDIX) 功能。当该功能启用时，交换机可检测连接到端口的线缆类型，并相应地配置接口。因此，如果要连接到交换机上的铜缆 10/100/1000 端口，您既可以使用交叉线，也可以使用直通线，而无需考虑连接另一端的设备类型。</p><p>在运行思科 IOS Release 12.2(18)SE 或更高版本的交换机上，默认启用 auto-MDIX 功能。当然，该功能可以被禁用。因此，您应始终使用正确的线缆类型，而不是依赖auto-MDIX 功能。Auto-MDIX 可以使用接口配置命令 <strong>mdix auto</strong> 重新启用。</p><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p>要向<strong>不在本地网络</strong>上的任何人发送电子邮件（视频或文件等），您必须能够访问路由器。要访问路由器，您必须使用网络层协议。</p><h2 id="网络层特征"><a href="#网络层特征" class="headerlink" title="网络层特征"></a>网络层特征</h2><p>网络层即 OSI 第 3 层，提供能够<em><strong>让终端设备跨整个网络交换数据的服务</strong></em></p><p>IP 版本 4 (IPv4) 和 IP 版本 6 (IPv6) 是主要的网络层通信协议。其他网络层协议包括路由协议，如开放式最短路径优先协议(OSPF)，和消息传递协议，如Internet控制消息协议(ICMP)。</p><p>为了实现跨网络边界的端到端通信，网络层协议执行四个基本操作:</p><ul><li><strong>终端设备编址</strong> - 必须为终端设备配置唯一的 IP 地址，以便在网络上进行识别。</li><li><strong>封装</strong> - 网络层将来自传输层的协议数据单元 (PDU) 封装到数据包中。封装过程中会添加 IP 报头信息，例如来源（发送）和目的（接收）主机的 IP 地址。封装过程由 IP 数据包的源主机执行。</li><li><strong>路由</strong> - 网络层提供服务，将数据包转发至另一网络上的目的主机。要传送到其他网络，数据包必须经过路由器的处理。路由器的作用是<strong>为数据包选择最佳路径，并将其转发至目的主机，该过程称为路由</strong>。数据包可能需要经过很多路由器才能到达目的主机。数据包在到达目的主机的过程中经过的每个路由器均称作一跳。</li><li><strong>解封</strong> - 当数据包到达目的主机的网络层时，主机会检查数据包的 IP 报头。如果在报头中的目的 IP 地址与其自身的 IP 地址匹配，IP 报头将被会从数据包中删除。网络层解封数据包后，后继的第 4 层 PDU 会向上传递到传输层的相应服务。解封过程由 IP 数据包的目的主机执行。</li></ul><p>传输层（OSI 第 4 层）负责管理 <strong>每台主机上的运行进程之间的数据传输</strong> (  原来如此！)，而网络层通信协议（即，IPv4和IPv6）则指定从一台主机向另一台主机传送数据时使用的数据包结构和处理过程。网络层工作时<strong>无需考虑每个数据包中所携带的数据</strong>，这使其能够为多台主机之间的多种类型的通信传送数据包</p><p><strong>逐层封装数据的流程使我们可以开发和扩展位于不同层的服务而不影响其他层</strong>。这意味着传输层数据段可以随时通过 IPv4 或 IPv6 进行封装，或使用未来可能开发出的任何新协议进行封装。</p><p>从数据包离开源主机到达目的主机之前，IP编址信息保持不变，除非是由为IPv4执行网络地址转换(NAT)的设备进行转换。</p><h3 id="IP的基本特征"><a href="#IP的基本特征" class="headerlink" title="IP的基本特征"></a><em><strong>IP的基本特征</strong></em></h3><p>IP 被设计为一种<strong>低开销</strong>协议。它只提供通过互连的网络系统从源主机向目的主机传送数据包所必需的功能。并不负责跟踪和管理数据包的流动。这些功能（如果需要）将由其他层的其他协议（主要是第 4 层的 TCP）执行。</p><p>IP的基本特征：</p><ul><li><strong>无连接</strong> - 发送数据包前不与目的地建立连接。IP 在转发数据包前，并不需要初步交换控制信息来创建端到端连接。</li><li><strong>尽力而为</strong> - IP本质上是<strong>不可靠</strong>的，因为不保证数据包交付。IP 也不需要报头中包含其他字段来维持建立的连接。此过程显著降低了 IP 的开销。但是，由于没有预先建立端到端连接，发送数据包时，发送方不知道目的地是否存在和正常运行，同时发送数据包时，也不会知道目的地是否接收数据包，或者，目的设备是否可以访问并读取数据包。确认由其他协议负责</li><li><strong>介质无关性</strong> - 其工作与传输数据的介质（即铜缆、光纤或无线）无关。如果数据包顺序错乱或丢失，则使用数据或上层服务的应用程序必须解决这些问题。这让 IP 可以非常有效地发挥作用。在 TCP/IP 协议簇中，可靠性是TCP协议在传输层的功能。IP 数据包既可以作为电信号通过铜缆传送，也可以作为光信号通过光纤传送或作为无线电信号无线传送。</li></ul><p>但是，网络层会考虑介质的一个重要特征：每种介质可以传输的最大 PDU 大小。此特征称为最大传输单位 (MTU)。数据链路层和网络层之间的部分控制通信就是确定数据包的最大尺寸<strong>。数据链路层将 MTU 值向上传送到网络层</strong>。网络层会由此确定可以传送的数据包的大小。</p><p>有时，中间设备（通常是路由器），在将IPv4数据包从一个介质转发到具有更小 MTU 的介质时，必须分割数据包。此过程称为数据包分片或分片。<strong>分片会导致延迟。IPv6 数据包不能被路由器分片。</strong></p><p>OSI传输层发送被封装在IPv4或IPv6包中的数据段</p><p>OSI数据链路层负责接收数据包并准备数据包以在通信介质上传输</p><h2 id="数据包"><a href="#数据包" class="headerlink" title="数据包"></a>数据包</h2><h3 id="IPv4数据包"><a href="#IPv4数据包" class="headerlink" title="IPv4数据包"></a>IPv4数据包</h3><p>IPv4 是主要网络层通信协议之一。IPv4 数据包报头用于确保此数据包在到达目的地终端设备的路上被传递到其下一站。</p><p>IPv4 数据包报头是由包含重要数据包信息的字段组成。这些字段中包含的二进制数字由第 3 层进程进行检查。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314233828847.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314233849824.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314234312571.png"></p><p>互联网报头长度 (IHL)、总长度和报头校验和字段用于识别和验证数据包。</p><p>其他字段用于重新排列分段的数据包。具体而言，IPv4 数据包使用标识符、标志和片偏移量字段跟踪分段。路由器从一种介质向具有较小 MTU 的另一种介质转发IPv4数据包时必须将它分片。</p><p>注意：选项和填充字段很少使用，因此不在本模块的介绍范围之内。</p><p><em><strong>8.2.3的视频描述wireshark中检测IPv4报头非常好！</strong></em></p><h3 id="IPv6数据包"><a href="#IPv6数据包" class="headerlink" title="*IPv6数据包"></a>*IPv6数据包</h3><p>IPv6它最终将取代 IPv4</p><p>多年来，为应对新的挑战，已经制定了附加议定书和规程。但是，尽管经历了多次变更，IPv4 仍然有三个重要问题：</p><ul><li><strong>IPv4地址耗尽 -</strong> IPv4 的可用唯一公有地址数量有限。尽管有大约 40 亿的 IPv4 地址，但是支持 IP 的新设备数量的不断增加，以及始终在线的连接的增加，和欠发达地区的潜在连接的增加，不断催生更多的地址需求。</li><li><strong>缺乏端到端连接 -</strong> 网络地址转换 (NAT) 是 IPv4 网络中经常实施的一项技术。NAT 为多种设备共享单一的公有 IPv4 地址提供方法。但是，因为共享了公有 IPv4 地址，内部网络主机的 IPv4 地址会隐藏起来。这会给需要端到端连接的技术造成难题。</li><li><strong>增加的网络复杂性</strong> - 虽然NAT延长了IPv4的寿命，但它只是作为一种过渡到IPv6的机制。NAT在其各种实施中增加了网络的复杂性，从而造成延迟并使故障排除更加困难。</li></ul><p>IPv6 的功能提升包括以下：</p><ul><li><strong>更大的地址空间</strong> - IPv6 地址基于 128 位分层编址，而 IPv4 采用的是 32 位。</li><li><strong>改进数据包处理过程</strong> - IPv6 报头简化为更少的字段。</li><li><strong>消除了对 NAT 的需求</strong> - 有了数额如此巨大的公有 IPv6 地址，私有 IPv4 地址和公有 IPv4 地址之间不再需要 NAT。这可避免需要端到端连接的应用程序遇到某些由 NAT 引起的故障。</li></ul><p>32 位的 IPv4 地址空间提供大约 4,294,967,296 个地址。IPv6 地址空间提供 340,282,366,920,938,463,463,374,607,431,768,211,456 个或 340 涧（10 的 36 次方）个地址。这大致相当于地球上的每一粒沙子。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210314235834424.png"></p><p>IPv6 较 IPv4 的一个重大改进是简化的 IPv6 报头。</p><p>例如，IPv4 报头包含 20 个二进制八位组的可变长度报头（如果使用“选项”字段，则高达 60 字节）和 12 个基本报头字段（不包括“选项”字段和“填充”字段）。</p><p>对于 IPv6，某些字段保持不变，某些字段的名称和位置发生了变化，而某些 IPv4 字段不再需要，正如图中突出显示。</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210315000426978.png"></p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210315000511899.png"><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210315000554634.png"></p><p>共40个八位组，8个报头字段</p><h2 id="主机路由方式"><a href="#主机路由方式" class="headerlink" title="主机路由方式"></a>主机路由方式</h2><p>对于IPv4和IPv6，数据包总是在源主机上创建。源主机必须能够将数据包定向到目的主机。为此，<strong>主机终端设备将创建自己的路由表</strong>。本主题讨论终端设备如何使用路由表。</p><p>网络层的另一个作用是在主机之间转发数据包。主机可以将数据包发送至如下：</p><ul><li><strong>主机自己</strong> - 主机可以通过向特定的地址发送数据包来向自己发起ping测试，这个特定的地址是：IPv4地址127.0.0.1，或者IPv6地址 ::1，它被称为<strong>环回接口</strong>。对环回接口执行 ping 操作可以测试主机上的 TCP/IP 协议堆栈。</li><li><strong>本地主机</strong> - 目的主机与发送主机位于同一本地网络。源和目的主机共享同一个网络地址。</li><li><strong>远程主机</strong> - 这是位于远程网络上的目的主机。源和目的主机不共享同一个网络地址。</li></ul><p>数据包是要发送到本地主机还是远程主机是由源端设备决定的。源端设备确定目的 IP 地址是否与源设备本身所在的网络相同。确定方法因 IP 版本不同而异：</p><ul><li><strong>在 IPv4 中</strong> -源设备使用自己的子网掩码以及自己的 IPv4 地址和目的 IPv4 地址来进行此判断。</li><li><strong>在 IPv6 中</strong> -本地路由器将<strong>本地网络地址</strong>（前缀）通告给网络上的所有设备</li></ul><p>在家庭或企业网络中，您可能有若干通过中间设备（LAN 交换机和/或无线接入点 (WAP) 等）互联的有线和无线设备。这种中间设备在本地网络上的本地主机之间提供互联服务。本地主机可以互相访问和共享信息，无需任何附加设备。如果主机要将数据包发送到与本主机在同一 IP 网络中的设备，<strong>则数据包仅是被转发出主机接口，然后经过中间设备即可直接到达目的设备（不必经手路由器）。</strong></p><p>当然，在大多数情况下我们希望我们的设备不仅仅能够连接本地网段，还能连接其他家庭、企业和互联网。位于本地网段外的设备称为远程主机。如果源设备发送数据包到远程目的设备，则需要借助路由器和路由。路由是确定到达目的地之最佳路径的过程。<strong>连接到本地网段的路由器称为默认网关Defalut Gateway。</strong></p><p><strong>默认网关</strong></p><p>Default Gateway是可以将流量路由到其他网络的网络设备(即，路由器或第3层交换机)。如果把一个网络比作一个房间，那么默认网关就好比是门口。如果要去另一个房间或网络，您就需要找到门口。</p><p>在网络上，默认网关通常是具有以下功能的路由器：</p><ul><li>它拥有与本地网络其他主机位于相同地址范围的本地 IP 地址。</li><li>它可以接受数据到本地网络，并将数据转发出本地网络。</li><li>它向其他网络路由流量。</li></ul><p>需要使用默认网关来发送本地网络之外的流量。如果没有默认网关、未配置默认网关地址或默认网关关闭，则无法将流量转发到本地网络之外。</p><p>主机的路由表通常包括默认网关。在IPv4中，主机通过动态主机配置协议 (DHCP) 动态接收默认网关 IPv4 地址，或者通过手动配置。在 IPv6 中，路由器通告默认网关地址，或者可以在主机上手动配置。</p><p><strong>配置默认网关会在 PC 的路由表中创建一个默认路由</strong>。默认路由是计算机尝试联系远程网络时所用的路由或路径。</p><h2 id="路由简介"><a href="#路由简介" class="headerlink" title="路由简介"></a>路由简介</h2><p>当数据包到达路由器接口时会发生什么?</p><p>路由器会检查数据包的目的 IP 地址并搜索其路由表以确定将数据包转发到何处。路由表包含所有<strong>已知网络地址（前缀）以及数据包转发位置</strong>的列表。这些条目称为路由条目或路由。路由器将使用最佳（最长）匹配的路由条目转发数据包。</p><p>路由表存储三种类型的路由条目：</p><ul><li><strong>直连网络-</strong> 这些网络路由条目是活动的路由器接口。当接口配置了 IP 地址并激活时，路由器会添加直连路由。每个路由器接口均连接到一个不同的网段。在图中，R1 IPv4路由表中的直连网络为192.168.10.0/24和209.165.200.224/30。</li><li><strong>远程网络</strong> - 这些网络路由条目连接到其他路由器。路由器通过由管理员明确配置或使用动态路由协议交换路由信息来学习远程网络。在图中，R1 IPv4路由表中的远程网络为10.1.1 /24。</li><li><strong>默认路由</strong> -像主机一样，大多数路由器还包含默认路由条目，即默认网关。<strong>当IP路由表中没有更好(更长)的匹配时，将使用默认路由</strong>。在图中，R1 IPv4路由表很可能包含一个将所有数据包转发到路由器R2的默认路由。</li></ul><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210315124026095.png"></p><p>路由器可通过两种方式获知远程网络：</p><ul><li><strong>手动</strong> - 使用静态路由将远程网络手动输入到路由表中。</li><li><strong>动态</strong> - 使用动态路由协议自动学习远程路由。</li></ul><p><em><strong>静态路由</strong></em></p><p>手动配置的路由条目</p><p>静态路由包括远程网络地址和下一跳路由器的IP地址。</p><p>ip route 远程网络地址 下一跳路由器的IP地址</p><p>静态路由具有以下特征：</p><ul><li>必须手动配置静态路由。</li><li>如果拓扑发生变化，且静态路由不再可用，则管理员需要重新配置静态路由。</li><li>静态路由适用于小型网络且当冗余链路很少或没有冗余链路的情况。</li><li>静态路由通常与动态路由协议一起用于配置默认路由。</li></ul><p><em><strong>动态路由</strong></em></p><p>动态路由协议可让路由器从其他路由器那里自动学习远程网络，包括默认路由。如果使用动态路由协议，则路由器无需网络管理员的参与，即可自动与其它路由器共享路由信息并对拓扑结构的变化作出反应。如果网络拓扑发生变化，路由器将使用动态路由协议共享此信息，并自动更新路由表。</p><p>动态路由协议包括OSPF（开放最短路径优先协议）和增强型内部网关路由协议 (EIGRP)，e.g.</p><p>&lt;img src=”<a href="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210802143704.png&quot;">https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210802143704.png&quot;</a> “ style=”zoom: 80%;” /&gt;</p><p>基本配置只需要网络管理员在动态路由协议中启用直连网络。动态路由协议将自动执行如下操作：</p><ul><li>发现远程网络</li><li>维护最新路由信息</li><li>选择通往目的网络的最佳路径</li><li>当前路径无法再使用时尝试找出新的最佳路径</li></ul><p>当使用静态路由手动配置路由器或使用动态路由协议动态学习远程网络时，远程网络地址和下一跳地址将被输入到IP路由表中。如图所示，如果网络拓扑发生变化，路由器将自动调整并尝试找到新的最佳路径。（R1,2,3正在使用动态路由协议OSPF）</p><p>&lt;img src=”<a href="https://gitee.com/darren-greenhand//picture/raw/master/image-20210315124816720.png&quot;">https://gitee.com/darren-greenhand//picture/raw/master/image-20210315124816720.png&quot;</a> “ style=”zoom:80%;” /&gt;</p><p><img src="https://gitee.com/darren-greenhand//picture/raw/master/image-20210315125544736.png"></p><p><em><strong>8.5.5大致介绍挺好的</strong></em></p><p>每个路由表条目的开头都有一个代码，用于标识路由的类型或路由的学习方式。常见路由源（代码）包括以下内容：</p><ul><li><strong>L</strong> - 该网络所直连的它的本地接口的 IP 地址</li><li><strong>C</strong> - 直连网络</li><li><strong>S</strong> - 静态路由由管理员手动配置</li><li><strong>O</strong> - OSPF</li><li><strong>D</strong> - EIGRP</li></ul><p>默认路由具有全都是零的网络地址。例如，IPv4 网络地址为 0.0.0.0。路由表中的静态路由条目以 S\ * 的代码开头</p><h1 id="地址解析"><a href="#地址解析" class="headerlink" title="地址解析"></a>地址解析</h1><p>主机和路由器都创建路由表，以确保它们可以跨网络发送和接收数据。那么这些信息是如何在路由表中被创建的呢? 作为网络管理员，您可以手动输入这些 MAC 和 IP 地址。但这将花费大量时间，而且犯一些错误的可能性很大。您是否认为一定有某种方式，由主机和路由器可以自动完成? 当然，您是对的！即使它是自动的，您仍然必须要了解它是如何工作的，因为您可能会需要排除一些故障，或更糟的是，您的网络可能会受到威胁发起者的攻击。</p><p>（复习）以太网 LAN 上的设备都配有两个主要地址：</p><ul><li><strong>物理地址（MAC 地址）</strong> – 用于同一网络上的以太网网卡之间的通信。</li><li><strong>逻辑地址（IP地址）</strong> – 用于将数据包从源设备发送到目的设备。目的IP地址可能与源地址在同一个IP网络上，也可能在远程网络上。</li></ul><p>第二层物理地址(即以太网MAC地址)用于将数据链路层帧从同一网络中一个网卡发送到另一个网卡， IP 数据包就封装在帧中。<br>如果目的IP地址在同一网络上，则目的MAC地址将是目的设备的MAC地址。<br>当目的 IP 地址(IPv4或IPv6)处于远程网络中时，则目的 MAC 地址为主机的默认网关的地址(即路由器接口)</p><p>数据流中 IP 数据包的 IP 地址如何与通往目的地路径中每条链路上的 MAC 地址相关联？对于IPv4数据包，这可以通过地址解析协议 (ARP) 过程来完成。对于IPv6数据包，这个过程是ICMPv6邻居发现(ND)。</p><h2 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h2><p>IPv4当将帧发送到另一个远程网络时，只知道IP地址，要获得MAC地址得使用ARP帮助</p><p>设备使用地址解析协议(ARP)来确定一个已知 IPv4 地址的本地设备的目的MAC地址。</p><p>ARP 提供两个基本功能：</p><ul><li>将 IPv4 地址<strong>解析</strong>为 MAC 地址</li><li><strong>维护IPv4到MAC地址映射表</strong></li></ul><p>当数据包发送到要封装入以太网帧的数据链路层时，设备将参照其<strong>内存中的表来</strong>查找映射至 IPv4 地址的 MAC 地址。此表临时存储在<strong>RAM</strong>内存中，称为 ARP 表或 ARP 缓存。</p><p><strong>发送设备</strong>首先会在自己的 ARP 表中搜索目的 IPv4 地址和相应的 MAC 地址。</p><ul><li>如果数据包的目的 IPv4 地址与源 IPv4 地址处于同一个网络，则设备会在 ARP 表中搜索目的 IPv4 地址。</li><li>如果目的 IPv4 地址与源 IPv4 地址不在同一个网络中，则设备会在 ARP 表中搜索默认网关的 IPv4 地址。</li></ul><p>这两种情况都是搜索设备的 IPv4 地址和与其相对应的 MAC 地址。</p><p>ARP 表中的每一条（或每行）将一个 IPv4 地址与一个 MAC 地址绑定。我们把两个值之间的关系称为<strong>映射</strong>。这意味着您可以在表中查找 IPv4 地址并发现相应的 MAC 地址。ARP 表暂时保存（缓存）LAN 上设备的映射。</p><p><em><strong>ARP 请求。</strong></em></p><p>当设备需要确定与 IPv4 地址关联的 MAC 地址，而它的 ARP 表中没有该 IPv4 地址条目时，会发送一个 ARP 请求。</p><p><strong>ARP 消息直接封装到以太网帧中。没有 IPv4 报头</strong>。ARP 请求使用以下帧头信息封装在以太网帧中：</p><ul><li><strong>目的 MAC 地址</strong> – 这是一种要求 LAN 上的所有以太网网卡接受并处理 ARP 请求的<strong>广播地址FF-FF-FF-FF-FF-FF</strong>。</li><li><strong>源 MAC 地址</strong> – 这是ARP请求发送方的MAC地址。</li><li><strong>类型</strong> - ARP 消息的类型字段为 0x806。该类型字段会通知接收网卡需要将帧的数据部分传递给 ARP 进程处理。</li></ul><p>因为 ARP 请求属于广播，交换机会将其泛洪到除接收端口外的其他所有端口。局域网上的所有以太网网卡都会处理广播，并且必须将ARP请求发送到其操作系统进行处理。每台设备必须处理 ARP 请求，以检查目的 IPv4 地址是否与其自己的地址相匹配。<strong>路由器不会将广播转发到其他接口。</strong></p><p><em><strong>ARP应答</strong></em></p><p>LAN 上只有一台设备的 IPv4 地址与 ARP 请求中的目的 IPv4 地址相匹配。所有其他设备将不应答。</p><p>只有具有与ARP请求相应的目的IPv4地址的设备才会以ARP应答做出响应。ARP 应答使用以下帧头信息封装在以太网帧中：</p><ul><li><p><strong>目的 MAC 地址</strong> – 这是ARP请求发送方的MAC地址。</p></li><li><p><strong>源 MAC 地址</strong> – 这是ARP应答发送方的MAC地址。</p></li><li><p><strong>类型</strong> – ARP 消息的类型字段为 0x806。该类型字段会通知接收网卡需要将帧的数据部分传递给 ARP 进程处理。</p><p> 只有原始发送 ARP 请求的设备会收到单播 ARP 应答。收到该 ARP 应答后，设备会将 IPv4 地址及相应的 MAC 地址添加到自身的 ARP 表中。该 IPv4 地址的数据包现在便可使用其相应的 MAC 地址封装在帧中。</p><p> 如果没有设备响应 ARP 请求，就无法创建帧，<u>那么这个数据包会被丢弃</u>。</p></li></ul><p>对于每台设备，ARP 缓存定时器将会删除在指定时间内未使用的 ARP 条目。时间根据设备的操作系统不同而不同。例如，较新的 Windows 操作系统将 ARP 表条目<strong>存储 15 秒到 45 秒</strong>之间</p><p>也可以使用命令来手动删除 ARP 表中的部分或全部条目。当条目被删除之后，要想在 ARP 表中输入映射，必须重复一次发送 ARP 请求和接收 ARP 回复的过程。</p><p>作为<strong>广播帧（IPv6是组播）</strong>，本地网络上的每台设备都会收到并处理 ARP 请求。在一般的商业网络中，这些广播对网络性能的影响可能微不足道。但是，如果大量设备都已启动，并且同时开始使用网络服务，网络性能可能会有短时间的下降。在设备发出初始 ARP 广播并获取必要的 MAC 地址之后，网络受到的影响将会降至最小。</p><p>有时，使用 ARP 可能会造成潜在的安全风险。威胁发起者可以使用 ARP 欺骗来执行 ARP 毒化攻击。如图所示，威胁发起者使用这种技术来应答属于另一台设备（例如默认网关）的 IPv4 地址的 ARP 请求。威胁发起者会发送一个带有自己 MAC 地址的 ARP 应答。ARP 应答的接收方会将错误的 MAC 地址添加到其 ARP 表中，并将这些数据包发送给威胁发起者。 企业级的交换机包含称为动态 ARP 检查 (DAI) 的缓解技术。DAI 不在本课程的讨论范围之内。</p><h2 id="邻居发现"><a href="#邻居发现" class="headerlink" title="邻居发现"></a>邻居发现</h2><p>IPv6 邻居发现协议有时被称为 ND 或 NDP。在本课程中，我们称它为 ND。ND使用ICMPv6为IPv6提供<strong>地址解析、路由器发现和重定向服务</strong>。ICMPv6 ND 使用五种 ICMPv6 消息来执行这些服务：</p><ul><li>邻居请求消息</li><li>邻居通告消息</li><li>路由器请求消息</li><li>路由器通告消息</li><li>重定向消息</li></ul><p><strong>邻居请求和邻居通告消息</strong>用于<strong>设备到设备</strong>的消息传递，例如地址解析（类似于 IPv4 的 ARP）。设备包括主机计算机和路由器。如果在neighrbor表中没找到目标IPv6条目：</p><p>&lt;img src=”<a href="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210802152908.png&quot;">https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210802152908.png&quot;</a> “ style=”zoom: 33%;” /&gt;</p><p>它会从on hold的IPv6信息中得到目标IPv6地址，映射为特定的IPv6组播，再映射为特定的MAC组播，在这个过程中比起ARP广播缩小了范围，而且如果没有匹配的，会直接丢弃，不把他传给上层进程，这也是优于IPv4的。</p><p><strong>路由器请求和路由器通告消息</strong>用于设备和路由器之间的消息传递。通常，路由器发现用于<em><strong>动态地址分配和无状态地址自动配置 (SLAAC)。</strong></em></p><p><strong>注意</strong>: 第五个 ICMPv6 ND 消息是一个重定向消息，用于更好的下一跳选择。这不在本课程的讨论范围之内。</p><p>IPv6 ND 是在 IETF RFC 4861 中定义的。</p><p>ICMPv6 邻居请求和邻居通告消息用于MAC地址解析。这类似于ARP用于IPv4的ARP请求和ARP应答</p><p><strong>ICMPv6邻居请求消息使用特定的以太网和IPv6 组播 而不是广播地址发送。这允许接收设备的以太网卡确定邻居请求消息是否属于它自己，而不必将它发送到操作系统进行处理。</strong></p><h1 id="路由器基本配置"><a href="#路由器基本配置" class="headerlink" title="路由器基本配置"></a>路由器基本配置</h1><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>在路由器上配置初始设置时，应完成以下任务。</p><ol><li>配置设备名称。</li></ol><pre class="line-numbers language-none"><code class="language-none">Router(config)# hostname hostname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>保护特权模式。</li></ol><pre class="line-numbers language-none"><code class="language-none">Router(config)# enable secret password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>保护用户模式</li></ol><pre class="line-numbers language-none"><code class="language-none">Router(config)# line console 0Router(config-line)# password passwordRouter(config-line)# login<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>保护远程 Telnet / SSH 访问</li></ol><pre class="line-numbers language-none"><code class="language-none">Router(config-line)# line vty 0 4Router(config-line)# password passwordRouter(config-line)# loginRouter(config-line)# transport input &#123;ssh | telnet&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>保护配置文件中的所有密码。</li></ol><pre class="line-numbers language-none"><code class="language-none">Router(config-line)# exitRouter(config)# service password-encryption<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li>提供法律通知。</li></ol><p>法律通知警告用户只能由允许用户访问该设备。法律通知配置如下。</p><pre class="line-numbers language-none"><code class="language-none">R1(config)# banner motd #Enter TEXT message. End with a new line and the #*********************************************** WARNING: Unauthorized access is prohibited!***********************************************#R1(config)#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>保存配置。</li></ol><pre class="line-numbers language-none"><code class="language-none">Router(config)# endRouter# copy running-config startup-config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="配置接口"><a href="#配置接口" class="headerlink" title="配置接口"></a>配置接口</h2><p>下一步将配置它们的接口。这是因为在配置接口之前，终端设备无法访问路由器。</p><p>配置路由器接口的任务与交换机上管理 SVI 非常相似。具体来说，它包括发出以下命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Router(config)# interface type-and-numberRouter(config-if)# description description-textRouter(config-if)# ip address ipv4-address subnet-maskRouter(config-if)# ipv6 address ipv6-address&#x2F;prefix-lengthRouter(config-if)# no shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此表总结了用于验证接口配置的更常用 <strong>show</strong> 命令。</p><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>**show ip interface brief****show ipv6 interface brief**</code></td><td align="left">所有接口的输出显示,它们的IP地址和 当前的状态已配置和连接的接口的 状态和协议均会显示“up”; 显示任何其他内容都可能表示配置或 布线出现了问题。</td></tr><tr><td align="left"><code>**show ip route****show ipv6 route**</code></td><td align="left">显示存储在 RAM 中的 IP 路由表的内容。</td></tr><tr><td align="left"><code>**show interfaces**</code></td><td align="left">显示设备上所有接口的统计信息。然而,这个命令将只显示 IPv4 编址信息。</td></tr><tr><td align="left"><code>**show ip interface**</code></td><td align="left">显示路由器上所有接口的 IPv4 统计信息。</td></tr><tr><td align="left"><code>**show ipv6 interface**</code></td><td align="left">显示路由器上所有接口的 IPv6 统计信息。</td></tr></tbody></table><h2 id="配置默认网关"><a href="#配置默认网关" class="headerlink" title="配置默认网关"></a>配置默认网关</h2><p>如果您的本地网络只有一个路由器，它就将是网关路由器，并且必须使用此信息配置网络上的所有主机和交换机。如果您的本地网络有多个路由器，则必须选择其中一个作为默认网关路由器</p><p>连接客户端计算机的交换机通常是第 2 层设备。因此，第 2 层交换机不需要使用 IP 地址就能正常工作。但是，可以在交换机上配置 IP 配置，以便管理员能够远程访问交换机。</p><p>要通过本地 IP 网络连接和管理交换机，必须配置交换机虚拟接口 (SVI)。SVI 配置了本地局域网上的 IPv4 地址和子网掩码。要从远端网络管理交换机，必须给交换机配置一个默认网关。</p><p><strong>在会通过本地网络之外的方式通信的所有设备上，一般都会配置默认网关地址。</strong></p><p>要为交换机配置默认网关，请使用<strong>ip default-gateway</strong> ip-address 全局配置命令。配置的 IP 地址是连接到交换机的本地路由器接口的 IP 地址。</p><p>也可以使用 SVI 上的 IPv6 地址配置工作组交换机。但是，<strong>交换机不需要手动配置默认网关的 IPv6 地址。</strong>交换机将自动接收来自路由器的 ICMPv6 路由器公告消息的默认网关。</p><h2 id="测试链接"><a href="#测试链接" class="headerlink" title="测试链接"></a>测试链接</h2><p>您将使用的故障排除方法包含以下步骤：</p><p>a. 验证网络文档，并使用测试来查明问题。 </p><p>b. 为查明的问题确定一个适当的解决方案。 </p><p>c. 实施解决方案。 </p><p>d. 进行测试以验证问题是否已解决。</p><p> e. 记录解决方案。</p><p>在整个 CCNA 学习过程中，您会遇到不同的 故障排除方法，以及测试 并记录问题和解决方案的不同方法。这是有意设计的。故障排除没有固定的 标准或模板。每个组织都制定了独特的 流程和文档标准（有时候，一个组织的流程就是“我们没有 固定流程”）。但是，所有有效的故障排除方法通常都包括 上述步骤。</p><p>注意：通常不止一个解决方案。但是，排除故障的最佳做法是每次实施和验证一个解决方案。在更复杂的 情形中，实施多个解决方案会导致其他问题。</p><h1 id="IPv4编制"><a href="#IPv4编制" class="headerlink" title="IPv4编制"></a>IPv4编制</h1><p>目前，仍有大量使用IPv4编址的网络，即这些组织正在向IPv6过渡。因此，对于网络管理员来说，了解有关IPv4编址的所有信息仍然非常重要。本模块详细介绍了IPv4编址的基本方面。它包括了如何将网络划分为子网，以及如何创建一个变长子网掩码 (VLSM) 作为整体IPv4编址方案的一部分。子网划分就像把一个饼切成越来越小的块。</p><h2 id="地址编制"><a href="#地址编制" class="headerlink" title="地址编制"></a>地址编制</h2><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210802160937.png"></p><p>对于同一网络中的所有设备，地址的网络部分中的位必须完全相同。地址的主机部分中的位必须唯一，这方便识别网络中的特定主机。如果两台主机在 32 位数据流中的指定网络部分有相同的位模式，则这两台主机位于同一网络。但是，主机如何知道 32 位数据流中的哪一部分用于标识网络，哪一部分用于标识主机呢？这就是子网掩码的作用。</p><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><p>子网掩码是一个1位连续序列，后面跟有一个0位连续序列组成的序列。</p><p>为了确定 IPv4 地址的网络部分和主机部分，要将子网掩码与 IPv4 地址进行从左到右逐位比较（如图所示）。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210802161118.png"  style="zoom:67%;" /><p>子网掩码实际上不包含 IPv4 地址的网络部分或主机部分，它仅通知计算机在哪里查找IPv4地址的网络部分和主机部分。</p><p>用于确定网络部分和主机部分的实际流程叫做 AND 运算。</p><h3 id="前缀长度"><a href="#前缀长度" class="headerlink" title="前缀长度"></a>前缀长度</h3><p>使用点分十进制子网掩码地址表示网络地址和主机地址会变得很麻烦。幸运的是，还有另一种识别子网掩码的方法，称为前缀长度。前缀长度是子网掩码中设置为 1 的位数。使用“斜线记法”写入，即“/”紧跟设置为 1 的位数。借此计算子网掩码中的位数，并在前面加斜线表示。</p><p>长度的多少取决于网络的规模</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210802161306.png"  style="zoom:67%;" /><p>当使用前缀长度表示 IPv4 地址时，IPv4 地址后面写入不带空格的前缀长度。例如192.168.10.10 255.255.255.0可以写成192.168.10.10/24。后面将讨论各种类型前缀长度的使用。目前重点是 /24（例如 255.255.255.0）前缀。</p><p>网络地址是表示特定网络的地址。如果设备满足以下三个条件，则属于此网络：</p><ul><li>它具有与网络地址相同的子网掩码。</li><li>它具有与网络地址相同的网络位，如子网掩码所示。</li><li>它与具有相同网络地址的其他主机位于同一广播域中。</li></ul><p>主机通过在其 <u>IPv4 地址与其子网掩码之间执行一个AND运算来确定其网络地址。</u></p><p>如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210813113919883.png" alt="image-20210813113919883"></p><h3 id="单播、组播、广播"><a href="#单播、组播、广播" class="headerlink" title="单播、组播、广播"></a>单播、组播、广播</h3><p>IPv4 单播主机地址的地址范围是 1.1.1.1到 223.255.255.255。不过，此范围中的很多地址被留作特殊用途。这些特殊用途的地址将在本模块后续部分讨论。</p><p>广播数据包以主机部分全部为 1 的地址<strong>或32个1位</strong>作为目的 IP地址。</p><p><strong>注意:</strong> IPv4使用广播数据包但是，IPv6没有广播数据包。</p><p>广播数据包必须由同一广播域中的所有设备处理。广播域标识同一网段上的所有主机。可以对广播进行定向或限制。定向广播是将数据包发送给特定网络中的所有主机。例如，位于 172.16.4.0/24 网络的主机向 172.16.4.255 发送数据包。受限广播将被发送至 255.255.255.255。<strong>默认情况下，路由器不转发广播。</strong></p><p>广播数据包使用网络上的资源，使网络上的所有接收主机都处理该数据包。因此，广播通信应加以限制，以免对网络或设备的性能造成负面影响。因为路由器可分隔广播域，所以细分网络可以通过消除过多的广播通信来提高网络性能。</p><p><strong>IP直接广播</strong></p><p>除了 255.255.255.255 的广播地址外，每个网络还有一个广播 IPv4 地址。这个地址称为<strong>定向广播</strong>，它使用网络范围内的最大地址，即所有主机位全部为 1 的地址。例如，网络192.168.1.0/24的定向广播地址是192.168.1.255。此地址允许与该网络中的所有主机进行通信。要向网络中的所有主机发送数据，主机只需以该网络广播地址为目标地址发送一个数据包即可。</p><p><strong>未直接连接到目标网络的设备</strong>转发 IP 定向广播，其方式与转发去往网络上主机的单播 IP 数据包相同。<u>当定向广播数据包到达直接连接到目标网络的路由器时，该数据包在目标网络上进行广播</u>。</p><p>主机通过组播传输可以向所属组播组中的选定主机组发送一个数据包，从而减少了流量。</p><p>组播数据包是一个目的IP地址为组播地址的数据包。IPv4 将 224.0.0.0 到 239.255.255.255 的地址保留为组播范围。</p><p>接收特定组播数据包的主机称为组播客户端。组播客户端使用客户端程序请求的服务来加入组播组。每个组播组由一个 IPv4 组播目的地址代表。当 IPv4 主机加入组播组后，<strong>该主机既要处理目的地址为此组播地址的数据包，也要处理发往其唯一单播地址的数据包。</strong></p><p>路由协议（如 OSPF）使用组播传输。例如，启用 OSPF 的路由器使用保留的 OSPF 组播地址 224.0.0.5 相互通信。只有启用 OSPF 的设备才会以 224.0.0.5 作为目的 IPv4 地址处理这些数据包。所有其他设备将忽略这些数据包。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210802163316.png"  style="zoom:50%;" /><h2 id="地址分类"><a href="#地址分类" class="headerlink" title="地址分类"></a>地址分类</h2><p>一些 IPv4 地址不能用于外联到互联网，而其他地址则专门用于路由到互联网。一些用于验证连接，另一些则是自分配的。</p><p>公有 IPv4 地址是能在 ISP（互联网运营商）路由器之间全局路由的地址。但是，并非所有可用的 IPv4 地址都可用于互联网。<strong>大多数组织</strong>使用称为私有地址的地址块向内部主机分配 IPv4 地址。</p><p>20 世纪 90 年代中期，随着万维网(WWW)的引入，由于 IPv4 地址空间耗尽，引入了私有 IPv4 地址。私有 IPv4 地址并不是唯一的，可以在任何网络内部使用它。</p><p><strong>注意</strong>: 私有地址在 RFC 1918 中定义，有时也称为 RFC 1918 地址空间。</p><h3 id="私有地址"><a href="#私有地址" class="headerlink" title="私有地址"></a>私有地址</h3><p>私有地址块</p><table><thead><tr><th align="left"><strong>网络地址和前缀</strong></th><th align="left"><strong>RFC 1918 私有地址范围</strong></th></tr></thead><tbody><tr><td align="left">10.0.0.0/8</td><td align="left">10.0.0.0 - 10.255.255.255</td></tr><tr><td align="left">172.16.0.0/12</td><td align="left">172.16.0.0 - 172.31.255.255</td></tr><tr><td align="left">192.168.0.0/16</td><td align="left">192.168.0.0 - 192.168.255.255</td></tr></tbody></table><p><strong>注意</strong>: 私有地址在 RFC 1918 中定义，有时也称为 RFC 1918 地址空间。</p><p>在 ISP 可以转发此数据包之前，它必须使用网络地址转换 (NAT) 将源 IPv4 地址（即私有地址）转换为公有 IPv4 地址。<strong>NAT用于转换私有和公有 IPv4 地址</strong>。这通常是在将内部网络连接到 ISP 网络的<strong>路由器上完成</strong>。在路由到互联网之前，组织内部网中的私有 IPv4 地址将被转换为公有 IPv4 地址。</p><p><strong>注意</strong>: 虽然具有私有 IPv4 地址的设备无法通过互联网从另一个设备直接访问，<u>但 IETF 并不认为私有 IPv4 地址或 NAT 是有效的安全措施。</u></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210802181758.png"  style="zoom:67%;" /><p>拥有可用于互联网的资源的组织（如 Web 服务器）也将拥有具有公有 IPv4 地址的设备。如图所示，该网络的这一部分被称为DMZ（非军事区）(demilitarized zone)。图中的路由器不仅执行路由，还执行 NAT 并充当安全防火墙。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210802181935.png"  style="zoom:67%;" /><h3 id="专用地址"><a href="#专用地址" class="headerlink" title="专用地址"></a>专用地址</h3><p><strong>环回地址</strong></p><p>环回地址（127.0.0.0 /8 或 127.0.0.1 到 127.255.255.254）通常仅被标识为127.0.0.1，主机使用这些特殊地址将流量指向其自身。例如，如图所示，主机可以使用这个特殊地址测试 TCP/IP 配置是否运行正常。注意 127.0.0.1 环回地址对 <strong>ping</strong> 命令的应答。</p><p><strong>本地链路地址</strong></p><p>本地链路地址（169.254.0.0 /16 或 169.254.0.1 至 169.254.255.254）通常称为自动私有 IP 编址 (APIPA) 地址或自分配地址。 当没有可用的DHCP服务器时，Windows DHCP客户端使用它们进行自我配置。本地链路地址可以用于点对点连接，但通常不用于此目的。</p><h3 id="传统有类编制"><a href="#传统有类编制" class="headerlink" title="传统有类编制"></a>传统有类编制</h3><p>二十世纪90年代中期，随着万维网 (WWW) 的引入，<strong>有类编址被弃用</strong>，以便更有效地分配有限的 IPv4 地址空间。有类地址分配被替换为今天使用的无类编址。无类编址会忽略A、B、C类的规则。公有 IPv4 网络地址（网络地址和子网掩码）是根据合理的地址数量分配的。</p><p>1981 年，使用在RFC 790 中(<a href="https://tools.ietf.org/html/rfc790">https://tools.ietf.org/html/rfc790</a>) Assigned Numbers 部分定义的有类编址对 IPv4 地址进行了分配。根据三个类别（A 类、B 类或 C 类）之一为客户分配网络地址。RFC 将单播范围分为具体的类别：</p><ul><li><strong>A 类 (0.0.0.0/8 - 127.0.0.0/8)</strong> - 用于支持拥有 1600 万以上主机地址的<strong>规模非常大的网络</strong>。A类的第一个八位组使用固定的 /8 前缀表示网络地址，其他的三个八位组表示主机地址(每个网络支持1600 万以上主机地址)。</li><li><strong>B 类 (128.0.0.0 /16 – 191.255.0.0 /16)</strong> - 用于支持拥有大约 65,000 个主机地址的<strong>大中型网络</strong>。B类的两个高位八位组使用固定的 /16 前缀表示网络地址，其他的两个八位组表示主机地址(每个网络支持65,000个以上主机地址)。</li><li><strong>C 类 (192.0.0.0 /24 – 223.255.255.0 /24)</strong> - 用于支持最多拥有 254 台主机的<strong>小型网络</strong>。C类的前三个八位组使用固定的 /24 前缀表示网络地址，其余的八位组表示主机地址（每个网络中只有254个主机地址）。</li></ul><p><strong>注意</strong>: 还有包含 224.0.0.0 到 239.0.0.0 的 D 类组播块以及包含 240.0.0.0 – 255.0.0.0 的 E 类实验地址块。</p><h3 id="分配"><a href="#分配" class="headerlink" title="分配"></a>分配</h3><p>公有 IPv4 地址是能通过互联网全局路由的地址。公有 IPv4 地址必须是唯一的。</p><p>IPv4 和 IPv6 地址是通过<strong>互联网编号指派机构</strong> (IANA) 管理的。IANA 管理并向地区性互联网注册机构 (RIR) 分配 IP 地址块。图中显示了五个RIR。</p><p>RIR 的职责是向 ISP 分配 IP 地址，而 ISP 将向组织和更小的 ISP 提供 IPv4 地址块。根据 RIR 的政策规定，组织也可直接从 RIR 获取地址。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210802183559.png"></p><h2 id="网络分段"><a href="#网络分段" class="headerlink" title="网络分段"></a>网络分段</h2><p>交换机会将广播传播到所有接口，接收它的接口除外。</p><p>路由器在收到广播时，它不会将其转发到其他接口。</p><p>因此，每个路由器接口都连接了一个广播域，而广播只能在特定广播域内传播。</p><p>大型广播域是连接很多主机的网络。大型广播域的一个问题是这些主机会生成太多广播，这会对网络造成不良影响。在图中，局域网1 连接了 400 个用户，可能会产生过量的广播流量。这会导致网络操作速度缓慢，因为它会导致大量的流量，而设备操作变慢是因为设备必须接受和处理每个广播数据包。</p><p>解决方案是使用称为“子网划分”的过程缩减网络的规模以<strong>创建更小的广播域。较小的网络空间通常称为“子网”</strong>。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210802213121.png" style="zoom:67%;" /><p>注意，从一个单一的/16网络到两个/24网络前缀长度是如何变化的。这是基本的子网划分：使用主机位可以创建其他子网。</p><h3 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h3><p>子网划分可以降低整体网络流量并改善网络性能。它也能让管理员实施安全策略，例如哪些子网允许或不允许进行通信。另一个原因是，它减少了由于错误配置、硬件/软件问题或恶意意图而受到异常广播流量影响的设备数量。</p><p>网络管理员可以使用<strong>对网络有意义的任何其他划分来创建子网</strong>。在每个图中，<strong>子网使用较长的前缀</strong>来标识网络。</p><p>比如可以 按照 <strong>位置、组或功能、设备类型</strong>划分</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210803094439.png"  style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210803094550.png" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/20210803094615.png"  style="zoom:67%;" /><h2 id="子网"><a href="#子网" class="headerlink" title="子网"></a>子网</h2><h3 id="在二进制八位组边界上、内划分"><a href="#在二进制八位组边界上、内划分" class="headerlink" title="在二进制八位组边界上、内划分"></a>在二进制八位组边界上、内划分</h3><p>创建 IPv4 子网时会将一个或多个主机位作为网络位。具体做法是延长子网掩码，从地址的主机部分借用若干位来增加网络位。借用的主机位越多，可以定义的子网也就越多。为了增加子网数量而借用的位越多，每个子网的主机数量就越少。</p><p>网络在二进制八位数边界 /8、/16 和 /24 处最容易进行子网划分。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210817195419305.png" alt="image-20210817195419305"></p><p>​    请考虑以下示例。假设企业选择了私有地址 10.0.0.0/8 作为其内部网络地址。该网络地址可以在一个广播域中连接 16,777,214 个主机。显然，在一个子网上拥有超过 1600 万台主机并不理想。</p><p>企业可以进一步在二进制八位组边界 /16 处对 10.0.0.0/8 地址进行子网划分，如表所示。这能让企业定义多达 256 个子网（例如，10.0.0.0/16 – 10.255.0.0/16），每个子网可以连接 65,534 个主机。</p><p>另外，企业也可以选择在 /24 二进制八位组边界处对 10.0.0.0/8 网络进行子网划分，如表所示。这将让企业能定义 65,536 个子网，每个子网能连接 254 个主机。/24 边界在子网划分中使用非常广泛，因为它在这个二进制八位数边界处可以容纳足够多的主机，并且子网划分也很方便。</p><hr><p>到目前为止所展示的示例都是从常见的 /8、/16 和 /24 网络前缀借用了主机位。然而，子网可以从任何主机位借用位来创建其他掩码。</p><p>例如，/24 网络地址通常通过从第 4 个二进制八位数借用位来使用更长的前缀进行子网划分。这可以让管理员在将网络地址分配到更少数量的终端设备时具有很好的灵活性。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210817195732265.png" alt="image-20210817195732265"></p><p>可以用幻数（magic number 其实就是最后一位数字，按八位组分的）从0开始加上2的对应幂来列出所有的子网</p><h3 id="对私有、共有地址划分"><a href="#对私有、共有地址划分" class="headerlink" title="对私有、共有地址划分"></a>对私有、共有地址划分</h3><p>虽然可以快速地将网络划分为子网，但是您的组织的网络可能同时使用公有和私有IPv4地址。这会影响您的网络划分子网的方式。</p><ul><li><strong>内部网</strong> - 这是公司网络的内部部分，只能在组织内部访问。内部网中的设备使用私有 IPv4 地址。</li><li><strong>DMZ</strong> - 这是公司网络的一部分，其中包含可供互联网使用的资源，如 Web 服务器。DMZ 中的设备使用公有 IPv4 地址。</li></ul><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210817221021546.png" alt="image-20210817221021546" style="zoom: 67%;" /><p>私有的刚才讲了</p><p>对DMZ来说，这些设备需要从互联网公开访问，所以DMZ中的设备需要公有IPv4地址。从20世纪90年代中期开始，公有IPv4地址空间的耗尽成为了一个问题。自 2011 年以来，IANA 和五个 RIR 中的四个用尽了 IPv4 地址空间。虽然组织正在向IPv6过渡，但是剩余的IPv4地址空间仍然非常有限。</p><p>这意味着组织必须最大限度地提高其自身有限数量的公有 IPv4 地址。这要求网络管理员将其公有地址空间划分到具有不同子网掩码的子网中，以便最大限度地<strong>减少每个子网的未使用主机地址数量</strong>。这称为<strong>可变长子网掩码</strong> (VLSM)。</p><p>要尽量减少未使用的主机 IPv4 地址数量并最大化可用子网数量，在规划子网时需要考虑两个因素：每个网络所需的主机地址数量和所需的单个子网数量。</p><p><s>其实很好算。。。为啥他花了这么多篇幅讲这个，是外国人的算数确实比较low吗:joy:</s></p><p>需要注意的是，如果一个拓扑中的站点需要与互联网链接，每个站点得多加一个子网</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210817222058792.png" alt="image-20210817222058792"></p><h3 id="VLSM"><a href="#VLSM" class="headerlink" title="VLSM"></a>VLSM</h3><p>公有地址和私有地址会影响您将网络划分子网的方式。还有其他一些问题影响着子网划分方案。一个标准的/16子网划分方案创建的每个子网都拥有相同数量的主机。并不是您创建的每个子网都需要这么多主机，这会导致许多IPv4地址未被使用。也许您需要一个包含更多主机的子网。这就是开发可变长子网掩码 (VLSM) 的原因。</p><p>就是子网在不干扰别的子网的情况下可以继续细分，形式是自己分好就行了，无需额外操作</p><p>更大的IPv6地址允许比IPv4更容易的地址规划和分配。保留IPv6地址不是问题。这是向IPv6 过渡的驱动力之一。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210817230552228.png" alt="image-20210817230552228" style="zoom: 67%;" /><p>但是，路由器之间的连接每个子网仅需要两个主机地址（每个路由器接口一个主机地址）。目前，所有子网中的每个子网都有 30 个可用的主机地址。为了避免每个子网浪费28个地址，可以使用 VLSM 为 路由器之间的连接创建较小子网。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210817230924701.png" alt="image-20210817230924701"></p><h3 id="子网规划"><a href="#子网规划" class="headerlink" title="子网规划"></a>子网规划</h3><p>在开始子网划分之前，您应该为整个网络开发一个 IPv4 编址方案。您要了解您需要多少子网、特定子网需要多少主机、哪些设备是子网的一部分、网络的哪些部分使用私有地址、哪些使用公有地址以及许多其他决定因素。一个良好的编址方案<strong>允许增长</strong>。一个良好的编址方案也是一个良好的网络管理员的标志。</p><p>IPv4网络子网的规划要求同时分析组织的网络使用需求和子网的构建方法。进行<strong>网络需求调研</strong>是子网规划的起点。这意味着查看整个网络，包括内部网和DMZ，并确定如何划分每个区域。地址计划包括确定哪里需要地址保留(通常在DMZ中)，哪里有更大的灵活性(通常在内部网中)。</p><p>如果需要<strong>地址保留</strong>，计划应确定需要多少个子网以及每个子网有多少个主机。如前所述，这通常是DMZ中的公有IPv4地址空间所需要的。这很可能包括使用 VLSM。</p><p>在企业内部网中，地址保留通常不是问题，这主要是由于使用私有IPv4编址，包括10.0.0.0/8，有超过1600万个主机IPv4地址。</p><p>对于大多数组织，私有 IPv4 地址允许提供足够多的内部（内部网）地址。对于许多较大的组织和ISP来说，即使是私有的IPv4地址空间<strong>也不足以满足</strong>它们的内部需求。这也是组织向 IPv6 过渡的另一个原因。</p><p>对于使用私有 IPv4 地址的内部网和使用公有 IPv4 地址的 DMZ，地址规划和分配非常重要。</p><p>在需要时，地址计划包括根据大小确定每个子网的需要。每个子网将有多少台主机地址计划还需要包括如何分配主机地址，哪些主机要求静态 IPv4 地址和哪些主机可以使用 DHCP 获取其编址信息的需求。这也将有助于防止地址重复，同时允许出于性能和安全原因对地址进行监测和管理。</p><p>了解您的IPv4地址需求将确定您实施的主机地址的范围，并帮助确保有足够的地</p><hr><p>在一个网络中，有不同类型的设备需要分配地址：</p><ul><li><strong>终端用户客户端</strong> – 大部分网络使用动态主机配置协议 (DHCP)动态地将IPv4地址分配给客户端设备。这能减少网络支持人员的负担，并显著减少输入错误。使用 DHCP 时，地址仅租用一段时间，并且可以在租约到期时重新使用。这是支持临时用户和无线设备的网络的一个重要特性。更改子网划分方案意味着 DHCP 服务器需要进行重新配置，并且客户端必须续订其 IPv4 地址。IPv6 客户端可以使用 DHCPv6 或 SLAAC 获取地址信息。</li><li><strong>服务器和外部设备</strong> - 这些应具有可预测的静态 IP 地址。对这些设备使用统一的编号系统。</li><li><strong>可从互联网访问的服务器</strong> - 需要在互联网上公开可用的服务器必须具有公有 IPv4 地址，通常使用 NAT 访问。在一些组织中，必须使远程用户可以使用内部服务器(不可公开使用)。在大多数情况下，这些服务器在内部分配了私有地址，用户需要创建一个虚拟专用网络 (VPN) 连接来访问服务器。这与用户从内部网中的主机访问服务器具有相同的效果。</li><li><strong>中间设备</strong> – 这些设备出于网络管理、监视和安全目的分配了地址。因为我们必须知道如何与中间设备通信，所以它们应当具有可以预测的静态地址。</li><li><strong>网关</strong> - 路由器和防火墙设备给每个接口分配一个 IP 地址，用作该网络中主机的网关。路由器接口一般使用网络中的最小地址或最大地址。</li></ul><p>在制定 IP 编址方案时，通常建议您使用一种固定模式为各类设备分配地址。这样有益于管理员添加和删除设备、根据 IP 过滤流量和简化文档。</p><h1 id="IPv6编制"><a href="#IPv6编制" class="headerlink" title="IPv6编制"></a>IPv6编制</h1><p>在辛苦学习了对IPv4网络进行子网划分之后，您可能会发现对IPv6网络进行子网划分要容易得多。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>您已经知道IPv4的地址用完了。这就是为什么您需要了解 IPv6 的原因。</p><p>IPv6 旨在接替 IPv4。IPv6 拥有更大的 128 位地址空间，提供 340 涧（即，340后面有36个0）个不确定地址。不过，IPv6 不只是具有更大的地址空间。</p><p>当 IEFT 开始开发 IPv4 的接替版本时，还借此机会修复了 IPv4 的限制，并开发了增强功能。一个示例是 Internet 控制消息协议第 6 版 (ICMPv6)，它包括 IPv4 的 ICMP (ICMPv4) 中没有的地址解析和地址自动配置功能。</p><p>私有地址与网络地址转换 (NAT) 对于放缓 IPv4 地址空间的耗尽起了不可或缺的作用。然而，NAT对于许多应用程序来说是有问题的，它会造成延迟，并且有严重阻碍对等体对对等体通信的限制。</p><p>随着移动设备数量的不断增加，移动供应商一直在引领着向IPv6的过渡。美国最大的两家移动运营商报告称，他们超过90%的流量都在IPv6之上。</p><p>大多数顶级ISP和内容提供商，如YouTube、Facebook和NetFlix，也已经完成了过渡。许多公司，如微软、Facebook和LinkedIn，都在向内部只允许使用ipv6过渡。2018年，宽带ISP Comcast报告部署超过65%，英国天空广播报告超过86%。</p><p><strong>互联网正在不断向物联网 (IoT) 发展。能够访问互联网的设备将不仅仅只有计算机、平板电脑和智能手机。</strong></p><p><strong>共存与迁移</strong></p><p>过渡到 IPv6 不是一朝一夕可以完成的。在不久的将来，IPv4和IPv6都将共存，并且过渡将需要几年的时间。IETF 已经创建了各种协议和工具来协助网络管理员将网络迁移到 IPv6。迁移技术可分为三类：</p><ul><li><p>双堆栈允许 IPv4 和 IPv6 在同一网段上共存。双堆栈设备同时运行 IPv4 和 IPv6 协议栈。称为原生 IPv6，这意味着客户网络与他们的ISP建立了IPv6连接，并能够通过IPv6访问互联网上的内容。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210818103516893.png" alt="image-20210818103516893" style="zoom: 50%;" /></li><li><p>隧道是一种通过 IPv4 网络传输 IPv6 数据包的方法。IPv6 数据包与其他类型数据类似，也封装在 IPv4 数据包中。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210818103636652.png" alt="image-20210818103636652" style="zoom:50%;" /></li><li><p>网络地址转换 64 (NAT64) 允许支持 IPv6 的设备与支持 IPv4 的设备使用类似于 IPv4 中 NAT 的转换技术进行通信。IPv6 数据包被转换为 IPv4 数据包，IPv4 数据包被转换为 IPv6 数据包。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210818103701274.png" alt="image-20210818103701274" style="zoom: 50%;" /></li></ul><p><strong>注意:</strong> <u>隧道和转换用于过渡到原生IPv6，仅应在需要时使用。目标是从源到目的地进行本地 IPv6 通信。</u></p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>书写 IPv6 地址的首选格式为 <code>x:x:x:x:x:x:x:x</code>，每个“x”均包括四个十六进制值。在 IPv6 中，十六位位组是指代 16 位二进制或四位十六进制数的非官方术语。每个“x”是一个16 位二进制数或四位十六进制数字组成的十六进制数。</p><pre class="line-numbers language-none"><code class="language-none">e.g.2001 : 0db8 : 0000 : 1111 : 0000 : 0000 : 0000: 0200 2001 : 0db8 : 0000 : 00a3 : abcd : 0000 : 0000: 1234 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>首选格式表示使用所有 32 个十六进制数字书写 IPv6 地址。这并不意味着它是表示 IPv6 地址的理想方法。在本模块中，您将了解到有两条规则可帮助减少表示一个 IPv6 地址所需数字的数目。</p><ul><li><p>第一条有助于缩短 IPv6 地址记法的规则是省略十六进制数中的所有前导 0（零）此规则仅适用于前导 0，不适用于后缀 0</p></li><li><p>第二条有助于缩短 IPv6 地址记法的规则是使用双冒号 (::) 替换任何由一个或多个全由 0 组成的16 位十六进制数组成的连续字符串。例如，2001:db8:cafe:1:0:0:0:1（前导0省略）可以表示为2001:db8:cafe:1::1。</p><p>双冒号 (::) 仅可在每个地址中<strong>使用一次</strong>，否则可能会得出一个以上的地址。当与忽略前导 0 的方法一起使用时，IPv6 地址记法可以大幅缩短。这通常称为压缩格式。</p></li></ul><p>单播、组播、任播</p><p><strong>任播</strong> - IPv6 任播地址是可分配到多个设备的 IPv6 任播地址。发送至任播地址的数据包会被路由到最近的拥有该地址的设备。任播地址不在本课程的讨论范围之内。</p><p>与 IPv4 不同，IPv6 没有广播地址。但是，IPv6 具有 IPv6 <strong>全节点组播地址</strong>，这在本质上与广播地址的效果相同。</p><p>在 IPv4 中，/24 称为前缀。在 IPv6 中，它被称为前缀长度</p><p>IPv6 不使用点分十进制子网掩码记法，前缀长度以<strong>斜线记法</strong>表示，用于表示 IPv6 地址的网络部分。</p><p><strong>强烈建议对大多数网络使用 64 位接口 ID（主机部分）</strong>。这是因为**无状态地址自动配置(SLAAC)**使用64位作为接口ID。它还使子网划分更易于创建和管理。</p><p>与IPv4设备只有一个地址不同，IPv6地址通常有两个单播地址:</p><ul><li><strong>全局单播地址(GUA)</strong> - 这类似于公有 IPv4 地址。这些地址具有全局唯一性，是互联网可路由的地址。GUA可静态配置或动态分配</li><li><strong>链路本地地址 (LLA)</strong> - 这对于每个支持ipv6的设备都是必需的。LLA用于与同一链路中的其他设备通信。在 IPv6 中，术语链路是指子网。LLA仅限于单个链路。它们的唯一性仅在该链路上得到保证，因为它们在该链路之外不具有可路由性。换句话说，路由器不会转发具有本地链路源地址或目的地址的数据包。</li></ul><p>唯一本地地址（范围 fc00:: /7 到 fdff:: /7）尚未普遍实现</p><p>IPv6 唯一本地地址与 IPv4 的 RFC 1918 私有地址具有相似之处，但是也有着重大差异。</p><ul><li>唯一本地地址用于一个站点内或数量有限的站点之间的本地编址。</li><li>唯一本地地址可用于从来不需要访问其他网络的设备。</li><li>唯一本地地址不会全局路由或转换为全局 IPv6 地址。</li></ul><p>许多站点也使用 RFC 1918 地址的私有性质来尝试去保护或隐藏其网络，使其免遭潜在的安全风险。但是，<u>这绝不是这些技术的既定用途，IETF 始终推荐各站点在面向互联网的路由器上采取妥善的安全预防措施。</u></p><h2 id="GUA-amp-LLA"><a href="#GUA-amp-LLA" class="headerlink" title="GUA&amp;LLA"></a>GUA&amp;LLA</h2><p><strong>GUA</strong></p><p>IPv6 全局单播地址 (GUA) 具有全局唯一性，可在 IPv6互联网上路由。这些地址相当于公有 IPv4 地址。互联网名称与数字地址分配机构 (ICANN)，即 IANA 的运营商，将 IPv6 地址块分配给五家 RIR。目前分配的仅是前三位为 001 的全局单播地址（GUA），如图所示。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210818110108525.png" alt="image-20210818110108525" style="zoom:67%;" /><p>因此当前可用的GUAs的第一个十六进制数字（16位）以2或3开头。这只是可用 IPv6 地址空间的 1/8</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210818105923359.png" alt="image-20210818105923359" style="zoom:67%;" /><p><strong>全局路由前缀</strong>是提供商（如 ISP）分配给客户或站点的地址的前缀或网络部分。例如，ISP 通常会为其客户分配 /48 全局路由前缀。全局路由前缀通常会因 ISP 的策略而异。</p><p><strong>子网ID字段</strong>是全局路由前缀和接口ID之间的区域。与IPv4不同，在IPv4中您必须从主机部分借用位来创建子网，IPv6在设计时考虑到了子网。<u>组织使用子网 ID 确定其站点的子网</u>。子网 ID 越大，可用子网越多。</p><p><strong>注意</strong>: 许多组织正在接收 /32 全局路由前缀。使用推荐的 /64 前缀来创建 64 位接口 ID，会留下一个 32 位子网 ID。这意味着具有 /32 全局路由前缀和 32 位子网 ID 的组织将拥有 43 亿个子网，每个子网都有 1800亿亿（18后面跟18个0）个子网。这是与公有 IPv4 地址数量一样多的子网！</p><p><strong>IPv6 接口 ID</strong> 相当于 IPv4 地址的主机部分。使用术语“接口 ID”是因为单个主机可能有多个接口，而每个接口又有一个或多个 IPv6 地址。该图显示了 IPv6 GUA 的结构示例。强烈建议在大多数情况下使用 /64 子网，这会创建64位接口ID。64 位接口 ID 允许每个子网有1800亿亿个设备或主机。</p><p>建议允许启用 SLAAC 的设备创建自己的 64 位接口 ID。它还使得 IPv6 编址计划的开发变得简单而有效。</p><p><strong>注意</strong>: 与 IPv4 不同，在 IPv6 中，全 0 和全 1 主机地址可以分配给设备。可以使用全1地址，因为广播地址不在IPv6中使用。全 0 地址也可使用，但它留作子网路由器任播地址，应仅分配给路由器。</p><hr><p><strong>LLA</strong></p><p>IPv6 链路本地地址 (LLA) 允许设备与同一链路上支持 IPv6 的其他设备通信，并且只能在该链路（子网）上通信。具有源或目的LLA的数据包不能在数据包的源链路之外进行路由。</p><p><strong>GUA 不是一项要求。但是，每个启用 IPv6 的网络接口都必须有 LLA。</strong></p><p>如果没有手动为接口配置 LLA，设备会在不与 DHCP 服务器通信的情况下自动创建自己的地址。支持 IPv6 的主机会创建 IPv6 LLA，即使没有为该设备分配 IPv6 全局单播地址。这允许支持 IPv6 的设备与同一子网中的其他支持 IPv6 的设备通信。这包括与默认网关（路由器）的通信。</p><p>IPv6 LLAs在fe80::/10范围内。/10 表示前 10 位是 1111 1110 10xx xxxx。第一个十六进制数的范围是 1111 1110 10<strong>00 0000</strong> (fe80) 到 1111 1110 10<strong>11 1111</strong> (febf)。</p><p>通常情况下，用作链路上其他设备的默认网关的是路由器的 LLA 而不是 GUA。</p><p>设备可以通过两种方式获取 LLA：</p><ul><li><strong>静态</strong> - 这意味着设备已手动配置。</li><li><strong>动态</strong> - 这意味着设备通过使用随机生成的值或使用扩展唯一标识符 (EUI) 方法创建自己的接口 ID，该方法使用客户端 MAC 地址和其他位。</li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>如您在上一主题中了解到的，IPv6 GUA与公有 IPv4 地址数量相同。它们具有全局唯一性，可在 IPv6 互联网上路由。IPv6 LLA 允许两个启用 IPV6 的设备在同一链路（子网）上相互通信。在路由器上静态配置 IPv6 GUA 和 LLA 很容易，可以帮助您创建 IPv6 网络。本主题教您如何做到这一点！</p><p>思科里，大多数 IPv6 的配置和验证命令与 IPv4 的相似。在多数情况下，唯一区别是命令中使用 <strong>ipv6</strong> 取代 <strong>ip</strong> 。</p><p>与使用 IPv4 一样，在客户端配置静态地址并不能扩展至更大的环境。因此，多数 IPv6 网络的管理员会启用 IPv6 地址的动态分配</p><p>设备可以通过两种方法自动获取 IPv6 GUA：</p><ul><li>无状态地址自动配置 (SLAAC)</li><li>有状态 DHCPv6</li></ul><p><strong>注意</strong>: 使用 DHCPv6 或 SLAAC 时，路由器的LLA将自动指定为默认网关地址。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210819170944632.png" alt="image-20210819170944632"></p><h3 id="GUA动态编址"><a href="#GUA动态编址" class="headerlink" title="GUA动态编址"></a>GUA动态编址</h3><p>如果您不想静态地配置IPv6 GUAs，也不必担心。大多数设备会动态获取其 IPv6 GUA。本主题说明如何使用路由器通告（RA）和路由器请求（RS）消息来完成此过程。本主题比较技术性，但是当您理解了路由器通告可以使用的三种方法之间的区别，以及创建接口ID的EUI-64进程与随机生成的进程的区别，您将在您的IPv6专业知识上有一个巨大的飞跃!</p><p>对于 GUA，设备通过 Internet 控制消息协议版本 6 (ICMPv6) 消息动态获取地址。</p><p>IPv6 路由器每 200 秒定期将 ICMPv6 RA 消息发送到网络上所有支持 IPv6 的设备。</p><p>在响应发送 ICMPv6 路由器请求 (RS) 消息的主机时，也会发送 RA 消息，该RS消息是对RA消息的请求。</p><p>RA消息位于IPv6路由器以太网接口上。必须为路由器启用 IPv6 路由，这在默认情况下是不启用的。若要将路由器启用为 IPv6 路由器，必须使用 <strong>ipv6 unicast-routing</strong> 全局配置命令。</p><p>ICMPv6 RA 消息提示设备获取 IPv6 GUA的方式。最终决定取决于设备的操作系统。ICMPv6 RA 消息包括以下：</p><ul><li><strong>网络前缀和前缀长度</strong> – 这会告知设备其所属的网络。</li><li><strong>默认网关</strong> – IPv6 LLA，RA 消息的<strong>源 IPv6 地址</strong>。</li><li><strong>DNS 地址和域名</strong> – 这些是DNS 服务器的地址和域名。</li></ul><p>RA 消息有三种方法：</p><ul><li><strong>方法 1: SLAAC</strong> - “我拥有您需要的一切，包括前缀、前缀长度和默认网关地址。”</li><li><strong>方法 2: SLAAC 和 无状态DHCPv6服务器</strong> - “这是我的信息，但您需要从 无状态DHCPv6 服务器获得其他信息，例如 DNS 地址。”</li><li><strong>方法 3: 有状态的 DHCPv6（无SLAAC）</strong> - “我可以给您默认网关的地址。您需要向有状态的 DHCPv6 服务器询问您的所有其他信息。”</li></ul><ol><li><p>SLAAC</p><p>SLAAC是一种允许设备在没有DHCPv6服务的情况下创建自己的GUA的方法。</p><p>SLAAC 是无状态的，也就是说没有中央服务器（例如有状态DHCPv6 服务器）来分配GUA和维持设备及其地址的清单。借助 SLAAC，<u>客户端设备使用 RA 消息中的信息创建其自己的GUA</u>。如图中所示，地址的两部分生成如下：</p><ul><li><strong>前缀</strong> - 这是在 RA 消息中通告的。</li><li><strong>接口 ID</strong> - 使用 EUI-64 流程或通过生成一个随机 64 位数字产生，取决于设备的操作系统。</li></ul></li><li><p>SLAAC 和无状态 DHCPv6</p><p>使用此方法，RA 消息建议设备使用以下内容：</p><ul><li>SLAAC创建自己的IPv6 GUA</li><li>路由器LLA，是RA源IPv6地址，作为默认网关地址</li><li>使用无状态 DHCPv6 服务器获取其他信息，例如 DNS 服务器地址和域名。</li></ul><p><strong>注意</strong>: 使用无状态 DHCPv6 服务器分配 DNS 服务器地址和域名。它不分配 GUA。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210820002740998.png" alt="image-20210820002740998"></p></li><li><p>有状态的DHCPv6</p><p>有状态 DHCPv6 与 IPv4 的 DHCP 相似。设备可以从有状态 DHCPv6 服务器自动接收编址信息，包括GUA、前缀长度和 DNS 服务器地址。</p><p>RA 消息建议设备使用以下内容：</p><ul><li>路由器LLA，是RA源IPv6地址，作为默认网关地址。</li><li>使用有状态 DHCPv6 服务器获取GUA、DNS 服务器地址、域名和其他必要信息。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210820002915745.png" alt="image-20210820002915745"></p></li></ol><p><strong>生成接口ID</strong></p><p>客户端从 RA 消息中获知地址的前缀部分，但必须创建自己的接口 ID。接口 ID 可使用 <strong>EUI-64 流程或随机生成</strong>的 64 位数字创建。</p><p> IEEE 定义了扩展唯一标识符 (EUI) 或修改的 EUI-64 流程。该流程使用客户端的 48 位以太网 MAC 地址，并在该 48 位 MAC 地址的中间插入另外 16 位来创建 64 位接口 ID。</p><p>   <img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210820100531493.png" alt="image-20210820100531493"></p><p>识别地址可能是使用 EUI-64 创建的一个简单方法是位于接口 ID 中间的 <strong>fffe</strong>。</p><p>EUI-64 优势在于可以使用以太网 MAC 地址确定接口 ID。这也允许网络管理员使用唯一 MAC 地址轻松跟踪终端设备的 IPv6 地址。然而，这引起了许多<strong>用户的隐私担忧</strong>，他们担心自己的数据包可能会被追踪到实际的物理计算机。出于这些顾虑，可以转而使用随机生成的接口 ID。</p><p><strong>随机生成</strong></p><p>根据操作系统，设备可以使用随机生成的接口 ID，而不使用 MAC 地址和 EUI-64 流程。从 Windows Vista 开始，Windows 使用随机生成的接口 ID，而不是 EUI-64 创建的接口 ID。Windows XP 和之前的 Windows 操作系统均使用 EUI-64。</p><p><strong>注意</strong>: 为确保任何 IPv6 单播地址的唯一性，客户端可以使用重复地址检测 (DAD) 流程。这与 ARP 请求其地址的流程相似。如该请求没有响应，则地址是唯一的。</p><h3 id="LLA动态编址"><a href="#LLA动态编址" class="headerlink" title="LLA动态编址"></a>LLA动态编址</h3><p>操作系统，如Windows，通常会对SLAAC创建的GUA和动态分配的LLA使用相同的方法。<strong>即ID部分相同</strong></p><p><strong>当为接口分配GUA时，思科路由器会自动创建 IPv6 LLA</strong>。默认情况下，思科 IOS 路由器使用 EUI-64 为 IPv6 接口上的所有LLA生成接口 ID。对于串行接口，路由器会使用以太网接口的 MAC 地址。</p><p>使用动态分配的LLA的缺点在于其接口 ID 较长，因此很难识别并记住分配的地址。</p><p>为了更容易在路由器上识别和记忆这些地址，通常要在路由器上静态配置 IPv6 LLA。</p><h3 id="组播"><a href="#组播" class="headerlink" title="组播"></a>组播</h3><p>组播地址仅可用作目的地址，不能用作源地址。</p><p>IPv6 组播地址的前缀为ff00::/8。</p><p>IPv6 组播地址分为两种类型：</p><ul><li>知名组播地址</li><li>请求节点组播地址</li></ul><p>分配的组播地址是为预先定义的设备组保留的组播地址。分配的组播地址是用于到达运行通用协议或服务的设备组的单个地址。分配的组播地址用在特定的协议环境，例如 DHCPv6。</p><ul><li><strong>ff02:全节点组播组</strong> - 这是一个包含所有支持 IPv6 的设备的组播组。发送到该组的数据包由该链路或网络上的所有 IPv6 接口接收和处理。这与 IPv4 中的广播地址具有相同的效果。图中显示使用全节点组播地址进行通信的示例。IPv6 路由器将 ICMPv6 RA 消息发送给全节点组播组。</li><li><strong>ff02:全路由器组播组</strong> - 这是所有IPv6路由器加入的组播组。当在 IPv6 路由器全局模式下启用 ipv6 unicast-routing 命令后，该路由器即成为该组的成员。发送到该组的数据包由该链路或网络上的所有 IPv6 路由器接收和处理。</li></ul><p>请求节点组播地址类似于全节点组播地址。请求节点组播地址的优势在于它被映射到特殊的以太网组播地址。这使得以太网网卡可以通过检查目的 MAC 地址过滤该帧，而不是将它发送给 IPv6 流程来判断该设备是否是 IPv6 数据包的既定目标。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210820110425088.png" alt="image-20210820110425088" style="zoom: 67%;" /><h3 id="子网-1"><a href="#子网-1" class="headerlink" title="子网"></a>子网</h3><p>128 位地址的好处在是，它可以为每个网络支持足够多的子网并为每个子网支持足够多的主机。地址保留不是问题。例如，如果全局路由前缀是a /48，并且使用一个典型的64位接口ID，这将创建一个16位子网ID</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210820111159718.png" alt="image-20210820111159718" style="zoom:67%;" /><p>由于有 65,536 个子网可供选择，网络管理员的任务就变为设计一个逻辑方案来分配网络地址。</p><p>IPv6的串行链路子网将具有与局域网相同的前缀长度。虽然这可能会“浪费”地址，但是使用 IPv6 时地址保留并不是问题。</p><h1 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h1><p>在本主题中，您会了解不同类型的 Internet 控制消息协议 (ICMP) ，以及用于发送它们的工具。</p><p>虽然 IP 只是“尽最大努力”的协议，但在与另一个IP设备通信时，TCP/IP套件确实提供了错误消息和参考消息。这些消息使用 ICMP 服务发送。其用途是就特定情况下处理 IP 数据包的相关问题提供反馈，而并非是使 IP 可靠。ICMP 消息并非必需的，而且在网络内通常出于安全原因而被禁止。</p><p>ICMP 可同时用于 IPv4 和 IPv6。ICMPv4 是 IPv4 的消息协议。ICMPv6 为 IPv6 提供相同的服务，此外，还包括其他功能。</p><p>ICMP 消息的类型及其发送原因非常多。ICMPv4 和 ICMPv6 通用的 ICMP 消息包括：</p><ul><li>主机联通性</li><li>目的地或服务不可达</li><li>超时</li></ul><p><strong>主机可连通性</strong></p><p>ICMP Echo消息可用于测试 IP 网络上主机的可达性。本地主机向一台主机发送 ICMP Echo请求。如果主机可用，目的主机会回应以Echo应答。在图中，请单击“播放”按钮观看 ICMP Echo请求/Echo应答动画。如此使用 ICMP Echo消息是 <strong>ping</strong> 实用程序的基础。</p><p>当主机或网关收到无法传送的数据包时，它会使用 ICMP 目的地不可达消息通知源主机，目的地或服务无法到达。消息包括指示数据包为何无法传送的代码。</p><p>ICMPv4 的目的地不可达代码示例有：</p><ul><li>0 - 网络不可达。</li><li>1 - 主机不可达。</li><li>2 - 协议不可达。</li><li>3 - 端口不可达。</li></ul><p>ICMPv6 的目的地不可达代码示例有：</p><ul><li>0-没有通往目标的路由。</li><li>1-管理上禁止与目的地通信（例如防火墙）</li><li>2-超出源地址的范围</li><li>3-地址无法访问</li><li>4-端口不可达。</li></ul><p><strong>超时</strong></p><p>路由器使用 ICMPv4 超时消息表明，因为数据包的生存时间 (TTL) 字段递减到 0 而不能转发该数据包。如果路由器接收数据包并且将 IPv4 数据包的 TTL 字段的值递减为零，则它会丢弃数据包并向源主机发送超时消息。</p><p>如果路由器因数据包过期而无法转发 IPv6 数据包，ICMPv6 也会发送超时消息。ICMPv6使用IPv6跳数限制字段来确定数据包是否已过期，而不是IPv4 TTL字段。</p><p>ICMPv6 拥有 ICMPv4 中所没有的新特性和功能提升。ICMPv6 消息封装在 IPv6 中。</p><p>ICMPv6 在邻居发现协议（ND 或 NDP）中包括四个新协议。</p><p>IPv6 路由器和 IPv6 设备之间的消息传递，包括动态地址分配如下所示：</p><ul><li>路由器请求 (RS) 消息</li><li>路由器通告 (RA) 消息</li></ul><p>IPv6 设备之间的消息传递，包括重复的地址检测和地址解析如下所示：</p><ul><li>邻居请求 (NS) 消息</li><li>邻居通告 (NA) 消息</li></ul><p><strong>注意</strong>: ICMPv6 ND 还包括重定向消息，与 ICMPv4 中使用的重定向消息功能相似。</p><h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><p>​    传输层是将数据从一个主机传输到另一个主机的地方。这是您的网络真正开始动起来的地方! 传输层使用两个协议: TCP和UDP。可以把TCP看作是在邮件中收到一封挂号信。您必须先签收,然后邮递员才会给您。这会稍微减慢这个过程,但是发送者可以确定地知道您收到了这封信,以及您收到这封信的时间。UDP更像是一个普通的,盖了邮戳的信。它到达了您的邮箱（如果它到了的话）,它可能是给您的,但它实际上也可能是给其他不住在那里的人的。而且,它还可能根本就没有到达您的邮箱。发件人无法确定您已收到了信。尽管如此,有时还是需要像盖了邮戳的信件一样的UDP协议。</p><h2 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h2><p>应用层程序生成必须在源主机和目的主机之间交换的数据。<strong>传输层负责在不同主机上运行的应用程序之间进行的逻辑通信</strong>。这可能包括在两个主机之间建立临时会话以及应用程序信息的可靠传输等服务。</p><p>传输层并不了解目标主机类型、数据必须经过的介质类型、数据使用的路径，链路拥塞情况或网络大小。</p><p><strong>职责</strong></p><p><strong>跟踪各个会话</strong></p><p>在传输层中，源应用和目的应用之间传输的每个数据集称为会话并分别进行跟踪。传输层负责维护并跟踪这些会话。</p><p>每台主机上都可以有多个应用同时在网络上通信。</p><p>大多数网络对单个数据包能承载的数据量都有限制。因此，必须将数据分成可管理的部分。</p><p><strong>数据分段和数据段重组</strong></p><p>传输层负责将应用程序数据划分为适当大小的块。根据所使用的传输层协议，传输层块称为数据段或数据报。该图说明了使用不同块进行每个会话的传输层。</p><p><strong>添加报头信息</strong></p><p>传输层协议还将包含二进制数据的报头信息添加到每个数据块中，这些数据被组织成几个字段。不同的传输层协议通过这些字段值在管理数据通信过程中执行各自的功能。</p><p>例如，接收主机使用报头信息将数据块重新组装为接收应用程序层程序的完整数据流。</p><p><u>传输层可以确保在设备上运行多个应用时，所有应用都能接收正确的数据。</u></p><p><strong>标识应用</strong></p><p>传输层必须能够划分和管理具有不同传输要求的多个通信。为了将数据流传递到适当的应用程序，传输层使用称为端口号的标识符来标识目标应用。如图所示，在每台主机中，每个需要访问网络的软件进程都将被分配一个唯一的端口号。</p><p><strong>会话多路复用</strong></p><p>将某些类型的数据（即视频流）作为完整的通信流在网络中发送，会使用所有可用带宽。这将阻止其他通信会话同时发生。而且也难以对损坏的数据开展错误恢复和重新传输的工作。</p><p>传输层使用数据段和多路复用，使不同的通信会话在同一网络上交错。</p><p>可对数据段中的数据执行错误检查，以确定数据段在传输过程中是否发生了更改。</p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>IP 只涉及数据包的结构、地址分配和路由。IP 不指定数据包的传送或传输方式。</p><p>传输层协议指定如何在主机之间传输消息，并负责管理会话的可靠性要求。传输层包括 TCP 和 UDP 协议。</p><p>不同的应用有不同的传输可靠性要求。因此，TCP/IP 提供了两个传输层协议</p><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>TCP将数据分为若干个数据段。（segment）</p><p>TCP 被认为是可靠且功能齐全的传输层协议，用于确保所有数据到达目的设备。TCP包含确保应用数据传递的字段。这些字段需要发送和接收的主机进行额外处理。</p><p>TCP 使用以下基本操作提供可靠性和流量控制：</p><ul><li>编号并跟踪从特定应用程序发送到特定主机的数据段。</li><li>确认收到数据</li><li>在一定时间段后重新传输未确认的数据</li><li>有顺序的数据可能以错误的顺序到达 以接收方可以接受的有效速率* 发送数据</li></ul><p>除了支持数据分段和重组的基本功能之外，TCP 还提供以下服务：</p><ul><li><strong>建立会话</strong> - TCP是一种面向连接的协议，在转发任何流量之前，在源设备和目的设备之间协商并建立永久连接（或会话）。通过建立会话，设备可以协商特定时间能够转发的流量，而且两个设备之间的通信数据可得到严格管理。</li><li><strong>确保可靠的传递</strong> - 由于多种原因，数据段在网络传输过程中可能会损坏或者完全丢失。TCP确保从源设备发送的每个数据段都能够到达目的地。</li><li><strong>提供相同顺序的传递</strong> - 由于网络可能提供了多条路由，每条路由又有不同的传输速率，所以可能导致数据抵达的顺序错乱。通过对数据段编号和排序，TCP 确保按正确的顺序重组这些数据段。</li><li><strong>支持流量控制</strong> - 网络主机的资源有限（即，内存或处理能力）。当 TCP 发现这些资源超负荷运转时，它可以请求源应用程序降低数据流速。为此，TCP 会调整源设备传输的数据量。流量控制可避免当接收主机的资源不堪重负时，数据的重新传输。</li></ul><p>有关 TCP 的更多信息，请在互联网上搜索 RFC 793。</p><p>在封装应用层数据时，TCP 数据段会增加 20 个字节（即 160 位）的开销。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210820114849519.png" alt="image-20210820114849519" style="zoom:67%;" /><table><thead><tr><th align="left"><strong>TCP 报头字段</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><strong>源端口</strong></td><td align="left">一个16位字段, 用于通过端口号标识源应用程序。</td></tr><tr><td align="left"><strong>目的端口</strong></td><td align="left">一个16位字段, 用于通过端口号标识目的应用 程序。</td></tr><tr><td align="left"><strong>序列号</strong></td><td align="left">一个32位字段, 用于数据重组。</td></tr><tr><td align="left"><strong>确认号</strong></td><td align="left">一个32位的字段, 用于指示已接收到数据, 并且期望从源 接收下一个字节。</td></tr><tr><td align="left"><strong>报头长度</strong></td><td align="left">一个4位字段, 称为“数据偏移”, 表示 TCP数据段报头的长度。</td></tr><tr><td align="left"><strong>保留</strong></td><td align="left">一个6位字段, 保留供将来使用。</td></tr><tr><td align="left"><strong>控制位</strong></td><td align="left">一个6位字段, 包括位代码或标志, 指示 TCP段的目的和功能。</td></tr><tr><td align="left"><strong>窗口大小</strong></td><td align="left">一个16位字段, 用于指示一次可以接受的 字节数。</td></tr><tr><td align="left"><strong>校验和</strong></td><td align="left">一个16位字段, 用于数据段报头和数据的错误检查。</td></tr><tr><td align="left"><strong>紧急</strong></td><td align="left">一个 16 位字段, 用于指示包含的数据是否紧急。</td></tr></tbody></table><p>TCP 很好地说明了 TCP/IP 协议簇的不同层如何拥有特定角色。TCP 处理与将数据流划分为数据段、提供可靠性、控制数据流量和数据段重新排序相关的所有任务。TCP 使应用程序不用再管理这些任务。</p><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>diagram</p><p>UDP是一种无连接协议。由于 UDP 不提供可靠性或流量控制，因此不需要建立连接。由于 UDP 不跟踪客户端和服务器之间发送或接收的信息，因此UDP 也称为无状态协议。</p><p>UDP 也称为最大努力交付协议，因为在目的地接收到数据后没有确认消息。UDP 中没有通知发送方是否成功传输的传输层流程。</p><p>UDP是一种比TCP更简单的传输层协议。它不提供可靠性和流量控制，这意味着它需要更少的报头字段。由于发送方和接收方UDP进程不需要管理可靠性和流量控制，这意味着 UDP 数据报的处理速度比 TCP 数据段快。UDP 仅提供在相应应用之间传输数据报的基本功能，需要很少的开销和数据检查。</p><p>UDP 协议非常简单，它通常被描述为与 TCP 比较所不提供的功能。</p><p>UDP的特点包括以下几种：</p><ul><li>数据按照接收顺序重构。</li><li>丢失的任何数据段都不会重新发送。</li><li>不会建立会话。</li><li>不会告知发送者资源可用性。</li></ul><p>如果使用 UDP 作为传输协议时要求可靠性，必须<strong>由应用来处理可靠性</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210820115337986.png" alt="image-20210820115337986"></p><p>最适合采用 UDP 协议的三种应用程序包括：</p><ul><li><strong>实时视频和多媒体应用程序</strong> - 这些应用可以容忍部分数据丢失但要求延迟极小或没有延迟的应用程序。示例包括 VoIP 和实时流传输视频。</li><li><strong>简单请求和应答应用程序</strong> - 处理简单事务的应用程序，其中主机发送请求，但不一定收到应答。示例包括 DNS 和 DHCP。</li><li><strong>处理可靠性的应用程序</strong> - 不要求进行流量控制、错误检测、确认和错误恢复，或这些功能由应用程序来执行的单向通信。示例包括 SNMP 和 TFTP。</li></ul><p>虽然 DNS 和 SNMP 默认使用 UDP，但它们都可以使用 TCP。如果 DNS 请求或 DNS 响应大于 512 字节，DNS 会使用 TCP，例如 DNS 响应包含许多域名解析时。同样，在某些情况下，网络管理员可以配置 SNMP 使用 TCP。</p><p><strong>选择</strong></p><p>一些应用可以容忍在网络传输过程中丢失部分数据，但是不接受传输中出现延迟。由于需要的网络开销较少，对于这些应用，UDP 是更好的选择。UDP 是 IP 语音 (VoIP) 之类应用的首选。确认和重新发送会拖慢传输速度，并使语音会话不可接受。</p><p>UDP 也被“请求-回复”应用程序使用，其中数据最少，并且可以快速完成重新传输。例如，域名服务 (DNS) 为此类事务使用 UDP。客户端从DNS服务器请求已知域名的IPv4和IPv6地址。<strong>如果客户端在预定的时间内没有收到响应，它将再次发送请求。</strong></p><p>例如，如果视频数据流中的一段或者两段数据未到达目的地，就会造成数据流的短暂中断。这可能表现为图像失真或声音失真，用户也许不会察觉。如果目的设备必须负责处理丢失的数据，则流可能在等待重新发送的过程中被推迟，从而导致图像或声音的质量大大降低。在这种情况下，最好利用接收到的分段呈现最佳媒体，并放弃可靠性。</p><p>对于其他应用程序，重要的是所有数据都应到达并且可以按适当的顺序对其进行处理。对于这些类型的应用程序，使用TCP 作为传输协议。例如，数据库、Web 浏览器和邮件客户端等应用，要求发送的所有数据都必须以原始形式到达目的地。任何数据的丢失都可能导致通信失败，要么不能完成通信，要么通信的信息不可读。例如，通过网页访问银行信息时，确保所有信息都正确发送和接收是非常重要的。</p><p>应用开发人员必须根据应用的需求，选择适合的传输层协议类型。视频可以通过 TCP 或 UDP 发送。存储音频和视频流的应用使用 TCP。应用程序使用 TCP 执行缓冲、带宽探测和拥塞控制，以便更好地控制用户体验。</p><p>实时视频和语音通常使用UDP，但也可能使用TCP，或同时使用UDP和TCP。视频会议应用程序默认情况下可能使用UDP，但由于许多防火墙阻止UDP，应用程序也可以通过TCP发送。</p><p>存储音频和视频流的应用使用 TCP。例如，如果您的网络突然不能支持观看一个点播电影所需的带宽，则应用使播放暂停。在暂停期间，您可能会看到一个“缓冲……”消息，这时，TCP 正在重建流。当所有的片段都井然有序且恢复最低限度的带宽时，您的 TCP 会话重新开始，电影恢复播放。</p><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>无论传输何种类型的数据，TCP和UDP都使用端口号。</p><p>TCP 和 UDP 传输层协议使用端口号来管理多个同时的对话</p><p>在请求中，目的端口号是标识目的Web服务器正在被请求的服务类型的端口号。例如，当客户端在目的端口中指定端口 80 时，接收该消息的服务器就知道请求的是 Web 服务。</p><p>服务器可同时提供多个服务，例如在端口 80 上提供 Web 服务，并同时在端口 21 上提供建立文件传输协议 (FTP) 连接的服务。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210820115913366.png" alt="image-20210820115913366" style="zoom: 50%;" /><p>套接字用于标识客户端所请求的服务器和服务。客户端套接字可能如下所示，其中 1099 代表源端口号：192.168.1.5:1099</p><p>Web 服务器上的套接字则可能是192.168.1.7:80</p><p>这两个套接字组合在一起形成一个套接字对：192.168.1.5:1099，192.168.1.7:8</p><p>有了套接字，一台客户端上运行的多个进程便可彼此区分，它们与同一服务器进程建立的多个连接也可以彼此区分。</p><p>互联网编号指派机构 (IANA) 是负责分配各种编址标准（包括端口号）的标准组织。用于标识源端口号和目的端口号的16位二进制提供了从0到65535的端口范围。</p><p>IANA 已将号码范围划分为以下三个端口组。</p><table><thead><tr><th align="left"><strong>端口组</strong></th><th align="left"><strong>号码范围</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><strong>公认端口</strong></td><td align="left"><strong>0到1023</strong></td><td align="left">这些端口号保留用于常见或流行的服务和应用程序, 例如 Web浏览器, 电子邮件客户端和远程访问 客户端。为常用的服务器应用程序定义的公认端口使 客户端能够轻松识别所需的关联服务。</td></tr><tr><td align="left"><strong>注册端口</strong></td><td align="left"><strong>1024到49151</strong></td><td align="left">IANA将这些端口号分配给请求实体, 以用于特定的进程或应用程序。这些进程主要是用户选择安装的单个 应用程序, 而不是使用公认端口号的 常见应用程序。例如, 思科已为其RADIUS服务器身份验证进程 注册了端口1812。</td></tr><tr><td align="left"><strong>私有</strong> 和(或) <strong>动态端口</strong></td><td align="left"><strong>49152 到 65535</strong></td><td align="left">这些端口也称为 <em>临时端口</em>。客户端的操作系统通常在 发起与服务的连接时动态分配端口号。之后即可在通信过程中使用动态端口识别客户端 应用程序。</td></tr></tbody></table><p><strong>注意</strong>: 一些客户端操作系统在分配源端口时可能使用注册端口号而不是动态端口号。</p><table><thead><tr><th align="left"><strong>端口号</strong></th><th align="left"><strong>协议</strong></th><th align="left"><strong>应用层</strong></th></tr></thead><tbody><tr><td align="left"><strong>20</strong></td><td align="left">TCP</td><td align="left">文件传输协议 (FTP) - 数据</td></tr><tr><td align="left"><strong>21</strong></td><td align="left">TCP</td><td align="left">文件传输协议 (FTP) - 控制</td></tr><tr><td align="left"><strong>22</strong></td><td align="left">TCP</td><td align="left">安全 Shell (SSH)</td></tr><tr><td align="left"><strong>23</strong></td><td align="left">TCP</td><td align="left">Telnet</td></tr><tr><td align="left"><strong>25</strong></td><td align="left">TCP</td><td align="left">简单邮件传输协议 (SMTP)</td></tr><tr><td align="left"><strong>53</strong></td><td align="left">UDP、TCP</td><td align="left">域名服务 (DNS)</td></tr><tr><td align="left"><strong>67</strong></td><td align="left">UDP</td><td align="left">动态主机配置协议 (DHCP)- 服务器</td></tr><tr><td align="left"><strong>68</strong></td><td align="left">UDP</td><td align="left">动态主机配置协议-客户端</td></tr><tr><td align="left"><strong>69</strong></td><td align="left">UDP</td><td align="left">简单文件传输协议 (TFTP)</td></tr><tr><td align="left"><strong>80</strong></td><td align="left">TCP</td><td align="left">超文本传输协议 (HTTP)</td></tr><tr><td align="left"><strong>110</strong></td><td align="left">TCP</td><td align="left">邮局协议第 3 版 (POP3)</td></tr><tr><td align="left"><strong>143</strong></td><td align="left">TCP</td><td align="left">互联网消息访问协议 (IMAP)</td></tr><tr><td align="left"><strong>161</strong></td><td align="left">UDP</td><td align="left">简单网络管理协议 (SNMP)</td></tr><tr><td align="left"><strong>443</strong></td><td align="left">TCP</td><td align="left">安全超文本传输协议 (HTTPS)</td></tr></tbody></table><p>一些应用程序可能既使用 TCP，又使用 UDP。例如，当客户端向 DNS 服务器发送请求时，DNS 使用 UDP。但是，两台 DNS 服务器之间的通信始终使用 TCP。</p><p>不明的 TCP 连接可能造成重大的安全威胁。因为此类连接表示某程序或某人正连接到本地主机。有些时候，需要了解联网主机中启用并运行了哪些活动 TCP 连接。Netstat 是一种重要的网络实用程序，可用来检验此类连接。</p><p>输入命令 <strong>netstat</strong>可列出正在使用的协议、本地地址和端口号、外部地址和端口号以及连接的状态。</p><p>默认情况下，<strong>netstat</strong>命令会试图将 IP 地址解析为域名，将端口号解析为公认应用程序。使用**-n**选项能够以数字形式显示 IP 地址和端口号。</p><h2 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h2><h3 id="TCP-1"><a href="#TCP-1" class="headerlink" title="TCP"></a>TCP</h3><p>分配有特定端口的活动服务器应用程序被认为是开放的，也就是说，传输层将接受并处理分配到该端口的数据段。所有发送到正确套接字地址的传入客户端请求都将被接受，数据将被传送到服务器应用。在同一服务器上可以同时开启很多端口，每个端口对应一个动态服务器应用。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210820121900322.png" alt="image-20210820121900322" style="zoom:67%;" /><p>在一些文化中，两个人见面时常常通过握手来问好。双方都把握手的行为理解为友好问候的信号。网络中的连接是类似的。在 TCP 连接中，主机客户端使用<strong>三次握手过程</strong>与服务器建立连接。</p><p>SYN -&gt; ACK和SYN -&gt; ACK</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210820122108492.png" alt="image-20210820122108492" style="zoom: 50%;" /><p>三次握手验证目标主机是否可用来通信。在示例中，主机 A验证了主机 B可用。</p><p>若要关闭连接，分段报头必须设置完成 (FIN) 控制标志。为终止每个单向 TCP 会话，需采用包含 FIN 分段和确认 (ACK) 分段的二次握手。因此，若要终止 TCP 支持的整个会话过程，需要实施四次交换，以终止两个双向会话。客户端或服务器都可以发起终止。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210820122520033.png" alt="image-20210820122520033" style="zoom:50%;" /><p>当所有数据段得到确认后，会话关闭。</p><p>主机维护状态，跟踪会话过程中的每个分段，并使用 TCP 报头信息交换已接收数据的相关信息。TCP 是全双工协议，每个连接都代表两个单向通信会话。若要建立连接，主机应执行三次握手。TCP 报头中的控制位指出了连接的进度和状态。通信完成后，将关闭会话并终止连接。连接和会话机制保障了 TCP 的可靠性功能。</p><p>三次握手的功能：</p><ul><li>确认目的设备存在于网络上。</li><li>确认目的设备有活动的服务，并且正在源客户端要使用的目的端口号上接受请求。</li><li>通知目的设备源客户端想要在该端口号上建立通信会话。</li></ul><p>六个控制位标志如下：</p><ul><li><strong>URG</strong> - 紧急指针字段（重要）</li><li><strong>ACK</strong> - 用于建立连接和会话终止的确认标志</li><li><strong>PSH</strong> - 推送功能</li><li><strong>RST</strong> - 在出现错误或超时时重置连接</li><li><strong>SYN</strong> - 同步建立连接中使用的序列号</li><li><strong>FIN</strong> - 没有更多来自发送方的数据，并用于会话终止</li></ul><p>SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)</p><hr><h3 id="可靠性和流控制"><a href="#可靠性和流控制" class="headerlink" title="可靠性和流控制"></a>可靠性和流控制</h3><p>有时可能TCP数据段没有到达目的地。有时，TCP段可能会无序到达。因此，为了让接收方理解原始消息，必须接收所有数据，并重组这些数据段，使其恢复原有顺序。每个数据包中的数据段报头中都含有序列号，便于进行数据重组。序列号代表 TCP 分段的第一个数据字节在完整数据中的位置。</p><p><strong>序列号和确认</strong></p><p>在会话建立过程中，将设置初始序列号 (ISN)。此 ISN 表示传输到接收应用的字节起始值。在会话过程中，每传送一定字节的数据，序列号就随之增加。</p><p>ISN 并不是从 1 开始，而是随机的数字。这样做的目的是防止某些类型的恶意攻击。为简单起见，本章的示例中我们将使用 1 作为 ISN。在wireshark中会将第一个转换为0，称为相对序列号。</p><p>接收方的 TCP 进程将数据段中的数据存入缓存区，然后数据段按照正确的序列顺序进行排列，重组后发送到应用层。对于序列号混乱的分段，将被保留以备后期处理。等缺失的分段到达后，再来按顺序处理这些分段。</p><p><strong>丢失和重传</strong></p><p>TCP 提供了管理数据段丢失的方法。其中一个方法就是重新传输未确认的数据。</p><p>序列 (SEQ) 号和确认 (ACK) 号一起使用，以确认接收传输段中包含的数据字节。SEQ 编号标识正在传输的数据段中的第一个字节。TCP 使用发送回源代码的 ACK 编号来指示接收方希望接收的下一个字节。这称为期望确认。</p><p>当源主机的计时器结束后若未收到ACK，则会重传</p><p>在进行后续增强之前，TCP只能确认预期的下一个字节。例如，在图中，为简单起见，主机A使用数据段号向主机B发送段1到10。如果除段3和段4之外的所有数据段都已到达，主机B将应答并确认指定下一个预期的数据段是段3。主机A不知道其他数据段是否到达。因此，主机A将重新发送段3到段10。如果所有重新发送的数据段都成功到达，则段 5 到 段10 将是重复的。这会导致延迟、拥塞和效率低下。</p><p>今天的主机操作系统通常采用一种称为选择性确认 (SAK) 的可选 TCP 功能，在三次握手期间协商。如果两个主机都支持SACK，则接收方可以明确地确认接收了哪些数据段(字节)，包括任何不连续的段。因此，发送主机只需要重新传输丢失的数据。例如，在下图中，还是为简单起见，主机A使用数据段号向主机B发送段1到10。如果除段3和段4之外的所有数据段都已到达，主机B可以确认它已经接收了段1和段2 (ACK 3)，并有选择地确认段5到10 (SACK 5-10)。主机A只需要重新发送段3和段4。</p><p>显示了 PCA 向 PCB 发送 10 段，但第 3 段和第 4 段未能到达。这一次，PCB发送了一个ACK 3和一个SACK 5-10，让PCA知道重新发送缺失的段3和段4，并继续发送段11</p><p><strong>流量控制</strong></p><p>流量控制可以调整给定会话中源和目的地之间的数据流速，有助于保持 TCP 传输的可靠性。为此，TCP 报头包括一个称为“窗口大小”的 16 位字段。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210820211158091.png" alt="image-20210820211158091" style="zoom:50%;" /><p>窗口大小是 TCP 会话的目的设备一次可以接受和处理的字节数。在本例中，PC B 用于 TCP 会话的初始窗口大小为 10000 字节。从第 1 个字节开始，字节数为 1，PC A 在不收到确认的前提下可以发送的最后一个字节为 10,000。这被称为PC A的发送窗口。每个 TCP 分段均包含窗口大小，那样目的设备可以根据缓冲区的可用性随时修改窗口大小。</p><p>初始窗口大小在三次握手期间建立 TCP 会话时确定。源设备必须根据目的设备的窗口大小限制发送到目的设备的字节数。只有源设备收到字节数已接收的确认之后，才能继续发送更多会话数据。通常情况下，目的设备不会等待其窗口大小的所有字节接收后才以确认应答。<strong>接收和处理字节时，目的设备就会发送确认，以告知源设备它可以继续发送更多字节。</strong></p><p>目的设备在处理接收的字节时发送确认并不断调整源设备的发送窗口大小被称为<strong>滑动窗口</strong>。在上一个示例中，PC A 的发送窗口会增加或滑动了 2921 个字节，从 10000 增到 12920。</p><p>如果目的设备缓冲区空间的可用性减小，它可以缩减窗口大小，通知源设备减少发送的字节数，而不需要接收确认。滑动窗口的优势在于，只要接收方确认之前的数据段，就可以让发送方持续传输数据段。滑动窗口的详细信息不在本课程的讨论范围之内。</p><p>MSS 是 TCP 报头中选项字段的一部分，用于指定设备可以在单个 TCP数据段中接收的最大数据量（以字节为单位）。MSS 大小不包括 TCP 报头。</p><p>使用 IPv4 时，常见的 MSS 为 1460 字节。主机会从以太网最大传输单位 (MTU) 中减去 IP 和 TCP 报头，从而确定其 MSS 字段的值。</p><p>在以太网接口上，默认 MTU 为 1500 个字节。减去 20 个字节的 IPv4 报头和 20 个字节的 TCP 报头，默认 MSS 大小为 1460 个字节，如图所示。</p><p><strong>避免拥塞</strong></p><p>网络中出现拥塞会使过载的路由器丢弃数据包。当包含 TCP 数据段的数据包未到达其目的地时，它们就成为未确认的数据包。通过确定 TCP 数据段<strong>发送但未确认的速率</strong>，源设备可以假设一定程度的网络拥塞。</p><p>出现网络拥塞时，从源设备丢失的 TCP 数据段就会重传。如果不适当控制重传，TCP 数据段的额外重传会使拥塞的情况更糟。网络中不仅有 TCP 数据段的新数据包，而且还有重传丢失的 TCP 数据段的反馈效果，这都增加了拥塞。为避免和控制拥塞，TCP 使用了多个<strong>拥塞处理机制、计时器和算法</strong>。</p><p>如果源设备确定 TCP 数据段没有被确认或没有被及时确认，它会在收到确认之前减少发送的字节数。</p><h3 id="UDP-1"><a href="#UDP-1" class="headerlink" title="UDP"></a>UDP</h3><p>与 TCP分段类似，当将多个 UDP 数据报发送到目的主机时，它们通常采用不同的路径，到达顺序也可能跟发送时的顺序不同。与 TCP 不同，UDP 不跟踪序列号。UDP 不会按传输顺序重新排列数据报。</p><p>因此，UDP 仅仅是将接收到的数据按照先来后到的顺序转发到应用程序。如果数据顺序对应用程序很重要，应用程序必须确定正确的顺序并决定如何处理数据。</p><p>与基于 TCP 的应用程序相同的是，基于 UDP 的服务器应用程序也被分配了公认端口号或注册端口号。当上述应用或进程在服务器上运行时，它们就会接受与所分配端口号相匹配的数据。当 UDP 收到用于某个端口的数据报时，它就会按照应用的端口号将数据发送到相应的应用。</p><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h2 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h2><p><strong>应用层</strong></p><p>如您所知，传输层实际上是数据从一个主机移动到另一个主机的地方。但在此之前，必须确定很多细节，以便正确地进行数据传输。这就是为什么在OSI 和 TCP/IP 模型中都有一个应用层。</p><p>在OSI和TCP/IP 模型中的应用层最接近最终用户。<strong>该层为用于通信的应用程序和用于消息传输的底层网络提供接口。应用层协议用于在源主机和目的主机上运行的程序之间进行数据交换。</strong></p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210820214053169.png" alt="image-20210820214053169" style="zoom:50%;" /><p>目前已有很多种应用层协议，而且人们还在不断开发新的协议。某些最广为人知的应用层协议包括超文本传输协议(HTTP)、文件传输协议 (FTP)，简单文件传输协议 (TFTP)，互联网邮件访问协议 (IMAP) 和域名系统 (DNS) 协议。</p><p><strong>会话层</strong></p><p>表示层具有三个主要功能：</p><ul><li>将来自源设备的数据格式化或表示成<strong>兼容</strong>形式，以便目的设备接收。</li><li>采用可被目的设备解压缩的方式对数据进行<strong>压缩</strong>。</li><li><strong>加密</strong>要传输的数据并在收到数据时解密数据。</li></ul><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210820214317110.png" alt="image-20210820214317110" style="zoom:67%;" /><p><strong>会话层</strong></p><p>顾名思义，会话层的功能就是创建并维护源应用程序和目的应用程序之间的对话。会话层用于处理信息交换，发起对话并使其处于活动状态，并在对话中断或长时间处于空闲状态时重启会话。</p><p>TCP/IP 应用层协议指定了许多常见互联网通信功能必需的格式和控制信息。在通信会话过程中，源设备和目的设备均使用应用层协议。为确保通信畅通，<strong>源主机和目的主机上所实现的应用层协议必须一致。</strong></p><h2 id="对等"><a href="#对等" class="headerlink" title="对等"></a>对等</h2><p>在客户端-服务器模型中，请求信息的设备称为客户端，而响应请求的设备称为服务器。 客户端是一个硬件/软件的组合，人们使用它来直接访问存储在服务器上的资源。</p><p>客户端进程和服务器进程都处于应用层。客户端首先向服务器发送数据请求，服务器通过发送一个或多个数据流来响应客户端。应用层协议规定了客户端和服务器之间请求和响应的格式。除了实际数据传输外，数据交换过程还要求用户身份验证以及要传输的数据文件的标识。</p><p><strong>对等网络</strong></p><p>在对等 (P2P（Peer-to-Peer）) 网络模式中，可以从对等设备访问数据，而无需使用专用服务器。</p><p>P2P 网络模型包含两个部分：P2P 网络和 P2P 应用程序。这两个部分具有相似的特征，但实际工作过程却大不相同。</p><p>在 P2P 网络中，两台或多台计算机通过网络互连，它们共享资源(如打印机和文件)时可以不借助专用服务器。每台接入的终端设备（称为“对等体”）<strong>既可以作为服务器，也可以作为客户端</strong>。在某项事务中，作为服务器的计算机也可以同时成为其他服务器的客户端。于是，计算机的角色根据请求的不同在客户端和服务器之间切换。</p><p>除共享文件外，这样一个网络还允许用户启用网络游戏，或者共享互联网连接。</p><p>在对等交换中，两台设备在通信过程中处于平等地位。对等体1拥有与对等体2共享的文件，甚至可以访问直接连接到对等体2的共享打印机来打印文件。</p><p>某些 P2P 应用程序中采用混合系统，即共享的资源是分散的，但<strong>指向资源位置的索引存储在集中目录</strong>中。在混合系统中，每台对等设备通过访问索引服务器获取存储在另一台对等设备中的资源位置。</p><p><strong>注意:</strong> 用户间可以分享任何类型的文件。这些文件中的许多是有版权的，这意味着只有创建者有使用和分发它们的权利。未得到版权持有者许可下载或分发有版权的文件是违法的。侵害版权会导致刑事起诉或民事诉讼。</p><h2 id="具体协议"><a href="#具体协议" class="headerlink" title="具体协议"></a>具体协议</h2><p><strong>DNS - 域名系统（或服务）</strong></p><ul><li>TCP,UDP客户端 53</li><li>将域名（例如 cisco.com）转换为 IP 地址。</li></ul><p><strong>DHCP-动态主机配置协议</strong></p><ul><li>UDP 客户端 68，服务器 67</li><li>动态分配IP地址可以重复使用不再需要的地址</li></ul><p><strong>SMTP - 简单邮件传输协议</strong></p><ul><li>TCP 25</li><li>允许客户端向邮件服务器发送电子邮件</li><li>允许服务器向其他服务器发送电子邮件</li></ul><p><strong>POP3 - 邮局协议</strong></p><ul><li>TCP 110</li><li>允许客户端从邮件服务器检索电子邮件 将电子邮件* 下载到客户端的本地邮件应用程序</li></ul><p><strong>IMAP - 互联网消息访问协议</strong></p><ul><li>TCP 143</li><li>允许客户端访问存储在邮件服务器中的电子邮件</li><li>在服务器上维护电子邮件</li></ul><p><strong>FTP - 文件传输协议</strong></p><ul><li>TCP 20至21</li><li>设置规则，使得一台主机上的用户能够通过网络访问另一台主机或向其传输文件</li><li>FTP是一种可靠、面向连接且进行确认的文件传输协议。</li></ul><p><strong>TFTP - 简单文件传输协议</strong></p><ul><li>UDP 客户端 69</li><li>一个简单的，无连接的文件传输协议，使用尽最大努力、不被答复的文件交付</li><li>它使用的开销比FTP少</li></ul><p><strong>HTTP-超文本传输协议</strong></p><ul><li>TCP 80,8080</li><li>有关在万维网上交换文本、图形图像、音频、视频以及其他多媒体文件的一组规则集</li></ul><p><strong>HTTPS - 安全 HTTP</strong></p><ul><li>TCP，UDP 443</li><li>浏览器使用加密技术保护 HTTP 通信</li><li>验证您的浏览器连接的网站</li></ul><h3 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h3><p>电子邮件托管是 ISP 提供的主要服务之一。如果要在计算机或其他终端设备上运行电子邮件，仍然需要多种应用程序和服务，如图所示。邮件是通过网络发送、存储和检索电子消息的存储转发方法。邮件消息存储在邮件服务器的数据库中。</p><p>邮件客户端通过与邮件服务器通信来收发邮件。邮件服务器之间也会互相通信，以便将邮件从一个域发到另一个域中。也就是说，发送邮件时，邮件客户端并不会直接与另外一个邮件客户端通信。而是双方客户端均依靠邮件服务器来传输邮件。</p><p><strong>SMTP</strong></p><p>SMTP 邮件格式要求邮件具有报头和正文。虽然邮件正文没有长度限制，但邮件报头必须具有格式正确的收件人邮件地址和发件人地址。</p><p>当客户端发送邮件时，客户端 SMTP 进程会连接公认端口 25 上的服务器 SMTP 进程。连接建立后，客户端将尝试通过此连接发送邮件到服务器。服务器收到邮件后，<strong>如果收件人在本地</strong>，它会将邮件保存在本地账户中，或者将邮件转发给另一台邮件服务器以便传输。</p><p>发出邮件时，目的邮件服务器可能并不在线，或者正忙。因此，SMTP 将邮件转到后台处理，稍后再发送。服务器会定期检查邮件队列，然后尝试再次发送。经过预定义的过期时间后，如果仍然无法发送邮件，则会将其作为无法投递的邮件退回给发件人。</p><p><strong>POP</strong></p><p>应用程序使用 POP 从邮件服务器中检索邮件。根据 POP 的规定，邮件将从服务器下载到客户端，然后从服务器上删除。这是 POP 的默认操作。</p><p>服务器通过在 TCP 端口 110 上被动侦听客户端连接请求来启动 POP 服务。当客户端要使用此服务时，它会发送一个请求来建立与服务器的 TCP 连接，如图所示。一旦建立连接，POP 服务器即会发送问候语。然后客户端和 POP 服务器会交换命令和响应，直到连接关闭或中止。</p><p>根据 POP，由于电子邮件会下载到客户端并从服务器删除，因此电子邮件不会集中保存在某一特定的位置。因为 POP 不存储邮件，因此不建议用于需要集中备份解决方案的小型企业。</p><p>POP3 是最常用的版本。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210820225748133.png" alt="image-20210820225748133" style="zoom:67%;" /><p><strong>IMAP</strong></p><p>IMAP 是另外一种用于检索电子邮件消息的协议。与 POP 不同的是，当用户连接使用 IMAP 的服务器时，邮件的副本会下载到客户端应用程序，如图所示。同时原始邮件会一直保留在服务器上，直到用户将它们手动删除。用户在自己的邮件客户端软件中查看邮件副本。</p><h3 id="IP编制服务"><a href="#IP编制服务" class="headerlink" title="IP编制服务"></a>IP编制服务</h3><p>本主题将详细介绍 IP 编址服务、DNS 和 DHCP。</p><p>DNS 协议定义了一套自动化服务，该服务将资源名称与所需的数字网络地址匹配。协议涵盖了查询格式、响应格式及数据格式。DNS 协议通信采用单一格式，即消息格式。该格式用于所有类型的客户端查询和服务器响应、报错消息、以及服务器间的资源记录信息的传输。</p><p>在使用域名时请求首先发到DNS服务器，服务器将请求与IP地址匹配后返回IP，客户端再使用IP请求服务器</p><p>DNS 服务器中<strong>存储不同类型的资源记录，用来解析域名</strong>。这些记录中包含域名、地址以及记录的类型。这些记录有以下类型：</p><ul><li><strong>A</strong> - 终端设备 IPv4 地址</li><li><strong>NS</strong> - 授权域名服务器</li><li><strong>AAAA</strong> - 终端设备 IPv6 地址（读作“四 A”）</li><li><strong>MX</strong> - 邮件交换记录</li></ul><p>在客户端进行查询时，服务器 DNS 进程首先会查看自己的记录以解析名称。如果服务器不能通过自身存储的记录解析域名，<strong>它将联系其他服务器对该域名进行解析</strong>。在检索到匹配信息并将其返回到原始请求服务器后，服务器临时存储数字地址，以供再次请求同一域名时使用。</p><table><thead><tr><th align="left"><strong>DNS 消息部分</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">问题</td><td align="left">向域名服务器提出的问题</td></tr><tr><td align="left">回答</td><td align="left">回答该问题的资源记录</td></tr><tr><td align="left">权限 (Authority)</td><td align="left">指向权限的资源记录</td></tr><tr><td align="left">更多</td><td align="left">包含其他信息的资源记录</td></tr></tbody></table><p><strong>层级</strong></p><p>DNS 协议采用分层系统创建数据库以提供名称解析</p><p>域名结构被划分为多个更小的受管域。每台 DNS 服务器维护着特定的数据库文件，而且只负责管理 DNS 结构中那一小部分的“域名-IP”映射。</p><p>当 DNS 服务器收到的域名转换请求不属于其所负责的 DNS 区域时，该 DNS 服务器可将请求转发到与该请求对应的区域中的 DNS 服务器进行转换。</p><p>DNS 具有可扩展性，这是因为主机名解析分散于多台服务器上完成。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210821120533246.png" alt="image-20210821120533246" style="zoom:67%;" /><p>ISP往往会为 DNS 服务器提供地址。</p><p>用户还可以使用操作系统中名为 Nslookup 的实用程序手动查询域名服务器，来解析给定的主机名。</p><p>该实用程序也可以用于检修域名解析故障，以及验证域名服务器的当前状态。</p><p><strong>动态主机配置协议</strong></p><p>IPv4 服务的动态主机配置协议 (DHCP) 会自动分配 IPv4 地址、子网掩码、网关以及其他 IPv4 网络参数。这称为动态编址。动态编址的替代选项是静态编址。在使用静态编址时，网络管理员在主机上手动输入 IP 地址信息。</p><p>主机连入网络时，将联系 DHCP 服务器并请求地址。DHCP 服务器从已配置地址范围（也称为“地址池”）中选择一条地址，并将其分配（租赁）给主机。</p><p>在较大型的网络中，或者用户经常变更的网络中，地址分配优先选用 DHCP。新用户可能在到达时需要连接；其他用户可能有新计算机必须要连接。<strong>与为每个连接使用静态编址的做法相比，采用 DHCP 自动分配 IPv4 地址的方法更有效。</strong></p><p>DHCP可以在一段可配置的时间内分配IP地址，这段时间称为<strong>租期</strong>，当租期过期或 DHCP 服务器收到 DHCPRELLAME 消息时，地址将返回到 DHCP 池以便重复使用。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210821121252200.png" alt="image-20210821121252200" style="zoom:67%;" /><p>很多网络都同时采用 DHCP 和静态编址。DHCP 用于一般用途主机，例如用户终端设备。静态编址用于网络设备，例如网关路由器、交换机、服务器和打印机。</p><p>IPv6 的 DHCP（DHCPv6）为 IPv6 客户端提供类似服务。一个重要的不同是，DHCPv6 不会提供默认网关地址。这只能从路由器的 Router Advertisement（路由器通告）消息中动态获得。</p><p><strong>工作原理</strong></p><p>配置了 DHCP 的 IPv4 设备在启动或连接到网络时，客户端将广播一条 DHCP 发现 (DHCPDISCOVER) 消息以确定网络上是否有可用 DHCP 服务器。DHCP 服务器回复 DHCP 服务 (DHCPOFFER) 消息，为客户端提供租赁服务。该服务消息包含为其分配的 IPv4 地址和子网掩码、DNS 服务器的 IPv4 地址和默认网关的 IPv4 地址。租赁服务还包括租用期限。</p><p>如果本地网络中有超过一台 DHCP 服务器，客户端可能会收到多条 DHCPOFFER 消息。此时，客户端必须在这些服务器中进行选择，并且将包含服务器标识信息及客户端所接受的租赁服务的 DHCP 请求 (DHCPREQUEST) 消息发送出去。<strong>客户端还可选择向服务器请求分配以前分配过的地址。</strong></p><p>如果客户端请求的 IPv4 地址（或者服务器提供的 IPv4 地址）仍然可用，服务器将返回 DHCP 确认 (DHCPACK) 消息，向客户端确认地址租赁。如果请求的地址不再有效，则所选服务器将回复一条 DHCP 否定确认 (DHCPNAK) 消息。一旦返回 DHCP NAK 消息，应<strong>重新启动选择进程</strong>，并重新发送新的 DHCP 发现消息。客户端租赁到地址后，应在租期结束前发送 DHCPREQUEST 消息进行<strong>续期</strong>。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210821121446056.png" alt="image-20210821121446056" style="zoom:50%;" /><h3 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h3><p>FTP 用于客户端和服务器之间的数据传输。FTP 客户端是一种在计算机上运行的应用，用于从 FTP 服务器中收发数据。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210821123329521.png" alt="image-20210821123329521" style="zoom:50%;" /><p>客户端使用 TCP 端口 21 与服务器建立第一个连接用于控制流量。流量由客户端命令和服务器应答组成。</p><p>客户端使用 TCP 端口 20 与服务器建立第二个连接用于实际数据传输。每当有数据需要传输时都会建立此连接。</p><p><strong>数据传输可以在任何一个方向进行</strong>。客户端可以从服务器下载（取）数据，也可以向服务器上传（放）数据。</p><p>服务器消息块 (SMB) 是一种客户端/服务器文件<strong>共享协议</strong>，用于规范共享网络资源（如目录、文件、打印机以及串行端口）结构。</p><p>以下是 SMB 消息的三个功能：</p><ul><li>启动、身份验证以及终止会话</li><li>控制文件和打印机的访问</li><li>允许应用程序向任何设备收发消息</li></ul><p>Microsoft 网络配置中主要采用 SMB 形式实现文件共享和打印服务。</p><p>从 Windows 2000 开始，之后的所有 Microsoft 产品都使用 DNS 命名，使 TCP/IP 协议能够直接支持 SMB 资源共享，如图所示。</p><p>与 FTP 协议支持的文件共享不同，SMB 协议中的客户端要与服务器建立长期连接。一旦建立连接，客户端用户就可以访问服务器上的资源，就如同资源位于客户端主机上一样。</p><h1 id="网络安全知识"><a href="#网络安全知识" class="headerlink" title="网络安全知识"></a>网络安全知识</h1><p>本模块将概述网络攻击的类型，以及如何减少威胁发起者成功的机会。</p><h2 id="威胁和漏洞"><a href="#威胁和漏洞" class="headerlink" title="威胁和漏洞"></a>威胁和漏洞</h2><h3 id="威胁类型"><a href="#威胁类型" class="headerlink" title="威胁类型"></a><strong>威胁类型</strong></h3><p><strong>信息盗窃</strong> 指侵入计算机以获取机密信息。信息可以用于各种目的或出售。例子: 盗窃组织的专有信息，例如研究和开发数据。</p><p><strong>数据丢失和操纵</strong> 是指闯入计算机破坏或更改数据记录。数据丢失的示例是：一个威胁发起者发送可重新格式化计算机硬盘的病毒。数据操纵示例是：闯入记录系统来更改信息（例如物品价格）。</p><p><strong>身份盗窃</strong> 是一种信息盗窃形式，以冒用他人的身份为目的窃取个人信息。利用此类信息，威胁发起者便可以非法获取文件、申请信用贷款或者进行未经授权的在线购物。身份盗窃案件日渐增多，每年造成的损失达数十亿之多。</p><p><strong>服务中断</strong> 阻止合法用户访问他们有权访问的服务。例如: 对服务器、网络设备或网络通信链路发起的拒绝服务 (DoS) 攻击。</p><h3 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a><strong>漏洞类型</strong></h3><p>漏洞是指网络或设备的薄弱程度。路由器、交换机、桌面、服务器、甚至安全设备都存在一定程度的漏洞。一般而言，受到攻击的网络设备都是端点设备，例如服务器和台式计算机。</p><p>有三种主要的漏洞或弱点：技术、配置和安全策略。所有这三种漏洞源都会让网络或设备<strong>对各种攻击保持开放状态</strong>，包括恶意代码攻击和网络攻击。</p><p><strong>技术漏洞</strong></p><table><thead><tr><th align="left">漏洞</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">TCP/IP 协议缺陷</td><td align="left">超文本传输协议 (HTTP)，文件传输协议(FTP)， 和互联网控制消息协议 (ICMP)本质上是 不安全的。简单网络管理协议 (SNMP)和简单邮件传输 协议 (SMTP) 与TCP设计时所基于的固有的 不安全结构有关。</td></tr><tr><td align="left">操作系统缺陷</td><td align="left">每个操作系统都有必须解决的安全问题。UNIX、Linux、Mac OS、Mac OS X、Windows Server 2012、Windows 7、 Windows 8它们记录在计算机应急响应小组 (CERT) 档案中， 网址为 <a href="http://www.cert.org./">http://www.cert.org。</a></td></tr><tr><td align="left">网络设备缺陷</td><td align="left">各种类型的网络设备，例如路由器，防火墙和 交换机都具有安全弱点，必须识别并加以 保护。他们的弱点包括密码保护，缺乏 身份验证、路由协议和防火墙漏洞。</td></tr></tbody></table><p><strong>配置漏洞</strong></p><table><thead><tr><th align="left">漏洞</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">不安全的用户帐户</td><td align="left">用户帐户信息可能不安全地通过网络传输， 将用户名和密码暴露给威胁发起者。</td></tr><tr><td align="left">系统帐户的密码容易被猜到</td><td align="left">用户密码创建不当造成了这种常见问题。</td></tr><tr><td align="left">互联网服务配置错误</td><td align="left">在Web浏览器中打开JavaScript可以在访问不受信任的站点时 通过由威胁发起者控制的JavaScript进行攻击。 其他潜在的弱点来源包括配置错误的终端 服务、FTP 或 Web 服务器（例如微软互联网信息 服务 IIS) 和 Apache HTTP 服务器。</td></tr><tr><td align="left">产品的默认设置不安全</td><td align="left">许多产品的默认设置容易带来 安全漏洞。</td></tr><tr><td align="left">网络设备配置错误</td><td align="left">设备本身配置错误会带来严重的安全 问题。例如，错误配置的访问列表、路由协议或 SNMP 社区字符串可以造成或开启安全漏洞。</td></tr></tbody></table><p><strong>策略漏洞</strong></p><table><thead><tr><th align="left">漏洞</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">缺乏书面的安全策略</td><td align="left">未以书面形式记录的安全策略无法得到长久有效的 应用和执行。</td></tr><tr><td align="left">政治</td><td align="left">政治斗争和争权夺利可能导致难以长期执行 相同的安全策略。</td></tr><tr><td align="left">缺乏身份验证持续性</td><td align="left">如果密码选择不当、易于破解或甚至是默认密码，会导致 对网络的未经授权的访问。</td></tr><tr><td align="left">没有实行逻辑访问控制</td><td align="left">监控和审计力度不够，导致攻击和未授权使用不断发生， 浪费公司资源。这可能会导致法律诉讼 或针对IT技术人员、IT管理人员、 甚至允许这些不安全条件持续存在的公司领导层的解雇。</td></tr><tr><td align="left">软件和硬件的安装与更改没有遵循策略执行</td><td align="left">未经授权更改网络拓扑或安装 未经批准的应用程序会造成或开启安全漏洞。</td></tr><tr><td align="left">没有设计灾难恢复计划</td><td align="left">缺乏灾难恢复计划可能在发生自然灾害或 企业在遭到威胁发起者攻击时造成恐慌和 混乱。</td></tr></tbody></table><h3 id="物理安全"><a href="#物理安全" class="headerlink" title="物理安全"></a>物理安全</h3><p>如果网络资源可以被物理性破坏，攻击发起者便可借此拒绝对网络资源的使用。</p><p>物理威胁分为四类：</p><p>硬件威胁 － 这包括对服务器、路由器、交换机、布线间和工作站的物理破坏<br>环境威胁 －这包括极端温度（过热或过冷）或极端湿度（过湿或过干）<br>电气威胁 － 这包括电压过高、电源电压不足（电气管制）、不合格电源（噪音），以及断电<br>维护威胁 － 这包括关键电气组件处理不佳（静电放电），缺少关键备用组件、布线混乱和标识不明</p><h2 id="网络攻击"><a href="#网络攻击" class="headerlink" title="网络攻击"></a>网络攻击</h2><h3 id="恶意代码"><a href="#恶意代码" class="headerlink" title="恶意代码"></a>恶意代码</h3><p>恶意软件是“有恶意的软件”的简称。是专门用来损坏、破坏、窃取数据、主机或网络或对数据、主机或网络进行“坏的”或者非法操作的代码或软件。恶意软件的类型包括病毒、蠕虫和特洛伊木马</p><p><strong>病毒</strong></p><p>计算机病毒是一种通过将自身副本插入另一个程序并成为其一部分来传播的恶意软件类型。</p><p>几乎所有的病毒都是附加到一个可执行文件中，这意味着病毒可能在系统上存在，但在用户运行或打开恶意主机文件或程序前不会处于活跃状态也不会传播。执行主机代码后，也就执行了病毒代码。</p><p>当病毒附加的软件或文档通过网络、磁盘、文件共享或被感染的电子邮件附件从一台计算机传输到另一台计算机时，也传播了病毒。</p><p><strong>蠕虫</strong></p><p>计算机蠕虫与病毒相似，它们均可复制自身的功能副本，并造成相同类型的损坏。与病毒相比，病毒需要通过感染的主机文件来传播，而蠕虫属于独立软件，无需借助主机程序或人工帮助便可利用系统功能在网络中传输。</p><p><strong>特洛伊木马</strong></p><p>它是看起来合法的有害软件。用户通常是被骗加载特洛伊木马并在他们的系统上执行。特洛伊木马激活后，可以在主机上进行任意数量的攻击，从激怒用户（过多的弹窗或改变桌面）到破坏主机（删除文件、窃取数据或激活和传播病毒等其他恶意软件）。众所周知，<u>特洛伊木马为恶意用户访问系统创建后门</u>。</p><p>特洛伊木马必须通过用户交互传播，如打开电子邮件附件或从互联网下载并运行文件。</p><h3 id="网络攻击-1"><a href="#网络攻击-1" class="headerlink" title="网络攻击"></a>网络攻击</h3><ul><li><strong>侦察攻击</strong> – 搜索和映射系统、服务或漏洞</li><li><strong>访问攻击</strong> – 数据、系统或用户访问权限的未授权控制</li><li><strong>拒绝服务</strong> – 网络、系统或服务的禁用或损坏</li></ul><p>对于侦察攻击，外部威胁发起者可以使用互联网工具（如 nslookup 和 whois 实用程序）轻松地确定分配给公司或实体的 IP 地址空间。确定 IP 地址空间后，威胁发起者可以 ping 这些公有 IP 地址以确定哪些地址正在使用。为帮助自动执行此步骤，威胁发起者可能会使用 ping 扫描工具，例如 fping 或 gping。它系统地向给定范围或子网中的所有网络地址执行 ping 操作。</p><p><strong>侦察攻击</strong></p><p>互联网查询：查找与目标相关的初始信息，可以使用多种工具，包括Google搜索、组织机构网站、whois等。</p><p>ping扫描：发起 ping 扫描，以确定哪些 IP 地址处于活动状态。</p><p>端口扫描：威胁发起者对发现的活动 IP 地址执行端口扫描。</p><p><strong>访问攻击</strong></p><p>访问攻击利用身份验证服务、FTP 服务和 Web 服务的已知漏洞，获取对 Web 帐户、机密数据库和其他敏感信息的访问。访问攻击使个人能够对他们无权查阅的信息进行未经授权访问。</p><p>密码攻击：暴力攻击、特洛伊木马、数据包嗅探</p><p>信任利用：威胁发起者会使用未经授权的特权来访问系统，可能还会进一步攻陷目标。</p><p>端口重定向：威胁发起者会把攻陷的系统作为攻击其他目标的大本营。</p><p>中间人：威胁发起者会置身于两个合法实体之间，以便读取或修改双方之间传输的数据。</p><p><strong>拒绝服务攻击</strong></p><p>拒绝服务 (DoS) 攻击是知名度最高的攻击，并且是最难防范的攻击。然而，由于其实施简单、破坏力强大，安全管理员需要特别关注 DoS 攻击。</p><p>DoS 攻击的方式多种多样。不过其目的都是通过<strong>消耗系统资源使授权用户无法正常使用服务</strong>。为了帮助防止 DoS 攻击，必须使操作系统和应用程序与最新的安全更新保持同步。</p><p>DoS 攻击属于重大风险，因为它们可以中断通信，并在时间和财务上造成大量损失。这些攻击执行起来相对简单，即使是缺乏技能的威胁发起者也可以执行。</p><p>分布式 DoS 攻击 (DDoS) 与 DoS 攻击类似，但是它从多个协同攻击源发起攻击。举例来说，威胁发起者建立了一个受感染主机的网络，受感染的主机称为僵尸主机。受感染主机（僵尸）的网络称为僵尸网络。威胁发起者使用命令和控制(CnC)程序来指示僵尸网络进行DDoS攻击。</p><h2 id="网络攻击缓解"><a href="#网络攻击缓解" class="headerlink" title="网络攻击缓解"></a>网络攻击缓解</h2><p>要缓解网络攻击，必须首先保护设备，包括路由器、交换机、服务器和主机。大多数组织机构使用纵深防御法（也称为分层方法）来确保安全性。这需要网络设备和服务相互配套以协同工作。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210821151358183.png" alt="image-20210821151358183" style="zoom: 67%;" /><p><strong>保留备份</strong></p><p>备份设备配置和数据是防止数据丢失的最有效方式之一。</p><p>应根据安全策略中的规定定期执行备份。数据备份通常存储在非现场位置，在主要设施发生任何问题时能保护备份介质。Windows 主机提供了备份和还原实用程序。对用户来说，将数据备份到其他驱动器或基于<strong>云</strong>的存储提供商非常重要。</p><table><thead><tr><th align="left"><strong>考虑事项</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">频率</td><td align="left">根据安全策略中的标识定期执行 备份。完全备份可能非常耗时，因此需要每月或 或每周执行一次备份，并经常对更改的文件进行部分备份。</td></tr><tr><td align="left">存储容量</td><td align="left">务必对备份进行验证，以确保数据的完整性并验证文件恢复程序。 验证文件恢复程序。</td></tr><tr><td align="left">安全</td><td align="left">应按照安全策略的要求，每天， 每周或每月轮流将备份转移到批准的异地 存储位置。</td></tr><tr><td align="left">验证</td><td align="left">应使用强密码保护备份。恢复数据 需要提供密码。</td></tr></tbody></table><p>保持与最新进展同步会使对网络攻击的防御更加有效。随着新的恶意软件不断涌现，企业必须保持当前的防病毒软件为最新版本。</p><p><strong>认证、授权和记账</strong></p><p>所有网络设备都应该进行安全配置，只允许经过授权的个人访问。认证、授权和记账（AAA 或“三 A”）网络安全服务提供了设置网络设备访问控制的主要框架。</p><p>AAA 方法用于控制可以访问网络的用户（认证）、用户访问网络时可以执行的操作（授权），以及把他们在那里时所做的事记录下来（记账）。</p><p><strong>防火墙</strong></p><p>防火墙是保护用户远离外部威胁的最为有效的安全工具之一。防火墙可通过防止不必要的流量进入内部网络来保护计算机和网络。防火墙驻留在两个或多个网络之间，控制其间的流量并帮助阻止未授权的访问。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210821152853399.png" alt="image-20210821152853399" style="zoom:50%;" /><p>防火墙可以允许外部用户控制对特定服务的访问。例如，外部用户可访问的服务器通常位于称为隔离区 (DMZ) 的特殊网络中，如图所示。DMZ 使网络管理员能够为连接到该网络的主机应用特定策略。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210821152909802.png" alt="image-20210821152909802" style="zoom:50%;" /><p><strong>防火墙类型</strong></p><p>防火墙产品可以打包成各种形式。这些产品使用不同技术来区分应禁止和应允许的网络访问。其包括以下内容：</p><p>数据包过滤 - 根据 IP 或 MAC 地址阻止或允许访问<br>应用程序过滤 - 根据端口号阻止或允许访问特定类型的应用程序<br>URL 过滤 - 根据特定的 URL 或关键字阻止或允许访问网站<br>状态包侦测 (SPI) - 传入数据包必须是对内部主机所发出请求的合法响应。除非得到特别允许，否则未经请求的数据包会被拦截。状态包侦测还可具有识别和过滤特定类型攻击，例如拒绝服务 (DoS) 的能力。</p><h2 id="设备安全"><a href="#设备安全" class="headerlink" title="设备安全"></a>设备安全</h2><p>在网路中有很多区域需要格外提供安全防护，设备本身就是其中之一。</p><p>当在设备上安装新的操作系统时，安全设置保留为默认值。在大多数情况下，这种安全级别并不够。对于思科路由器，思科AutoSecure 功能可用于协助保护系统，如示例所示。</p><p>通常，制造商提供的设备已经在仓库中存放了一段时间，并没有安装最新补丁。必须在投入使用之前更新所有软件并安装所有安全补丁。</p><p>为了保护网络设备，使用强密码非常重要。以下是需要遵循的标准原则：</p><ul><li>使用的密码长度至少为 8 个字符，最好是 10 个或更多字符。密码越长越安全。</li><li>使用复杂密码。如果条件允许，密码中混合使用大写和小写字母、数字、符号和空格。</li><li>密码中避免使用重复的常用字词、字母或数字顺序、用户名、亲属或宠物的名字、个人传记信息（例如出生期、身份证号码、祖先的名字）或其他易于识别的信息。</li><li>故意将口令中的词拼错。例如，Smith = Smyth = 5mYth 或 Security = 5ecur1ty。</li><li>定期更改密码。如果密码不知不觉地遭到破坏，那么威胁发起者使用该密码的机会就会受到限制。</li><li>请勿将密码写出来并放在显眼位置上，比如桌面上或显示屏上。</li></ul><p>思科路由器会忽略密码中的前置空格，但第一个字符之后的空格不会忽略。因此，创建强密码的一种方法就是使用空格键和创建一个由多个词组成的短语。这就是所谓的<strong>密码短语</strong>。密码短语通常比简单密码更易记忆。而且猜到它所用时间更长，也更难猜到。</p><p>强密码只有在保持其机密性才是有用的。在思科路由器和交换机上可以采取以下几个步骤来确保密码的机密性：</p><ul><li>加密所有的明文密码</li><li>设置可接受的最小密码长度</li><li>阻止暴力密码猜测攻击</li><li>在指定时间后 禁用非活动的特权 EXEC 模式访问。</li></ul><p>启用<strong>SSH</strong></p><p>Telnet简化了远程设备访问，但并不安全。Telnet 数据包中包含的数据以未加密形式传输。因此，强烈建议在设备上启用安全外壳 (SSH) 以进行安全远程访问。</p><p>可以通过下列六个步骤来配置思科设备以支持 SSH。</p><p>步骤 1. 配置唯一的主机名。设备必须有一个唯一的主机名，而不是默认主机名。</p><p>步骤 2. 配置 IP 域名. 使用全局配置命令 ip-domain name 配置网络的 IP 域名。</p><p>步骤 3. 生成密钥来加密 SSH 流量. SSH 加密源和目的地之间的流量。但是，要这样做，必须使用全局配置命令 crypto key generate rsa general-keys modulus 位数 生成唯一的身份验证密钥。该模数位数确定密钥大小并且可配置为 360 位至 2048 位。位值越大，密钥越安全。然而，较大的位值也需要较长的时间来加密和解密信息。最小建议系数长度为 1024 位。</p><p>步骤 4. 验证或创建一个本地数据库条目。使用 username 全局配置命令来创建本地数据库用户名条目。在示例中，使用了参数 secret，因此密码将使用MD5加密。</p><p>步骤 5. 向本地数据库认证身份。使用 login local 线路配置命令对本地数据库的vty线路进行身份验证。</p><p>步骤 6. 启用 vty inbound SSH 会话. 默认情况下，在vty线路上不允许输入会话。您可以使用 transport input [ssh | telnet] 命令指定多个输入协议，包括 Telnet 和 SSH。</p><p>如示例所示，路由器R1配置在span.com域中。此信息与 crypto key generate rsa general-keys modulus 命令中指定的位值一起使用，用于创建加密密钥。</p><p>接下来，为名为 Bob 的用户创建本地数据库条目。最后，将vty线路配置为根据本地数据库进行身份验证，并且只接受传入的SSH会话。</p><pre class="line-numbers language-none"><code class="language-none">Router# configure terminalRouter(config)# hostname R1R1(config)# ip domain name span.comR1(config)# crypto key generate rsa general-keys modulus 1024The name for the keys will be: Rl.span.com % The key modulus size is 1024 bits% Generating 1024 bit RSA keys, keys will be non-exportable...[OK]Dec 13 16:19:12.079: %SSH-5-ENABLED: SSH 1.99 has been enabledR1(config)#R1(config)# username Bob secret ciscoR1(config)# line vty 0 4R1(config-line)# login localR1(config-line)# transport input sshR1(config-line)# exitR1(config)#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我迷惑了。。</p><p>思科路由器和交换机启动时会有一列活动服务，这些活动在您的网络中可能需要或不需要。禁用任何未使用的服务以保留系统资源，如CPU周期和RAM，并防止威胁发起者利用这些服务。默认打开的服务类型将根据IOS版本而有所不同。例如，IOS-XE 通常只打开 HTTPS 和 DHCP 端口。您可以使用 show ip ports all 命令来验证这一点。</p><p>使用 no ip http server 全局配置命令禁用 HTTP。通过在行配置命令 transport input ssh 中指定仅 SSH 来禁用 Telnet 。</p><h1 id="构建小型网络"><a href="#构建小型网络" class="headerlink" title="构建小型网络"></a>构建小型网络</h1><p>欢迎来学习构建小型网络！</p><p>棒极了！您已经来到了网络简介 v7.0 课程的<strong>最后一个模块</strong>。您已经掌握了建立自己的网络所需的大部分基础知识。从现在开始怎么做？当然，你要构建一个网络。而且您不仅要构建它，还要验证它是否正常工作，甚至还要解决一些常见的网络问题。</p><h2 id="小型网络"><a href="#小型网络" class="headerlink" title="小型网络"></a>小型网络</h2><h3 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h3><p>小型网络的设计通常很简单。与较大型网络相比，小型网络中设备的数量和类型都显著减少了。</p><p>在实施网络时，创建一个 IP编址方案并使用它。互联网络中的所有主机和设备都必须有一个唯一地址。</p><p>将纳入IP编址方案的设备包括以下内容：</p><p>终端用户设备-连接的数量和类型（即有线、无线、远程访问）<br>服务器和外部设备（如打印机和安全摄像头）<br>路由器、交换机和接入点都属于中间设备。<br>建议您根据设备类型规划、记录和维护 IP编址方案。使用计划好的IP编址方案可以更容易地识别设备类型并对排除故障，例如，在使用协议分析器排除网络流量问题时。</p><p>网络设计的另一个重要部分是可靠性。即使是小型企业，也常常非常依赖其网络以进行企业运营。网络故障的代价是非常大的。</p><p>为了保持高可靠度，网络设计中要求<strong>冗余</strong>。冗余有助于避免单点故障。</p><p>在网络中实现冗余有许多方法。可以通过安装重复设备实现冗余，但也可以通过为关键区域提供重复的网络链路来实现，如图所示。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210823164045084.png" alt="image-20210823164045084" style="zoom:67%;" /><p>小型网络通常通过一个或多个默认网关提供单个互联网出口点。如果路由器发生故障，则整个网络都会失去与互联网的连接。因此，建议小型企业通过另一个服务提供商购买备份产品。</p><p><strong>流量管理</strong></p><p>小型网络中良好网络设计的目标也是为了提高员工工作效率和最大限度地减少网络中断。网络管理员应当考虑网络设计中的各种流量类型及其处理。</p><p>应当对小型网络中的路由器和交换机进行配置，以相对于其他数据流量的适当方式支持实时流量，如语音和视频。事实上，一个好的网络设计将实现服务质量（QoS），根据优先级对流量进行仔细分类，如图所示。</p><img src="https://cdn.jsdelivr.net/gh/Darren-greenhand/Darren-greenhand-image//img/image-20210823164630041.png" alt="image-20210823164630041" style="zoom:67%;" /><h3 id="应用和协议"><a href="#应用和协议" class="headerlink" title="应用和协议"></a>应用和协议</h3><p>您的网络仍然需要某些类型的应用程序和协议才能工作。</p><p>网络只有在网络上存在应用程序时才有用。有两种形式的软件程序或进程可以提供网络访问：网络应用程序和应用层服务。</p><p><strong>网络应用程序</strong></p><p>应用程序是指用于网络通信的软件程序。有些终端用户应用程序是网络感知程序，即这些程序实现应用层协议，并<strong>可直接与协议栈的较低层通信</strong>。电子邮件客户端和 Web 浏览器就属于这种类型的应用程序。</p><p><strong>应用层服务</strong></p><p>其他程序可能需要通过应用层服务使用网络资源，例如文件传输或网络假脱机打印。虽然这些服务对员工而言是透明的，但它们正是负责与网络交互和准备传输数据的程序。无论数据类型是文本、图形还是视频，只要类型不同，就需要与之对应的不同的网络服务，从而确保 OSI 模型的下层能够正确处理数据。</p><p>每个应用程序或网络服务使用协议，定义要使用的标准和数据格式。如果没有协议，数据网络将不能使用通用的方式来格式化及引导数据。为了便于理解不同网络服务的功能，我们有必要先熟悉管理这些服务的底层协议。</p><p><strong>常见协议</strong></p><p>网络管理员通常需要访问网络设备和服务器。两种最常见的远程访问解决方案是 Telnet 和安全外壳 (SSH)。SSH 服务是 Telnet 的安全替代方案。连接后，管理员可以像在本地登录一样访问 SSH 服务器设备。</p><p>SSH 用于在 SSH 客户端和其他支持 SSH 的设备之间建立安全的远程访问连接：</p><ul><li><strong>网络设备</strong> - 网络设备（如路由器、交换机、接入点等）必须支持 SSH，才能为客户端提供远程访问 SSH 服务器的服务。</li><li><strong>服务器</strong> - 服务器（例如 Web 服务器、电子邮件服务器等）必须支持到客户端的远程访问 SSH 服务器的服务。</li></ul><p>网络管理员还必须支持公用网络服务器及其所需的相关网络协议：</p><p><strong>Web 服务器</strong></p><ul><li>Web 客户端和 Web 服务器使用超文本传输协议 (HTTP) 交换 Web 流量。</li><li>超文本传输协议安全 (HTTPS) 用于安全的 Web 通信。</li></ul><p><strong>邮件服务器</strong></p><ul><li>邮件服务器和客户端使用简单邮件传输协议 (SMTP)发送邮件。</li><li>邮件客户端使用邮局协议 (POP3) 和互联网消息访问协议 (IMAP)检索邮件。</li><li>使用 <a href="mailto:user@xyz.xxx">user@xyz.xxx</a> 格式指定收件人。</li></ul><p><strong>FTP 服务器</strong></p><p>文件传输协议 (FTP) 服务允许在客户端和 FTP 服务器之间下载和上传文件。<br>FTP 安全（FPS）和安全 FTP（SFTP）用于保护 FTP 文件交换。</p><p><strong>DHCP 服务器</strong></p><p>客户端使用动态主机配置协议 (DHCP) 从 DHCP 服务器获取 IP 配置（即 IP地址、子网掩码、默认网关等）。</p><p><strong>DNS 服务器</strong></p><p>域名服务（DNS）将域名解析为 IP 地址（例如，cisco.com = 72.163.4.185）<br>DNS 向请求主机提供网站的 IP 地址（即域名）。</p><p>这些网络协议将构成网络专家的基本工具集。每种网络协议都会定义：</p><ul><li>通信会话任意一端的流程</li><li>消息类型</li><li>消息语法</li><li>信息性字段的意义</li><li>消息发送方式和预期响应</li><li>与下一层的交互</li></ul><h3 id="增长"><a href="#增长" class="headerlink" title="增长"></a>增长</h3><p>不断扩展是许多小型企业必经的过程，而其网络也必须相应地扩展。理想情况是网络管理员有足够的时间根据公司发展做出关于网络发展的明智决策。</p><p>要扩展网络，要求有以下几个要素：</p><ul><li><strong>网络文档</strong> - 物理和逻辑拓扑</li><li><strong>设备清单</strong> – 使用或组成网络的设备列表</li><li><strong>预算</strong> – 逐项列出IT预算，包括财年设备采购预算</li><li><strong>流量分析</strong> - 应当记录协议、应用程序和服务以及它们各自的流量要求</li></ul><p>要确定流量模式，应做好以下几点：</p><p>通过捕获网络使用高峰期的流量准确了解各种不同的流量类型。<br>针对不同的网段和设备捕获流量，因为某些流量仅在特定的网段内传输。</p><p>协议分析器收集的信息根据流量的源和目标以及发送的流量类型进行分析。这种分析有助于决定提高流量管理效率的方法，例如减少不必要的流量，或通过移动某台服务器的逻辑位置来改变流量的总体模式。</p><p>除了要了解流量的变化趋势，网络管理员必须知道网络的使用是如何变化的。许多操作系统都提供内置工具来显示此类信息。Windows 主机提供任务管理器、事件查看器和数据使用情况工具等工具。</p><p>这些工具可用于捕获以下信息的 “快照”：</p><ul><li>操作系统和操作系统版本</li><li>CPU 使用率</li><li>内存利用率</li><li>驱动程序利用率</li><li>非网络应用程序</li><li>网络应用程序</li></ul><p>在一段时间内记录小型网络中的员工快照对于识别不断发展的协议需求和相关的流量流非常有用。这种资源利用率的转变就可能要求网络管理员相应地调整网络资源分配。</p><p>Windows 10 数据使用量工具对于确定哪些应用程序正在使用主机上的网络服务特别有用。数据使用量工具可以使用 <strong>Settings &gt; Network &amp; Internet &gt; Data usage &gt; network interface</strong> （从最近 30 天开始）访问。</p><h3 id="验证连接"><a href="#验证连接" class="headerlink" title="验证连接"></a>验证连接</h3><p>ping 命令是快速测试源和目的 IP 地址之间第 3 层连接的最有效方法。该命令还显示各种往返时间统计信息。</p><p>具体而言，该 ping 命令使用 Internet 控制消息协议 (ICMP) 来Echo请求（ICMP 类型 8）和Echo应答（ICMP 类型 0）消息。该 ping 命令可用于大多数操作系统，包括 Windows、Linux、macOS 和思科 IOS。</p><p>在 Windows 10 主机上，该 ping 命令发送四个连续的 ICMP Echo消息，并期望从目标收到四个连续的 ICMP Echo应答。</p><p>思科ios系统不同，它会发送5条信息，收到的指示符如下：</p><table><thead><tr><th align="left">元素</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><strong>!</strong></td><td align="left">感叹号表示成功收到Echo应答消息。它验证了源和目标之间的第 3 层连接。</td></tr><tr><td align="left"><strong>.</strong></td><td align="left">句点意味着等待Echo应答消息的时间已过期。这表示路径中某处可能存在连接问题。</td></tr><tr><td align="left"><strong>U</strong></td><td align="left">大写 <strong>U</strong> 表示沿路径的路由器 回应了 ICMP 类型 3 “目的地 不可达” 的错误消息。可能的原因包括路由器不知道目标网络的方向， 或者在目标网络上 找不到主机。</td></tr></tbody></table><p>其他可能的 ping 回复包括 Q、M、? 或 &amp;。但是，这些含义超出了本模块的范围。</p><p>不学啦！到这已经明白很多很多网络知识啦~~</p><p>剩下的就交给专业的网络工程师吧！！！</p><h1 id="日后补充"><a href="#日后补充" class="headerlink" title="日后补充"></a>日后补充</h1><p>2.1.5终端仿真程序</p><p>2.3.8用Tera Term连接控制台</p><p>2.5.4捕获配置到文本中</p><p>10.3.5排除默认网关故障</p><h1 id="真-命令集"><a href="#真-命令集" class="headerlink" title="真*命令集"></a>真*命令集</h1><p><strong>转载自：<a href="https://blog.csdn.net/qq_42833924/article/details/89790004">https://blog.csdn.net/qq_42833924/article/details/89790004</a><br>为自己学习方便故转载，如果大家觉得有帮助，请为原文点赞。</strong></p><p>1.基本配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token operator">></span> enable   从用户模式进入特权模式<span class="token class-name">R</span># disable  从特权模式退到用户模式<span class="token class-name">R</span># logout <span class="token punctuation">(</span>或exit<span class="token punctuation">)</span>   退出<span class="token class-name">Cisco</span>设备<span class="token class-name">R</span># show history 查看先前输入的命令（默认<span class="token number">10</span>个）<span class="token class-name">R</span># terminal history size #_of_commands  改变历史缓存的大小（最大<span class="token number">256</span>）<span class="token class-name">R</span># terminal no editing  禁用编辑特性（移去no参数为启用）<span class="token class-name">R</span># configure terminal   进入配置模式（退出为end或CTRL<span class="token operator">-</span><span class="token class-name">Z</span>）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># hostname name    改变路由器的名称<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># banner motd delimiting_character banner_character delimiting_character   设置登录横幅<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>line<span class="token punctuation">)</span># exec<span class="token operator">-</span>timeout minutes_# seconds_#    更改休止超时（默认<span class="token number">10</span>分钟）<span class="token class-name">R</span># show hosts   查看路由器解析表中的静态和动态DNS条目<span class="token class-name">R</span><span class="token operator">></span> show version 查看路由器综合信息<span class="token class-name">R</span># show line    验证线路的配置<span class="token class-name">R</span># show processes   查看设备的各个进程的CPU使用率<span class="token class-name">R</span># show users   查看登录到这台设备上的所有用户<span class="token class-name">R</span># show sessions    查看当前挂起的已经打开的telnet会话<span class="token class-name">R</span># term ip netmask<span class="token operator">-</span>format bit<span class="token operator">-</span>count<span class="token operator">|</span>decimal<span class="token operator">|</span>hexadecimal 改变子网掩码显示方式（在当前登录会话期间有效，在子线路模式下即可保存）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip host name_of_host <span class="token punctuation">[</span><span class="token class-name">TCP_port_</span>#<span class="token punctuation">]</span> <span class="token class-name">IP_address</span> <span class="token punctuation">[</span>…<span class="token punctuation">]</span> 创建主机静态解析表（可指定多达<span class="token number">8</span>个IP地址）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip name<span class="token operator">-</span>server <span class="token class-name">IP_address_of_DNS_server</span> <span class="token punctuation">[</span>…<span class="token punctuation">]</span>  配置通过访问DNS服务器动态解析主机（可指定多达<span class="token number">6</span>个DNS服务器）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># no ip domain<span class="token operator">-</span>lookup  禁用DNS查询<span class="token class-name">R</span><span class="token operator">></span> ping destination_IP_address_or_host_name 查看与目的主机的连通性<span class="token class-name">R</span><span class="token operator">></span> traceroute destination_IP_address_or_host_name   查看与目的主机间的路由器<span class="token class-name">R</span># <span class="token punctuation">[</span>telnet<span class="token operator">|</span>connect<span class="token punctuation">]</span> name_of_the_destination<span class="token operator">|</span>destination_IP_address  打开telnet会话<span class="token class-name">R</span># resume connection_#  恢复一个特定的会话<span class="token class-name">R</span># disconnect connection_#  结束一已挂起的telnet会话无须恢复它并随后从中退出<span class="token class-name">R</span># clear line line_#    结束某人的会话<span class="token class-name">R</span># no debug all <span class="token punctuation">(</span>或undebug all<span class="token punctuation">)</span>  禁用debug<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># service timestamps debug datetime msec   在debug输出中显示时间戳<span class="token class-name">R</span># terminal monitor 从VTY或辅助线路端口登录执行，路由器将在屏幕上显示报告消息<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>line<span class="token punctuation">)</span># logging synchronous在该线路上报告信息后路由器在新提示符后重新显示未打完的命令<span class="token number">123456789101112131415161718192021222324252627282930</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.文件操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span># show running<span class="token operator">-</span>config  查看正在运行（当前）的配置文件<span class="token class-name">R</span># show startup<span class="token operator">-</span>config  查看NVRAM中的配置文件<span class="token class-name">R</span># copy running<span class="token operator">-</span>config<span class="token operator">|</span>startup<span class="token operator">-</span>config tftp  将配置备份到TFTP服务器<span class="token class-name">R</span># copy tftp startup<span class="token operator">-</span>config<span class="token operator">|</span>running<span class="token operator">-</span>config  从TFTP服务器将配置恢复到路由器<span class="token class-name">R</span># copy startup<span class="token operator">-</span>config running<span class="token operator">-</span>config   从NVRAM中将配置恢复到RAM中<span class="token class-name">R</span># copy running<span class="token operator">-</span>config startup<span class="token operator">-</span>config   将RAM中的配置文件保存到NVRAM<span class="token class-name">R</span># erase startup<span class="token operator">-</span>config 删除NVRAM中的配置文件<span class="token class-name">R</span># copy flash tftp  备份IOS镜像到TFTP服务器<span class="token class-name">R</span># show flash   查看闪存中的文件<span class="token number">123456789</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.启动配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span># setup    运行系统配置会话<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># boot system flash name_of_IOS_file_in_flash  启动时加载闪存中的指定IOS文件<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># boot system tftp <span class="token class-name">IOS_image_name</span> <span class="token class-name">IP_address_of_server</span> 启动时加载TFTP服务器里的IOS文件<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># boot system rom  启动时加载ROM中的迷你IOS文件（启动与这三个命令的顺序有关）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># config<span class="token operator">-</span>register <span class="token number">0</span>x hexadecimal_value 改变寄存器的值rommon <span class="token number">5</span><span class="token operator">></span> confreg <span class="token number">0x2142</span>    <span class="token number">2600</span>、<span class="token number">3600</span>系列启动后按CTRL<span class="token operator">-</span>BREAK进入ROMMON模式，改变寄存器的值<span class="token class-name">R</span><span class="token operator">></span> o<span class="token operator">/</span>r <span class="token number">0x2142</span>   其他系列路由器改变寄存器的值的方法<span class="token number">1234567</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.密码设置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># line console <span class="token number">0</span>   进入控制台接口配置模式<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>line<span class="token punctuation">)</span># password console_password   配置控制台口令<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># line vty <span class="token number">0</span> <span class="token number">4</span> 进入虚拟终端线路配置模式（根据路由器及IOS最少<span class="token number">5</span>个直到很多）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>line<span class="token punctuation">)</span># login   接上条命令，允许进行<span class="token class-name">Telnet</span>访问<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>line<span class="token punctuation">)</span># password telnet_password    接上条命令，配置<span class="token class-name">Telnet</span>口令<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># line aux <span class="token number">0</span>   进入辅助端口配置模式<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>line<span class="token punctuation">)</span># password console_password   接上条命令，配置辅助端口口令<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># enable password privileged_password  配置特权EXEC口令（不加密）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># enable secret privileged_password    配置特权EXEC口令（加密）<span class="token number">123456789</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.接口配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># <span class="token keyword">interface</span> type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#  进入接口子配置模式<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># description interface_description 添加接口描述<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># no shutdown   启用该接口<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># <span class="token keyword">interface</span> loopback port_#    创建环回接口<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># media<span class="token operator">-</span>type aui<span class="token operator">|</span><span class="token number">10</span>baset<span class="token operator">|</span><span class="token number">100</span>baset<span class="token operator">|</span>mii   指定该接口连接的介质类型<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># speed <span class="token number">10</span><span class="token operator">|</span><span class="token number">100</span><span class="token operator">|</span>auto 指定该接口速率<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># <span class="token punctuation">[</span>no<span class="token punctuation">]</span> half<span class="token operator">-</span>duplex  指定该接口双工模式<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># clock rate rate_in_bits_per_second    指定该DCE串行接口速率<span class="token class-name">R</span><span class="token operator">></span> show controller serial <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#  验证该接口是DCE还是DTE，注意空格<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># bandwidth rate_in_Kbps    改变该接口的带宽值<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip address <span class="token class-name">IP_address</span> subnet_mask 配置该接口IP地址<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip subnet<span class="token operator">-</span>zero   IOS12<span class="token punctuation">.</span><span class="token number">0</span>前默认禁用<span class="token number">0</span>子网，此命令为启用<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip directed<span class="token operator">-</span>broadcast IOS12<span class="token punctuation">.</span><span class="token number">0</span>后默认禁用定向广播，此命令为启用<span class="token class-name">R</span># show interfaces <span class="token punctuation">[</span>type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#<span class="token punctuation">]</span>  验证接口配置<span class="token class-name">R</span># show ip interfaces <span class="token punctuation">[</span>type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#<span class="token punctuation">]</span> <span class="token punctuation">[</span>brief<span class="token punctuation">]</span>   验证接口IP配置<span class="token number">123456789101112131415</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.CDP</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># <span class="token punctuation">[</span>no<span class="token punctuation">]</span> cdp run 启用<span class="token operator">/</span>禁用CDP<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># <span class="token punctuation">[</span>no<span class="token punctuation">]</span> cdp enable   基于接口启用<span class="token operator">/</span>禁用CDP<span class="token class-name">R</span># show cdp 查看CDP状态<span class="token class-name">R</span># show cdp <span class="token keyword">interface</span>   查看基于接口的CDP配置<span class="token class-name">R</span># show cdp neighbors <span class="token punctuation">[</span>detail<span class="token punctuation">]</span>  查看与用户<span class="token class-name">Cisco</span>设备相连的CDP邻居的摘要<span class="token operator">/</span>详细清单<span class="token class-name">R</span># show cdp entry neighbor's_name   查看一个指定邻居的详细信息<span class="token class-name">R</span># show cdp traffic 查看CDP通信量的统计信息<span class="token number">1234567</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.路由</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip route destination_network_# <span class="token punctuation">[</span>subnet_mask<span class="token punctuation">]</span> <span class="token class-name">IP_address_of_next_hop_neighbor</span><span class="token operator">|</span>interface_to_exit <span class="token punctuation">[</span>administrative_distance<span class="token punctuation">]</span> <span class="token punctuation">[</span>permanent<span class="token punctuation">]</span> 配置IP静态路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip route <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token class-name">IP_address_of_next_hop_neighbor</span><span class="token operator">|</span>interface_to_exit <span class="token punctuation">[</span>administrative_distance<span class="token punctuation">]</span> <span class="token punctuation">[</span>permanent<span class="token punctuation">]</span> 配置默认路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip classless 使有类协议接受非一致性子网掩码或不连续子网<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># <span class="token keyword">interface</span> type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#<span class="token punctuation">.</span> subinterface_# <span class="token punctuation">[</span>point<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>point<span class="token operator">|</span>multipoint<span class="token punctuation">]</span>  创建子接口<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>subif<span class="token punctuation">)</span># encapsulation isl<span class="token operator">|</span>dotlq VLAN_# 指定子接口中继类型和相关的VLAN<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># router name_of_the_IP_routing_protocol   进入路由选择协议的配置模式<span class="token class-name">R</span># show ip route    查看IP路由表<span class="token number">1234567</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8.RIP</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># router rip   配置IP RIP<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># network <span class="token class-name">IP_network_</span>#  指定哪些接口参与路由选择进程<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># version <span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span>   只接受和发送RIP版本<span class="token number">1</span>或<span class="token number">2</span>（默认只产生<span class="token class-name">RIPv1</span>更新，而两个版本的更新都接收）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># ip rip send<span class="token operator">|</span>receive version <span class="token number">1</span> <span class="token operator">|</span> version <span class="token number">2</span> <span class="token operator">|</span> version <span class="token number">1</span> <span class="token number">2</span>   在特定接口上控制在发送或接收RIP更新时使用哪个版本的RIP<span class="token class-name">R</span># show ip protocols    查看在路由器上已配置并运行的所有IP路由选择协议<span class="token class-name">R</span># show ip route <span class="token punctuation">[</span>name_of_the_IP_routing_protocol<span class="token punctuation">]</span>  查看路由选择表<span class="token class-name">R</span># debug ip rip 帮助进行故障排除<span class="token number">1234567</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9.IGRP</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># router igrp AS_# 配置IP IGRP<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># network <span class="token class-name">IP_network_</span>#  通告网络号<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_of_neighbor</span>   配置单播更新<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># passive<span class="token operator">-</span><span class="token keyword">interface</span> type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#   允许该接口在IGRP中通告但它不监听或发送IGRP更新<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># traffic<span class="token operator">-</span>share min across<span class="token operator">-</span>interfaces   使路由器只使用最佳路径但又在路由选择表中放入替代路径<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># timers basic update_# invalid_# holddown_# flush_# <span class="token punctuation">[</span>sleeptime_#<span class="token punctuation">]</span>  调整定时器（默认时，update<span class="token operator">=</span><span class="token number">90</span>，invalid<span class="token operator">=</span><span class="token number">270</span>，holddown<span class="token operator">=</span><span class="token number">280</span>，flush<span class="token operator">=</span><span class="token number">630</span>）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># no metric holddown    关闭压制定时器（默认）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># distance administrative_distance_#    调整管理距离（取值范围是<span class="token number">1</span><span class="token operator">-</span><span class="token number">255</span>，默认为<span class="token number">100</span>）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># <span class="token keyword">default</span><span class="token operator">-</span>metric bandwidth_# delay_# reliability_# load_# MTU_# 调整度量值<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># metric weights tos_# K1_# K2_# K3_# K4_# K5_# 调整度量权重值（默认时，<span class="token function">K1</span><span class="token punctuation">(</span>带宽<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">K3</span><span class="token punctuation">(</span>可靠性<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span>，<span class="token function">K2</span><span class="token punctuation">(</span>延迟<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">K4</span><span class="token punctuation">(</span>负载<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">K5</span><span class="token punctuation">(</span>MTU<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span>）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># variance multiplier_# 启用IGRP非同等成本路径（变化因子值<span class="token number">1</span><span class="token operator">-</span><span class="token number">128</span>默认为<span class="token number">1</span>）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># traffic<span class="token operator">-</span>share balanced    配置负载均衡<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># maximum<span class="token operator">-</span>paths paths_# 配置负载均衡的路径条数（取值范围是<span class="token number">1</span><span class="token operator">-</span><span class="token number">6</span>）<span class="token class-name">R</span># debug ip igrp events 提供路由器和邻居间发生的每一步操作信息<span class="token class-name">R</span># debug ip igrp transactions   提供有关包含在路由更新中路由的详细信息<span class="token number">123456789101112131415</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.EIGRP</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># router eigrp AS_#    配置EIGRP<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># network <span class="token class-name">IP_network_</span>#  通告网络号<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip bandwidth<span class="token operator">-</span>percent eigrp AS_# percent_# 设置pacing（调速）占给定接口带宽的百分数（默认为<span class="token number">50</span><span class="token operator">%</span>）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># distance administrative_distance_#    调整管理距离（取值范围是<span class="token number">1</span><span class="token operator">-</span><span class="token number">255</span>，默认对于内部路由是<span class="token number">90</span>而外部是<span class="token number">170</span>）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># <span class="token keyword">default</span><span class="token operator">-</span>metric bandwidth_# delay_# reliability_# load_# MTU_# 调整度量值<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># metric weights tos_# K1_# K2_# K3_# K4_# K5_# 调整度量权重值（默认时，<span class="token function">K1</span><span class="token punctuation">(</span>带宽<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">K3</span><span class="token punctuation">(</span>可靠性<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span>，<span class="token function">K2</span><span class="token punctuation">(</span>延迟<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">K4</span><span class="token punctuation">(</span>负载<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">K5</span><span class="token punctuation">(</span>MTU<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span>）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip hello<span class="token operator">-</span>interval eigrp AS_# seconds_#    在给定接口上设置<span class="token class-name">Hello</span>间隔（默认对于低速的NBMA网络是<span class="token number">60</span>秒，其他是<span class="token number">5</span>秒）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip hold<span class="token operator">-</span>time eigrp AS_# seconds_# 在给定接口上设置<span class="token class-name">Hello</span>保持定时器（默认是<span class="token number">3</span>倍的<span class="token class-name">Hello</span>间隔）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># passive<span class="token operator">-</span><span class="token keyword">interface</span> type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#   允许该接口在EIGRP中通告但它不监听或发送EIGRP更新<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># no auto<span class="token operator">-</span>summary   取消对路由的自动汇总<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip summary<span class="token operator">-</span>address eigrp AS_# network_address network_mask    创建不在有类边界上的汇总地址<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># eigrp log<span class="token operator">-</span>neighbor<span class="token operator">-</span>changes   记录在某个邻居上发生的变化<span class="token class-name">R</span># show ip route eigrp  查看被EIGRP学习到的路由<span class="token class-name">R</span># show ip route network_address    查看指定目的地的路由信息<span class="token class-name">R</span># show ip eigrp topology   查看EIGRP的拓扑表<span class="token class-name">R</span># show ip eigrp interfaces     查看加入到EIGRP路由器所有接口的概述<span class="token class-name">R</span># show ip eigrp neighbor <span class="token punctuation">[</span>detail<span class="token punctuation">]</span>  显示和本路由器已形成邻居关系的所有路由器<span class="token class-name">R</span># show ip eigrp traffic    显示每个包类型的发出和接收的数量<span class="token class-name">R</span># show ip eigrp events 查看每个EIGRP事件的日志<span class="token class-name">R</span># debug ip eigrp   提供路由器和它的邻居之间发生的每一步操作<span class="token class-name">R</span># debug eigrp packets  查看在该路由器和它的邻居之间发送的数据包类型<span class="token class-name">R</span># debug eigrp neighbors    查看邻居的信息<span class="token number">12345678910111213141516171819202122</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11.OSPF</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># router ospf process_ID   配置OSPF<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># network <span class="token class-name">IP_address</span> wildcard_mask area area_#  指定接口进入OSPF区域<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip ospf cost cost_value   给接口指定成本（取值范围是<span class="token number">1</span><span class="token operator">-</span><span class="token number">65535</span>）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_of_neighbor</span>   手动配置邻居<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_of_neighbor</span> priority value    指定邻居的优先级（取值范围是<span class="token number">0</span><span class="token operator">-</span><span class="token number">255</span>，<span class="token number">255</span>为DR，<span class="token number">0</span>为不可能成为DR）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip ospf network non<span class="token operator">-</span>broadcast 手工配置非广播网络类型<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># area area_id stub 允许创建存根区域<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># area area_id stub no<span class="token operator">-</span>summary  允许创建完全存根区域<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># area area_id nssa 允许创建次存根区域<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># area area_id virtual<span class="token operator">-</span>link router_id   连接不连续区域为骨干区域<span class="token number">0</span><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># area area_id range network_address network_mask   在区域边界路由器上汇总在给定区域中的路由器使用的IP地址空间到其他的区域<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># summary<span class="token operator">-</span>address network_address network_mask  在自治系统边界路由器上汇总外部路由<span class="token class-name">R</span># show ip ospf 概述所有OSPF相关的信息<span class="token class-name">R</span># show ip ospf process<span class="token operator">-</span>id  与上相同，而不仅仅是指定的进程<span class="token class-name">R</span># show ip ospf border<span class="token operator">-</span>routers  显示在此自治系统中所有ABR和ASBR的路由器ID<span class="token class-name">R</span># show ip ospf database    显示链路状态数据库<span class="token class-name">R</span># show ip ospf <span class="token keyword">interface</span>   显示接口的OSPF参数和其他的指定到此接口上的OSPF信息<span class="token class-name">R</span># show ip ospf neighbor <span class="token punctuation">[</span>detail<span class="token punctuation">]</span>   显示每个OSPF邻居和邻接状态<span class="token class-name">R</span># debug ip ospf adj    报告路由器建立到其他路由器的邻接关系进程<span class="token class-name">R</span># debug ip ospf events 报告路由器上的OSPF事件<span class="token class-name">R</span># debug ip ospf packet 报告OSPF LSA分组的内容<span class="token number">123456789101112131415161718192021</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>12.ACL</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># access<span class="token operator">-</span>list <span class="token number">1</span><span class="token operator">-</span><span class="token number">99</span><span class="token operator">|</span><span class="token number">1300</span><span class="token operator">-</span><span class="token number">1999</span> permit<span class="token operator">|</span>deny source_IP_address <span class="token punctuation">[</span>wildcard_mask<span class="token punctuation">]</span> <span class="token punctuation">[</span>log<span class="token punctuation">]</span>    创建标准编号IP ACL<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip access<span class="token operator">-</span>group ACL_# in<span class="token operator">|</span>out  在指定接口上启动ACL<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>line<span class="token punctuation">)</span># access<span class="token operator">-</span><span class="token keyword">class</span> standard_ACL_# in<span class="token operator">|</span>out  在指定若干线路上启动ACL以限制对路由器的<span class="token class-name">Telnet</span>访问<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># access<span class="token operator">-</span>list <span class="token number">100</span><span class="token operator">-</span><span class="token number">199</span><span class="token operator">|</span><span class="token number">2000</span><span class="token operator">-</span><span class="token number">2699</span> permit<span class="token operator">|</span>deny <span class="token class-name">IP_protocol</span> source_address source_wildcard_mask <span class="token punctuation">[</span>protocol_information<span class="token punctuation">]</span> destination_address destination_wildcard_mask <span class="token punctuation">[</span>protocol_information<span class="token punctuation">]</span> <span class="token punctuation">[</span>log<span class="token punctuation">]</span>  创建扩展编号IP ACL<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip access<span class="token operator">-</span>list standard <span class="token class-name">ACL_name</span> 创建标准命名ACL（从IOS11<span class="token punctuation">.</span><span class="token number">2</span>开始支持）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>std<span class="token operator">-</span>acl<span class="token punctuation">)</span># permit<span class="token operator">|</span>deny source_IP_address <span class="token punctuation">[</span>wildcard_mask<span class="token punctuation">]</span>    输入标准ACL命令<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip access<span class="token operator">-</span>list extended <span class="token class-name">ACL_name</span> 创建扩展命名ACL（从IOS11<span class="token punctuation">.</span><span class="token number">2</span>开始支持）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>ext<span class="token operator">-</span>acl<span class="token punctuation">)</span># permit<span class="token operator">|</span>deny <span class="token class-name">IP_protocol</span> source_IP_address wildcard_mask <span class="token punctuation">[</span>protocol_information<span class="token punctuation">]</span> destination_IP_address wildcard_mask <span class="token punctuation">[</span>protocol_information<span class="token punctuation">]</span> <span class="token punctuation">[</span>log<span class="token punctuation">]</span> 输入扩展ACL命令<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip access_group <span class="token class-name">ACL_name</span> in<span class="token operator">|</span>out   启动命名ACL<span class="token class-name">R</span># show ip interfaces   验证访问列表<span class="token class-name">R</span># show access<span class="token operator">-</span>lists <span class="token punctuation">[</span>ACL_#_or_name<span class="token punctuation">]</span>    显示ACL中的语句<span class="token class-name">R</span># show ip access<span class="token operator">-</span>list <span class="token punctuation">[</span>ACL_#_or_name<span class="token punctuation">]</span>  显示IP ACL中的语句<span class="token class-name">R</span># clear access<span class="token operator">-</span>list counters <span class="token punctuation">[</span>ACL_#_or_name<span class="token punctuation">]</span>   对指定ACL中的匹配计数器清零<span class="token number">12345678910111213</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>13.NAT PAT 配置负载分发</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip nat inside source <span class="token keyword">static</span> inside_local_source_IP_address inside_global_source_IP_address   定义NAT静态转换<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip nat outside source <span class="token keyword">static</span> outside_global_destination_IP_address outside_local_destination_IP_address  定义NAT静态转换<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip nat inside<span class="token operator">|</span>outside 指定路由器上哪些接口在内部，哪些在外部<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip nat outside source list standard_IP_ACL_# pool <span class="token class-name">NAT_pool_name</span>  为重叠地址转换配置NAT<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip nat inside source list standard_IP_ACL_# pool <span class="token class-name">NAT_pool_name</span>   定义动态NAT，指定转换哪些内部设备的源地址<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip nat pool <span class="token class-name">NAT_pool_name</span> beginning_inside_global_IP_address ending_inside_global_IP_address netmask subnet_mask_of_addresses<span class="token operator">|</span>prefix<span class="token operator">-</span>length length   创建源内部全局IP地址池<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip nat inside source list standard_IP_ACL_# pool <span class="token class-name">NAT_pool_name</span> overload  定义PAT，指定哪台内部设备会转换其源地址<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip nat pool pool_name beginning_inside_local_IP_address ending_inside_local_IP_address prefix<span class="token operator">-</span>length subnet_mask_bits type rotary    指定提供服务的设备上配置的内部IP地址<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip nat inside destination list standard_ACL_# pool pool_name 指定外部设备用来访问内部资源的全局IP地址<span class="token class-name">R</span># show ip nat translations <span class="token punctuation">[</span>verbose<span class="token punctuation">]</span>   查看路由器上的（详细）地址转换信息<span class="token class-name">R</span># show ip nat statistics   查看路由器上的地址转换的统计信息<span class="token class-name">R</span># clear ip nat translation <span class="token operator">*</span>   清除所有NAT表项<span class="token class-name">R</span># clear ip nat translation inside<span class="token operator">|</span>outside global_IP_address<span class="token operator">|</span>local_IP_address   清除转换表中的指定动态条目<span class="token class-name">R</span># clear ip nat translation protocol inside global_IP_address global_port local_IP_address local_port   清除转换表中的指定动态条目<span class="token class-name">R</span># debug ip nat 提供IOS对每个已转换分组所做的转换<span class="token number">123456789101112131415</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>14.DHCP</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># <span class="token punctuation">[</span>no<span class="token punctuation">]</span> service dhcp    启用<span class="token operator">/</span>禁用DHCP（默认启用）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip dhcp pool pool_name   创建地址池<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>dhcp<span class="token punctuation">)</span># network network_number <span class="token punctuation">[</span>subnet_mask<span class="token operator">|</span><span class="token operator">/</span>prefix_length<span class="token punctuation">]</span> 指定分配给客户的IP地址范围<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>dhcp<span class="token punctuation">)</span># domain<span class="token operator">-</span>name domain_name 向客户分配域名<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>dhcp<span class="token punctuation">)</span># dns<span class="token operator">-</span>server <span class="token class-name">IP_address</span> <span class="token punctuation">[</span>…<span class="token punctuation">]</span>   指定最多<span class="token number">8</span>台DNS服务器分配给客户<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>dhcp<span class="token punctuation">)</span># netbios<span class="token operator">-</span>name<span class="token operator">-</span>server <span class="token class-name">IP_address</span> <span class="token punctuation">[</span>…<span class="token punctuation">]</span>  指定最多<span class="token number">8</span>台WINS服务器分配给客户<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>dhcp<span class="token punctuation">)</span># netbios<span class="token operator">-</span>node<span class="token operator">-</span>type node_type 向微软客户分配节点类型<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>dhcp<span class="token punctuation">)</span># <span class="token keyword">default</span><span class="token operator">-</span>router <span class="token class-name">IP_address</span> <span class="token punctuation">[</span>…<span class="token punctuation">]</span>   指定最多<span class="token number">8</span>条默认路由给客户用于该地址范围<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>dhcp<span class="token punctuation">)</span># lease days <span class="token punctuation">[</span>hours<span class="token punctuation">]</span> <span class="token punctuation">[</span>minutes<span class="token punctuation">]</span> <span class="token operator">|</span>infinite  指定租约的期限（默认一天）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip dhcp ping timeout milliseconds    指定测试服务器地址池中的可用地址是否正在使用时服务器应等待时间<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip dhcp excluded<span class="token operator">-</span>address beginning_IP_address <span class="token punctuation">[</span>ending_IP_address<span class="token punctuation">]</span>    排除一些地址<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip address dhcp   在路由器上建立DHCP客户<span class="token class-name">R</span># show ip dhcp binding <span class="token punctuation">[</span>client_address<span class="token punctuation">]</span>    查看分配给客户的地址<span class="token class-name">R</span># clear ip dhcp binding client_address<span class="token operator">|</span><span class="token operator">*</span>   清除分配给客户的指定<span class="token operator">/</span>所有地址<span class="token class-name">R</span># debug ip dhcp server events<span class="token operator">|</span>packet<span class="token operator">|</span>linkage   查看DHCP服务器相关信息<span class="token number">123456789101112131415</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>15.HDLC</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># encapsulation hdlc    封装同步串行接口为HDLC（默认）<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>16.PPP</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># encapsulation ppp 在WAN接口上使用PPP<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ppp pap sent<span class="token operator">-</span>username your_hostname password password 指定PAP用于认证并且提供在服务端用于执行认证的用户名和口令（此为客户端配置）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># hostname your_router's_hostname  为路由器指定惟一主机名（以下三个为服务端配置）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># username remote_hostname password matching_password  指定认证路由器时所使用的远端主机名称和口令<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ppp authentication pap    指定PAP认证<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ppp authentication chap<span class="token operator">|</span>pap<span class="token operator">|</span>chap pap<span class="token operator">|</span>pap chap 批定PPP认证类型<span class="token class-name">R</span># debug ppp negotiation    查看LCP协商时的信息<span class="token class-name">R</span># debug ppp authentication 查看PPP认证情况<span class="token number">12345678</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>17.FR</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># encapsulation frame<span class="token operator">-</span>relay <span class="token punctuation">[</span>cisco<span class="token operator">|</span>ietf<span class="token punctuation">]</span>    指定封装类型为帧中继<span class="token punctuation">(</span>默认cisco）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># frame<span class="token operator">-</span>relay lmi<span class="token operator">-</span>type ansi<span class="token operator">|</span>cisco<span class="token operator">|</span>q933a 给该串行接口指定LMI类型<span class="token class-name">R</span># show frame<span class="token operator">-</span>relay lmi 查看详细的LMI统计信息<span class="token class-name">R</span># debug frame<span class="token operator">-</span>relay lmi    报告路由器正在发送与接收的实际LMI信息<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># frame<span class="token operator">-</span>relay map protocol_name destination_address local_dlci_# <span class="token punctuation">[</span>broadcast<span class="token punctuation">]</span> <span class="token punctuation">[</span>ietf<span class="token operator">|</span>cisco<span class="token punctuation">]</span>   将远端第<span class="token number">3</span>层地址手动映射到本地DLCI号<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># <span class="token punctuation">[</span>no<span class="token punctuation">]</span> frame<span class="token operator">-</span>relay inverse<span class="token operator">-</span>arp <span class="token punctuation">[</span>protocol_name<span class="token punctuation">]</span> <span class="token punctuation">[</span>DLCI_#<span class="token punctuation">]</span> 启用<span class="token operator">/</span>禁用逆向<span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>18.ARP（默认启用）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span> clear frame<span class="token operator">-</span>relay<span class="token operator">-</span>inarp    清除逆向ARP解析表<span class="token class-name">R</span># show frame<span class="token operator">-</span>relay traffic 查看逆向ARP统计<span class="token class-name">R</span># show frame<span class="token operator">-</span>relay pvc <span class="token punctuation">[</span>DLCI_#<span class="token punctuation">]</span>    查看终止于路由器的所有（指定）帧中继PVC及其统计信息<span class="token class-name">R</span># show frame<span class="token operator">-</span>relay map 查看将第<span class="token number">3</span>层地址映射成本地DLCI号的虚电路解析表<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># <span class="token keyword">interface</span> type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#<span class="token punctuation">.</span> subinterface_# <span class="token punctuation">[</span>point<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>point<span class="token operator">|</span>multipoint<span class="token punctuation">]</span>  创建子接口<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>subif<span class="token punctuation">)</span># frame<span class="token operator">-</span>relay <span class="token keyword">interface</span><span class="token operator">-</span>dlci local_DLCI_#    配置子接口的帧中继<span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>19.ISDN</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">]</span><span class="token punctuation">)</span># isdn <span class="token keyword">switch</span><span class="token operator">-</span>type <span class="token class-name">ISDN_switch_type</span>   在全局或接口配置模式下配置交换机类型<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># isdn spid1 spid_#__for_1st_BRI local_dial_#   为第一个<span class="token class-name">B</span>信道配置SPID<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># isdn spid2 spid_#__for_2st_BRI local_dial_#   为第二个<span class="token class-name">B</span>信道配置SPID<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># controller t1<span class="token operator">|</span>e1 <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#    以下<span class="token number">6</span>个命令为控制卡配置<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>controller<span class="token punctuation">)</span># framing esf<span class="token operator">|</span>sf<span class="token operator">|</span>crc4<span class="token operator">|</span>nocrc4    在T1或E1上使用物理成帧<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>controller<span class="token punctuation">)</span># linecode ami<span class="token operator">|</span>b8zs<span class="token operator">|</span>hdb3    线路编码，定义<span class="token number">1</span>与<span class="token number">0</span>如何在线路上物理表示<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>controller<span class="token punctuation">)</span># clock source line primary<span class="token operator">|</span>secondary<span class="token operator">|</span>internal  定义路由器如何获得其时钟以用于同步数字连接<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>controller<span class="token punctuation">)</span># pri<span class="token operator">-</span>group timeslots <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">24</span><span class="token operator">|</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span>   指定路由器哪个或哪些时隙用于ISDN连接<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>controller<span class="token punctuation">)</span># <span class="token punctuation">[</span>no<span class="token punctuation">]</span> shutdown 启用<span class="token operator">/</span>禁用控制器<span class="token class-name">R</span># show controllers t1<span class="token operator">|</span>e1 <span class="token punctuation">[</span>slot_#<span class="token operator">/</span>port_#<span class="token punctuation">]</span>   验证控制器卡配置<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># <span class="token keyword">interface</span> serial <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#<span class="token operator">:</span><span class="token number">23</span> 设置逻辑串口（T1使用）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># <span class="token keyword">interface</span> serial <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#<span class="token operator">:</span><span class="token number">15</span> 设置逻辑串口（E1使用）<span class="token class-name">R</span># show <span class="token keyword">interface</span> bri <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#<span class="token punctuation">[</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span>    验证ISDN连接的状态（查看<span class="token class-name">B</span>信道）<span class="token class-name">R</span># show isdn status 查看ISDN详细的物理层和数据链路层信息<span class="token class-name">R</span># debug isdn q921  报告ISDN数据链路层详细信息<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip route <span class="token class-name">IP_network_</span># subnet_mask remote_router's_IP_address<span class="token operator">|</span>router_interface <span class="token punctuation">[</span>administrative_distance<span class="token punctuation">]</span>  配置静态路由。以下<span class="token number">7</span>个命令配置传统DDR<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># dialer<span class="token operator">-</span>list list_# protocol protocol_name permit<span class="token operator">|</span>deny <span class="token punctuation">[</span>access<span class="token operator">-</span>list ACL_#<span class="token punctuation">]</span>    定义敏感流量<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer<span class="token operator">-</span>group dialer_list_#    激活拨号列表<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer map protocol_name address_of_destination_router <span class="token punctuation">[</span>name remote_router_name<span class="token punctuation">]</span> <span class="token punctuation">[</span>speed <span class="token number">56</span><span class="token operator">|</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>broadcast<span class="token punctuation">]</span> destination_phone_number   表明利用传统DDR进行电话呼叫<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer idle<span class="token operator">-</span>timeout #_of_seconds  定义空闲超时周期<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer fast<span class="token operator">-</span>idle #_of_seconds 定义快速空闲计时器<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer load<span class="token operator">-</span>threshold load either<span class="token operator">|</span>inbound<span class="token operator">|</span>outbound    通过BRI的两条<span class="token class-name">B</span>信道执行负载均衡（分配带宽）<span class="token class-name">R</span># show dialer  查看哪个DDR接口进行了电话呼叫及其状态<span class="token class-name">R</span># show isdn active 查看激活的ISDN呼叫<span class="token class-name">R</span># show isdn history    查看路由器发出的呼叫或以前接收的呼叫<span class="token class-name">R</span># debug dialer 显示建立或拆除一个连接的DDR过程<span class="token class-name">R</span># debug isdn q931  显示ISDN电话连接建立及挂断的详细信息<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># <span class="token keyword">interface</span> dialer port_#  创建逻辑拨号接口。以下全为配置拨号配置文件。以下<span class="token number">8</span>个为拨号接口配置<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># encapsulation ppp 指定封装类型<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ppp authentication pap<span class="token operator">|</span>chap<span class="token operator">|</span>chap pap<span class="token operator">|</span>pap chap 指定认证类型<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip address <span class="token class-name">IP_address</span> subnet_mask 指定接口IP地址<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer remote<span class="token operator">-</span>name name   指定远端路由器的名称<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer string phone_# <span class="token punctuation">[</span><span class="token keyword">class</span> map_name<span class="token punctuation">]</span>    指定映射类名称<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer pool pool_#    指定拨号接口能使用哪组物理接口<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer<span class="token operator">-</span>group dialer_list_#    激活拨号列表<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># dialer pool<span class="token operator">-</span>member pool_# <span class="token punctuation">[</span>priority priority_#<span class="token punctuation">]</span> <span class="token punctuation">[</span>min<span class="token operator">-</span>link #_of_B_channels<span class="token punctuation">]</span> <span class="token punctuation">[</span>max<span class="token operator">-</span>link #_of_B_channels<span class="token punctuation">]</span> 指定哪些拨号接能使用物理接口<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># map<span class="token operator">-</span><span class="token keyword">class</span> dialer map_name    进入映射子配置模式。以下<span class="token number">4</span>个为创建映射类<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>map<span class="token punctuation">)</span># dialer isdn speed <span class="token number">56</span> 指定ISDN中的<span class="token class-name">B</span>信道的速度（默认<span class="token number">64</span>kbps）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>map<span class="token punctuation">)</span># dialer idle<span class="token operator">-</span>timeout #_of_seconds 定义空闲超时周期<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>map<span class="token punctuation">)</span># dialer fast<span class="token operator">-</span>idle #_of_seconds    定义快速空闲计时器<span class="token class-name">R</span># show dialer <span class="token keyword">interface</span> bri<span class="token operator">|</span><span class="token punctuation">&#123;</span>serial<span class="token operator">:</span><span class="token number">23</span><span class="token operator">|</span><span class="token number">15</span><span class="token punctuation">&#125;</span> <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span>port_# 显示与拨号接口关联的物理接口的进入和离开呼叫的DDR统计信息<span class="token number">1234567891011121314151617181920212223242526272829303132333435363738394041</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>20.IS-IS</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># router isis  启动IS<span class="token operator">-</span>IS<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># net areaID<span class="token punctuation">.</span>systemID<span class="token punctuation">.</span>SEL   配置NET<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># is<span class="token operator">-</span>type level_of_router   配置路由器的层次<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip router isis    在接口上启动IS<span class="token operator">-</span>IS<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># isis priority value level<span class="token operator">-</span><span class="token number">1</span><span class="token operator">|</span>level<span class="token operator">-</span><span class="token number">2</span>   手动配置第一层或第二层路由器的优先级<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># clns router isis  为无连接网络服务启动IS<span class="token operator">-</span>IS<span class="token class-name">R</span># show ip route isis   查看通过IS<span class="token operator">-</span>IS学习到的路由<span class="token class-name">R</span># show isis database <span class="token punctuation">[</span>detail level_of_router<span class="token punctuation">]</span>  查看IS<span class="token operator">-</span>IS链路状态数据库中的所有（某层）LSP信息<span class="token class-name">R</span># show clns protocol   显示IS<span class="token operator">-</span>IS详细配置信息<span class="token class-name">R</span># show clns <span class="token keyword">interface</span>  显示配置为IS<span class="token operator">-</span>IS接口的相关信息<span class="token class-name">R</span># show clns is<span class="token operator">-</span>neighbors   查看路由器的邻居<span class="token class-name">R</span># show isis spf<span class="token operator">-</span>log    查看SPF计算情况<span class="token class-name">R</span># debug isis adj<span class="token operator">-</span>packets   查看路由器发送和接收<span class="token class-name">Hello</span> PDU的情况<span class="token class-name">R</span># debug isis update<span class="token operator">-</span>packets    提供路由器发送和接收的所有LSP详细内容及SNP信息<span class="token class-name">R</span># debug isis spf<span class="token operator">-</span>events    查看写入路由表的IS<span class="token operator">-</span>IS路由<span class="token class-name">R</span># debug isis spf<span class="token operator">-</span>triggers  查看触发SPF计算的原因<span class="token class-name">R</span># debug isis spf<span class="token operator">-</span>statistics    查看执行SPF计算所用的时间<span class="token number">1234567891011121314151617</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>21.BGP</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># router bgp AS_#  启动BGP<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_remote_device</span> remote<span class="token operator">-</span>as AS_#_remote_device    指定远端路由器作为对等体<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># no synchronization    关闭BGP与IGP同步（默认启用）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_remote_device</span> update<span class="token operator">-</span>source loopback #    使用环回接口作为对等体<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_remote_device</span> ebgp<span class="token operator">-</span>multihop <span class="token punctuation">[</span>ttl<span class="token punctuation">]</span> 配置eBGP多跳（允许BGP邻居可以不在直连网络上）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_remote_device</span> route<span class="token operator">-</span>reflector<span class="token operator">-</span>client  配置邻居为路由反射器客户<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># network network_address mask subnet_mask  向对等体通告路由（手动向BGP注入路由）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># redistribute protocol process_ID  将路由重新分配到BGP<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># redistribute connected    将直连接口地址重新分配到BGP<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># bgp cluster<span class="token operator">-</span>id cluster_ID 分配簇ID<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># bgp confederation identifier confederation_ID 配置联邦ID<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># bgp confederation peers AS_#  配置联邦的对等自治系统成员<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_remote_device</span> distribute<span class="token operator">-</span>list access_list_# <span class="token punctuation">[</span>in<span class="token operator">|</span>out<span class="token punctuation">]</span>  过滤到或来自邻居的更新信息<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip prefix<span class="token operator">-</span>list list_name <span class="token punctuation">[</span>seq seq_value<span class="token punctuation">]</span> permit<span class="token operator">|</span>deny network_address<span class="token operator">/</span>length <span class="token punctuation">[</span>ge ge_value<span class="token punctuation">]</span> <span class="token punctuation">[</span>le le_value<span class="token punctuation">]</span>  配置前缀列表<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_remote_device</span> prefix<span class="token operator">-</span>list list_name <span class="token punctuation">[</span>in<span class="token operator">|</span>out<span class="token punctuation">]</span>  应用从邻居输入的前缀列表<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># route<span class="token operator">-</span>map route_map_name permit<span class="token operator">|</span>deny <span class="token punctuation">[</span>sequence_number<span class="token punctuation">]</span>   创建路由映射序列<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># match as<span class="token operator">-</span>path <span class="token class-name">AS_path_accesslist_</span># 匹配BGP自治系统路径访问列表<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># match community<span class="token operator">-</span>list community_list_#  匹配BGP团体<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># match <span class="token keyword">interface</span> type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#  发布任何下一跳是指定接口的路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># match ip address access_list_#<span class="token operator">|</span>prefix_list_name    匹配任何目的网络地址被指定的标准访问列表、扩展访问列表或前缀列表允许的路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># match ip next<span class="token operator">-</span>hop access_list_#<span class="token operator">|</span>prefix_list_name   匹配任何下一跳地址被指定的标准访问列表、扩展访问列表或前缀列表允许的路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># match ip route<span class="token operator">-</span>source access_list_#<span class="token operator">|</span>prefix_list_name   匹配任何由被指定的标准访问列表、扩展访问列表或前缀列表允许的地址通告的路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># match metric value 匹配任何具有指定的度量值的路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># match route<span class="token operator">-</span>type type_of_route 匹配任何具有指定类型的路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># match tag value    匹配任何具有指定标识的路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set as<span class="token operator">-</span>path prepend AS_#   向AS_PATH属性添加自治系统号<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set as<span class="token operator">-</span>path tag    设置作为AS_PATH属性的标记<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set automatic<span class="token operator">-</span>tag  自动计算标记值<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set community number<span class="token operator">|</span>aa<span class="token operator">:</span>nn<span class="token operator">|</span>additive<span class="token operator">|</span>local<span class="token operator">-</span>as<span class="token operator">|</span>no<span class="token operator">-</span>advertise<span class="token operator">|</span>no<span class="token operator">-</span>export<span class="token operator">|</span>none   设置BGP COMMUNITIES属性<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set dampening half_life start_reusing start_suppressing duration_to_suppress   设置BGP路由冷落参数<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set <span class="token keyword">default</span> <span class="token keyword">interface</span> type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#    设置默认的输出接口<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set <span class="token keyword">interface</span> type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#    设置输出接口<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set ip <span class="token keyword">default</span> next<span class="token operator">-</span>hop <span class="token class-name">IP_address</span> 设置路径的默认下一跳地址<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set ip next<span class="token operator">-</span>hop <span class="token class-name">IP_address</span> 设置下一跳地址<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set ip precedence <span class="token punctuation">[</span>precedence<span class="token punctuation">]</span> 设置“IP <span class="token class-name">Precedence</span>”字段<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set ip tos type_of_service 设置“IP服务类型”字段<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set level level    设置导入路由的位置<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set local<span class="token operator">-</span>preference value 设置BGP LOCAL_PREF路径属性<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set metric value   设置目标路由协议的度量值<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set metric<span class="token operator">-</span>type type_of_route  设置目标路由协议的度量类型<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set origin origin_code 设置BGP源代码<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set tag value  设置目标路由协议的标记值<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span># set weight value   设置路由表的BGP权重<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_remote_device</span> route<span class="token operator">-</span>map route_map_name <span class="token punctuation">[</span>in<span class="token operator">|</span>out<span class="token punctuation">]</span>   应用从邻居输入的路由映射<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_remote_device</span> send<span class="token operator">-</span>community  向该邻居发送COMMUNITY属性<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># ip community<span class="token operator">-</span>list community_list_# <span class="token punctuation">[</span>permit<span class="token operator">|</span>deny<span class="token punctuation">]</span> community_list_#    创建团体列表<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor peer_group_name peer<span class="token operator">-</span>group   创建对等组<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor peer_group_name option_to_use_in_update_policy   给对等组分配选项<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># neighbor <span class="token class-name">IP_address_remote_device</span> peer<span class="token operator">-</span>group peer_group_name  给对等组分配对等体<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># no auto<span class="token operator">-</span>summary   取消BGP的自动路由汇总功能<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># aggregate<span class="token operator">-</span>address <span class="token class-name">IP_address</span> mask <span class="token punctuation">[</span>summary<span class="token operator">-</span>only<span class="token punctuation">]</span>  创建汇聚地址（禁止通告其他特定路由）<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># aggregate<span class="token operator">-</span>address <span class="token class-name">IP_address</span> mask as<span class="token operator">-</span>set  创建汇聚地址，在AS_PATH中添加AS_SET类型<span class="token class-name">R</span># clear ip bgp peer_address    重设特定BGP对等会话<span class="token class-name">R</span># clear ip bgp AS_#    重设指定自治系统的所有对等体的BGP会话<span class="token class-name">R</span># clear ip bgp <span class="token operator">*</span>   重设路由器上所有BGP会话<span class="token class-name">R</span># show ip bgp  查看路由器从BGP学习到的所有路由<span class="token class-name">R</span># show ip bgp summary  提供和路由器具有对等关系的所有路由器汇总<span class="token class-name">R</span># show ip bgp neighbors    查看对等体连接详细信息<span class="token class-name">R</span># debug ip bgp 查看在本地路由器与试图和其建立对等关系的路由器之间所发送和接收的OPEN信息<span class="token class-name">R</span># debug ip bgp updates 提供路由器发送和接收所有UPDATE消息的信息<span class="token class-name">R</span># debug ip bgp peer_address upadtes    提供关于BGP对等体之间发送的UPDATE消息<span class="token class-name">R</span># debug ip bgp dampening   显示关于被冷落路由的信息<span class="token class-name">R</span># debug ip bgp events  提供关于尝试成为BGP对等体的路由器的状态转换信息<span class="token class-name">R</span># debug ip bgp keepalives  提供关于路由器发送和接收KEEPALIVE消息的信息<span class="token number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>22.路由优化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># distribute<span class="token operator">-</span>list ACL_#<span class="token operator">|</span>prefix prefix_list_name in<span class="token operator">|</span>out <span class="token punctuation">[</span>type <span class="token punctuation">[</span>slot_#<span class="token operator">/</span><span class="token punctuation">]</span> port_#<span class="token punctuation">]</span>   配置分配列表<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span># ip policy route<span class="token operator">-</span>map map_tag   识别一个接口上基于策略的路由选择使用的路由映射<span class="token class-name">R</span># show ip policy   列出所有配置为基于策略的路由选择的接口及它们相关的路由映射<span class="token class-name">R</span># show route<span class="token operator">-</span>map   查看所有路由映射<span class="token class-name">R</span># debug ip policy  提供在该路由器上执行的路由策略的信息<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># <span class="token keyword">default</span><span class="token operator">-</span>information originate 重新分配默认路由到OSPF和IS<span class="token operator">-</span>IS<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># <span class="token keyword">default</span><span class="token operator">-</span>information originate always  引起一个默认路由到OSPF不管路由表中是否有一个默认路由<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># redistribute protocol <span class="token punctuation">[</span>process<span class="token operator">-</span>ID<span class="token punctuation">]</span> level<span class="token operator">-</span><span class="token number">1</span><span class="token operator">|</span>level<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">|</span>level<span class="token operator">-</span><span class="token number">2</span> <span class="token punctuation">[</span>metric metric_value<span class="token punctuation">]</span> <span class="token punctuation">[</span>metric<span class="token operator">-</span>type type_value<span class="token punctuation">]</span> <span class="token punctuation">[</span>match internal<span class="token operator">|</span>external <span class="token number">1</span><span class="token operator">|</span>external <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>tag tag_value<span class="token punctuation">]</span> <span class="token punctuation">[</span>route<span class="token operator">-</span>map map_tag<span class="token punctuation">]</span> <span class="token punctuation">[</span>weight weight_value<span class="token punctuation">]</span> <span class="token punctuation">[</span>subnets<span class="token punctuation">]</span>    重新分配路由选择信息从一个路由选择域到另一个路由选择域<span class="token class-name">R</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># summary<span class="token operator">-</span>address network_address network_mask <span class="token punctuation">[</span>level<span class="token operator">-</span><span class="token number">1</span><span class="token operator">|</span>level<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">|</span>level<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>  为起源于和重新分配到IS<span class="token operator">-</span>IS的路由创建一个汇总地址<span class="token number">123456789</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>23.异步连接</p><pre class="line-numbers language-cisco" data-language="cisco"><code class="language-cisco">R# line number  进入线路配置模式R(config-line)# login   允许一个连接R(config-line)# password password   提供线路上使用的口令R(config-line)# flowcontrol hardware|software   选择硬件流控制或软件流控制R(config-line)# speed number    指定调制解调器和访问服务器或路由器之间使用的最大速度（单位：bps）R(config-line)# transport input lat|mop|nasi|pad|rlogin|telnet|v120|all 定义反向Telnet连接使用的协议R(config-line)# stopbits 1|1.5|2    定义每个字节的结束R(config-line)# modem autoconfigure type modem_type 指示路由器使用modemcap数据库中的命令按照指定的类型对连接到一个端口上的调制解调器进行自动配置R# show modemcap    显示modemcap数据库R(config-line)# modem edit modem_profile_name   向modemcap数据库增加条目R(config-line)# modemcap edit new_profile_name template existing_profile_name   创建名为new_profile_name的条目并从existing_profile_name中拷贝所有的配置R(config-line)# modem autoconfigure discovery   发现和自动配置连接到一个端口上的调制解调器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;因为我发现学这个课老是断断续续的，每次捡起来超级麻烦，所以趁这次来个大复习，把一些该有的知识点直接记下来好了&lt;/p&gt;
&lt;h1 id=&quot;当今网络&quot;&gt;&lt;a href=&quot;#当今网络&quot; class=&quot;headerlink&quot; title=&quot;当今网络&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="network" scheme="https://darren-dong.com/categories/network/"/>
    
    
    <category term="cisco" scheme="https://darren-dong.com/tags/cisco/"/>
    
  </entry>
  
</feed>
